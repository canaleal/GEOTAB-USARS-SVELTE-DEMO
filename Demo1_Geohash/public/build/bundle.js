
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {

    function noop() { }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function insert$1(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
        else if (callback) {
            callback();
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function bind$1(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.49.0' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert$1(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    !function(n){var r={};function o(t){if(r[t])return r[t].exports;var e=r[t]={i:t,l:!1,exports:{}};return n[t].call(e.exports,e,e.exports,o),e.l=!0,e.exports}o.m=n,o.c=r,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n});},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0});},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=193);}([function(n,t,e){!function(t){function e(t){return t&&t.Math==Math&&t}n.exports=e("object"==typeof globalThis&&globalThis)||e("object"==typeof window&&window)||e("object"==typeof self&&self)||e("object"==typeof t&&t)||function(){return this}()||Function("return this")();}.call(this,e(154));},function(t,e,n){var n=n(60),r=Function.prototype,o=r.bind,i=r.call,a=n&&o.bind(i,i);t.exports=n?function(t){return t&&a(t)}:function(t){return t&&function(){return i.apply(t,arguments)}};},function(t,e){t.exports=function(t){try{return !!t()}catch(t){return !0}};},function(t,e,n){var u=n(0),l=n(42).f,f=n(45),d=n(37),p=n(98),h=n(126),v=n(81);t.exports=function(t,e){var n,r,o,i=t.target,a=t.global,c=t.stat,s=a?u:c?u[i]||p(i,{}):(u[i]||{}).prototype;if(s)for(n in e){if(r=e[n],o=t.noTargetGet?(o=l(s,n))&&o.value:s[n],!v(a?n:i+(c?".":"#")+n,t.forced)&&void 0!==o){if(typeof r==typeof o)continue;h(r,o);}(t.sham||o&&o.sham)&&f(r,"sham",!0),d(s,n,r,t);}};},function(t,e,n){var r=n(105),o=n(37),n=n(158);r||o(Object.prototype,"toString",n,{unsafe:!0});},function(t,e,n){var r=n(30),o=n(89),i=n(68),a=n(49),c=n(22).f,s=n(109),u=n(54),n=n(17),l="Array Iterator",f=a.set,d=a.getterFor(l),a=(t.exports=s(Array,"Array",function(t,e){f(this,{type:l,target:r(t),index:0,kind:e});},function(){var t=d(this),e=t.target,n=t.kind,r=t.index++;return !e||r>=e.length?{value:t.target=void 0,done:!0}:"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}},"values"),i.Arguments=i.Array);if(o("keys"),o("values"),o("entries"),!u&&n&&"values"!==a.name)try{c(a,"name",{value:"values"});}catch(t){}},function(t,e,n){var r=n(137).charAt,o=n(23),i=n(49),n=n(109),a="String Iterator",c=i.set,s=i.getterFor(a);n(String,"String",function(t){c(this,{type:a,string:o(t),index:0});},function(){var t=s(this),e=t.string,n=t.index;return n>=e.length?{value:void 0,done:!0}:(e=r(e,n),t.index+=e.length,{value:e,done:!1})});},function(N,R,t){function r(t,e){var n=P[t]=g(T);return ft(n,{type:x,tag:t,description:e}),u||(n.description=e),n}function o(t,e,n){return t===E&&o(M,e,n),h(t),e=y(e),h(n),d(P,e)?(n.enumerable?(d(t,S)&&t[S][e]&&(t[S][e]=!1),n=g(n,{enumerable:m(0,!1)})):(d(t,S)||D(t,S,m(1,{})),t[S][e]=!0),bt(t,e,n)):D(t,e,n)}function n(e,t){h(e);var n=v(t),t=Q(n).concat(a(n));return C(t,function(t){u&&!s(i,n,t)||o(e,t,n[t]);}),e}function i(t){var t=y(t),e=s(yt,this,t);return !(this===E&&d(P,t)&&!d(M,t))&&(!(e||!d(this,t)||!d(P,t)||d(this,S)&&this[S][t])||e)}function B(t,e){var n,t=v(t),e=y(e);if(t!==E||!d(P,e)||d(M,e))return !(n=ht(t,e))||!d(P,e)||d(t,S)&&t[S][e]||(n.enumerable=!0),n}function H(t){var t=vt(v(t)),e=[];return C(t,function(t){d(P,t)||d(it,t)||mt(e,t);}),e}function a(t){var e=t===E,t=vt(e?M:v(t)),n=[];return C(t,function(t){!d(P,t)||e&&!d(E,t)||mt(n,P[t]);}),n}var F,e=t(3),c=t(0),V=t(43),Y=t(84),s=t(21),W=t(1),z=t(54),u=t(17),l=t(96),f=t(2),d=t(20),U=t(86),q=t(14),K=t(19),$=t(44),p=t(73),h=t(18),X=t(36),v=t(30),y=t(72),G=t(23),m=t(61),g=t(50),Q=t(66),Z=t(55),J=t(107),b=t(103),tt=t(42),et=t(22),nt=t(132),rt=t(70),ot=t(106),_=t(37),w=t(77),O=t(79),it=t(63),at=t(78),ct=t(12),st=t(133),ut=t(134),lt=t(87),k=t(49),C=t(56).forEach,S=O("hidden"),x="Symbol",t="prototype",O=ct("toPrimitive"),ft=k.set,dt=k.getterFor(x),E=Object[t],j=c.Symbol,T=j&&j[t],pt=c.TypeError,k=c.QObject,A=V("JSON","stringify"),ht=tt.f,D=et.f,vt=J.f,yt=rt.f,mt=W([].push),P=w("symbols"),M=w("op-symbols"),I=w("string-to-symbol-registry"),L=w("symbol-to-string-registry"),c=w("wks"),gt=!k||!k[t]||!k[t].findChild,bt=u&&f(function(){return 7!=g(D({},"a",{get:function(){return D(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=ht(E,e);r&&delete E[e],D(t,e,n),r&&t!==E&&D(E,e,r);}:D;l||(_(T=(j=function(){if($(T,this))throw pt("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?G(arguments[0]):void 0,e=at(t),n=function(t){this===E&&s(n,M,t),d(this,S)&&d(this[S],e)&&(this[S][e]=!1),bt(this,e,m(1,t));};return u&&gt&&bt(E,e,{configurable:!0,set:n}),r(e,t)})[t],"toString",function(){return dt(this).tag}),_(j,"withoutSetter",function(t){return r(at(t),t)}),rt.f=i,et.f=o,nt.f=n,tt.f=B,Z.f=J.f=H,b.f=a,st.f=function(t){return r(ct(t),t)},u&&(D(T,"description",{configurable:!0,get:function(){return dt(this).description}}),z||_(E,"propertyIsEnumerable",i,{unsafe:!0}))),e({global:!0,wrap:!0,forced:!l,sham:!l},{Symbol:j}),C(Q(c),function(t){ut(t);}),e({target:x,stat:!0,forced:!l},{for:function(t){t=G(t);if(d(I,t))return I[t];var e=j(t);return I[t]=e,L[e]=t,e},keyFor:function(t){if(!p(t))throw pt(t+" is not a symbol");if(d(L,t))return L[t]},useSetter:function(){gt=!0;},useSimple:function(){gt=!1;}}),e({target:"Object",stat:!0,forced:!l,sham:!u},{create:function(t,e){return void 0===e?g(t):n(g(t),e)},defineProperty:o,defineProperties:n,getOwnPropertyDescriptor:B}),e({target:"Object",stat:!0,forced:!l},{getOwnPropertyNames:H,getOwnPropertySymbols:a}),e({target:"Object",stat:!0,forced:f(function(){b.f(1);})},{getOwnPropertySymbols:function(t){return b.f(X(t))}}),A&&e({target:"JSON",stat:!0,forced:!l||f(function(){var t=j();return "[null]"!=A([t])||"{}"!=A({a:t})||"{}"!=A(Object(t))})},{stringify:function(t,e,n){var r=ot(arguments),o=e;if((K(e)||void 0!==t)&&!p(t))return U(e)||(e=function(t,e){if(q(o)&&(e=s(o,this,t,e)),!p(e))return e}),r[1]=e,Y(A,null,r)}}),T[O]||(F=T.valueOf,_(T,O,function(t){return s(F,this)})),lt(j,x),it[S]=!0;},function(t,e,n){function r(e,t){if(e){if(e[l]!==d)try{u(e,l,d);}catch(t){e[l]=d;}if(e[f]||u(e,f,t),a[t])for(var n in s)if(e[n]!==s[n])try{u(e,n,s[n]);}catch(t){e[n]=s[n];}}}var o,i=n(0),a=n(138),c=n(139),s=n(5),u=n(45),n=n(12),l=n("iterator"),f=n("toStringTag"),d=s.values;for(o in a)r(i[o]&&i[o].prototype,o);r(c,"DOMTokenList");},function(t,e,n){function r(e){if(e&&e.forEach!==s)try{u(e,"forEach",s);}catch(t){e.forEach=s;}}var o,i=n(0),a=n(138),c=n(139),s=n(168),u=n(45);for(o in a)a[o]&&r(i[o]&&i[o].prototype);r(c);},function(t,e,n){var r,o,i,a,c,s,u,l=n(3),f=n(17),d=n(0),p=n(1),h=n(20),v=n(14),y=n(44),m=n(23),g=n(22).f,n=n(126),b=d.Symbol,_=b&&b.prototype;!f||!v(b)||"description"in _&&void 0===b().description||(r={},n(d=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:m(arguments[0]),e=y(_,this)?new b(t):void 0===t?b():b(t);return ""===t&&(r[e]=!0),e},b),(d.prototype=_).constructor=d,o="Symbol(test)"==String(b("test")),i=p(_.toString),a=p(_.valueOf),c=/^Symbol\((.*)\)[^)]+$/,s=p("".replace),u=p("".slice),g(_,"description",{configurable:!0,get:function(){var t=a(this),e=i(t);if(h(r,t))return "";t=o?u(e,7,-1):s(e,c,"$1");return ""===t?void 0:t}}),l({global:!0,forced:!0},{Symbol:d}));},function(t,e,n){n(134)("iterator");},function(t,e,n){var r=n(0),o=n(77),i=n(20),a=n(78),c=n(96),s=n(123),u=o("wks"),l=r.Symbol,f=l&&l.for,d=s?l:l&&l.withoutSetter||a;t.exports=function(t){var e;return i(u,t)&&(c||"string"==typeof u[t])||(e="Symbol."+t,c&&i(l,t)?u[t]=l[t]:u[t]=(s&&f?f:d)(e)),u[t]};},function(t,e,n){var r=n(3),o=n(36),i=n(66);r({target:"Object",stat:!0,forced:n(2)(function(){i(1);})},{keys:function(t){return i(o(t))}});},function(t,e){t.exports=function(t){return "function"==typeof t};},function(t,e,n){var r=n(3),o=n(56).filter;r({target:"Array",proto:!0,forced:!n(94)("filter")},{filter:function(t){return o(this,t,1<arguments.length?arguments[1]:void 0)}});},function(t,e,n){var r=n(3),n=n(90);r({target:"RegExp",proto:!0,forced:/./.exec!==n},{exec:n});},function(t,e,n){n=n(2);t.exports=!n(function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]});},function(t,e,n){var r=n(0),o=n(19),i=r.String,a=r.TypeError;t.exports=function(t){if(o(t))return t;throw a(i(t)+" is not an object")};},function(t,e,n){var r=n(14);t.exports=function(t){return "object"==typeof t?null!==t:r(t)};},function(t,e,n){var r=n(1),o=n(36),i=r({}.hasOwnProperty);t.exports=Object.hasOwn||function(t,e){return i(o(t),e)};},function(t,e,n){var n=n(60),r=Function.prototype.call;t.exports=n?r.bind(r):function(){return r.apply(r,arguments)};},function(t,e,n){var r=n(0),o=n(17),i=n(124),a=n(125),c=n(18),s=n(72),u=r.TypeError,l=Object.defineProperty,f=Object.getOwnPropertyDescriptor,d="enumerable",p="configurable",h="writable";e.f=o?a?function(t,e,n){var r;return c(t),e=s(e),c(n),"function"==typeof t&&"prototype"===e&&"value"in n&&h in n&&!n[h]&&((r=f(t,e))&&r[h]&&(t[e]=n.value,n={configurable:(p in n?n:r)[p],enumerable:(d in n?n:r)[d],writable:!1})),l(t,e,n)}:l:function(t,e,n){if(c(t),e=s(e),c(n),i)try{return l(t,e,n)}catch(t){}if("get"in n||"set"in n)throw u("Accessors not supported");return "value"in n&&(t[e]=n.value),t};},function(t,e,n){var r=n(0),o=n(83),i=r.String;t.exports=function(t){if("Symbol"===o(t))throw TypeError("Cannot convert a Symbol value to a string");return i(t)};},function(t,e,n){var r=n(3),o=n(2),i=n(30),a=n(42).f,n=n(17),o=o(function(){a(1);});r({target:"Object",stat:!0,forced:!n||o,sham:!n},{getOwnPropertyDescriptor:function(t,e){return a(i(t),e)}});},function(t,e,n){var r=n(3),o=n(17),s=n(127),u=n(30),l=n(42),f=n(67);r({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(t){for(var e,n,r=u(t),o=l.f,i=s(r),a={},c=0;i.length>c;)void 0!==(n=o(r,e=i[c++]))&&f(a,e,n);return a}});},function(t,e,n){var r=n(3),o=n(0),i=n(2),u=n(86),l=n(19),f=n(36),d=n(46),p=n(67),h=n(135),a=n(94),c=n(12),n=n(74),v=c("isConcatSpreadable"),y=9007199254740991,m="Maximum allowed index exceeded",g=o.TypeError,c=51<=n||!i(function(){var t=[];return t[v]=!1,t.concat()[0]!==t}),o=a("concat");r({target:"Array",proto:!0,forced:!c||!o},{concat:function(t){for(var e,n,r,o=f(this),i=h(o,0),a=0,c=-1,s=arguments.length;c<s;c++)if(function(t){if(!l(t))return !1;var e=t[v];return void 0!==e?!!e:u(t)}(r=-1===c?o:arguments[c])){if(n=d(r),y<a+n)throw g(m);for(e=0;e<n;e++,a++)e in r&&p(i,a,r[e]);}else {if(y<=a)throw g(m);p(i,a++,r);}return i.length=a,i}});},function(t,e,n){var r=n(3),o=n(0),u=n(86),l=n(85),f=n(19),d=n(101),p=n(46),h=n(30),v=n(67),i=n(12),a=n(94),y=n(106),n=a("slice"),m=i("species"),g=o.Array,b=Math.max;r({target:"Array",proto:!0,forced:!n},{slice:function(t,e){var n,r,o,i=h(this),a=p(i),c=d(t,a),s=d(void 0===e?a:e,a);if(u(i)&&(n=i.constructor,(n=l(n)&&(n===g||u(n.prototype))||f(n)&&null===(n=n[m])?void 0:n)===g||void 0===n))return y(i,c,s);for(r=new(void 0===n?g:n)(b(s-c,0)),o=0;c<s;c++,o++)c in i&&v(r,o,i[c]);return r.length=o,r}});},function(t,e,n){var r=n(3),o=n(56).find,n=n(89),i="find",a=!0;i in[]&&Array(1)[i](function(){a=!1;}),r({target:"Array",proto:!0,forced:a},{find:function(t){return o(this,t,1<arguments.length?arguments[1]:void 0)}}),n(i);},function(t,e,n){n(3)({target:"Object",stat:!0},{setPrototypeOf:n(104)});},function(t,e,n){var r=n(71),o=n(39);t.exports=function(t){return r(o(t))};},function(t,e,n){var r=n(3),o=n(2),i=n(36),a=n(82),n=n(130);r({target:"Object",stat:!0,forced:o(function(){a(1);}),sham:!n},{getPrototypeOf:function(t){return a(i(t))}});},function(t,e,n){var r=n(3),o=n(43),i=n(84),a=n(159),c=n(131),s=n(18),u=n(19),l=n(50),n=n(2),f=o("Reflect","construct"),d=Object.prototype,p=[].push,h=n(function(){function t(){}return !(f(function(){},[],t)instanceof t)}),v=!n(function(){f(function(){});}),o=h||v;r({target:"Reflect",stat:!0,forced:o,sham:o},{construct:function(t,e){c(t),s(e);var n=arguments.length<3?t:c(arguments[2]);if(v&&!h)return f(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return i(p,r,e),new(i(a,t,r))}r=n.prototype,n=l(u(r)?r:d),r=i(t,n,e);return u(r)?r:n}});},function(t,e,n){var r=n(3),o=n(129).includes,n=n(89);r({target:"Array",proto:!0},{includes:function(t){return o(this,t,1<arguments.length?arguments[1]:void 0)}}),n("includes");},function(t,e,n){var r=n(17),o=n(0),i=n(1),a=n(81),c=n(37),s=n(20),u=n(117),l=n(44),f=n(73),d=n(122),p=n(2),h=n(55).f,v=n(42).f,y=n(22).f,m=n(167),g=n(92).trim,n="Number",b=o[n],_=b.prototype,w=o.TypeError,O=i("".slice),k=i("".charCodeAt),C=function(t){var e,n,r,o,i,a,c,s=d(t,"number");if(f(s))throw w("Cannot convert a Symbol value to a number");if("string"==typeof s&&2<s.length)if(s=g(s),43===(t=k(s,0))||45===t){if(88===(e=k(s,2))||120===e)return NaN}else if(48===t){switch(k(s,1)){case 66:case 98:n=2,r=49;break;case 79:case 111:n=8,r=55;break;default:return +s}for(i=(o=O(s,2)).length,a=0;a<i;a++)if((c=k(o,a))<48||r<c)return NaN;return parseInt(o,n)}return +s};if(a(n,!b(" 0o1")||!b("0b1")||b("+0x1"))){for(var S,x=function(t){var t=arguments.length<1?0:b(function(t){t=d(t,"number");return "bigint"==typeof t?t:C(t)}(t)),e=this;return l(_,e)&&p(function(){m(e);})?u(Object(t),e,x):t},E=r?h(b):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),j=0;E.length>j;j++)s(b,S=E[j])&&!s(x,S)&&y(x,S,v(b,S));c(o,n,(x.prototype=_).constructor=x);}},function(t,e,n){var r=n(3),o=n(174);r({target:"Array",stat:!0,forced:!n(152)(function(t){Array.from(t);})},{from:o});},function(t,e,n){var r=n(0),o=n(39),i=r.Object;t.exports=function(t){return i(o(t))};},function(t,e,n){var s=n(0),u=n(14),l=n(20),f=n(45),d=n(98),r=n(100),o=n(49),p=n(64).CONFIGURABLE,i=o.get,h=o.enforce,v=String(String).split("String");(t.exports=function(t,e,n,r){var o,i=!!r&&!!r.unsafe,a=!!r&&!!r.enumerable,c=!!r&&!!r.noTargetGet,r=r&&void 0!==r.name?r.name:e;u(n)&&("Symbol("===String(r).slice(0,7)&&(r="["+String(r).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!l(n,"name")||p&&n.name!==r)&&f(n,"name",r),(o=h(n)).source||(o.source=v.join("string"==typeof r?r:""))),t===s?a?t[e]=n:d(e,n):(i?!c&&t[e]&&(a=!0):delete t[e],a?t[e]=n:f(t,e,n));})(Function.prototype,"toString",function(){return u(this)&&i(this).source||r(this)});},function(t,e,n){var l=n(84),f=n(21),r=n(1),o=n(112),d=n(115),m=n(18),p=n(39),g=n(164),b=n(113),_=n(65),w=n(23),i=n(53),O=n(108),k=n(114),C=n(90),a=n(111),n=n(2),S=a.UNSUPPORTED_Y,x=4294967295,E=Math.min,j=[].push,T=r(/./.exec),A=r(j),D=r("".slice);o("split",function(o,h,v){var y="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||1<".".split(/()()/).length||"".split(/.?/).length?function(t,e){var n=w(p(this)),r=void 0===e?x:e>>>0;if(0==r)return [];if(void 0===t)return [n];if(!d(t))return f(h,n,t,r);for(var o,i,a,c=[],e=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),s=0,u=new RegExp(t.source,e+"g");(o=f(C,u,n))&&!(s<(i=u.lastIndex)&&(A(c,D(n,s,o.index)),1<o.length&&o.index<n.length&&l(j,c,O(o,1)),a=o[0].length,s=i,r<=c.length));)u.lastIndex===o.index&&u.lastIndex++;return s===n.length?!a&&T(u,"")||A(c,""):A(c,D(n,s)),r<c.length?O(c,0,r):c}:"0".split(void 0,0).length?function(t,e){return void 0===t&&0===e?[]:f(h,this,t,e)}:h;return [function(t,e){var n=p(this),r=null==t?void 0:i(t,o);return r?f(r,t,n,e):f(y,w(n),t,e)},function(t,e){var n=m(this),r=w(t),t=v(y,n,r,e,y!==h);if(t.done)return t.value;var t=g(n,RegExp),o=n.unicode,i=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.unicode?"u":"")+(S?"g":"y"),a=new t(S?"^(?:"+n.source+")":n,i),c=void 0===e?x:e>>>0;if(0==c)return [];if(0===r.length)return null===k(a,r)?[r]:[];for(var s=0,u=0,l=[];u<r.length;){a.lastIndex=S?0:u;var f,d=k(a,S?D(r,u):r);if(null===d||(f=E(_(a.lastIndex+(S?u:0)),r.length))===s)u=b(r,u,o);else {if(A(l,D(r,s,u)),l.length===c)return l;for(var p=1;p<=d.length-1;p++)if(A(l,d[p]),l.length===c)return l;u=s=f;}}return A(l,D(r,s)),l}]},!!n(function(){var t=/(?:)/,e=t.exec,t=(t.exec=function(){return e.apply(this,arguments)},"ab".split(t));return 2!==t.length||"a"!==t[0]||"b"!==t[1]}),S);},function(t,e,n){var r=n(0).TypeError;t.exports=function(t){if(null==t)throw r("Can't call method on "+t);return t};},function(t,e,n){var r=n(1),o=n(64).PROPER,i=n(37),a=n(18),c=n(44),s=n(23),u=n(2),n=n(110),l="toString",f=RegExp.prototype,d=f[l],p=r(n),r=u(function(){return "/a/b"!=d.call({source:"a",flags:"b"})}),n=o&&d.name!=l;(r||n)&&i(RegExp.prototype,l,function(){var t=a(this),e=s(t.source),n=t.flags;return "/"+e+"/"+s(void 0!==n||!c(f,t)||"flags"in f?n:p(t))},{unsafe:!0});},function(t,e,n){var r=n(17),o=n(64).EXISTS,i=n(1),n=n(22).f,a=Function.prototype,c=i(a.toString),s=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,u=i(s.exec);r&&!o&&n(a,"name",{configurable:!0,get:function(){try{return u(s,c(this))[1]}catch(t){return ""}}});},function(t,e,n){var r=n(17),o=n(21),i=n(70),a=n(61),c=n(30),s=n(72),u=n(20),l=n(124),f=Object.getOwnPropertyDescriptor;e.f=r?f:function(t,e){if(t=c(t),e=s(e),l)try{return f(t,e)}catch(t){}if(u(t,e))return a(!o(i.f,t,e),t[e])};},function(t,e,n){var r=n(0),o=n(14);t.exports=function(t,e){return arguments.length<2?(n=r[t],o(n)?n:void 0):r[t]&&r[t][e];var n;};},function(t,e,n){n=n(1);t.exports=n({}.isPrototypeOf);},function(t,e,n){var r=n(17),o=n(22),i=n(61);t.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t};},function(t,e,n){var r=n(65);t.exports=function(t){return r(t.length)};},function(t,e,n){var O=n(84),o=n(21),r=n(1),i=n(112),a=n(2),k=n(18),C=n(14),S=n(80),x=n(65),E=n(23),c=n(39),j=n(113),s=n(53),T=n(173),A=n(114),u=n(12)("replace"),D=Math.max,P=Math.min,M=r([].concat),I=r([].push),L=r("".indexOf),N=r("".slice),n="$0"==="a".replace(/./,"$0"),l=!!/./[u]&&""===/./[u]("a","$0");i("replace",function(t,b,_){var w=l?"$":"$0";return [function(t,e){var n=c(this),r=null==t?void 0:s(t,u);return r?o(r,t,n,e):o(b,E(n),t,e)},function(t,e){var n=k(this),r=E(t);if("string"==typeof e&&-1===L(e,w)&&-1===L(e,"$<")){t=_(b,n,r,e);if(t.done)return t.value}for(var o,i=C(e),a=(i||(e=E(e)),n.global),c=(a&&(o=n.unicode,n.lastIndex=0),[]);null!==(d=A(n,r))&&(I(c,d),a);)""===E(d[0])&&(n.lastIndex=j(r,x(n.lastIndex),o));for(var s,u="",l=0,f=0;f<c.length;f++){for(var d,p=E((d=c[f])[0]),h=D(P(S(d.index),r.length),0),v=[],y=1;y<d.length;y++)I(v,void 0===(s=d[y])?s:String(s));var m=d.groups,g=i?(g=M([p],v,h,r),void 0!==m&&I(g,m),E(O(e,void 0,g))):T(p,r,h,v,m,e);l<=h&&(u+=N(r,l,h)+g,l=h+p.length);}return u+N(r,l)}]},!!a(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})||!n||l);},function(t,e,n){var n=n(1),r=n({}.toString),o=n("".slice);t.exports=function(t){return o(r(t),8,-1)};},function(t,e,n){var r,o,i,a,c,s,u,l,f=n(156),d=n(0),p=n(1),h=n(19),v=n(45),y=n(20),m=n(97),g=n(79),n=n(63),b="Object already initialized",_=d.TypeError,d=d.WeakMap;u=f||m.state?(r=m.state||(m.state=new d),o=p(r.get),i=p(r.has),a=p(r.set),c=function(t,e){if(i(r,t))throw new _(b);return e.facade=t,a(r,t,e),e},s=function(t){return o(r,t)||{}},function(t){return i(r,t)}):(n[l=g("state")]=!0,c=function(t,e){if(y(t,l))throw new _(b);return e.facade=t,v(t,l,e),e},s=function(t){return y(t,l)?t[l]:{}},function(t){return y(t,l)}),t.exports={set:c,get:s,has:u,enforce:function(t){return u(t)?s(t):c(t,{})},getterFor:function(e){return function(t){if(h(t)&&(t=s(t)).type===e)return t;throw _("Incompatible receiver, "+e+" required")}}};},function(t,e,n){function r(){}function o(t){t.write(v("")),t.close();var e=t.parentWindow.Object;return t=null,e}var i,a=n(18),c=n(132),s=n(102),u=n(63),l=n(160),f=n(99),n=n(79),d="prototype",p="script",h=n("IE_PROTO"),v=function(t){return "<"+p+">"+t+"</"+p+">"},y=function(){try{i=new ActiveXObject("htmlfile");}catch(t){}y="undefined"==typeof document||document.domain&&i?o(i):(t=f("iframe"),e="java"+p+":",t.style.display="none",l.appendChild(t),t.src=String(e),(e=t.contentWindow.document).open(),e.write(v("document.F=Object")),e.close(),e.F);for(var t,e,n=s.length;n--;)delete y[d][s[n]];return y()};u[h]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(r[d]=a(t),n=new r,r[d]=null,n[h]=t):n=y(),void 0===e?n:c.f(n,e)};},function(t,e,n){var r=n(3),o=n(1),i=n(142),a=n(39),c=n(23),n=n(143),s=o("".indexOf);r({target:"String",proto:!0,forced:!n("includes")},{includes:function(t){return !!~s(c(a(this)),c(i(t)),1<arguments.length?arguments[1]:void 0)}});},function(N,R,t){var e=t(17),n=t(0),r=t(1),o=t(81),u=t(117),l=t(45),i=t(22).f,a=t(55).f,f=t(44),d=t(115),p=t(23),c=t(110),s=t(111),h=t(37),v=t(2),y=t(20),m=t(49).enforce,g=t(144),b=t(12),_=t(140),w=t(141),O=b("match"),k=n.RegExp,C=k.prototype,S=n.SyntaxError,x=r(c),B=r(C.exec),E=r("".charAt),j=r("".replace),T=r("".indexOf),H=r("".slice),F=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,A=/a/g,D=/a/g,t=new k(A)!==A,P=s.MISSED_STICKY,V=s.UNSUPPORTED_Y,b=e&&(!t||P||_||w||v(function(){return D[O]=!1,k(A)!=A||k(D)==D||"/a/i"!=k(A,"i")})),Y=function(t){for(var e,n=t.length,r=0,o="",i=!1;r<=n;r++)"\\"===(e=E(t,r))?o+=e+E(t,++r):i||"."!==e?("["===e?i=!0:"]"===e&&(i=!1),o+=e):o+="[\\s\\S]";return o},W=function(t){for(var e,n=t.length,r=0,o="",i=[],a={},c=!1,s=!1,u=0,l="";r<=n;r++){if("\\"===(e=E(t,r)))e+=E(t,++r);else if("]"===e)c=!1;else if(!c)switch(!0){case"["===e:c=!0;break;case"("===e:B(F,H(t,r+1))&&(r+=2,s=!0),o+=e,u++;continue;case">"===e&&s:if(""===l||y(a,l))throw new S("Invalid capture group name");a[l]=!0,s=!(i[i.length]=[l,u]),l="";continue}s?l+=e:o+=e;}return [o,i]};if(o("RegExp",b)){for(var M=function(t,e){var n,r,o=f(C,this),i=d(t),a=void 0===e,c=[],s=t;if(!o&&i&&a&&t.constructor===M)return t;if((i||f(C,t))&&(t=t.source,a&&(e="flags"in s?s.flags:x(s))),t=void 0===t?"":p(t),e=void 0===e?"":p(e),s=t,i=e=_&&"dotAll"in A&&(n=!!e&&-1<T(e,"s"))?j(e,/s/g,""):e,P&&"sticky"in A&&(r=!!e&&-1<T(e,"y"))&&V&&(e=j(e,/y/g,"")),w&&(t=(a=W(t))[0],c=a[1]),a=u(k(t,e),o?this:C,M),(n||r||c.length)&&(e=m(a),n&&(e.dotAll=!0,e.raw=M(Y(t),i)),r&&(e.sticky=!0),c.length&&(e.groups=c)),t!==s)try{l(a,"source",""===s?"(?:)":s);}catch(t){}return a},I=a(k),L=0;I.length>L;)!function(e){e in M||i(M,e,{configurable:!0,get:function(){return k[e]},set:function(t){k[e]=t;}});}(I[L++]);(C.constructor=M).prototype=C,h(n,"RegExp",M);}g("RegExp");},function(t,e,n){var r=n(62);t.exports=function(t,e){t=t[e];return null==t?void 0:r(t)};},function(t,e){t.exports=!1;},function(t,e,n){var r=n(128),o=n(102).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)};},function(t,e,n){function r(d){var p=1==d,h=2==d,v=3==d,y=4==d,m=6==d,g=7==d,b=5==d||m;return function(t,e,n,r){for(var o,i,a=O(t),c=w(a),s=_(e,n),u=k(c),l=0,e=r||C,f=p?e(t,u):h||g?e(t,0):void 0;l<u;l++)if((b||l in c)&&(i=s(o=c[l],l,a),d))if(p)f[l]=i;else if(i)switch(d){case 3:return !0;case 5:return o;case 6:return l;case 2:S(f,o);}else switch(d){case 4:return !1;case 7:S(f,o);}return m?-1:v||y?y:f}}var _=n(88),o=n(1),w=n(71),O=n(36),k=n(46),C=n(135),S=o([].push);t.exports={forEach:r(0),map:r(1),filter:r(2),some:r(3),every:r(4),find:r(5),findIndex:r(6),filterReject:r(7)};},function(t,e,n){var r=n(3),o=n(1),i=n(42).f,a=n(65),c=n(23),s=n(142),u=n(39),l=n(143),n=n(54),f=o("".startsWith),d=o("".slice),p=Math.min,o=l("startsWith");r({target:"String",proto:!0,forced:!!(n||o||(!(l=i(String.prototype,"startsWith"))||l.writable))&&!o},{startsWith:function(t){var e=c(u(this)),n=(s(t),a(p(1<arguments.length?arguments[1]:void 0,e.length))),t=c(t);return f?f(e,t,n):d(e,n,n+t.length)===t}});},function(t,e,n){var r=n(3),o=n(56).map;r({target:"Array",proto:!0,forced:!n(94)("map")},{map:function(t){return o(this,t,1<arguments.length?arguments[1]:void 0)}});},function(t,e,n){var r=n(3),i=n(21),a=n(19),c=n(18),s=n(179),u=n(42),l=n(82);r({target:"Reflect",stat:!0},{get:function t(e,n){var r,o=arguments.length<3?e:arguments[2];return c(e)===o?e[n]:(r=u.f(e,n))?s(r)?r.value:void 0===r.get?void 0:i(r.get,o):a(r=l(e))?t(r,n,o):void 0}});},function(t,e,n){n=n(2);t.exports=!n(function(){var t=function(){}.bind();return "function"!=typeof t||t.hasOwnProperty("prototype")});},function(t,e){t.exports=function(t,e){return {enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}};},function(t,e,n){var r=n(0),o=n(14),i=n(76),a=r.TypeError;t.exports=function(t){if(o(t))return t;throw a(i(t)+" is not a function")};},function(t,e){t.exports={};},function(t,e,n){var r=n(17),n=n(20),o=Function.prototype,i=r&&Object.getOwnPropertyDescriptor,n=n(o,"name"),a=n&&"something"===function(){}.name,r=n&&(!r||i(o,"name").configurable);t.exports={EXISTS:n,PROPER:a,CONFIGURABLE:r};},function(t,e,n){var r=n(80),o=Math.min;t.exports=function(t){return 0<t?o(r(t),9007199254740991):0};},function(t,e,n){var r=n(128),o=n(102);t.exports=Object.keys||function(t){return r(t,o)};},function(t,e,n){var r=n(72),o=n(22),i=n(61);t.exports=function(t,e,n){e=r(e);e in t?o.f(t,e,i(0,n)):t[e]=n;};},function(t,e){t.exports={};},function(t,e,n){var o=n(21),r=n(112),u=n(18),l=n(65),f=n(23),i=n(39),a=n(53),d=n(113),p=n(114);r("match",function(r,c,s){return [function(t){var e=i(this),n=null==t?void 0:a(t,r);return n?o(n,t,e):new RegExp(t)[r](f(e))},function(t){var e=u(this),n=f(t),t=s(c,e,n);if(t.done)return t.value;if(!e.global)return p(e,n);for(var r=e.unicode,o=[],i=e.lastIndex=0;null!==(a=p(e,n));){var a=f(a[0]);""===(o[i]=a)&&(e.lastIndex=d(n,l(e.lastIndex),r)),i++;}return 0===i?null:o}]});},function(t,e,n){var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){t=o(this,t);return !!t&&t.enumerable}:r;},function(t,e,n){var r=n(0),o=n(1),i=n(2),a=n(48),c=r.Object,s=o("".split);t.exports=i(function(){return !c("z").propertyIsEnumerable(0)})?function(t){return "String"==a(t)?s(t,""):c(t)}:c;},function(t,e,n){var r=n(122),o=n(73);t.exports=function(t){t=r(t,"string");return o(t)?t:t+""};},function(t,e,n){var r=n(0),o=n(43),i=n(14),a=n(44),n=n(123),c=r.Object;t.exports=n?function(t){return "symbol"==typeof t}:function(t){var e=o("Symbol");return i(e)&&a(e.prototype,c(t))};},function(t,e,n){var r,o,i=n(0),n=n(75),a=i.process,i=i.Deno,a=a&&a.versions||i&&i.version,i=a&&a.v8;!(o=i?0<(r=i.split("."))[0]&&r[0]<4?1:+(r[0]+r[1]):o)&&n&&(!(r=n.match(/Edge\/(\d+)/))||74<=r[1])&&(r=n.match(/Chrome\/(\d+)/))&&(o=+r[1]),t.exports=o;},function(t,e,n){n=n(43);t.exports=n("navigator","userAgent")||"";},function(t,e,n){var r=n(0).String;t.exports=function(t){try{return r(t)}catch(t){return "Object"}};},function(t,e,n){var r=n(54),o=n(97);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.21.1",mode:r?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",source:"https://github.com/zloirock/core-js"});},function(t,e,n){var n=n(1),r=0,o=Math.random(),i=n(1..toString);t.exports=function(t){return "Symbol("+(void 0===t?"":t)+")_"+i(++r+o,36)};},function(t,e,n){var r=n(77),o=n(78),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))};},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){t=+t;return t!=t||0==t?0:(0<t?r:n)(t)};},function(t,e,n){function r(t,e){return (t=s[c(t)])==l||t!=u&&(i(e)?o(e):!!e)}var o=n(2),i=n(14),a=/#|\.prototype\./,c=r.normalize=function(t){return String(t).replace(a,".").toLowerCase()},s=r.data={},u=r.NATIVE="N",l=r.POLYFILL="P";t.exports=r;},function(t,e,n){var r=n(0),o=n(20),i=n(14),a=n(36),c=n(79),n=n(130),s=c("IE_PROTO"),u=r.Object,l=u.prototype;t.exports=n?u.getPrototypeOf:function(t){t=a(t);if(o(t,s))return t[s];var e=t.constructor;return i(e)&&t instanceof e?e.prototype:t instanceof u?l:null};},function(t,e,n){var r=n(0),o=n(105),i=n(14),a=n(48),c=n(12)("toStringTag"),s=r.Object,u="Arguments"==a(function(){return arguments}());t.exports=o?a:function(t){var e;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,e){try{return t[e]}catch(t){}}(t=s(t),c))?e:u?a(t):"Object"==(e=a(t))&&i(t.callee)?"Arguments":e};},function(t,e,n){var n=n(60),r=Function.prototype,o=r.apply,i=r.call;t.exports="object"==typeof Reflect&&Reflect.apply||(n?i.bind(o):function(){return i.apply(o,arguments)});},function(t,e,n){function r(){}function o(t){if(!s(t))return !1;try{return p(r,d,t),!0}catch(t){return !1}}function i(t){if(!s(t))return !1;switch(u(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return !1}try{return y||!!v(h,f(t))}catch(t){return !0}}var a=n(1),c=n(2),s=n(14),u=n(83),l=n(43),f=n(100),d=[],p=l("Reflect","construct"),h=/^\s*(?:class|function)\b/,v=a(h.exec),y=!h.exec(r);i.sham=!0,t.exports=!p||c(function(){var t;return o(o.call)||!o(Object)||!o(function(){t=!0;})||t})?i:o;},function(t,e,n){var r=n(48);t.exports=Array.isArray||function(t){return "Array"==r(t)};},function(t,e,n){var r=n(22).f,o=n(20),i=n(12)("toStringTag");t.exports=function(t,e,n){(t=t&&!n?t.prototype:t)&&!o(t,i)&&r(t,i,{configurable:!0,value:e});};},function(t,e,n){var r=n(1),o=n(62),i=n(60),a=r(r.bind);t.exports=function(t,e){return o(t),void 0===e?t:i?a(t,e):function(){return t.apply(e,arguments)}};},function(t,e,n){var r=n(12),o=n(50),n=n(22),i=r("unscopables"),a=Array.prototype;null==a[i]&&n.f(a,i,{configurable:!0,value:o(null)}),t.exports=function(t){a[i][t]=!0;};},function(t,e,n){var h=n(21),r=n(1),v=n(23),y=n(110),o=n(111),i=n(77),m=n(50),g=n(49).get,a=n(140),n=n(141),b=i("native-string-replace",String.prototype.replace),_=RegExp.prototype.exec,w=_,O=r("".charAt),k=r("".indexOf),C=r("".replace),S=r("".slice),x=(i=/b*/g,h(_,r=/a/,"a"),h(_,i,"a"),0!==r.lastIndex||0!==i.lastIndex),E=o.BROKEN_CARET,j=void 0!==/()??/.exec("")[1];(x||j||E||a||n)&&(w=function(t){var e,n,r,o,i,a,c=this,s=g(c),t=v(t),u=s.raw;if(u)return u.lastIndex=c.lastIndex,f=h(w,u,t),c.lastIndex=u.lastIndex,f;var l=s.groups,u=E&&c.sticky,f=h(y,c),s=c.source,d=0,p=t;if(u&&(f=C(f,"y",""),-1===k(f,"g")&&(f+="g"),p=S(t,c.lastIndex),0<c.lastIndex&&(!c.multiline||c.multiline&&"\n"!==O(t,c.lastIndex-1))&&(s="(?: "+s+")",p=" "+p,d++),e=new RegExp("^(?:"+s+")",f)),j&&(e=new RegExp("^"+s+"$(?!\\s)",f)),x&&(n=c.lastIndex),r=h(_,u?e:c,p),u?r?(r.input=S(r.input,d),r[0]=S(r[0],d),r.index=c.lastIndex,c.lastIndex+=r[0].length):c.lastIndex=0:x&&r&&(c.lastIndex=c.global?r.index+r[0].length:n),j&&r&&1<r.length&&h(b,r[0],e,function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0);}),r&&l)for(r.groups=i=m(null),o=0;o<l.length;o++)i[(a=l[o])[0]]=r[a[1]];return r}),t.exports=w;},function(t,e,n){var r=n(3),o=n(92).trim;r({target:"String",proto:!0,forced:n(165)("trim")},{trim:function(){return o(this)}});},function(t,e,n){function r(e){return function(t){t=a(i(t));return 1&e&&(t=c(t,s,"")),t=2&e?c(t,u,""):t}}var o=n(1),i=n(39),a=n(23),n=n(93),c=o("".replace),o="["+n+"]",s=RegExp("^"+o+o+"*"),u=RegExp(o+o+"*$");t.exports={start:r(1),end:r(2),trim:r(3)};},function(t,e){t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff";},function(t,e,n){var r=n(2),o=n(12),i=n(74),a=o("species");t.exports=function(e){return 51<=i||!r(function(){var t=[];return (t.constructor={})[a]=function(){return {foo:1}},1!==t[e](Boolean).foo})};},function(t,e,n){var r=n(3),o=n(1),i=n(71),a=n(30),n=n(118),c=o([].join),o=i!=Object,i=n("join",",");r({target:"Array",proto:!0,forced:o||!i},{join:function(t){return c(a(this),void 0===t?",":t)}});},function(t,e,n){var r=n(74),n=n(2);t.exports=!!Object.getOwnPropertySymbols&&!n(function(){var t=Symbol();return !String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&r&&r<41});},function(t,e,n){var r=n(0),n=n(98),o="__core-js_shared__",r=r[o]||n(o,{});t.exports=r;},function(t,e,n){var r=n(0),o=Object.defineProperty;t.exports=function(e,n){try{o(r,e,{value:n,configurable:!0,writable:!0});}catch(t){r[e]=n;}return n};},function(t,e,n){var r=n(0),n=n(19),o=r.document,i=n(o)&&n(o.createElement);t.exports=function(t){return i?o.createElement(t):{}};},function(t,e,n){var r=n(1),o=n(14),n=n(97),i=r(Function.toString);o(n.inspectSource)||(n.inspectSource=function(t){return i(t)}),t.exports=n.inspectSource;},function(t,e,n){var r=n(80),o=Math.max,i=Math.min;t.exports=function(t,e){t=r(t);return t<0?o(t+e,0):i(t,e)};},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"];},function(t,e){e.f=Object.getOwnPropertySymbols;},function(t,e,n){var o=n(1),i=n(18),a=n(157);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,r=!1,t={};try{(n=o(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),r=t instanceof Array;}catch(t){}return function(t,e){return i(t),a(e),r?n(t,e):t.__proto__=e,t}}():void 0);},function(t,e,n){var r={};r[n(12)("toStringTag")]="z",t.exports="[object z]"===String(r);},function(t,e,n){n=n(1);t.exports=n([].slice);},function(t,e,n){var r=n(48),o=n(30),i=n(55).f,a=n(108),c="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){if(!c||"Window"!=r(t))return i(o(t));try{return i(t)}catch(t){return a(c)}};},function(t,e,n){var r=n(0),s=n(101),u=n(46),l=n(67),f=r.Array,d=Math.max;t.exports=function(t,e,n){for(var r=u(t),o=s(e,r),i=s(void 0===n?r:n,r),a=f(d(i-o,0)),c=0;o<i;o++,c++)l(a,c,t[o]);return a.length=c,a};},function(t,e,n){function v(){return this}var y=n(3),m=n(21),g=n(54),r=n(64),b=n(14),_=n(163),w=n(82),O=n(104),k=n(87),C=n(45),S=n(37),o=n(12),x=n(68),n=n(136),E=r.PROPER,j=r.CONFIGURABLE,T=n.IteratorPrototype,A=n.BUGGY_SAFARI_ITERATORS,D=o("iterator"),P="values",M="entries";t.exports=function(t,e,n,r,o,i,a){_(n,e,r);function c(t){if(t===o&&p)return p;if(!A&&t in f)return f[t];switch(t){case"keys":case P:case M:return function(){return new n(this,t)}}return function(){return new n(this)}}var s,u,r=e+" Iterator",l=!1,f=t.prototype,d=f[D]||f["@@iterator"]||o&&f[o],p=!A&&d||c(o),h="Array"==e&&f.entries||d;if(h&&(h=w(h.call(new t)))!==Object.prototype&&h.next&&(g||w(h)===T||(O?O(h,T):b(h[D])||S(h,D,v)),k(h,r,!0,!0),g&&(x[r]=v)),E&&o==P&&d&&d.name!==P&&(!g&&j?C(f,"name",P):(l=!0,p=function(){return m(d,this)})),o)if(s={values:c(P),keys:i?p:c("keys"),entries:c(M)},a)for(u in s)!A&&!l&&u in f||S(f,u,s[u]);else y({target:e,proto:!0,forced:A||l},s);return g&&!a||f[D]===p||S(f,D,p,{name:o}),x[e]=p,s};},function(t,e,n){var r=n(18);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e};},function(t,e,n){var r=n(2),o=n(0).RegExp,n=r(function(){var t=o("a","y");return t.lastIndex=2,null!=t.exec("abcd")}),i=n||r(function(){return !o("a","y").sticky}),r=n||r(function(){var t=o("^r","gy");return t.lastIndex=2,null!=t.exec("str")});t.exports={BROKEN_CARET:r,MISSED_STICKY:i,UNSUPPORTED_Y:n};},function(t,e,n){n(16);var s=n(1),u=n(37),l=n(90),f=n(2),d=n(12),p=n(45),h=d("species"),v=RegExp.prototype;t.exports=function(n,t,e,r){var a,o=d(n),c=!f(function(){var t={};return t[o]=function(){return 7},7!=""[n](t)}),i=c&&!f(function(){var t=!1,e=/a/;return "split"===n&&((e={constructor:{}}).constructor[h]=function(){return e},e.flags="",e[o]=/./[o]),e.exec=function(){return t=!0,null},e[o](""),!t});c&&i&&!e||(a=s(/./[o]),i=t(o,""[n],function(t,e,n,r,o){var t=s(t),i=e.exec;return i===l||i===v.exec?c&&!o?{done:!0,value:a(e,n,r)}:{done:!0,value:t(n,e,r)}:{done:!1}}),u(String.prototype,n,i[0]),u(v,o,i[1])),r&&p(v[o],"sham",!0);};},function(t,e,n){var r=n(137).charAt;t.exports=function(t,e,n){return e+(n?r(t,e).length:1)};},function(t,e,n){var r=n(0),o=n(21),i=n(18),a=n(14),c=n(48),s=n(90),u=r.TypeError;t.exports=function(t,e){var n=t.exec;if(a(n))return null!==(n=o(n,t,e))&&i(n),n;if("RegExp"===c(t))return o(s,t,e);throw u("RegExp#exec called on incompatible receiver")};},function(t,e,n){var r=n(19),o=n(48),i=n(12)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))};},function(t,e,n){var r=n(3),n=n(166);r({target:"Number",stat:!0,forced:Number.parseFloat!=n},{parseFloat:n});},function(t,e,n){var r=n(14),o=n(19),i=n(104);t.exports=function(t,e,n){return i&&r(e=e.constructor)&&e!==n&&o(e=e.prototype)&&e!==n.prototype&&i(t,e),t};},function(t,e,n){var r=n(2);t.exports=function(t,e){var n=[][t];return !!n&&r(function(){n.call(null,e||function(){return 1},1);})};},function(t,e,n){n(145)("Set",function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},n(153));},function(t,e,n){var r=n(83),o=n(53),i=n(68),a=n(12)("iterator");t.exports=function(t){if(null!=t)return o(t,a)||o(t,"@@iterator")||i[r(t)]};},function(t,e,n){var r=n(3),n=n(178);r({target:"Number",stat:!0,forced:Number.parseInt!=n},{parseInt:n});},function(t,e,n){var r=n(0),o=n(21),i=n(19),a=n(73),c=n(53),s=n(155),n=n(12),u=r.TypeError,l=n("toPrimitive");t.exports=function(t,e){if(!i(t)||a(t))return t;var n=c(t,l);if(n){if(n=o(n,t,e=void 0===e?"default":e),!i(n)||a(n))return n;throw u("Can't convert object to primitive value")}return s(t,e=void 0===e?"number":e)};},function(t,e,n){n=n(96);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator;},function(t,e,n){var r=n(17),o=n(2),i=n(99);t.exports=!r&&!o(function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a});},function(t,e,n){var r=n(17),n=n(2);t.exports=r&&n(function(){return 42!=Object.defineProperty(function(){},"prototype",{value:42,writable:!1}).prototype});},function(t,e,n){var s=n(20),u=n(127),l=n(42),f=n(22);t.exports=function(t,e,n){for(var r=u(e),o=f.f,i=l.f,a=0;a<r.length;a++){var c=r[a];s(t,c)||n&&s(n,c)||o(t,c,i(e,c));}};},function(t,e,n){var r=n(43),o=n(1),i=n(55),a=n(103),c=n(18),s=o([].concat);t.exports=r("Reflect","ownKeys")||function(t){var e=i.f(c(t)),n=a.f;return n?s(e,n(t)):e};},function(t,e,n){var r=n(1),a=n(20),c=n(30),s=n(129).indexOf,u=n(63),l=r([].push);t.exports=function(t,e){var n,r=c(t),o=0,i=[];for(n in r)!a(u,n)&&a(r,n)&&l(i,n);for(;e.length>o;)!a(r,n=e[o++])||~s(i,n)||l(i,n);return i};},function(t,e,n){function r(c){return function(t,e,n){var r,o=s(t),i=l(o),a=u(n,i);if(c&&e!=e){for(;a<i;)if((r=o[a++])!=r)return !0}else for(;a<i;a++)if((c||a in o)&&o[a]===e)return c||a||0;return !c&&-1}}var s=n(30),u=n(101),l=n(46);t.exports={includes:r(!0),indexOf:r(!1)};},function(t,e,n){n=n(2);t.exports=!n(function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype});},function(t,e,n){var r=n(0),o=n(85),i=n(76),a=r.TypeError;t.exports=function(t){if(o(t))return t;throw a(i(t)+" is not a constructor")};},function(t,e,n){var r=n(17),o=n(125),c=n(22),s=n(18),u=n(30),l=n(66);e.f=r&&!o?Object.defineProperties:function(t,e){s(t);for(var n,r=u(e),o=l(e),i=o.length,a=0;a<i;)c.f(t,n=o[a++],r[n]);return t};},function(t,e,n){n=n(12);e.f=n;},function(t,e,n){var r=n(161),o=n(20),i=n(133),a=n(22).f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});o(e,t)||a(e,t,{value:i.f(t)});};},function(t,e,n){var r=n(162);t.exports=function(t,e){return new(r(t))(0===e?0:e)};},function(t,e,n){var r,o,i=n(2),a=n(14),c=n(50),s=n(82),u=n(37),l=n(12),n=n(54),f=l("iterator"),l=!1;[].keys&&("next"in(o=[].keys())?(s=s(s(o)))!==Object.prototype&&(r=s):l=!0),null==r||i(function(){var t={};return r[f].call(t)!==t})?r={}:n&&(r=c(r)),a(r[f])||u(r,f,function(){return this}),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:l};},function(t,e,n){function r(o){return function(t,e){var n,t=a(c(t)),e=i(e),r=t.length;return e<0||r<=e?o?"":void 0:(n=u(t,e))<55296||56319<n||e+1===r||(r=u(t,e+1))<56320||57343<r?o?s(t,e):n:o?l(t,e,e+2):r-56320+(n-55296<<10)+65536}}var o=n(1),i=n(80),a=n(23),c=n(39),s=o("".charAt),u=o("".charCodeAt),l=o("".slice);t.exports={codeAt:r(!1),charAt:r(!0)};},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0};},function(t,e,n){n=n(99)("span").classList,n=n&&n.constructor&&n.constructor.prototype;t.exports=n===Object.prototype?void 0:n;},function(t,e,n){var r=n(2),o=n(0).RegExp;t.exports=r(function(){var t=o(".","s");return !(t.dotAll&&t.exec("\n")&&"s"===t.flags)});},function(t,e,n){var r=n(2),o=n(0).RegExp;t.exports=r(function(){var t=o("(?<a>b)","g");return "b"!==t.exec("b").groups.a||"bc"!=="b".replace(t,"$<a>c")});},function(t,e,n){var r=n(0),o=n(115),i=r.TypeError;t.exports=function(t){if(o(t))throw i("The method doesn't accept regular expressions");return t};},function(t,e,n){var r=n(12)("match");t.exports=function(e){var n=/./;try{"/./"[e](n);}catch(t){try{return n[r]=!1,"/./"[e](n)}catch(t){}}return !1};},function(t,e,n){var r=n(43),o=n(22),i=n(12),a=n(17),c=i("species");t.exports=function(t){var t=r(t),e=o.f;a&&t&&!t[c]&&e(t,c,{configurable:!0,get:function(){return this}});};},function(t,e,n){var y=n(3),m=n(0),g=n(1),b=n(81),_=n(37),w=n(146),O=n(147),k=n(151),C=n(14),S=n(19),x=n(2),E=n(152),j=n(87),T=n(117);t.exports=function(t,e,n){function r(t){var n=g(p[t]);_(p,t,"add"==t?function(t){return n(this,0===t?0:t),this}:"delete"==t?function(t){return !(l&&!S(t))&&n(this,0===t?0:t)}:"get"==t?function(t){return l&&!S(t)?void 0:n(this,0===t?0:t)}:"has"==t?function(t){return !(l&&!S(t))&&n(this,0===t?0:t)}:function(t,e){return n(this,0===t?0:t,e),this});}var o,i,a,c,s,u=-1!==t.indexOf("Map"),l=-1!==t.indexOf("Weak"),f=u?"set":"add",d=m[t],p=d&&d.prototype,h=d,v={};return b(t,!C(d)||!(l||p.forEach&&!x(function(){(new d).entries().next();})))?(h=n.getConstructor(e,t,u,f),w.enable()):b(t,!0)&&(i=(o=new h)[f](l?{}:-0,1)!=o,a=x(function(){o.has(1);}),c=E(function(t){new d(t);}),s=!l&&x(function(){for(var t=new d,e=5;e--;)t[f](e,e);return !t.has(-0)}),c||(((h=e(function(t,e){k(t,p);t=T(new d,t,h);return null!=e&&O(e,t[f],{that:t,AS_ENTRIES:u}),t})).prototype=p).constructor=h),(a||s)&&(r("delete"),r("has"),u&&r("get")),(s||i)&&r(f),l&&p.clear&&delete p.clear),v[t]=h,y({global:!0,forced:h!=d},v),j(h,t),l||n.setStrong(h,t,u),h};},function(t,e,n){function r(t){u(t,y,{value:{objectID:"O"+m++,weakData:{}}});}var a=n(3),c=n(1),o=n(63),i=n(19),s=n(20),u=n(22).f,l=n(55),f=n(107),d=n(169),p=n(78),h=n(171),v=!1,y=p("meta"),m=0,g=t.exports={enable:function(){g.enable=function(){},v=!0;var o=l.f,i=c([].splice),t={};t[y]=1,o(t).length&&(l.f=function(t){for(var e=o(t),n=0,r=e.length;n<r;n++)if(e[n]===y){i(e,n,1);break}return e},a({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:f.f}));},fastKey:function(t,e){if(!i(t))return "symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!s(t,y)){if(!d(t))return "F";if(!e)return "E";r(t);}return t[y].objectID},getWeakData:function(t,e){if(!s(t,y)){if(!d(t))return !0;if(!e)return !1;r(t);}return t[y].weakData},onFreeze:function(t){return h&&v&&d(t)&&!s(t,y)&&r(t),t}};o[y]=!0;},function(t,e,n){function y(t,e){this.stopped=t,this.result=e;}var r=n(0),m=n(88),g=n(21),b=n(18),_=n(76),w=n(148),O=n(46),k=n(44),C=n(149),S=n(120),x=n(150),E=r.TypeError,j=y.prototype;t.exports=function(t,e,n){function r(t){return i&&x(i,"normal",t),new y(!0,t)}function o(t){return d?(b(t),h?v(t[0],t[1],r):v(t[0],t[1])):h?v(t,r):v(t)}var i,a,c,s,u,l,f=n&&n.that,d=!(!n||!n.AS_ENTRIES),p=!(!n||!n.IS_ITERATOR),h=!(!n||!n.INTERRUPTED),v=m(e,f);if(p)i=t;else {if(!(n=S(t)))throw E(_(t)+" is not iterable");if(w(n)){for(a=0,c=O(t);a<c;a++)if((s=o(t[a]))&&k(j,s))return s;return new y(!1)}i=C(t,n);}for(u=i.next;!(l=g(u,i)).done;){try{s=o(l.value);}catch(t){x(i,"throw",t);}if("object"==typeof s&&s&&k(j,s))return s}return new y(!1)};},function(t,e,n){var r=n(12),o=n(68),i=r("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)};},function(t,e,n){var r=n(0),o=n(21),i=n(62),a=n(18),c=n(76),s=n(120),u=r.TypeError;t.exports=function(t,e){var n=arguments.length<2?s(t):e;if(i(n))return a(o(n,t));throw u(c(t)+" is not iterable")};},function(t,e,n){var i=n(21),a=n(18),c=n(53);t.exports=function(t,e,n){var r,o;a(t);try{if(!(r=c(t,"return"))){if("throw"===e)throw n;return n}r=i(r,t);}catch(t){o=!0,r=t;}if("throw"===e)throw n;if(o)throw r;return a(r),n};},function(t,e,n){var r=n(0),o=n(44),i=r.TypeError;t.exports=function(t,e){if(o(e,t))return t;throw i("Incorrect invocation")};},function(t,e,n){var o=n(12)("iterator"),i=!1;try{var r=0,a={next:function(){return {done:!!r++}},return:function(){i=!0;}};a[o]=function(){return this},Array.from(a,function(){throw 2});}catch(t){}t.exports=function(t,e){if(!e&&!i)return !1;var n=!1;try{var r={};r[o]=function(){return {next:function(){return {done:n=!0}}}},t(r);}catch(t){}return n};},function(t,e,n){var u=n(22).f,l=n(50),f=n(172),d=n(88),p=n(151),h=n(147),a=n(109),c=n(144),v=n(17),y=n(146).fastKey,n=n(49),m=n.set,g=n.getterFor;t.exports={getConstructor:function(t,n,r,o){function i(t,e,n){var r,o=s(t),i=a(t,e);return i?i.value=n:(o.last=i={index:r=y(e,!0),key:e,value:n,previous:e=o.last,next:void 0,removed:!1},o.first||(o.first=i),e&&(e.next=i),v?o.size++:t.size++,"F"!==r&&(o.index[r]=i)),t}function a(t,e){var n,t=s(t),r=y(e);if("F"!==r)return t.index[r];for(n=t.first;n;n=n.next)if(n.key==e)return n}var t=t(function(t,e){p(t,c),m(t,{type:n,index:l(null),first:void 0,last:void 0,size:0}),v||(t.size=0),null!=e&&h(e,t[o],{that:t,AS_ENTRIES:r});}),c=t.prototype,s=g(n);return f(c,{clear:function(){for(var t=s(this),e=t.index,n=t.first;n;)n.removed=!0,n.previous&&(n.previous=n.previous.next=void 0),delete e[n.index],n=n.next;t.first=t.last=void 0,v?t.size=0:this.size=0;},delete:function(t){var e,n,r=s(this),t=a(this,t);return t&&(e=t.next,n=t.previous,delete r.index[t.index],t.removed=!0,n&&(n.next=e),e&&(e.previous=n),r.first==t&&(r.first=e),r.last==t&&(r.last=n),v?r.size--:this.size--),!!t},forEach:function(t){for(var e,n=s(this),r=d(t,1<arguments.length?arguments[1]:void 0);e=e?e.next:n.first;)for(r(e.value,e.key,this);e&&e.removed;)e=e.previous;},has:function(t){return !!a(this,t)}}),f(c,r?{get:function(t){t=a(this,t);return t&&t.value},set:function(t,e){return i(this,0===t?0:t,e)}}:{add:function(t){return i(this,t=0===t?0:t,t)}}),v&&u(c,"size",{get:function(){return s(this).size}}),t},setStrong:function(t,e,n){var r=e+" Iterator",o=g(e),i=g(r);a(t,e,function(t,e){m(this,{type:r,target:t,state:o(t),kind:e,last:void 0});},function(){for(var t=i(this),e=t.kind,n=t.last;n&&n.removed;)n=n.previous;return t.target&&(t.last=n=n?n.next:t.state.first)?"keys"==e?{value:n.key,done:!1}:"values"==e?{value:n.value,done:!1}:{value:[n.key,n.value],done:!1}:{value:t.target=void 0,done:!0}},n?"entries":"values",!n,!0),c(e);}};},function(t,e){var n=function(){return this}();try{n=n||new Function("return this")();}catch(t){"object"==typeof window&&(n=window);}t.exports=n;},function(t,e,n){var r=n(0),o=n(21),i=n(14),a=n(19),c=r.TypeError;t.exports=function(t,e){var n,r;if("string"===e&&i(n=t.toString)&&!a(r=o(n,t)))return r;if(i(n=t.valueOf)&&!a(r=o(n,t)))return r;if("string"!==e&&i(n=t.toString)&&!a(r=o(n,t)))return r;throw c("Can't convert object to primitive value")};},function(t,e,n){var r=n(0),o=n(14),n=n(100),r=r.WeakMap;t.exports=o(r)&&/native code/.test(n(r));},function(t,e,n){var r=n(0),o=n(14),i=r.String,a=r.TypeError;t.exports=function(t){if("object"==typeof t||o(t))return t;throw a("Can't set "+i(t)+" as a prototype")};},function(t,e,n){var r=n(105),o=n(83);t.exports=r?{}.toString:function(){return "[object "+o(this)+"]"};},function(t,e,n){var r=n(0),o=n(1),i=n(62),l=n(19),f=n(20),d=n(106),n=n(60),p=r.Function,h=o([].concat),v=o([].join),y={};t.exports=n?p.bind:function(a){var c=i(this),t=c.prototype,s=d(arguments,1),u=function(){var t=h(s,d(arguments));if(this instanceof u){var e=c,n=t.length,r=t;if(!f(y,n)){for(var o=[],i=0;i<n;i++)o[i]="a["+i+"]";y[n]=p("C,a","return new C("+v(o,",")+")");}return y[n](e,r)}return c.apply(a,t)};return l(t)&&(u.prototype=t),u};},function(t,e,n){n=n(43);t.exports=n("document","documentElement");},function(t,e,n){n=n(0);t.exports=n;},function(t,e,n){var r=n(0),o=n(86),i=n(85),a=n(19),c=n(12)("species"),s=r.Array;t.exports=function(t){var e;return o(t)&&(e=t.constructor,(i(e)&&(e===s||o(e.prototype))||a(e)&&null===(e=e[c]))&&(e=void 0)),void 0===e?s:e};},function(t,e,n){function o(){return this}var i=n(136).IteratorPrototype,a=n(50),c=n(61),s=n(87),u=n(68);t.exports=function(t,e,n,r){e+=" Iterator";return t.prototype=a(i,{next:c(+!r,n)}),s(t,e,!1,!0),u[e]=o,t};},function(t,e,n){var r=n(18),o=n(131),i=n(12)("species");t.exports=function(t,e){var t=r(t).constructor;return void 0===t||null==(t=r(t)[i])?e:o(t)};},function(t,e,n){var r=n(64).PROPER,o=n(2),i=n(93);t.exports=function(t){return o(function(){return !!i[t]()||"​᠎"!=="​᠎"[t]()||r&&i[t].name!==t})};},function(t,e,n){var r=n(0),o=n(2),i=n(1),a=n(23),c=n(92).trim,n=n(93),s=i("".charAt),u=r.parseFloat,i=r.Symbol,l=i&&i.iterator,r=1/u(n+"-0")!=-1/0||l&&!o(function(){u(Object(l));});t.exports=r?function(t){var t=c(a(t)),e=u(t);return 0===e&&"-"==s(t,0)?-0:e}:u;},function(t,e,n){n=n(1);t.exports=n(1..valueOf);},function(t,e,n){var r=n(56).forEach,n=n(118)("forEach");t.exports=n?[].forEach:function(t){return r(this,t,1<arguments.length?arguments[1]:void 0)};},function(t,e,n){var r=n(2),o=n(19),i=n(48),a=n(170),c=Object.isExtensible,n=r(function(){});t.exports=n||a?function(t){return !!o(t)&&((!a||"ArrayBuffer"!=i(t))&&(!c||c(t)))}:c;},function(t,e,n){n=n(2);t.exports=n(function(){var t;"function"==typeof ArrayBuffer&&(t=new ArrayBuffer(8),Object.isExtensible(t)&&Object.defineProperty(t,"a",{value:8}));});},function(t,e,n){n=n(2);t.exports=!n(function(){return Object.isExtensible(Object.preventExtensions({}))});},function(t,e,n){var o=n(37);t.exports=function(t,e,n){for(var r in e)o(t,r,e[r],n);return t};},function(t,e,n){var r=n(1),o=n(36),d=Math.floor,p=r("".charAt),h=r("".replace),v=r("".slice),y=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,m=/\$([$&'`]|\d{1,2})/g;t.exports=function(i,a,c,s,u,t){var l=c+i.length,f=s.length,e=m;return void 0!==u&&(u=o(u),e=y),h(t,e,function(t,e){var n;switch(p(e,0)){case"$":return "$";case"&":return i;case"`":return v(a,0,c);case"'":return v(a,l);case"<":n=u[v(e,1,-1)];break;default:var r,o=+e;if(0==o)return t;if(f<o)return 0!==(r=d(o/10))&&r<=f?void 0===s[r-1]?p(e,1):s[r-1]+p(e,1):t;n=s[o-1];}return void 0===n?"":n})};},function(t,e,n){var r=n(0),d=n(88),p=n(21),h=n(36),v=n(175),y=n(148),m=n(85),g=n(46),b=n(67),_=n(149),w=n(120),O=r.Array;t.exports=function(t){var e,n,r,o,i,a,c=h(t),t=m(this),s=arguments.length,u=1<s?arguments[1]:void 0,l=void 0!==u,s=(l&&(u=d(u,2<s?arguments[2]:void 0)),w(c)),f=0;if(!s||this==O&&y(s))for(e=g(c),n=t?new this(e):O(e);f<e;f++)a=l?u(c[f],f):c[f],b(n,f,a);else for(i=(o=_(c,s)).next,n=t?new this:[];!(r=p(i,o)).done;f++)a=l?v(o,u,[r.value,f],!0):r.value,b(n,f,a);return n.length=f,n};},function(t,e,n){var o=n(18),i=n(150);t.exports=function(e,t,n,r){try{return r?t(o(n)[0],n[1]):t(n)}catch(t){i(e,"throw",t);}};},function(t,e,n){var r=n(3),o=n(2),n=n(107).f;r({target:"Object",stat:!0,forced:o(function(){return !Object.getOwnPropertyNames(1)})},{getOwnPropertyNames:n});},function(t,e,n){n(145)("Map",function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},n(153));},function(t,e,n){var r=n(0),o=n(2),i=n(1),a=n(23),c=n(92).trim,n=n(93),s=r.parseInt,r=r.Symbol,u=r&&r.iterator,l=/^[+-]?0x/i,f=i(l.exec),r=8!==s(n+"08")||22!==s(n+"0x16")||u&&!o(function(){s(Object(u));});t.exports=r?function(t,e){t=c(a(t));return s(t,e>>>0||(f(l,t)?16:10))}:s;},function(t,e,n){var r=n(20);t.exports=function(t){return void 0!==t&&(r(t,"value")||r(t,"writable"))};},function(t,e,n){var r=n(3),o=n(1),c=n(62),s=n(36),u=n(46),l=n(23),i=n(2),f=n(181),a=n(118),d=n(182),p=n(183),h=n(74),v=n(184),y=[],m=o(y.sort),g=o(y.push),n=i(function(){y.sort(void 0);}),o=i(function(){y.sort(null);}),a=a("sort"),b=!i(function(){if(h)return h<70;if(!(d&&3<d)){if(p)return !0;if(v)return v<603;for(var t,e,n,r="",o=65;o<76;o++){switch(t=String.fromCharCode(o),o){case 66:case 69:case 70:case 72:e=3;break;case 68:case 71:e=4;break;default:e=2;}for(n=0;n<47;n++)y.push({k:t+n,v:e});}for(y.sort(function(t,e){return e.v-t.v}),n=0;n<y.length;n++)t=y[n].k.charAt(0),r.charAt(r.length-1)!==t&&(r+=t);return "DGBEFHACIJK"!==r}});r({target:"Array",proto:!0,forced:n||!o||!a||!b},{sort:function(t){void 0!==t&&c(t);var e=s(this);if(b)return void 0===t?m(e):m(e,t);for(var n,r,o=[],i=u(e),a=0;a<i;a++)a in e&&g(o,e[a]);for(f(o,(r=t,function(t,e){return void 0===e?-1:void 0===t?1:void 0!==r?+r(t,e)||0:l(t)>l(e)?1:-1})),n=o.length,a=0;a<n;)e[a]=o[a++];for(;a<i;)delete e[a++];return e}});},function(t,e,n){function g(t,e){var n=t.length,r=_(n/2);if(n<8){for(var o,i,a=t,c=e,s=a.length,u=1;u<s;){for(o=a[i=u];i&&0<c(a[i-1],o);)a[i]=a[--i];i!==u++&&(a[i]=o);}return a}for(var l=t,f=g(b(t,0,r),e),d=g(b(t,r),e),p=e,h=f.length,v=d.length,y=0,m=0;y<h||m<v;)l[y+m]=y<h&&m<v?p(f[y],d[m])<=0?f[y++]:d[m++]:y<h?f[y++]:d[m++];return l}var b=n(108),_=Math.floor;t.exports=g;},function(t,e,n){n=n(75).match(/firefox\/(\d+)/i);t.exports=!!n&&+n[1];},function(t,e,n){n=n(75);t.exports=/MSIE|Trident/.test(n);},function(t,e,n){n=n(75).match(/AppleWebKit\/(\d+)\./);t.exports=!!n&&+n[1];},function(t,e,n){var r=n(3),n=n(186);r({target:"Object",stat:!0,forced:Object.assign!==n},{assign:n});},function(t,e,n){var d=n(17),r=n(1),p=n(21),o=n(2),h=n(66),v=n(103),y=n(70),m=n(36),g=n(71),i=Object.assign,a=Object.defineProperty,b=r([].concat);t.exports=!i||o(function(){if(d&&1!==i({b:1},i(a({},"a",{enumerable:!0,get:function(){a(this,"b",{value:3,enumerable:!1});}}),{b:2})).b)return !0;var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t;}),7!=i({},t)[n]||h(i({},e)).join("")!=r})?function(t,e){for(var n=m(t),r=arguments.length,o=1,i=v.f,a=y.f;o<r;)for(var c,s=g(arguments[o++]),u=i?b(h(s),i(s)):h(s),l=u.length,f=0;f<l;)c=u[f++],d&&!p(a,s,c)||(n[c]=s[c]);return n}:i;},function(t,e,n){var r=n(3),o=n(56).findIndex,n=n(89),i="findIndex",a=!0;i in[]&&Array(1)[i](function(){a=!1;}),r({target:"Array",proto:!0,forced:a},{findIndex:function(t){return o(this,t,1<arguments.length?arguments[1]:void 0)}}),n(i);},function(t,e,n){n(3)({target:"Number",stat:!0},{isNaN:function(t){return t!=t}});},function(t,e,n){var r=n(3),o=n(190).values;r({target:"Object",stat:!0},{values:function(t){return o(t)}});},function(t,e,n){function r(c){return function(t){for(var e,n=l(t),r=u(n),o=r.length,i=0,a=[];i<o;)e=r[i++],s&&!f(n,e)||d(a,c?[e,n[e]]:n[e]);return a}}var s=n(17),o=n(1),u=n(66),l=n(30),f=o(n(70).f),d=o([].push);t.exports={entries:r(!0),values:r(!1)};},function(t,e,n){var n=n(3),r=Math.ceil,o=Math.floor;n({target:"Math",stat:!0},{trunc:function(t){return (0<t?o:r)(t)}});},,function(N,R,t){t.r(R);var i={};t.r(i),t.d(i,"top",function(){return E}),t.d(i,"bottom",function(){return j}),t.d(i,"right",function(){return T}),t.d(i,"left",function(){return A}),t.d(i,"auto",function(){return Lt}),t.d(i,"basePlacements",function(){return Nt}),t.d(i,"start",function(){return Rt}),t.d(i,"end",function(){return Bt}),t.d(i,"clippingParents",function(){return Ht}),t.d(i,"viewport",function(){return Ft}),t.d(i,"popper",function(){return Vt}),t.d(i,"reference",function(){return Yt}),t.d(i,"variationPlacements",function(){return Wt}),t.d(i,"placements",function(){return zt}),t.d(i,"beforeRead",function(){return Ut}),t.d(i,"read",function(){return qt}),t.d(i,"afterRead",function(){return Kt}),t.d(i,"beforeMain",function(){return $t}),t.d(i,"main",function(){return Xt}),t.d(i,"afterMain",function(){return Gt}),t.d(i,"beforeWrite",function(){return Qt}),t.d(i,"write",function(){return Zt}),t.d(i,"afterWrite",function(){return Jt}),t.d(i,"modifierPhases",function(){return te}),t.d(i,"applyStyles",function(){return oe}),t.d(i,"arrow",function(){return Oe}),t.d(i,"computeStyles",function(){return xe}),t.d(i,"eventListeners",function(){return je}),t.d(i,"flip",function(){return Ye}),t.d(i,"hide",function(){return Ue}),t.d(i,"offset",function(){return qe}),t.d(i,"popperOffsets",function(){return Ke}),t.d(i,"preventOverflow",function(){return $e}),t.d(i,"popperGenerator",function(){return Je}),t.d(i,"detectOverflow",function(){return Ve}),t.d(i,"createPopperBase",function(){return tn}),t.d(i,"createPopper",function(){return en}),t.d(i,"createPopperLite",function(){return nn}),t(29),t(31),t(4),t(32),t(7),t(10),t(11),t(5),t(6),t(8),t(16),t(69),t(33),t(51),t(57),t(38),t(91),t(116),t(34),t(9),t(13),t(52),t(40),t(26);function B(t){return (B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function H(t){return (t=et(t))&&document.querySelector(t)?t:null}function F(t){return (t=et(t))?document.querySelector(t):null}function V(t){t.dispatchEvent(new Event(tt));}function Y(t){return nt(t)?t.jquery?t[0]:t:"string"==typeof t&&0<t.length?document.querySelector(t):null}function W(r,o,i){Object.keys(i).forEach(function(t){var e=i[t],n=o[t],n=n&&nt(n)?"element":null==(n=n)?"".concat(n):{}.toString.call(n).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(e).test(n))throw new TypeError("".concat(r.toUpperCase(),': Option "').concat(t,'" provided type "').concat(n,'" but expected type "').concat(e,'".'))});}function z(t){return !(!nt(t)||0===t.getClientRects().length)&&"visible"===getComputedStyle(t).getPropertyValue("visibility")}function U(t){return !t||t.nodeType!==Node.ELEMENT_NODE||(!!t.classList.contains("disabled")||(void 0!==t.disabled?t.disabled:t.hasAttribute("disabled")&&"false"!==t.getAttribute("disabled")))}function q(t){return document.documentElement.attachShadow?"function"==typeof t.getRootNode?(e=t.getRootNode())instanceof ShadowRoot?e:null:t instanceof ShadowRoot?t:t.parentNode?q(t.parentNode):null:null;var e;}function K(){}function $(t){t.offsetHeight;}function X(){var t=window.jQuery;return t&&!document.body.hasAttribute("data-bs-no-jquery")?t:null}function a(){return "rtl"===document.documentElement.dir}function e(r){var t;t=function(){var t,e,n=X();n&&(t=r.NAME,e=n.fn[t],n.fn[t]=r.jQueryInterface,n.fn[t].Constructor=r,n.fn[t].noConflict=function(){return n.fn[t]=e,r.jQueryInterface});},"loading"===document.readyState?(rt.length||document.addEventListener("DOMContentLoaded",function(){rt.forEach(function(t){return t()});}),rt.push(t)):t();}function G(t){"function"==typeof t&&t();}function Q(n,r){var t,o;2<arguments.length&&void 0!==arguments[2]&&!arguments[2]?G(n):(t=function(t){if(!t)return 0;var t=window.getComputedStyle(t),e=t.transitionDuration,t=t.transitionDelay,n=Number.parseFloat(e),r=Number.parseFloat(t);return n||r?(e=e.split(",")[0],t=t.split(",")[0],(Number.parseFloat(e)+Number.parseFloat(t))*J):0}(r)+5,o=!1,r.addEventListener(tt,function t(e){e.target===r&&(o=!0,r.removeEventListener(tt,t),G(n));}),setTimeout(function(){o||V(r);},t));}function Z(t,e,n,r){if(-1===(e=t.indexOf(e)))return t[!n&&r?t.length-1:0];var o=t.length;return e+=n?1:-1,r&&(e=(e+o)%o),t[Math.max(0,Math.min(e,o-1))]}var J=1e3,tt="transitionend",et=function(t){var e=t.getAttribute("data-bs-target");if(!e||"#"===e){t=t.getAttribute("href");if(!t||!t.includes("#")&&!t.startsWith("."))return null;e=(t=t.includes("#")&&!t.startsWith("#")?"#".concat(t.split("#")[1]):t)&&"#"!==t?t.trim():null;}return e},nt=function(t){return !(!t||"object"!==B(t))&&void 0!==(t=void 0!==t.jquery?t[0]:t).nodeType},rt=[];t(119),t(47),t(27),t(41),t(35);function ot(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(t);!(a=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(t){c=!0,o=t;}finally{try{a||null==n.return||n.return();}finally{if(c)throw o}}return i}}(t,e)||function(t,e){if(t){if("string"==typeof t)return it(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Map"===(n="Object"===n&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?it(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function it(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var at=/[^.]*(?=\..*)\.|.*/,ct=/\..*/,st=/::\d+$/,ut={},lt=1,ft={mouseenter:"mouseover",mouseleave:"mouseout"},dt=/^(mouseenter|mouseleave)/i,pt=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function ht(t,e){return e&&"".concat(e,"::").concat(lt++)||t.uidEvent||lt++}function vt(t){var e=ht(t);return t.uidEvent=e,ut[e]=ut[e]||{},ut[e]}function yt(t,e,n){for(var r=2<arguments.length&&void 0!==n?n:null,o=Object.keys(t),i=0,a=o.length;i<a;i++){var c=t[o[i]];if(c.originalHandler===e&&c.delegationSelector===r)return c}return null}function mt(t,e,n){var r="string"==typeof e,n=r?n:e,e=_t(t);return [r,n,e=pt.has(e)?e:t]}function gt(t,e,n,r,o){var i,a,c,s,u,l,f,d,p,h;"string"==typeof e&&t&&(n||(n=r,r=null),dt.test(e)&&(c=function(e){return function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)}},r?r=c(r):n=c(n)),i=(c=ot(mt(e,n,r),3))[0],a=c[1],c=c[2],(u=yt(s=(s=vt(t))[c]||(s[c]={}),a,i?n:null))?u.oneOff=u.oneOff&&o:(u=ht(a,e.replace(at,"")),(e=i?(d=t,p=n,h=r,function t(e){for(var n=d.querySelectorAll(p),r=e.target;r&&r!==this;r=r.parentNode)for(var o=n.length;o--;)if(n[o]===r)return e.delegateTarget=r,t.oneOff&&wt.off(d,e.type,p,h),h.apply(r,[e]);return null}):(l=t,f=n,function t(e){return e.delegateTarget=l,t.oneOff&&wt.off(l,e.type,f),f.apply(l,[e])})).delegationSelector=i?n:null,e.originalHandler=a,e.oneOff=o,s[e.uidEvent=u]=e,t.addEventListener(c,e,i)));}function bt(t,e,n,r,o){r=yt(e[n],r,o);r&&(t.removeEventListener(n,r,Boolean(o)),delete e[n][r.uidEvent]);}function _t(t){return t=t.replace(ct,""),ft[t]||t}var wt={on:function(t,e,n,r){gt(t,e,n,r,!1);},one:function(t,e,n,r){gt(t,e,n,r,!0);},off:function(a,c,t,e){if("string"==typeof c&&a){var e=ot(mt(c,t,e),3),n=e[0],r=e[1],o=e[2],i=o!==c,s=vt(a),e=c.startsWith(".");if(void 0!==r)return s&&s[o]?void bt(a,s,o,r,n?t:null):void 0;e&&Object.keys(s).forEach(function(t){var e,n,r,o,i;e=a,n=s,r=t,o=c.slice(1),i=n[r]||{},Object.keys(i).forEach(function(t){t.includes(o)&&(t=i[t],bt(e,n,r,t.originalHandler,t.delegationSelector));});});var u=s[o]||{};Object.keys(u).forEach(function(t){var e=t.replace(st,"");i&&!c.includes(e)||(e=u[t],bt(a,s,o,e.originalHandler,e.delegationSelector));});}},trigger:function(t,e,n){if("string"!=typeof e||!t)return null;var r,o=X(),i=_t(e),a=e!==i,c=pt.has(i),s=!0,u=!0,l=!1,f=null;return a&&o&&(r=o.Event(e,n),o(t).trigger(r),s=!r.isPropagationStopped(),u=!r.isImmediatePropagationStopped(),l=r.isDefaultPrevented()),c?(f=document.createEvent("HTMLEvents")).initEvent(i,s,!0):f=new CustomEvent(e,{bubbles:s,cancelable:!0}),void 0!==n&&Object.keys(n).forEach(function(t){Object.defineProperty(f,t,{get:function(){return n[t]}});}),l&&f.preventDefault(),u&&t.dispatchEvent(f),f.defaultPrevented&&void 0!==r&&r.preventDefault(),f}},d=wt,Ot=(t(176),t(177),new Map),kt=function(t,e,n){Ot.has(t)||Ot.set(t,new Map);t=Ot.get(t);t.has(e)||0===t.size?t.set(e,n):console.error("Bootstrap doesn't allow more than one instance per element. Bound instance: ".concat(Array.from(t.keys())[0],"."));},Ct=function(t,e){return Ot.has(t)&&Ot.get(t).get(e)||null},St=function(t,e){var n;Ot.has(t)&&((n=Ot.get(t)).delete(e),0===n.size&&Ot.delete(t));};function xt(t){return (xt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Et(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}var c=function(){function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");(t=Y(t))&&(this._element=t,kt(this._element,this.constructor.DATA_KEY,this));}var t,n,r;return t=e,r=[{key:"getInstance",value:function(t){return Ct(Y(t),this.DATA_KEY)}},{key:"getOrCreateInstance",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return this.getInstance(t)||new this(t,"object"===xt(e)?e:null)}},{key:"VERSION",get:function(){return "5.1.3"}},{key:"NAME",get:function(){throw new Error('You have to implement the static method "NAME", for each component!')}},{key:"DATA_KEY",get:function(){return "bs.".concat(this.NAME)}},{key:"EVENT_KEY",get:function(){return ".".concat(this.DATA_KEY)}}],(n=[{key:"dispose",value:function(){var e=this;St(this._element,this.constructor.DATA_KEY),d.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach(function(t){e[t]=null;});}},{key:"_queueCallback",value:function(t,e){Q(t,e,!(2<arguments.length&&void 0!==arguments[2])||arguments[2]);}}])&&Et(t.prototype,n),r&&Et(t,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function jt(t){return (jt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Tt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function At(t,e){return (At=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Dt(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=Pt(n),e=(t=r?(t=Pt(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===jt(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function Pt(t){return (Pt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var R=".".concat("bs.button"),Mt='[data-bs-toggle="button"]',R="click".concat(R).concat(".data-api"),It=function(){var t=o,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&At(t,e);var n,r=Dt(o);function o(){var t=this,e=o;if(t instanceof e)return r.apply(this,arguments);throw new TypeError("Cannot call a class as a function")}return t=o,e=[{key:"NAME",get:function(){return "button"}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t=o.getOrCreateInstance(this);"toggle"===e&&t[e]();})}}],(n=[{key:"toggle",value:function(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"));}}])&&Tt(t.prototype,n),e&&Tt(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),R=(d.on(document,R,Mt,function(t){t.preventDefault();t=t.target.closest(Mt);It.getOrCreateInstance(t).toggle();}),e(It),It),E=(t(28),t(58),t(121),t(15),t(59),t(24),t(25),"top"),j="bottom",T="right",A="left",Lt="auto",Nt=[E,j,T,A],Rt="start",Bt="end",Ht="clippingParents",Ft="viewport",Vt="popper",Yt="reference",Wt=Nt.reduce(function(t,e){return t.concat([e+"-"+Rt,e+"-"+Bt])},[]),zt=[].concat(Nt,[Lt]).reduce(function(t,e){return t.concat([e,e+"-"+Rt,e+"-"+Bt])},[]),Ut="beforeRead",qt="read",Kt="afterRead",$t="beforeMain",Xt="main",Gt="afterMain",Qt="beforeWrite",Zt="write",Jt="afterWrite",te=[Ut,qt,Kt,$t,Xt,Gt,Qt,Zt,Jt];function ee(t){return t?(t.nodeName||"").toLowerCase():null}function b(t){return null==t?window:"[object Window]"!==t.toString()?(e=t.ownerDocument)&&e.defaultView||window:t;var e;}function ne(t){return t instanceof b(t).Element||t instanceof Element}function s(t){return t instanceof b(t).HTMLElement||t instanceof HTMLElement}function re(t){if("undefined"!=typeof ShadowRoot)return t instanceof b(t).ShadowRoot||t instanceof ShadowRoot}var oe={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var o=t.state;Object.keys(o.elements).forEach(function(t){var e=o.styles[t]||{},n=o.attributes[t]||{},r=o.elements[t];s(r)&&ee(r)&&(Object.assign(r.style,e),Object.keys(n).forEach(function(t){var e=n[t];!1===e?r.removeAttribute(t):r.setAttribute(t,!0===e?"":e);}));});},effect:function(t){var r=t.state,o={popper:{position:r.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(r.elements.popper.style,o.popper),r.styles=o,r.elements.arrow&&Object.assign(r.elements.arrow.style,o.arrow),function(){Object.keys(r.elements).forEach(function(t){var e=r.elements[t],n=r.attributes[t]||{},t=Object.keys((r.styles.hasOwnProperty(t)?r.styles:o)[t]).reduce(function(t,e){return t[e]="",t},{});s(e)&&ee(e)&&(Object.assign(e.style,t),Object.keys(n).forEach(function(t){e.removeAttribute(t);}));});}},requires:["computeStyles"]};function ie(t){return t.split("-")[0]}var ae=Math.max,ce=Math.min,se=Math.round;function ue(t,e){void 0===e&&(e=!1);var n=t.getBoundingClientRect(),r=1,o=1;return s(t)&&e&&(e=t.offsetHeight,0<(t=t.offsetWidth)&&(r=se(n.width)/t||1),0<e&&(o=se(n.height)/e||1)),{width:n.width/r,height:n.height/o,top:n.top/o,right:n.right/r,bottom:n.bottom/o,left:n.left/r,x:n.left/r,y:n.top/o}}function le(t){var e=ue(t),n=t.offsetWidth,r=t.offsetHeight;return Math.abs(e.width-n)<=1&&(n=e.width),Math.abs(e.height-r)<=1&&(r=e.height),{x:t.offsetLeft,y:t.offsetTop,width:n,height:r}}function fe(t,e){var n=e.getRootNode&&e.getRootNode();if(t.contains(e))return !0;if(n&&re(n)){var r=e;do{if(r&&t.isSameNode(r))return !0}while(r=r.parentNode||r.host)}return !1}function de(t){return b(t).getComputedStyle(t)}function pe(t){return ((ne(t)?t.ownerDocument:t.document)||window.document).documentElement}function he(t){return "html"===ee(t)?t:t.assignedSlot||t.parentNode||(re(t)?t.host:null)||pe(t)}function ve(t){return s(t)&&"fixed"!==de(t).position?t.offsetParent:null}function ye(t){for(var e,n=b(t),r=ve(t);r&&(e=r,0<=["table","td","th"].indexOf(ee(e)))&&"static"===de(r).position;)r=ve(r);return (!r||"html"!==ee(r)&&("body"!==ee(r)||"static"!==de(r).position))&&(r||function(t){var e=-1!==navigator.userAgent.toLowerCase().indexOf("firefox"),n=-1!==navigator.userAgent.indexOf("Trident");if(n&&s(t)&&"fixed"===de(t).position)return null;var r=he(t);for(re(r)&&(r=r.host);s(r)&&["html","body"].indexOf(ee(r))<0;){var o=de(r);if("none"!==o.transform||"none"!==o.perspective||"paint"===o.contain||-1!==["transform","perspective"].indexOf(o.willChange)||e&&"filter"===o.willChange||e&&o.filter&&"none"!==o.filter)return r;r=r.parentNode;}return null}(t))||n}function me(t){return 0<=["top","bottom"].indexOf(t)?"x":"y"}function ge(t,e,n){return ae(t,ce(e,n))}function be(){return {top:0,right:0,bottom:0,left:0}}function _e(t){return Object.assign({},be(),t)}function we(n,t){return t.reduce(function(t,e){return t[e]=n,t},{})}var Oe={name:"arrow",enabled:!0,phase:"main",fn:function(t){var e,n,r,o,i=t.state,a=t.name,t=t.options,c=i.elements.arrow,s=i.modifiersData.popperOffsets,u=me(l=ie(i.placement)),l=0<=[A,T].indexOf(l)?"height":"width";c&&s&&(t=t.padding,n=i,n=_e("number"!=typeof(t="function"==typeof t?t(Object.assign({},n.rects,{placement:n.placement})):t)?t:we(t,Nt)),t=le(c),o="y"===u?E:A,r="y"===u?j:T,e=i.rects.reference[l]+i.rects.reference[u]-s[u]-i.rects.popper[l],s=s[u]-i.rects.reference[u],c=(c=ye(c))?"y"===u?c.clientHeight||0:c.clientWidth||0:0,o=n[o],n=c-t[l]-n[r],o=ge(o,r=c/2-t[l]/2+(e/2-s/2),n),i.modifiersData[a]=((c={})[u]=o,c.centerOffset=o-r,c));},effect:function(t){var e=t.state;null!=(t=void 0===(t=t.options.element)?"[data-popper-arrow]":t)&&("string"!=typeof t||(t=e.elements.popper.querySelector(t)))&&fe(e.elements.popper,t)&&(e.elements.arrow=t);},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function ke(t){return t.split("-")[1]}var Ce={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Se(t){var e,n,r,o=t.popper,i=t.popperRect,a=t.placement,c=t.variation,s=t.offsets,u=t.position,l=t.gpuAcceleration,f=t.adaptive,d=t.roundOffsets,t=t.isFixed,p=s.x,p=void 0===p?0:p,h=s.y,h=void 0===h?0:h,v="function"==typeof d?d({x:p,y:h}):{x:p,y:h},v=(p=v.x,h=v.y,s.hasOwnProperty("x")),s=s.hasOwnProperty("y"),y=A,m=E,g=window,o=(f&&(n="clientHeight",e="clientWidth",(r=ye(o))===b(o)&&"static"!==de(r=pe(o)).position&&"absolute"===u&&(n="scrollHeight",e="scrollWidth"),a!==E&&(a!==A&&a!==T||c!==Bt)||(m=j,h=(h-((t&&r===g&&g.visualViewport?g.visualViewport.height:r[n])-i.height))*(l?1:-1)),a!==A&&(a!==E&&a!==j||c!==Bt)||(y=T,p=(p-((t&&r===g&&g.visualViewport?g.visualViewport.width:r[e])-i.width))*(l?1:-1))),Object.assign({position:u},f&&Ce)),t=!0===d?(a=(n={x:p,y:h}).x,n=n.y,c=window.devicePixelRatio||1,{x:se(a*c)/c||0,y:se(n*c)/c||0}):{x:p,y:h};return p=t.x,h=t.y,l?Object.assign({},o,((r={})[m]=s?"0":"",r[y]=v?"0":"",r.transform=(g.devicePixelRatio||1)<=1?"translate("+p+"px, "+h+"px)":"translate3d("+p+"px, "+h+"px, 0)",r)):Object.assign({},o,((e={})[m]=s?h+"px":"",e[y]=v?p+"px":"",e.transform="",e))}var xe={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,t=t.options,n=void 0===(n=t.gpuAcceleration)||n,r=void 0===(r=t.adaptive)||r,t=void 0===(t=t.roundOffsets)||t,n={placement:ie(e.placement),variation:ke(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:n,isFixed:"fixed"===e.options.strategy};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,Se(Object.assign({},n,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:r,roundOffsets:t})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,Se(Object.assign({},n,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:t})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement});},data:{}},Ee={passive:!0};var je={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,n=t.instance,r=(t=t.options).scroll,o=void 0===r||r,i=void 0===(r=t.resize)||r,a=b(e.elements.popper),c=[].concat(e.scrollParents.reference,e.scrollParents.popper);return o&&c.forEach(function(t){t.addEventListener("scroll",n.update,Ee);}),i&&a.addEventListener("resize",n.update,Ee),function(){o&&c.forEach(function(t){t.removeEventListener("scroll",n.update,Ee);}),i&&a.removeEventListener("resize",n.update,Ee);}},data:{}},Te={left:"right",right:"left",bottom:"top",top:"bottom"};function Ae(t){return t.replace(/left|right|bottom|top/g,function(t){return Te[t]})}var De={start:"end",end:"start"};function Pe(t){return t.replace(/start|end/g,function(t){return De[t]})}function Me(t){t=b(t);return {scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function Ie(t){return ue(pe(t)).left+Me(t).scrollLeft}function Le(t){var t=de(t),e=t.overflow,n=t.overflowX,t=t.overflowY;return /auto|scroll|overlay|hidden/.test(e+t+n)}function Ne(t,e){void 0===e&&(e=[]);var n=function t(e){return 0<=["html","body","#document"].indexOf(ee(e))?e.ownerDocument.body:s(e)&&Le(e)?e:t(he(e))}(t),t=n===(null==(t=t.ownerDocument)?void 0:t.body),r=b(n),r=t?[r].concat(r.visualViewport||[],Le(n)?n:[]):n,n=e.concat(r);return t?n:n.concat(Ne(he(r)))}function Re(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function Be(t,e){return e===Ft?Re((r=b(n=t),o=pe(n),r=r.visualViewport,i=o.clientWidth,o=o.clientHeight,c=a=0,r&&(i=r.width,o=r.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(a=r.offsetLeft,c=r.offsetTop)),{width:i,height:o,x:a+Ie(n),y:c})):ne(e)?((i=ue(r=e)).top=i.top+r.clientTop,i.left=i.left+r.clientLeft,i.bottom=i.top+r.clientHeight,i.right=i.left+r.clientWidth,i.width=r.clientWidth,i.height=r.clientHeight,i.x=i.left,i.y=i.top,i):Re((o=pe(t),a=pe(o),n=Me(o),c=null==(c=o.ownerDocument)?void 0:c.body,e=ae(a.scrollWidth,a.clientWidth,c?c.scrollWidth:0,c?c.clientWidth:0),t=ae(a.scrollHeight,a.clientHeight,c?c.scrollHeight:0,c?c.clientHeight:0),o=-n.scrollLeft+Ie(o),n=-n.scrollTop,"rtl"===de(c||a).direction&&(o+=ae(a.clientWidth,c?c.clientWidth:0)-e),{width:e,height:t,x:o,y:n}));var n,r,o,i,a,c;}function He(n,t,e){var r,o="clippingParents"===t?(i=Ne(he(o=n)),ne(r=0<=["absolute","fixed"].indexOf(de(o).position)&&s(o)?ye(o):o)?i.filter(function(t){return ne(t)&&fe(t,r)&&"body"!==ee(t)}):[]):[].concat(t),i=[].concat(o,[e]),t=i[0],e=i.reduce(function(t,e){e=Be(n,e);return t.top=ae(e.top,t.top),t.right=ce(e.right,t.right),t.bottom=ce(e.bottom,t.bottom),t.left=ae(e.left,t.left),t},Be(n,t));return e.width=e.right-e.left,e.height=e.bottom-e.top,e.x=e.left,e.y=e.top,e}function Fe(t){var e,n=t.reference,r=t.element,t=t.placement,o=t?ie(t):null,t=t?ke(t):null,i=n.x+n.width/2-r.width/2,a=n.y+n.height/2-r.height/2;switch(o){case E:e={x:i,y:n.y-r.height};break;case j:e={x:i,y:n.y+n.height};break;case T:e={x:n.x+n.width,y:a};break;case A:e={x:n.x-r.width,y:a};break;default:e={x:n.x,y:n.y};}var c=o?me(o):null;if(null!=c){var s="y"===c?"height":"width";switch(t){case Rt:e[c]=e[c]-(n[s]/2-r[s]/2);break;case Bt:e[c]=e[c]+(n[s]/2-r[s]/2);}}return e}function Ve(t,e){var r,e=e=void 0===e?{}:e,n=e.placement,n=void 0===n?t.placement:n,o=e.boundary,o=void 0===o?Ht:o,i=e.rootBoundary,i=void 0===i?Ft:i,a=e.elementContext,a=void 0===a?Vt:a,c=e.altBoundary,c=void 0!==c&&c,e=e.padding,e=void 0===e?0:e,e=_e("number"!=typeof e?e:we(e,Nt)),s=t.rects.popper,c=t.elements[c?a===Vt?Yt:Vt:a],c=He(ne(c)?c:c.contextElement||pe(t.elements.popper),o,i),o=ue(t.elements.reference),i=Fe({reference:o,element:s,strategy:"absolute",placement:n}),s=Re(Object.assign({},s,i)),i=a===Vt?s:o,u={top:c.top-i.top+e.top,bottom:i.bottom-c.bottom+e.bottom,left:c.left-i.left+e.left,right:i.right-c.right+e.right},s=t.modifiersData.offset;return a===Vt&&s&&(r=s[n],Object.keys(u).forEach(function(t){var e=0<=[T,j].indexOf(t)?1:-1,n=0<=[E,j].indexOf(t)?"y":"x";u[t]+=r[n]*e;})),u}var Ye={name:"flip",enabled:!0,phase:"main",fn:function(t){var f=t.state,e=t.options,t=t.name;if(!f.modifiersData[t]._skip){for(var n=e.mainAxis,r=void 0===n||n,n=e.altAxis,o=void 0===n||n,n=e.fallbackPlacements,d=e.padding,p=e.boundary,h=e.rootBoundary,i=e.altBoundary,a=e.flipVariations,v=void 0===a||a,y=e.allowedAutoPlacements,a=f.options.placement,e=ie(a),n=n||(e===a||!v?[Ae(a)]:function(t){if(ie(t)===Lt)return [];var e=Ae(t);return [Pe(t),e,Pe(e)]}(a)),c=[a].concat(n).reduce(function(t,e){return t.concat(ie(e)===Lt?(n=f,r=(t=t=void 0===(t={placement:e,boundary:p,rootBoundary:h,padding:d,flipVariations:v,allowedAutoPlacements:y})?{}:t).placement,o=t.boundary,i=t.rootBoundary,a=t.padding,c=t.flipVariations,s=void 0===(t=t.allowedAutoPlacements)?zt:t,u=ke(r),t=u?c?Wt:Wt.filter(function(t){return ke(t)===u}):Nt,l=(r=0===(r=t.filter(function(t){return 0<=s.indexOf(t)})).length?t:r).reduce(function(t,e){return t[e]=Ve(n,{placement:e,boundary:o,rootBoundary:i,padding:a})[ie(e)],t},{}),Object.keys(l).sort(function(t,e){return l[t]-l[e]})):e);var n,r,o,i,a,c,s,u,l;},[]),s=f.rects.reference,u=f.rects.popper,l=new Map,m=!0,g=c[0],b=0;b<c.length;b++){var _=c[b],w=ie(_),O=ke(_)===Rt,k=0<=[E,j].indexOf(w),C=k?"width":"height",S=Ve(f,{placement:_,boundary:p,rootBoundary:h,altBoundary:i,padding:d}),k=k?O?T:A:O?j:E,O=(s[C]>u[C]&&(k=Ae(k)),Ae(k)),C=[];if(r&&C.push(S[w]<=0),o&&C.push(S[k]<=0,S[O]<=0),C.every(function(t){return t})){g=_,m=!1;break}l.set(_,C);}if(m)for(var x=v?3:1;0<x;x--)if("break"===function(e){var t=c.find(function(t){t=l.get(t);if(t)return t.slice(0,e).every(function(t){return t})});if(t)return g=t,"break"}(x))break;f.placement!==g&&(f.modifiersData[t]._skip=!0,f.placement=g,f.reset=!0);}},requiresIfExists:["offset"],data:{_skip:!1}};function We(t,e,n){return {top:t.top-e.height-(n=void 0===n?{x:0,y:0}:n).y,right:t.right-e.width+n.x,bottom:t.bottom-e.height+n.y,left:t.left-e.width-n.x}}function ze(e){return [E,T,j,A].some(function(t){return 0<=e[t]})}var Ue={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,t=t.name,n=e.rects.reference,r=e.rects.popper,o=e.modifiersData.preventOverflow,i=Ve(e,{elementContext:"reference"}),a=Ve(e,{altBoundary:!0}),i=We(i,n),n=We(a,r,o),a=ze(i),r=ze(n);e.modifiersData[t]={referenceClippingOffsets:i,popperEscapeOffsets:n,isReferenceHidden:a,hasPopperEscaped:r},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":a,"data-popper-escaped":r});}};var qe={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var a=t.state,e=t.options,t=t.name,c=void 0===(e=e.offset)?[0,0]:e,e=zt.reduce(function(t,e){var n,r,o,i;return t[e]=(e=e,n=a.rects,r=c,o=ie(e),i=0<=[A,E].indexOf(o)?-1:1,e=(n="function"==typeof r?r(Object.assign({},n,{placement:e})):r)[0]||0,r=(n[1]||0)*i,0<=[A,T].indexOf(o)?{x:r,y:e}:{x:e,y:r}),t},{}),n=(r=e[a.placement]).x,r=r.y;null!=a.modifiersData.popperOffsets&&(a.modifiersData.popperOffsets.x+=n,a.modifiersData.popperOffsets.y+=r),a.modifiersData[t]=e;}};var Ke={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,t=t.name;e.modifiersData[t]=Fe({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement});},data:{}};var $e={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var e,n,r,o,i,a,c,s,u,l=t.state,f=t.options,t=t.name,d=void 0===(d=f.mainAxis)||d,p=void 0!==(p=f.altAxis)&&p,h=f.boundary,v=f.rootBoundary,y=f.altBoundary,m=f.padding,g=void 0===(g=f.tether)||g,f=void 0===(f=f.tetherOffset)?0:f,h=Ve(l,{boundary:h,rootBoundary:v,padding:m,altBoundary:y}),v=ie(l.placement),y=!(m=ke(l.placement)),b=me(v),_="x"===b?"y":"x",w=l.modifiersData.popperOffsets,O=l.rects.reference,k=l.rects.popper,f="number"==typeof(f="function"==typeof f?f(Object.assign({},l.rects,{placement:l.placement})):f)?{mainAxis:f,altAxis:f}:Object.assign({mainAxis:0,altAxis:0},f),C=l.modifiersData.offset?l.modifiersData.offset[l.placement]:null,S={x:0,y:0};w&&(d&&(d="y"===b?"height":"width",a=(c=w[b])+h[n="y"===b?E:A],s=c-h[u="y"===b?j:T],e=g?-k[d]/2:0,o=(m===Rt?O:k)[d],m=m===Rt?-k[d]:-O[d],i=l.elements.arrow,i=g&&i?le(i):{width:0,height:0},n=(r=l.modifiersData["arrow#persistent"]?l.modifiersData["arrow#persistent"].padding:be())[n],r=r[u],u=ge(0,O[d],i[d]),i=y?O[d]/2-e-u-n-f.mainAxis:o-u-n-f.mainAxis,o=y?-O[d]/2+e+u+r+f.mainAxis:m+u+r+f.mainAxis,y=(n=l.elements.arrow&&ye(l.elements.arrow))?"y"===b?n.clientTop||0:n.clientLeft||0:0,m=c+o-(e=null!=(d=null==C?void 0:C[b])?d:0),u=ge(g?ce(a,c+i-e-y):a,c,g?ae(s,m):s),w[b]=u,S[b]=u-c),p&&(r="y"==_?"height":"width",o=(n=w[_])+h["x"===b?E:A],d=n-h["x"===b?j:T],i=-1!==[E,A].indexOf(v),y=null!=(e=null==C?void 0:C[_])?e:0,a=i?o:n-O[r]-k[r]-y+f.altAxis,m=i?n+O[r]+k[r]-y-f.altAxis:d,c=g&&i?(s=ge(s=a,n,u=m),u<s?u:s):ge(g?a:o,n,g?m:d),w[_]=c,S[_]=c-n),l.modifiersData[t]=S);},requiresIfExists:["offset"]};function Xe(t,e,n){void 0===n&&(n=!1);var r=s(e),o=s(e)&&(a=(o=e).getBoundingClientRect(),i=se(a.width)/o.offsetWidth||1,a=se(a.height)/o.offsetHeight||1,1!==i||1!==a),i=pe(e),a=ue(t,o),t={scrollLeft:0,scrollTop:0},c={x:0,y:0};return !r&&n||("body"===ee(e)&&!Le(i)||(t=(r=e)!==b(r)&&s(r)?{scrollLeft:r.scrollLeft,scrollTop:r.scrollTop}:Me(r)),s(e)?((c=ue(e,!0)).x+=e.clientLeft,c.y+=e.clientTop):i&&(c.x=Ie(i))),{x:a.left+t.scrollLeft-c.x,y:a.top+t.scrollTop-c.y,width:a.width,height:a.height}}function Ge(t){var n=new Map,r=new Set,o=[];return t.forEach(function(t){n.set(t.name,t);}),t.forEach(function(t){r.has(t.name)||!function e(t){r.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach(function(t){r.has(t)||(t=n.get(t))&&e(t);}),o.push(t);}(t);}),o}var Qe={placement:"bottom",modifiers:[],strategy:"absolute"};function Ze(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return !e.some(function(t){return !(t&&"function"==typeof t.getBoundingClientRect)})}function Je(t){var t=t=void 0===t?{}:t,e=t.defaultModifiers,f=void 0===e?[]:e,e=t.defaultOptions,d=void 0===e?Qe:e;return function(r,o,e){void 0===e&&(e=d);var n,i,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},Qe,d),modifiersData:{},elements:{reference:r,popper:o},attributes:{},styles:{}},c=[],s=!1,u={state:a,setOptions:function(t){var n,e,t="function"==typeof t?t(a.options):t,t=(l(),a.options=Object.assign({},d,a.options,t),a.scrollParents={reference:ne(r)?Ne(r):r.contextElement?Ne(r.contextElement):[],popper:Ne(o)},t=[].concat(f,a.options.modifiers),e=t.reduce(function(t,e){var n=t[e.name];return t[e.name]=n?Object.assign({},n,e,{options:Object.assign({},n.options,e.options),data:Object.assign({},n.data,e.data)}):e,t},{}),t=Object.keys(e).map(function(t){return e[t]}),n=Ge(t),te.reduce(function(t,e){return t.concat(n.filter(function(t){return t.phase===e}))},[]));return a.orderedModifiers=t.filter(function(t){return t.enabled}),a.orderedModifiers.forEach(function(t){var e=t.name,n=t.options,t=t.effect;"function"==typeof t&&(t=t({state:a,name:e,instance:u,options:void 0===n?{}:n}),c.push(t||function(){}));}),u.update()},forceUpdate:function(){if(!s){var t=a.elements,e=t.reference,t=t.popper;if(Ze(e,t)){a.rects={reference:Xe(e,ye(t),"fixed"===a.options.strategy),popper:le(t)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach(function(t){return a.modifiersData[t.name]=Object.assign({},t.data)});for(var n,r,o,i=0;i<a.orderedModifiers.length;i++)!0===a.reset?(a.reset=!1,i=-1):(n=(o=a.orderedModifiers[i]).fn,r=o.options,o=o.name,"function"==typeof n&&(a=n({state:a,options:void 0===r?{}:r,name:o,instance:u})||a));}}},update:(n=function(){return new Promise(function(t){u.forceUpdate(),t(a);})},function(){return i=i||new Promise(function(t){Promise.resolve().then(function(){i=void 0,t(n());});})}),destroy:function(){l(),s=!0;}};return Ze(r,o)&&u.setOptions(e).then(function(t){!s&&e.onFirstUpdate&&e.onFirstUpdate(t);}),u;function l(){c.forEach(function(t){return t()}),c=[];}}}var tn=Je(),en=Je({defaultModifiers:[je,Ke,xe,oe,qe,Ye,$e,Oe,Ue]}),nn=Je({defaultModifiers:[je,Ke,xe,oe]});function rn(t){return "true"===t||"false"!==t&&(t===Number(t).toString()?Number(t):""===t||"null"===t?null:t)}function on(t){return t.replace(/[A-Z]/g,function(t){return "-".concat(t.toLowerCase())})}var f={setDataAttribute:function(t,e,n){t.setAttribute("data-bs-".concat(on(e)),n);},removeDataAttribute:function(t,e){t.removeAttribute("data-bs-".concat(on(e)));},getDataAttributes:function(n){if(!n)return {};var r={};return Object.keys(n.dataset).filter(function(t){return t.startsWith("bs")}).forEach(function(t){var e=(e=t.replace(/^bs/,"")).charAt(0).toLowerCase()+e.slice(1,e.length);r[e]=rn(n.dataset[t]);}),r},getDataAttribute:function(t,e){return rn(t.getAttribute("data-bs-".concat(on(e))))},offset:function(t){t=t.getBoundingClientRect();return {top:t.top+window.pageYOffset,left:t.left+window.pageXOffset}},position:function(t){return {top:t.offsetTop,left:t.offsetLeft}}};t(95);function an(t){return function(t){if(Array.isArray(t))return cn(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return cn(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Map"===(n="Object"===n&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?cn(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function cn(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var p={find:function(t){var e,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:document.documentElement;return (e=[]).concat.apply(e,an(Element.prototype.querySelectorAll.call(n,t)))},findOne:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:document.documentElement;return Element.prototype.querySelector.call(e,t)},children:function(t,e){var n;return (n=[]).concat.apply(n,an(t.children)).filter(function(t){return t.matches(e)})},parents:function(t,e){for(var n=[],r=t.parentNode;r&&r.nodeType===Node.ELEMENT_NODE&&3!==r.nodeType;)r.matches(e)&&n.push(r),r=r.parentNode;return n},prev:function(t,e){for(var n=t.previousElementSibling;n;){if(n.matches(e))return [n];n=n.previousElementSibling;}return []},next:function(t,e){for(var n=t.nextElementSibling;n;){if(n.matches(e))return [n];n=n.nextElementSibling;}return []},focusableChildren:function(t){var e=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map(function(t){return "".concat(t,':not([tabindex^="-"])')}).join(", ");return this.find(e,t).filter(function(t){return !U(t)&&z(t)})}};function sn(t){return (sn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function un(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function ln(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?un(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):un(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function fn(t){return function(t){if(Array.isArray(t))return dn(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return dn(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Map"===(n="Object"===n&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?dn(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function dn(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function pn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function hn(){return (hn="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=mn(t)););return t}(t,e);if(r)return r=Object.getOwnPropertyDescriptor(r,e),r.get?r.get.call(arguments.length<3?t:n):r.value}).apply(this,arguments)}function vn(t,e){return (vn=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function yn(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=mn(n),e=(t=r?(t=mn(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===sn(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function mn(t){return (mn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var gn="dropdown",n=".".concat("bs.dropdown"),bn=".data-api",_n="Escape",wn="ArrowUp",On="ArrowDown",kn=new RegExp("".concat(wn,"|").concat(On,"|").concat(_n)),Cn="hide".concat(n),Sn="hidden".concat(n),xn="show".concat(n),En="shown".concat(n),jn="click".concat(n).concat(bn),r="keydown".concat(n).concat(bn),n="keyup".concat(n).concat(bn),Tn="show",An='[data-bs-toggle="dropdown"]',Dn=".dropdown-menu",Pn=a()?"top-end":"top-start",Mn=a()?"top-start":"top-end",In=a()?"bottom-end":"bottom-start",Ln=a()?"bottom-start":"bottom-end",Nn=a()?"left-start":"right-start",Rn=a()?"right-start":"left-start",Bn={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},Hn={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"},Fn=function(){var t=s,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&vn(t,e);var n,r=yn(s);function s(t,e){if(this instanceof s)return (t=r.call(this,t))._popper=null,t._config=t._getConfig(e),t._menu=t._getMenuElement(),t._inNavbar=t._detectNavbar(),t;throw new TypeError("Cannot call a class as a function")}return t=s,e=[{key:"Default",get:function(){return Bn}},{key:"DefaultType",get:function(){return Hn}},{key:"NAME",get:function(){return gn}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t=s.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e]();}})}},{key:"clearMenus",value:function(t){if(!t||2!==t.button&&("keyup"!==t.type||"Tab"===t.key))for(var e=p.find(An),n=0,r=e.length;n<r;n++){var o=s.getInstance(e[n]);if(o&&!1!==o._config.autoClose&&o._isShown()){var i={relatedTarget:o._element};if(t){var a=t.composedPath(),c=a.includes(o._menu);if(a.includes(o._element)||"inside"===o._config.autoClose&&!c||"outside"===o._config.autoClose&&c)continue;if(o._menu.contains(t.target)&&("keyup"===t.type&&"Tab"===t.key||/input|select|option|textarea|form/i.test(t.target.tagName)))continue;"click"===t.type&&(i.clickEvent=t);}o._completeHide(i);}}}},{key:"getParentFromElement",value:function(t){return F(t)||t.parentNode}},{key:"dataApiKeydownHandler",value:function(t){if(/input|textarea/i.test(t.target.tagName)?!("Space"===t.key||t.key!==_n&&(t.key!==On&&t.key!==wn||t.target.closest(Dn))):kn.test(t.key)){var e=this.classList.contains(Tn);if((e||t.key!==_n)&&(t.preventDefault(),t.stopPropagation(),!U(this))){var n=this.matches(An)?this:p.prev(this,An)[0],n=s.getOrCreateInstance(n);if(t.key!==_n)return t.key===wn||t.key===On?(e||n.show(),void n._selectMenuItem(t)):void(e&&"Space"!==t.key||s.clearMenus());n.hide();}}}}],(n=[{key:"toggle",value:function(){return this._isShown()?this.hide():this.show()}},{key:"show",value:function(){var t,e;U(this._element)||this._isShown(this._menu)||(t={relatedTarget:this._element},d.trigger(this._element,xn,t).defaultPrevented||(e=s.getParentFromElement(this._element),this._inNavbar?f.setDataAttribute(this._menu,"popper","none"):this._createPopper(e),"ontouchstart"in document.documentElement&&!e.closest(".navbar-nav")&&(e=[]).concat.apply(e,fn(document.body.children)).forEach(function(t){return d.on(t,"mouseover",K)}),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(Tn),this._element.classList.add(Tn),d.trigger(this._element,En,t)));}},{key:"hide",value:function(){var t;!U(this._element)&&this._isShown(this._menu)&&(t={relatedTarget:this._element},this._completeHide(t));}},{key:"dispose",value:function(){this._popper&&this._popper.destroy(),hn(mn(s.prototype),"dispose",this).call(this);}},{key:"update",value:function(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update();}},{key:"_completeHide",value:function(t){var e;d.trigger(this._element,Cn,t).defaultPrevented||("ontouchstart"in document.documentElement&&(e=[]).concat.apply(e,fn(document.body.children)).forEach(function(t){return d.off(t,"mouseover",K)}),this._popper&&this._popper.destroy(),this._menu.classList.remove(Tn),this._element.classList.remove(Tn),this._element.setAttribute("aria-expanded","false"),f.removeDataAttribute(this._menu,"popper"),d.trigger(this._element,Sn,t));}},{key:"_getConfig",value:function(t){if(t=ln(ln(ln({},this.constructor.Default),f.getDataAttributes(this._element)),t),W(gn,t,this.constructor.DefaultType),"object"!==sn(t.reference)||nt(t.reference)||"function"==typeof t.reference.getBoundingClientRect)return t;throw new TypeError("".concat(gn.toUpperCase(),': Option "reference" provided type "object" without a required "getBoundingClientRect" method.'))}},{key:"_createPopper",value:function(t){if(void 0===i)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");var e=this._element,t=("parent"===this._config.reference?e=t:nt(this._config.reference)?e=Y(this._config.reference):"object"===sn(this._config.reference)&&(e=this._config.reference),this._getPopperConfig()),n=t.modifiers.find(function(t){return "applyStyles"===t.name&&!1===t.enabled});this._popper=en(e,this._menu,t),n&&f.setDataAttribute(this._menu,"popper","static");}},{key:"_isShown",value:function(){return (0<arguments.length&&void 0!==arguments[0]?arguments[0]:this._element).classList.contains(Tn)}},{key:"_getMenuElement",value:function(){return p.next(this._element,Dn)[0]}},{key:"_getPlacement",value:function(){var t=this._element.parentNode;if(t.classList.contains("dropend"))return Nn;if(t.classList.contains("dropstart"))return Rn;var e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains("dropup")?e?Mn:Pn:e?Ln:In}},{key:"_detectNavbar",value:function(){return null!==this._element.closest(".".concat("navbar"))}},{key:"_getOffset",value:function(){var e=this,n=this._config.offset;return "string"==typeof n?n.split(",").map(function(t){return Number.parseInt(t,10)}):"function"==typeof n?function(t){return n(t,e._element)}:n}},{key:"_getPopperConfig",value:function(){var t={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return "static"===this._config.display&&(t.modifiers=[{name:"applyStyles",enabled:!1}]),ln(ln({},t),"function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig)}},{key:"_selectMenuItem",value:function(t){var e=t.key,t=t.target,n=p.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(z);n.length&&Z(n,t,e===On,!n.includes(t)).focus();}}])&&pn(t.prototype,n),e&&pn(t,e),Object.defineProperty(t,"prototype",{writable:!1}),s}(),bn=(d.on(document,r,An,Fn.dataApiKeydownHandler),d.on(document,r,Dn,Fn.dataApiKeydownHandler),d.on(document,jn,Fn.clearMenus),d.on(document,n,Fn.clearMenus),d.on(document,jn,An,function(t){t.preventDefault(),Fn.getOrCreateInstance(this).toggle();}),e(Fn),Fn);function Vn(t){return (Vn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Yn(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function Wn(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?Yn(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):Yn(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function zn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function Un(t,e){return (Un=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function qn(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=Kn(n),e=(t=r?(t=Kn(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===Vn(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function Kn(t){return (Kn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var $n="collapse",Xn="bs.collapse",r=".".concat(Xn),Gn={toggle:!0,parent:null},Qn={toggle:"boolean",parent:"(null|element)"},Zn="show".concat(r),Jn="shown".concat(r),tr="hide".concat(r),er="hidden".concat(r),n="click".concat(r).concat(".data-api"),nr="show",rr="collapse",or="collapsing",ir="collapsed",ar=":scope .".concat(rr," .").concat(rr),cr='[data-bs-toggle="collapse"]',sr=function(){var t=l,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Un(t,e);var n,u=qn(l);function l(t,e){var n;if(!(this instanceof l))throw new TypeError("Cannot call a class as a function");(n=u.call(this,t))._isTransitioning=!1,n._config=n._getConfig(e),n._triggerArray=[];for(var r=p.find(cr),o=0,i=r.length;o<i;o++){var a=r[o],c=H(a),s=p.find(c).filter(function(t){return t===n._element});null!==c&&s.length&&(n._selector=c,n._triggerArray.push(a));}return n._initializeChildren(),n._config.parent||n._addAriaAndCollapsedClass(n._triggerArray,n._isShown()),n._config.toggle&&n.toggle(),n}return t=l,e=[{key:"Default",get:function(){return Gn}},{key:"NAME",get:function(){return $n}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t={},t=("string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1),l.getOrCreateInstance(this,t));if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e]();}})}}],(n=[{key:"toggle",value:function(){this._isShown()?this.hide():this.show();}},{key:"show",value:function(){var t=this;if(!this._isTransitioning&&!this._isShown()){var e,n,r=[],o=(this._config.parent&&(e=p.find(ar,this._config.parent),r=p.find(".collapse.show, .collapse.collapsing",this._config.parent).filter(function(t){return !e.includes(t)})),p.findOne(this._selector));if(r.length){var i,a=r.find(function(t){return o!==t});if((i=a?l.getInstance(a):null)&&i._isTransitioning)return}d.trigger(this._element,Zn).defaultPrevented||(r.forEach(function(t){o!==t&&l.getOrCreateInstance(t,{toggle:!1}).hide(),i||kt(t,Xn,null);}),n=this._getDimension(),this._element.classList.remove(rr),this._element.classList.add(or),this._element.style[n]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0,a=n[0].toUpperCase()+n.slice(1),r="scroll".concat(a),this._queueCallback(function(){t._isTransitioning=!1,t._element.classList.remove(or),t._element.classList.add(rr,nr),t._element.style[n]="",d.trigger(t._element,Jn);},this._element,!0),this._element.style[n]="".concat(this._element[r],"px"));}}},{key:"hide",value:function(){var t=this;if(!this._isTransitioning&&this._isShown()){var e=d.trigger(this._element,tr);if(!e.defaultPrevented){for(var e=this._getDimension(),n=(this._element.style[e]="".concat(this._element.getBoundingClientRect()[e],"px"),$(this._element),this._element.classList.add(or),this._element.classList.remove(rr,nr),this._triggerArray.length),r=0;r<n;r++){var o=this._triggerArray[r],i=F(o);i&&!this._isShown(i)&&this._addAriaAndCollapsedClass([o],!1);}this._isTransitioning=!0;this._element.style[e]="",this._queueCallback(function(){t._isTransitioning=!1,t._element.classList.remove(or),t._element.classList.add(rr),d.trigger(t._element,er);},this._element,!0);}}}},{key:"_isShown",value:function(){return (0<arguments.length&&void 0!==arguments[0]?arguments[0]:this._element).classList.contains(nr)}},{key:"_getConfig",value:function(t){return (t=Wn(Wn(Wn({},Gn),f.getDataAttributes(this._element)),t)).toggle=Boolean(t.toggle),t.parent=Y(t.parent),W($n,t,Qn),t}},{key:"_getDimension",value:function(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}},{key:"_initializeChildren",value:function(){var e,n=this;this._config.parent&&(e=p.find(ar,this._config.parent),p.find(cr,this._config.parent).filter(function(t){return !e.includes(t)}).forEach(function(t){var e=F(t);e&&n._addAriaAndCollapsedClass([t],n._isShown(e));}));}},{key:"_addAriaAndCollapsedClass",value:function(t,e){t.length&&t.forEach(function(t){e?t.classList.remove(ir):t.classList.add(ir),t.setAttribute("aria-expanded",e);});}}])&&zn(t.prototype,n),e&&zn(t,e),Object.defineProperty(t,"prototype",{writable:!1}),l}(),jn=(d.on(document,n,cr,function(t){("A"===t.target.tagName||t.delegateTarget&&"A"===t.delegateTarget.tagName)&&t.preventDefault();t=H(this);p.find(t).forEach(function(t){sr.getOrCreateInstance(t,{toggle:!1}).toggle();});}),e(sr),sr);function ur(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}var lr=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",fr=".sticky-top",dr=function(){function t(){if(!(this instanceof t))throw new TypeError("Cannot call a class as a function");this._element=document.body;}var e,n;return e=t,(n=[{key:"getWidth",value:function(){var t=document.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}},{key:"hide",value:function(){var e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,"paddingRight",function(t){return t+e}),this._setElementAttributes(lr,"paddingRight",function(t){return t+e}),this._setElementAttributes(fr,"marginRight",function(t){return t-e});}},{key:"_disableOverFlow",value:function(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden";}},{key:"_setElementAttributes",value:function(t,n,r){var o=this,i=this.getWidth();this._applyManipulationCallback(t,function(t){var e;t!==o._element&&window.innerWidth>t.clientWidth+i||(o._saveInitialAttribute(t,n),e=window.getComputedStyle(t)[n],t.style[n]="".concat(r(Number.parseFloat(e)),"px"));});}},{key:"reset",value:function(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,"paddingRight"),this._resetElementAttributes(lr,"paddingRight"),this._resetElementAttributes(fr,"marginRight");}},{key:"_saveInitialAttribute",value:function(t,e){var n=t.style[e];n&&f.setDataAttribute(t,e,n);}},{key:"_resetElementAttributes",value:function(t,n){this._applyManipulationCallback(t,function(t){var e=f.getDataAttribute(t,n);void 0===e?t.style.removeProperty(n):(f.removeDataAttribute(t,n),t.style[n]=e);});}},{key:"_applyManipulationCallback",value:function(t,e){nt(t)?e(t):p.find(t,this._element).forEach(e);}},{key:"isOverflowing",value:function(){return 0<this.getWidth()}}])&&ur(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function pr(t){return (pr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function hr(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function vr(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?hr(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):hr(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function yr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}var mr={className:"modal-backdrop",isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},gr={className:"string",isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},br="backdrop",_r="mousedown.bs.".concat(br),wr=function(){function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this._config=this._getConfig(t),this._isAppended=!1,this._element=null;}var t,n;return t=e,(n=[{key:"show",value:function(t){this._config.isVisible?(this._append(),this._config.isAnimated&&$(this._getElement()),this._getElement().classList.add("show"),this._emulateAnimation(function(){G(t);})):G(t);}},{key:"hide",value:function(t){var e=this;this._config.isVisible?(this._getElement().classList.remove("show"),this._emulateAnimation(function(){e.dispose(),G(t);})):G(t);}},{key:"_getElement",value:function(){var t;return this._element||((t=document.createElement("div")).className=this._config.className,this._config.isAnimated&&t.classList.add("fade"),this._element=t),this._element}},{key:"_getConfig",value:function(t){return (t=vr(vr({},mr),"object"===pr(t)?t:{})).rootElement=Y(t.rootElement),W(br,t,gr),t}},{key:"_append",value:function(){var t=this;this._isAppended||(this._config.rootElement.append(this._getElement()),d.on(this._getElement(),_r,function(){G(t._config.clickCallback);}),this._isAppended=!0);}},{key:"dispose",value:function(){this._isAppended&&(d.off(this._element,_r),this._element.remove(),this._isAppended=!1);}},{key:"_emulateAnimation",value:function(t){Q(t,this._getElement(),this._config.isAnimated);}}])&&yr(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function Or(t){return (Or="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function kr(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function Cr(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?kr(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):kr(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function Sr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function xr(e){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"hide",t="click.dismiss".concat(e.EVENT_KEY),r=e.NAME;d.on(document,t,'[data-bs-dismiss="'.concat(r,'"]'),function(t){["A","AREA"].includes(this.tagName)&&t.preventDefault(),U(this)||(t=F(this)||this.closest(".".concat(r)),e.getOrCreateInstance(t)[n]());});}var Er={trapElement:null,autofocus:!0},jr={trapElement:"element",autofocus:"boolean"},Tr=".".concat("bs.focustrap"),Ar="focusin".concat(Tr),Dr="keydown.tab".concat(Tr),Pr="backward",Mr=function(){function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this._config=this._getConfig(t),this._isActive=!1,this._lastTabNavDirection=null;}var t,n;return t=e,(n=[{key:"activate",value:function(){var e=this,t=this._config,n=t.trapElement,t=t.autofocus;this._isActive||(t&&n.focus(),d.off(document,Tr),d.on(document,Ar,function(t){return e._handleFocusin(t)}),d.on(document,Dr,function(t){return e._handleKeydown(t)}),this._isActive=!0);}},{key:"deactivate",value:function(){this._isActive&&(this._isActive=!1,d.off(document,Tr));}},{key:"_handleFocusin",value:function(t){var t=t.target,e=this._config.trapElement;t===document||t===e||e.contains(t)||(0===(t=p.focusableChildren(e)).length?e:this._lastTabNavDirection===Pr?t[t.length-1]:t[0]).focus();}},{key:"_handleKeydown",value:function(t){"Tab"===t.key&&(this._lastTabNavDirection=t.shiftKey?Pr:"forward");}},{key:"_getConfig",value:function(t){return t=Cr(Cr({},Er),"object"===Or(t)?t:{}),W("focustrap",t,jr),t}}])&&Sr(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function Ir(t){return (Ir="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Lr(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function Nr(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?Lr(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):Lr(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function Rr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function Br(){return (Br="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Vr(t)););return t}(t,e);if(r)return r=Object.getOwnPropertyDescriptor(r,e),r.get?r.get.call(arguments.length<3?t:n):r.value}).apply(this,arguments)}function Hr(t,e){return (Hr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Fr(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=Vr(n),e=(t=r?(t=Vr(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===Ir(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function Vr(t){return (Vr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Yr="offcanvas",r=".".concat("bs.offcanvas"),n=".data-api",o="load".concat(r).concat(n),Wr={backdrop:!0,keyboard:!0,scroll:!1},zr={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},Ur=".offcanvas.show",qr="show".concat(r),Kr="shown".concat(r),$r="hide".concat(r),Xr="hidden".concat(r),n="click".concat(r).concat(n),Gr="keydown.dismiss".concat(r),Qr=function(){var t=o,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Hr(t,e);var n,r=Fr(o);function o(t,e){if(this instanceof o)return (t=r.call(this,t))._config=t._getConfig(e),t._isShown=!1,t._backdrop=t._initializeBackDrop(),t._focustrap=t._initializeFocusTrap(),t._addEventListeners(),t;throw new TypeError("Cannot call a class as a function")}return t=o,e=[{key:"NAME",get:function(){return Yr}},{key:"Default",get:function(){return Wr}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t=o.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError('No method named "'.concat(e,'"'));t[e](this);}})}}],(n=[{key:"toggle",value:function(t){return this._isShown?this.hide():this.show(t)}},{key:"show",value:function(t){var e=this;this._isShown||d.trigger(this._element,qr,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||(new dr).hide(),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add("show"),this._queueCallback(function(){e._config.scroll||e._focustrap.activate(),d.trigger(e._element,Kr,{relatedTarget:t});},this._element,!0));}},{key:"hide",value:function(){var t=this;this._isShown&&!d.trigger(this._element,$r).defaultPrevented&&(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.remove("show"),this._backdrop.hide(),this._queueCallback(function(){t._element.setAttribute("aria-hidden",!0),t._element.removeAttribute("aria-modal"),t._element.removeAttribute("role"),t._element.style.visibility="hidden",t._config.scroll||(new dr).reset(),d.trigger(t._element,Xr);},this._element,!0));}},{key:"dispose",value:function(){this._backdrop.dispose(),this._focustrap.deactivate(),Br(Vr(o.prototype),"dispose",this).call(this);}},{key:"_getConfig",value:function(t){return t=Nr(Nr(Nr({},Wr),f.getDataAttributes(this._element)),"object"===Ir(t)?t:{}),W(Yr,t,zr),t}},{key:"_initializeBackDrop",value:function(){var t=this;return new wr({className:"offcanvas-backdrop",isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:function(){return t.hide()}})}},{key:"_initializeFocusTrap",value:function(){return new Mr({trapElement:this._element})}},{key:"_addEventListeners",value:function(){var e=this;d.on(this._element,Gr,function(t){e._config.keyboard&&"Escape"===t.key&&e.hide();});}}])&&Rr(t.prototype,n),e&&Rr(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),r=(d.on(document,n,'[data-bs-toggle="offcanvas"]',function(t){var e=this,n=F(this);["A","AREA"].includes(this.tagName)&&t.preventDefault(),U(this)||(d.one(n,Xr,function(){z(e)&&e.focus();}),(t=p.findOne(Ur))&&t!==n&&Qr.getInstance(t).hide(),Qr.getOrCreateInstance(n).toggle(this));}),d.on(window,o,function(){return p.find(Ur).forEach(function(t){return Qr.getOrCreateInstance(t).show()})}),xr(Qr),e(Qr),Qr);function Zr(t){return (Zr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Jr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function to(t,e){return (to=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function eo(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=no(n),e=(t=r?(t=no(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===Zr(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function no(t){return (no=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var n=".".concat("bs.alert"),ro="close".concat(n),oo="closed".concat(n),o=function(){var t=o,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&to(t,e);var n,r=eo(o);function o(){var t=this,e=o;if(t instanceof e)return r.apply(this,arguments);throw new TypeError("Cannot call a class as a function")}return t=o,e=[{key:"NAME",get:function(){return "alert"}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t=o.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError('No method named "'.concat(e,'"'));t[e](this);}})}}],(n=[{key:"close",value:function(){var t,e=this;d.trigger(this._element,ro).defaultPrevented||(this._element.classList.remove("show"),t=this._element.classList.contains("fade"),this._queueCallback(function(){return e._destroyElement()},this._element,t));}},{key:"_destroyElement",value:function(){this._element.remove(),d.trigger(this._element,oo),this.dispose();}}])&&Jr(t.prototype,n),e&&Jr(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),n=(xr(o,"close"),e(o),o);function io(t){return (io="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ao(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function co(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ao(Object(n),!0).forEach(function(t){po(e,t,n[t]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ao(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));});}return e}function so(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function uo(t,e){return (uo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function lo(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=fo(n),e=(t=r?(t=fo(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===io(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function fo(t){return (fo=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function po(t,e,n){e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n;}var ho="carousel",o=".".concat("bs.carousel"),vo=".data-api",yo={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},mo={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},go="next",bo="prev",_o="left",wo="right",Oo=(po(Io={},"ArrowLeft",wo),po(Io,"ArrowRight",_o),Io),ko="slide".concat(o),Co="slid".concat(o),So="keydown".concat(o),xo="mouseenter".concat(o),Eo="mouseleave".concat(o),jo="touchstart".concat(o),To="touchmove".concat(o),Ao="touchend".concat(o),Do="pointerdown".concat(o),Po="pointerup".concat(o),Mo="dragstart".concat(o),Io="load".concat(o).concat(vo),o="click".concat(o).concat(vo),Lo="active",No=".active.carousel-item",Ro=function(){var t=o,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&uo(t,e);var n,r=lo(o);function o(t,e){if(this instanceof o)return (t=r.call(this,t))._items=null,t._interval=null,t._activeElement=null,t._isPaused=!1,t._isSliding=!1,t.touchTimeout=null,t.touchStartX=0,t.touchDeltaX=0,t._config=t._getConfig(e),t._indicatorsElement=p.findOne(".carousel-indicators",t._element),t._touchSupported="ontouchstart"in document.documentElement||0<navigator.maxTouchPoints,t._pointerEvent=Boolean(window.PointerEvent),t._addEventListeners(),t;throw new TypeError("Cannot call a class as a function")}return t=o,e=[{key:"Default",get:function(){return yo}},{key:"NAME",get:function(){return ho}},{key:"carouselInterface",value:function(t,e){var t=o.getOrCreateInstance(t,e),n=t._config,r=("object"===io(e)&&(n=co(co({},n),e)),"string"==typeof e?e:n.slide);if("number"==typeof e)t.to(e);else if("string"==typeof r){if(void 0===t[r])throw new TypeError('No method named "'.concat(r,'"'));t[r]();}else n.interval&&n.ride&&(t.pause(),t.cycle());}},{key:"jQueryInterface",value:function(t){return this.each(function(){o.carouselInterface(this,t);})}},{key:"dataApiClickHandler",value:function(t){var e,n,r=F(this);r&&r.classList.contains("carousel")&&(e=co(co({},f.getDataAttributes(r)),f.getDataAttributes(this)),(n=this.getAttribute("data-bs-slide-to"))&&(e.interval=!1),o.carouselInterface(r,e),n&&o.getInstance(r).to(n),t.preventDefault());}}],(n=[{key:"next",value:function(){this._slide(go);}},{key:"nextWhenVisible",value:function(){!document.hidden&&z(this._element)&&this.next();}},{key:"prev",value:function(){this._slide(bo);}},{key:"pause",value:function(t){t||(this._isPaused=!0),p.findOne(".carousel-item-next, .carousel-item-prev",this._element)&&(V(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null;}},{key:"cycle",value:function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval));}},{key:"to",value:function(t){var e=this,n=(this._activeElement=p.findOne(No,this._element),this._getItemIndex(this._activeElement));if(!(t>this._items.length-1||t<0))if(this._isSliding)d.one(this._element,Co,function(){return e.to(t)});else {if(n===t)return this.pause(),void this.cycle();this._slide(n<t?go:bo,this._items[t]);}}},{key:"_getConfig",value:function(t){return t=co(co(co({},yo),f.getDataAttributes(this._element)),"object"===io(t)?t:{}),W(ho,t,mo),t}},{key:"_handleSwipe",value:function(){var t=Math.abs(this.touchDeltaX);t<=40||(t=t/this.touchDeltaX,this.touchDeltaX=0,t&&this._slide(0<t?wo:_o));}},{key:"_addEventListeners",value:function(){var e=this;this._config.keyboard&&d.on(this._element,So,function(t){return e._keydown(t)}),"hover"===this._config.pause&&(d.on(this._element,xo,function(t){return e.pause(t)}),d.on(this._element,Eo,function(t){return e.cycle(t)})),this._config.touch&&this._touchSupported&&this._addTouchEventListeners();}},{key:"_addTouchEventListeners",value:function(){function t(t){r(t)?n.touchStartX=t.clientX:n._pointerEvent||(n.touchStartX=t.touches[0].clientX);}function e(t){r(t)&&(n.touchDeltaX=t.clientX-n.touchStartX),n._handleSwipe(),"hover"===n._config.pause&&(n.pause(),n.touchTimeout&&clearTimeout(n.touchTimeout),n.touchTimeout=setTimeout(function(t){return n.cycle(t)},500+n._config.interval));}var n=this,r=function(t){return n._pointerEvent&&("pen"===t.pointerType||"touch"===t.pointerType)};p.find(".carousel-item img",this._element).forEach(function(t){d.on(t,Mo,function(t){return t.preventDefault()});}),this._pointerEvent?(d.on(this._element,Do,t),d.on(this._element,Po,e),this._element.classList.add("pointer-event")):(d.on(this._element,jo,t),d.on(this._element,To,function(t){t=t,n.touchDeltaX=t.touches&&1<t.touches.length?0:t.touches[0].clientX-n.touchStartX;}),d.on(this._element,Ao,e));}},{key:"_keydown",value:function(t){var e;/input|textarea/i.test(t.target.tagName)||(e=Oo[t.key])&&(t.preventDefault(),this._slide(e));}},{key:"_getItemIndex",value:function(t){return this._items=t&&t.parentNode?p.find(".carousel-item",t.parentNode):[],this._items.indexOf(t)}},{key:"_getItemByOrder",value:function(t,e){return Z(this._items,e,t===go,this._config.wrap)}},{key:"_triggerSlideEvent",value:function(t,e){var n=this._getItemIndex(t),r=this._getItemIndex(p.findOne(No,this._element));return d.trigger(this._element,ko,{relatedTarget:t,direction:e,from:r,to:n})}},{key:"_setActiveIndicatorElement",value:function(t){if(this._indicatorsElement)for(var e=p.findOne(".active",this._indicatorsElement),n=(e.classList.remove(Lo),e.removeAttribute("aria-current"),p.find("[data-bs-target]",this._indicatorsElement)),r=0;r<n.length;r++)if(Number.parseInt(n[r].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(t)){n[r].classList.add(Lo),n[r].setAttribute("aria-current","true");break}}},{key:"_updateInterval",value:function(){var t=this._activeElement||p.findOne(No,this._element);t&&((t=Number.parseInt(t.getAttribute("data-bs-interval"),10))?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=t):this._config.interval=this._config.defaultInterval||this._config.interval);}},{key:"_slide",value:function(t,e){var n,r=this,t=this._directionToOrder(t),o=p.findOne(No,this._element),i=this._getItemIndex(o),a=e||this._getItemByOrder(t,o),c=this._getItemIndex(a),e=Boolean(this._interval),s=t===go,u=s?"carousel-item-start":"carousel-item-end",l=s?"carousel-item-next":"carousel-item-prev",f=this._orderToDirection(t);a&&a.classList.contains(Lo)?this._isSliding=!1:this._isSliding||this._triggerSlideEvent(a,f).defaultPrevented||o&&a&&(this._isSliding=!0,e&&this.pause(),this._setActiveIndicatorElement(a),this._activeElement=a,n=function(){d.trigger(r._element,Co,{relatedTarget:a,direction:f,from:i,to:c});},this._element.classList.contains("slide")?(a.classList.add(l),$(a),o.classList.add(u),a.classList.add(u),this._queueCallback(function(){a.classList.remove(u,l),a.classList.add(Lo),o.classList.remove(Lo,l,u),r._isSliding=!1,setTimeout(n,0);},o,!0)):(o.classList.remove(Lo),a.classList.add(Lo),this._isSliding=!1,n()),e&&this.cycle());}},{key:"_directionToOrder",value:function(t){return [wo,_o].includes(t)?a()?t===_o?bo:go:t===_o?go:bo:t}},{key:"_orderToDirection",value:function(t){return [go,bo].includes(t)?a()?t===bo?_o:wo:t===bo?wo:_o:t}}])&&so(t.prototype,n),e&&so(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),vo=(d.on(document,o,"[data-bs-slide], [data-bs-slide-to]",Ro.dataApiClickHandler),d.on(window,Io,function(){for(var t=p.find('[data-bs-ride="carousel"]'),e=0,n=t.length;e<n;e++)Ro.carouselInterface(t[e],Ro.getInstance(t[e]));}),e(Ro),Ro);function Bo(t){return (Bo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ho(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function Fo(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?Ho(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):Ho(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function Vo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function Yo(){return (Yo="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Uo(t)););return t}(t,e);if(r)return r=Object.getOwnPropertyDescriptor(r,e),r.get?r.get.call(arguments.length<3?t:n):r.value}).apply(this,arguments)}function Wo(t,e){return (Wo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function zo(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=Uo(n),e=(t=r?(t=Uo(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===Bo(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function Uo(t){return (Uo=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var u=".".concat("bs.modal"),qo={backdrop:!0,keyboard:!0,focus:!0},Ko={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},$o="hide".concat(u),Xo="hidePrevented".concat(u),Go="hidden".concat(u),Qo="show".concat(u),Zo="shown".concat(u),Jo="resize".concat(u),ti="click.dismiss".concat(u),ei="keydown.dismiss".concat(u),ni="mouseup.dismiss".concat(u),ri="mousedown.dismiss".concat(u),o="click".concat(u).concat(".data-api"),oi="modal-open",ii="modal-static",ai=function(){var t=o,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Wo(t,e);var n,r=zo(o);function o(t,e){if(this instanceof o)return (t=r.call(this,t))._config=t._getConfig(e),t._dialog=p.findOne(".modal-dialog",t._element),t._backdrop=t._initializeBackDrop(),t._focustrap=t._initializeFocusTrap(),t._isShown=!1,t._ignoreBackdropClick=!1,t._isTransitioning=!1,t._scrollBar=new dr,t;throw new TypeError("Cannot call a class as a function")}return t=o,e=[{key:"Default",get:function(){return qo}},{key:"NAME",get:function(){return "modal"}},{key:"jQueryInterface",value:function(e,n){return this.each(function(){var t=o.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e](n);}})}}],(n=[{key:"toggle",value:function(t){return this._isShown?this.hide():this.show(t)}},{key:"show",value:function(t){var e=this;this._isShown||this._isTransitioning||d.trigger(this._element,Qo,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._isAnimated()&&(this._isTransitioning=!0),this._scrollBar.hide(),document.body.classList.add(oi),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),d.on(this._dialog,ri,function(){d.one(e._element,ni,function(t){t.target===e._element&&(e._ignoreBackdropClick=!0);});}),this._showBackdrop(function(){return e._showElement(t)}));}},{key:"hide",value:function(){var t,e=this;!this._isShown||this._isTransitioning||d.trigger(this._element,$o).defaultPrevented||(this._isShown=!1,(t=this._isAnimated())&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),this._focustrap.deactivate(),this._element.classList.remove("show"),d.off(this._element,ti),d.off(this._dialog,ri),this._queueCallback(function(){return e._hideModal()},this._element,t));}},{key:"dispose",value:function(){[window,this._dialog].forEach(function(t){return d.off(t,u)}),this._backdrop.dispose(),this._focustrap.deactivate(),Yo(Uo(o.prototype),"dispose",this).call(this);}},{key:"handleUpdate",value:function(){this._adjustDialog();}},{key:"_initializeBackDrop",value:function(){return new wr({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}},{key:"_initializeFocusTrap",value:function(){return new Mr({trapElement:this._element})}},{key:"_getConfig",value:function(t){return t=Fo(Fo(Fo({},qo),f.getDataAttributes(this._element)),"object"===Bo(t)?t:{}),W("modal",t,Ko),t}},{key:"_showElement",value:function(t){var e=this,n=this._isAnimated(),r=p.findOne(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,r&&(r.scrollTop=0),n&&$(this._element),this._element.classList.add("show");this._queueCallback(function(){e._config.focus&&e._focustrap.activate(),e._isTransitioning=!1,d.trigger(e._element,Zo,{relatedTarget:t});},this._dialog,n);}},{key:"_setEscapeEvent",value:function(){var e=this;this._isShown?d.on(this._element,ei,function(t){e._config.keyboard&&"Escape"===t.key?(t.preventDefault(),e.hide()):e._config.keyboard||"Escape"!==t.key||e._triggerBackdropTransition();}):d.off(this._element,ei);}},{key:"_setResizeEvent",value:function(){var t=this;this._isShown?d.on(window,Jo,function(){return t._adjustDialog()}):d.off(window,Jo);}},{key:"_hideModal",value:function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide(function(){document.body.classList.remove(oi),t._resetAdjustments(),t._scrollBar.reset(),d.trigger(t._element,Go);});}},{key:"_showBackdrop",value:function(t){var e=this;d.on(this._element,ti,function(t){e._ignoreBackdropClick?e._ignoreBackdropClick=!1:t.target===t.currentTarget&&(!0===e._config.backdrop?e.hide():"static"===e._config.backdrop&&e._triggerBackdropTransition());}),this._backdrop.show(t);}},{key:"_isAnimated",value:function(){return this._element.classList.contains("fade")}},{key:"_triggerBackdropTransition",value:function(){var t,e,n,r,o,i=this;d.trigger(this._element,Xo).defaultPrevented||(t=this._element,e=t.classList,n=t.scrollHeight,r=t.style,!(o=n>document.documentElement.clientHeight)&&"hidden"===r.overflowY||e.contains(ii)||(o||(r.overflowY="hidden"),e.add(ii),this._queueCallback(function(){e.remove(ii),o||i._queueCallback(function(){r.overflowY="";},i._dialog);},this._dialog),this._element.focus()));}},{key:"_adjustDialog",value:function(){var t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._scrollBar.getWidth(),n=0<e;(!n&&t&&!a()||n&&!t&&a())&&(this._element.style.paddingLeft="".concat(e,"px")),(n&&!t&&!a()||!n&&t&&a())&&(this._element.style.paddingRight="".concat(e,"px"));}},{key:"_resetAdjustments",value:function(){this._element.style.paddingLeft="",this._element.style.paddingRight="";}}])&&Vo(t.prototype,n),e&&Vo(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),Io=(d.on(document,o,'[data-bs-toggle="modal"]',function(t){var e=this,n=F(this),t=(["A","AREA"].includes(this.tagName)&&t.preventDefault(),d.one(n,Qo,function(t){t.defaultPrevented||d.one(n,Go,function(){z(e)&&e.focus();});}),p.findOne(".modal.show"));t&&ai.getInstance(t).hide(),ai.getOrCreateInstance(n).toggle(this);}),xr(ai),e(ai),ai);function ci(t){return function(t){if(Array.isArray(t))return si(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return si(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Map"===(n="Object"===n&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?si(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function si(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var ui=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),li=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,fi=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,o={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]};function di(t,i,e){if(!t.length)return t;if(e&&"function"==typeof e)return e(t);for(var e=(new window.DOMParser).parseFromString(t,"text/html"),a=(t=[]).concat.apply(t,ci(e.body.querySelectorAll("*"))),n=function(t,e){var n=a[t],t=n.nodeName.toLowerCase();if(!Object.keys(i).includes(t))return n.remove(),"continue";var r=(r=[]).concat.apply(r,ci(n.attributes)),o=[].concat(i["*"]||[],i[t]||[]);r.forEach(function(t){!function(t,e){var n=t.nodeName.toLowerCase();if(e.includes(n))return !ui.has(n)||Boolean(li.test(t.nodeValue)||fi.test(t.nodeValue));for(var r=e.filter(function(t){return t instanceof RegExp}),o=0,i=r.length;o<i;o++)if(r[o].test(n))return !0;return !1}(t,o)&&n.removeAttribute(t.nodeName);});},r=0,o=a.length;r<o;r++)n(r);return e.body.innerHTML}function pi(t){return (pi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function hi(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function vi(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?hi(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):hi(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function yi(t){return function(t){if(Array.isArray(t))return mi(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return mi(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Map"===(n="Object"===n&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?mi(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function mi(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function gi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function bi(){return (bi="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Oi(t)););return t}(t,e);if(r)return r=Object.getOwnPropertyDescriptor(r,e),r.get?r.get.call(arguments.length<3?t:n):r.value}).apply(this,arguments)}function _i(t,e){return (_i=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function wi(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=Oi(n),e=(t=r?(t=Oi(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===pi(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function Oi(t){return (Oi=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var ki="tooltip",l=".".concat("bs.tooltip"),Ci=new Set(["sanitize","allowList","sanitizeFn"]),Si={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},xi={AUTO:"auto",TOP:"top",RIGHT:a()?"left":"right",BOTTOM:"bottom",LEFT:a()?"right":"left"},Ei={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:o,popperConfig:null},ji={HIDE:"hide".concat(l),HIDDEN:"hidden".concat(l),SHOW:"show".concat(l),SHOWN:"shown".concat(l),INSERTED:"inserted".concat(l),CLICK:"click".concat(l),FOCUSIN:"focusin".concat(l),FOCUSOUT:"focusout".concat(l),MOUSEENTER:"mouseenter".concat(l),MOUSELEAVE:"mouseleave".concat(l)},Ti="fade",Ai="show",Di="show",Pi=".tooltip-inner",Mi=".".concat("modal"),Ii="hide.bs.modal",Li="hover",Ni="focus",o=function(){var t=o,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&_i(t,e);var n,r=wi(o);function o(t,e){if(!(this instanceof o))throw new TypeError("Cannot call a class as a function");if(void 0===i)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");return (t=r.call(this,t))._isEnabled=!0,t._timeout=0,t._hoverState="",t._activeTrigger={},t._popper=null,t._config=t._getConfig(e),t.tip=null,t._setListeners(),t}return t=o,e=[{key:"Default",get:function(){return Ei}},{key:"NAME",get:function(){return ki}},{key:"Event",get:function(){return ji}},{key:"DefaultType",get:function(){return Si}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t=o.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e]();}})}}],(n=[{key:"enable",value:function(){this._isEnabled=!0;}},{key:"disable",value:function(){this._isEnabled=!1;}},{key:"toggleEnabled",value:function(){this._isEnabled=!this._isEnabled;}},{key:"toggle",value:function(t){this._isEnabled&&(t?((t=this._initializeOnDelegatedTarget(t))._activeTrigger.click=!t._activeTrigger.click,t._isWithActiveTrigger()?t._enter(null,t):t._leave(null,t)):this.getTipElement().classList.contains(Ai)?this._leave(null,this):this._enter(null,this));}},{key:"dispose",value:function(){clearTimeout(this._timeout),d.off(this._element.closest(Mi),Ii,this._hideModalHandler),this.tip&&this.tip.remove(),this._disposePopper(),bi(Oi(o.prototype),"dispose",this).call(this);}},{key:"show",value:function(){var t,e,n,r=this;if("none"===this._element.style.display)throw new Error("Please use show on visible elements");this.isWithContent()&&this._isEnabled&&(e=d.trigger(this._element,this.constructor.Event.SHOW),n=(null===(n=q(this._element))?this._element.ownerDocument.documentElement:n).contains(this._element),!e.defaultPrevented&&n&&("tooltip"===this.constructor.NAME&&this.tip&&this.getTitle()!==this.tip.querySelector(Pi).innerHTML&&(this._disposePopper(),this.tip.remove(),this.tip=null),e=this.getTipElement(),n=function(t){for(;t+=Math.floor(1e6*Math.random()),document.getElementById(t););return t}(this.constructor.NAME),e.setAttribute("id",n),this._element.setAttribute("aria-describedby",n),this._config.animation&&e.classList.add(Ti),n="function"==typeof this._config.placement?this._config.placement.call(this,e,this._element):this._config.placement,n=this._getAttachment(n),this._addAttachmentClass(n),t=this._config.container,kt(e,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(t.append(e),d.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=en(this._element,e,this._getPopperConfig(n)),e.classList.add(Ai),(t=this._resolvePossibleFunction(this._config.customClass))&&(n=e.classList).add.apply(n,yi(t.split(" "))),"ontouchstart"in document.documentElement&&(e=[]).concat.apply(e,yi(document.body.children)).forEach(function(t){d.on(t,"mouseover",K);}),n=this.tip.classList.contains(Ti),this._queueCallback(function(){var t=r._hoverState;r._hoverState=null,d.trigger(r._element,r.constructor.Event.SHOWN),"out"===t&&r._leave(null,r);},this.tip,n)));}},{key:"hide",value:function(){var t,e,n=this;this._popper&&(t=this.getTipElement(),d.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented||(t.classList.remove(Ai),"ontouchstart"in document.documentElement&&(e=[]).concat.apply(e,yi(document.body.children)).forEach(function(t){return d.off(t,"mouseover",K)}),this._activeTrigger.click=!1,this._activeTrigger[Ni]=!1,this._activeTrigger[Li]=!1,e=this.tip.classList.contains(Ti),this._queueCallback(function(){n._isWithActiveTrigger()||(n._hoverState!==Di&&t.remove(),n._cleanTipClass(),n._element.removeAttribute("aria-describedby"),d.trigger(n._element,n.constructor.Event.HIDDEN),n._disposePopper());},this.tip,e),this._hoverState=""));}},{key:"update",value:function(){null!==this._popper&&this._popper.update();}},{key:"isWithContent",value:function(){return Boolean(this.getTitle())}},{key:"getTipElement",value:function(){if(this.tip)return this.tip;var t=document.createElement("div"),t=(t.innerHTML=this._config.template,t.children[0]);return this.setContent(t),t.classList.remove(Ti,Ai),this.tip=t,this.tip}},{key:"setContent",value:function(t){this._sanitizeAndSetContent(t,this.getTitle(),Pi);}},{key:"_sanitizeAndSetContent",value:function(t,e,n){n=p.findOne(n,t);!e&&n?n.remove():this.setElementContent(n,e);}},{key:"setElementContent",value:function(t,e){if(null!==t)return nt(e)?(e=Y(e),void(this._config.html?e.parentNode!==t&&(t.innerHTML="",t.append(e)):t.textContent=e.textContent)):void(this._config.html?(this._config.sanitize&&(e=di(e,this._config.allowList,this._config.sanitizeFn)),t.innerHTML=e):t.textContent=e)}},{key:"getTitle",value:function(){var t=this._element.getAttribute("data-bs-original-title")||this._config.title;return this._resolvePossibleFunction(t)}},{key:"updateAttachment",value:function(t){return "right"===t?"end":"left"===t?"start":t}},{key:"_initializeOnDelegatedTarget",value:function(t,e){return e||this.constructor.getOrCreateInstance(t.delegateTarget,this._getDelegateConfig())}},{key:"_getOffset",value:function(){var e=this,n=this._config.offset;return "string"==typeof n?n.split(",").map(function(t){return Number.parseInt(t,10)}):"function"==typeof n?function(t){return n(t,e._element)}:n}},{key:"_resolvePossibleFunction",value:function(t){return "function"==typeof t?t.call(this._element):t}},{key:"_getPopperConfig",value:function(t){var e=this,t={placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:".".concat(this.constructor.NAME,"-arrow")}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:function(t){return e._handlePopperPlacementChange(t)}}],onFirstUpdate:function(t){t.options.placement!==t.placement&&e._handlePopperPlacementChange(t);}};return vi(vi({},t),"function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig)}},{key:"_addAttachmentClass",value:function(t){this.getTipElement().classList.add("".concat(this._getBasicClassPrefix(),"-").concat(this.updateAttachment(t)));}},{key:"_getAttachment",value:function(t){return xi[t.toUpperCase()]}},{key:"_setListeners",value:function(){var n=this;this._config.trigger.split(" ").forEach(function(t){var e;"click"===t?d.on(n._element,n.constructor.Event.CLICK,n._config.selector,function(t){return n.toggle(t)}):"manual"!==t&&(e=t===Li?n.constructor.Event.MOUSEENTER:n.constructor.Event.FOCUSIN,t=t===Li?n.constructor.Event.MOUSELEAVE:n.constructor.Event.FOCUSOUT,d.on(n._element,e,n._config.selector,function(t){return n._enter(t)}),d.on(n._element,t,n._config.selector,function(t){return n._leave(t)}));}),this._hideModalHandler=function(){n._element&&n.hide();},d.on(this._element.closest(Mi),Ii,this._hideModalHandler),this._config.selector?this._config=vi(vi({},this._config),{},{trigger:"manual",selector:""}):this._fixTitle();}},{key:"_fixTitle",value:function(){var t=this._element.getAttribute("title"),e=pi(this._element.getAttribute("data-bs-original-title"));!t&&"string"===e||(this._element.setAttribute("data-bs-original-title",t||""),!t||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",t),this._element.setAttribute("title",""));}},{key:"_enter",value:function(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusin"===t.type?Ni:Li]=!0),e.getTipElement().classList.contains(Ai)||e._hoverState===Di?e._hoverState=Di:(clearTimeout(e._timeout),e._hoverState=Di,e._config.delay&&e._config.delay.show?e._timeout=setTimeout(function(){e._hoverState===Di&&e.show();},e._config.delay.show):e.show());}},{key:"_leave",value:function(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusout"===t.type?Ni:Li]=e._element.contains(t.relatedTarget)),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState="out",e._config.delay&&e._config.delay.hide?e._timeout=setTimeout(function(){"out"===e._hoverState&&e.hide();},e._config.delay.hide):e.hide());}},{key:"_isWithActiveTrigger",value:function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return !0;return !1}},{key:"_getConfig",value:function(t){var e=f.getDataAttributes(this._element);return Object.keys(e).forEach(function(t){Ci.has(t)&&delete e[t];}),(t=vi(vi(vi({},this.constructor.Default),e),"object"===pi(t)&&t?t:{})).container=!1===t.container?document.body:Y(t.container),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),W(ki,t,this.constructor.DefaultType),t.sanitize&&(t.template=di(t.template,t.allowList,t.sanitizeFn)),t}},{key:"_getDelegateConfig",value:function(){var t,e={};for(t in this._config)this.constructor.Default[t]!==this._config[t]&&(e[t]=this._config[t]);return e}},{key:"_cleanTipClass",value:function(){var e=this.getTipElement(),t=new RegExp("(^|\\s)".concat(this._getBasicClassPrefix(),"\\S+"),"g"),t=e.getAttribute("class").match(t);null!==t&&0<t.length&&t.map(function(t){return t.trim()}).forEach(function(t){return e.classList.remove(t)});}},{key:"_getBasicClassPrefix",value:function(){return "bs-tooltip"}},{key:"_handlePopperPlacementChange",value:function(t){t=t.state;t&&(this.tip=t.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(t.placement)));}},{key:"_disposePopper",value:function(){this._popper&&(this._popper.destroy(),this._popper=null);}}])&&gi(t.prototype,n),e&&gi(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),Ri=(e(o),o);function Bi(t){return (Bi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Hi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function Fi(t,e){return (Fi=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Vi(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=Yi(n),e=(t=r?(t=Yi(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===Bi(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function Yi(t){return (Yi=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Wi(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function zi(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?Wi(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):Wi(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}var l=".".concat("bs.popover"),Ui=zi(zi({},Ri.Default),{},{placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),qi=zi(zi({},Ri.DefaultType),{},{content:"(string|element|function)"}),Ki={HIDE:"hide".concat(l),HIDDEN:"hidden".concat(l),SHOW:"show".concat(l),SHOWN:"shown".concat(l),INSERTED:"inserted".concat(l),CLICK:"click".concat(l),FOCUSIN:"focusin".concat(l),FOCUSOUT:"focusout".concat(l),MOUSEENTER:"mouseenter".concat(l),MOUSELEAVE:"mouseleave".concat(l)},o=function(){var t=o,e=Ri;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Fi(t,e);var n,r=Vi(o);function o(){var t=this,e=o;if(t instanceof e)return r.apply(this,arguments);throw new TypeError("Cannot call a class as a function")}return t=o,e=[{key:"Default",get:function(){return Ui}},{key:"NAME",get:function(){return "popover"}},{key:"Event",get:function(){return Ki}},{key:"DefaultType",get:function(){return qi}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t=o.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e]();}})}}],(n=[{key:"isWithContent",value:function(){return this.getTitle()||this._getContent()}},{key:"setContent",value:function(t){this._sanitizeAndSetContent(t,this.getTitle(),".popover-header"),this._sanitizeAndSetContent(t,this._getContent(),".popover-body");}},{key:"_getContent",value:function(){return this._resolvePossibleFunction(this._config.content)}},{key:"_getBasicClassPrefix",value:function(){return "bs-popover"}}])&&Hi(t.prototype,n),e&&Hi(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),l=(e(o),o);t(180);function $i(t){return ($i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Xi(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function Gi(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?Xi(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):Xi(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function Qi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function Zi(){return (Zi="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=ea(t)););return t}(t,e);if(r)return r=Object.getOwnPropertyDescriptor(r,e),r.get?r.get.call(arguments.length<3?t:n):r.value}).apply(this,arguments)}function Ji(t,e){return (Ji=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ta(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=ea(n),e=(t=r?(t=ea(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===$i(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function ea(t){return (ea=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var na="scrollspy",ra=".".concat("bs.scrollspy"),oa={offset:10,method:"auto",target:""},ia={offset:"number",method:"string",target:"(string|element)"},aa="activate".concat(ra),ca="scroll".concat(ra),o="load".concat(ra).concat(".data-api"),sa="dropdown-item",ua="active",la=".nav-link",fa=".list-group-item",da="".concat(la,", ").concat(fa,", .").concat(sa),pa="position",ha=function(){var t=o,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ji(t,e);var n,r=ta(o);function o(t,e){var n;if(this instanceof o)return (n=r.call(this,t))._scrollElement="BODY"===n._element.tagName?window:n._element,n._config=n._getConfig(e),n._offsets=[],n._targets=[],n._activeTarget=null,n._scrollHeight=0,d.on(n._scrollElement,ca,function(){return n._process()}),n.refresh(),n._process(),n;throw new TypeError("Cannot call a class as a function")}return t=o,e=[{key:"Default",get:function(){return oa}},{key:"NAME",get:function(){return na}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t=o.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e]();}})}}],(n=[{key:"refresh",value:function(){var e=this,t=this._scrollElement===this._scrollElement.window?"offset":pa,r="auto"===this._config.method?t:this._config.method,o=r===pa?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),p.find(da,this._config.target).map(function(t){var t=H(t),e=t?p.findOne(t):null;if(e){var n=e.getBoundingClientRect();if(n.width||n.height)return [f[r](e).top+o,t]}return null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1]);});}},{key:"dispose",value:function(){d.off(this._scrollElement,ra),Zi(ea(o.prototype),"dispose",this).call(this);}},{key:"_getConfig",value:function(t){return (t=Gi(Gi(Gi({},oa),f.getDataAttributes(this._element)),"object"===$i(t)&&t?t:{})).target=Y(t.target)||document.documentElement,W(na,t,ia),t}},{key:"_getScrollTop",value:function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}},{key:"_getScrollHeight",value:function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}},{key:"_getOffsetHeight",value:function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}},{key:"_process",value:function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),n<=t)return e=this._targets[this._targets.length-1],void(this._activeTarget!==e&&this._activate(e));if(this._activeTarget&&t<this._offsets[0]&&0<this._offsets[0])return this._activeTarget=null,void this._clear();for(var r=this._offsets.length;r--;)this._activeTarget!==this._targets[r]&&t>=this._offsets[r]&&(void 0===this._offsets[r+1]||t<this._offsets[r+1])&&this._activate(this._targets[r]);}},{key:"_activate",value:function(e){this._activeTarget=e,this._clear();var t=da.split(",").map(function(t){return "".concat(t,'[data-bs-target="').concat(e,'"],').concat(t,'[href="').concat(e,'"]')}),t=p.findOne(t.join(","),this._config.target);t.classList.add(ua),t.classList.contains(sa)?p.findOne(".dropdown-toggle",t.closest(".dropdown")).classList.add(ua):p.parents(t,".nav, .list-group").forEach(function(t){p.prev(t,"".concat(la,", ").concat(fa)).forEach(function(t){return t.classList.add(ua)}),p.prev(t,".nav-item").forEach(function(t){p.children(t,la).forEach(function(t){return t.classList.add(ua)});});}),d.trigger(this._scrollElement,aa,{relatedTarget:e});}},{key:"_clear",value:function(){p.find(da,this._config.target).filter(function(t){return t.classList.contains(ua)}).forEach(function(t){return t.classList.remove(ua)});}}])&&Qi(t.prototype,n),e&&Qi(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),o=(d.on(window,o,function(){p.find('[data-bs-spy="scroll"]').forEach(function(t){return new ha(t)});}),e(ha),ha);function va(t){return (va="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ya(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function ma(t,e){return (ma=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ga(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=ba(n),e=(t=r?(t=ba(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===va(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function ba(t){return (ba=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var _a=".".concat("bs.tab"),wa="hide".concat(_a),Oa="hidden".concat(_a),ka="show".concat(_a),Ca="shown".concat(_a),_a="click".concat(_a).concat(".data-api"),Sa="active",xa=".active",Ea=":scope > li > .active",ja=function(){var t=o,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&ma(t,e);var n,r=ga(o);function o(){var t=this,e=o;if(t instanceof e)return r.apply(this,arguments);throw new TypeError("Cannot call a class as a function")}return t=o,e=[{key:"NAME",get:function(){return "tab"}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t=o.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e]();}})}}],(n=[{key:"show",value:function(){var t,e,n,r,o=this;this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&this._element.classList.contains(Sa)||(t=F(this._element),(e=this._element.closest(".nav, .list-group"))&&(r="UL"===e.nodeName||"OL"===e.nodeName?Ea:xa,n=(n=p.find(r,e))[n.length-1]),r=n?d.trigger(n,wa,{relatedTarget:this._element}):null,d.trigger(this._element,ka,{relatedTarget:n}).defaultPrevented||null!==r&&r.defaultPrevented||(this._activate(this._element,e),r=function(){d.trigger(n,Oa,{relatedTarget:o._element}),d.trigger(o._element,Ca,{relatedTarget:n});},t?this._activate(t,t.parentNode,r):r()));}},{key:"_activate",value:function(t,e,n){function r(){return o._transitionComplete(t,i,n)}var o=this,i=(!e||"UL"!==e.nodeName&&"OL"!==e.nodeName?p.children(e,xa):p.find(Ea,e))[0],e=n&&i&&i.classList.contains("fade");i&&e?(i.classList.remove("show"),this._queueCallback(r,t,!0)):r();}},{key:"_transitionComplete",value:function(t,e,n){e&&(e.classList.remove(Sa),(r=p.findOne(":scope > .dropdown-menu .active",e.parentNode))&&r.classList.remove(Sa),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)),t.classList.add(Sa),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),$(t),t.classList.contains("fade")&&t.classList.add("show");var r=t.parentNode;(r=r&&"LI"===r.nodeName?r.parentNode:r)&&r.classList.contains("dropdown-menu")&&((e=t.closest(".dropdown"))&&p.find(".dropdown-toggle",e).forEach(function(t){return t.classList.add(Sa)}),t.setAttribute("aria-expanded",!0)),n&&n();}}])&&ya(t.prototype,n),e&&ya(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),_a=(d.on(document,_a,'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',function(t){["A","AREA"].includes(this.tagName)&&t.preventDefault(),U(this)||ja.getOrCreateInstance(this).show();}),e(ja),ja);function Ta(t){return (Ta="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Aa(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function Da(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?Aa(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):Aa(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function Pa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function Ma(){return (Ma="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Na(t)););return t}(t,e);if(r)return r=Object.getOwnPropertyDescriptor(r,e),r.get?r.get.call(arguments.length<3?t:n):r.value}).apply(this,arguments)}function Ia(t,e){return (Ia=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function La(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=Na(n),e=(t=r?(t=Na(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===Ta(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function Na(t){return (Na=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Ra(t){for(;t+=Math.floor(Math.random()*nc),document.getElementById(t););return t}function Ba(o,i,a){Object.keys(a).forEach(function(t){var e,n=a[t],r=i[t],r=r&&((e=r)[0]||e).nodeType?"element":null==(e=r)?"".concat(e):{}.toString.call(e).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(n).test(r))throw new Error("".concat(o.toUpperCase(),": ")+'Option "'.concat(t,'" provided type "').concat(r,'" ')+'but expected type "'.concat(n,'".'))});}function Ha(){var t=window.jQuery;return t&&!document.body.hasAttribute("data-mdb-no-jquery")?t:null}function Fa(t){"loading"===document.readyState?document.addEventListener("DOMContentLoaded",t):t();}function Va(t){return document.createElement(t)}var Ya,Wa,h=".".concat("bs.toast"),za="mouseover".concat(h),Ua="mouseout".concat(h),qa="focusin".concat(h),Ka="focusout".concat(h),$a="hide".concat(h),Xa="hidden".concat(h),Ga="show".concat(h),Qa="shown".concat(h),Za="show",Ja="showing",tc={animation:"boolean",autohide:"boolean",delay:"number"},ec={animation:!0,autohide:!0,delay:5e3},h=function(){var t=o,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ia(t,e);var n,r=La(o);function o(t,e){if(this instanceof o)return (t=r.call(this,t))._config=t._getConfig(e),t._timeout=null,t._hasMouseInteraction=!1,t._hasKeyboardInteraction=!1,t._setListeners(),t;throw new TypeError("Cannot call a class as a function")}return t=o,e=[{key:"DefaultType",get:function(){return tc}},{key:"Default",get:function(){return ec}},{key:"NAME",get:function(){return "toast"}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t=o.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e](this);}})}}],(n=[{key:"show",value:function(){var t=this;d.trigger(this._element,Ga).defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove("hide"),$(this._element),this._element.classList.add(Za),this._element.classList.add(Ja),this._queueCallback(function(){t._element.classList.remove(Ja),d.trigger(t._element,Qa),t._maybeScheduleHide();},this._element,this._config.animation));}},{key:"hide",value:function(){var t=this;this._element.classList.contains(Za)&&!d.trigger(this._element,$a).defaultPrevented&&(this._element.classList.add(Ja),this._queueCallback(function(){t._element.classList.add("hide"),t._element.classList.remove(Ja),t._element.classList.remove(Za),d.trigger(t._element,Xa);},this._element,this._config.animation));}},{key:"dispose",value:function(){this._clearTimeout(),this._element.classList.contains(Za)&&this._element.classList.remove(Za),Ma(Na(o.prototype),"dispose",this).call(this);}},{key:"_getConfig",value:function(t){return t=Da(Da(Da({},ec),f.getDataAttributes(this._element)),"object"===Ta(t)&&t?t:{}),W("toast",t,this.constructor.DefaultType),t}},{key:"_maybeScheduleHide",value:function(){var t=this;!this._config.autohide||this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout(function(){t.hide();},this._config.delay));}},{key:"_onInteraction",value:function(t,e){switch(t.type){case"mouseover":case"mouseout":this._hasMouseInteraction=e;break;case"focusin":case"focusout":this._hasKeyboardInteraction=e;}e?this._clearTimeout():(t=t.relatedTarget,this._element===t||this._element.contains(t)||this._maybeScheduleHide());}},{key:"_setListeners",value:function(){var e=this;d.on(this._element,za,function(t){return e._onInteraction(t,!0)}),d.on(this._element,Ua,function(t){return e._onInteraction(t,!1)}),d.on(this._element,qa,function(t){return e._onInteraction(t,!0)}),d.on(this._element,Ka,function(t){return e._onInteraction(t,!1)});}},{key:"_clearTimeout",value:function(){clearTimeout(this._timeout),this._timeout=null;}}])&&Pa(t.prototype,n),e&&Pa(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),nc=(xr(h),e(h),1e6),rc=(document.documentElement.dir,Ya={},Wa=1,{set:function(t,e,n){void 0===t[e]&&(t[e]={key:e,id:Wa},Wa++),Ya[t[e].id]=n;},get:function(t,e){if(!t||void 0===t[e])return null;t=t[e];return t.key===e?Ya[t.id]:null},delete:function(t,e){var n;void 0!==t[e]&&(n=t[e]).key===e&&(delete Ya[n.id],delete t[e]);}}),v={setData:function(t,e,n){rc.set(t,e,n);},getData:function(t,e){return rc.get(t,e)},removeData:function(t,e){rc.delete(t,e);}};function oc(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(t);!(a=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(t){c=!0,o=t;}finally{try{a||null==n.return||n.return();}finally{if(c)throw o}}return i}}(t,e)||function(t,e){if(t){if("string"==typeof t)return ic(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Map"===(n="Object"===n&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ic(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ic(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var ac=Ha(),cc=/[^.]*(?=\..*)\.|.*/,sc=/\..*/,uc=/::\d+$/,lc={},fc=1,dc={mouseenter:"mouseover",mouseleave:"mouseout"},pc=["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"];function hc(t,e){return e&&"".concat(e,"::").concat(fc++)||t.uidEvent||fc++}function vc(t){var e=hc(t);return t.uidEvent=e,lc[e]=lc[e]||{},lc[e]}function yc(t,e,n){for(var r=2<arguments.length&&void 0!==n?n:null,o=Object.keys(t),i=0,a=o.length;i<a;i++){var c=t[o[i]];if(c.originalHandler===e&&c.delegationSelector===r)return c}return null}function mc(t,e,n){var r="string"==typeof e,n=r?n:e,e=t.replace(sc,""),o=dc[e];return [r,n,e=-1<pc.indexOf(e=o?o:e)?e:t]}function gc(t,e,n,r,o){var i,a,c,s,u,l,f,d,p,h;"string"==typeof e&&t&&(n||(n=r,r=null),i=(c=oc(mc(e,n,r),3))[0],a=c[1],c=c[2],(u=yc(s=(s=vc(t))[c]||(s[c]={}),a,i?n:null))?u.oneOff=u.oneOff&&o:(u=hc(a,e.replace(cc,"")),(e=i?(d=t,p=n,h=r,function t(e){for(var n=d.querySelectorAll(p),r=e.target;r&&r!==this;r=r.parentNode)for(var o=n.length;o--;)if(n[o]===r)return e.delegateTarget=r,t.oneOff&&_c.off(d,e.type,h),h.apply(r,[e]);return null}):(l=t,f=n,function t(e){return e.delegateTarget=l,t.oneOff&&_c.off(l,e.type,f),f.apply(l,[e])})).delegationSelector=i?n:null,e.originalHandler=a,e.oneOff=o,s[e.uidEvent=u]=e,t.addEventListener(c,e,i)));}function bc(t,e,n,r,o){r=yc(e[n],r,o);r&&(t.removeEventListener(n,r,Boolean(o)),delete e[n][r.uidEvent]);}var _c={on:function(t,e,n,r){gc(t,e,n,r,!1);},one:function(t,e,n,r){gc(t,e,n,r,!0);},off:function(a,c,t,e){if("string"==typeof c&&a){var e=oc(mc(c,t,e),3),n=e[0],r=e[1],o=e[2],i=o!==c,s=vc(a),e="."===c.charAt(0);if(void 0!==r)return s&&s[o]?void bc(a,s,o,r,n?t:null):void 0;e&&Object.keys(s).forEach(function(t){var e,n,r,o,i;e=a,n=s,r=t,o=c.slice(1),i=n[r]||{},Object.keys(i).forEach(function(t){-1<t.indexOf(o)&&(t=i[t],bc(e,n,r,t.originalHandler,t.delegationSelector));});});var u=s[o]||{};Object.keys(u).forEach(function(t){var e=t.replace(uc,"");(!i||-1<c.indexOf(e))&&(e=u[t],bc(a,s,o,e.originalHandler,e.delegationSelector));});}},trigger:function(t,e,n){if("string"!=typeof e||!t)return null;var r,o=e.replace(sc,""),i=e!==o,a=-1<pc.indexOf(o),c=!0,s=!0,u=!1,l=null;return i&&ac&&(r=ac.Event(e,n),ac(t).trigger(r),c=!r.isPropagationStopped(),s=!r.isImmediatePropagationStopped(),u=r.isDefaultPrevented()),a?(l=document.createEvent("HTMLEvents")).initEvent(o,c,!0):l=new CustomEvent(e,{bubbles:c,cancelable:!0}),void 0!==n&&Object.keys(n).forEach(function(t){Object.defineProperty(l,t,{get:function(){return n[t]}});}),u&&l.preventDefault(),s&&t.dispatchEvent(l),l.defaultPrevented&&void 0!==r&&r.preventDefault(),l}},wc=function(t,e,n,r){for(var o=e.split(" "),i=0;i<o.length;i++)_c.on(t,o[i],n,r);},Oc=function(t,e,n,r){for(var o=e.split(" "),i=0;i<o.length;i++)_c.off(t,o[i],n,r);},_=_c;t(185);function kc(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function Cc(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?kc(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):kc(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function Sc(t){return "true"===t||"false"!==t&&(t===Number(t).toString()?Number(t):""===t||"null"===t?null:t)}function xc(t){return t.replace(/[A-Z]/g,function(t){return "-".concat(t.toLowerCase())})}var S={setDataAttribute:function(t,e,n){t.setAttribute("data-mdb-".concat(xc(e)),n);},removeDataAttribute:function(t,e){t.removeAttribute("data-mdb-".concat(xc(e)));},getDataAttributes:function(t){if(!t)return {};var n=Cc({},t.dataset);return Object.keys(n).filter(function(t){return t.startsWith("mdb")}).forEach(function(t){var e=(e=t.replace(/^mdb/,"")).charAt(0).toLowerCase()+e.slice(1,e.length);n[e]=Sc(n[t]);}),n},getDataAttribute:function(t,e){return Sc(t.getAttribute("data-mdb-".concat(xc(e))))},offset:function(t){t=t.getBoundingClientRect();return {top:t.top+document.body.scrollTop,left:t.left+document.body.scrollLeft}},position:function(t){return {top:t.offsetTop,left:t.offsetLeft}},style:function(t,e){Object.assign(t.style,e);},toggleClass:function(t,e){t&&(t.classList.contains(e)?t.classList.remove(e):t.classList.add(e));},addClass:function(t,e){t.classList.contains(e)||t.classList.add(e);},addStyle:function(e,n){Object.keys(n).forEach(function(t){e.style[t]=n[t];});},removeClass:function(t,e){t.classList.contains(e)&&t.classList.remove(e);},hasClass:function(t,e){return t.classList.contains(e)}};function Ec(t){return function(t){if(Array.isArray(t))return jc(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return jc(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Map"===(n="Object"===n&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?jc(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jc(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var x={closest:function(t,e){return t.closest(e)},matches:function(t,e){return t.matches(e)},find:function(t){var e,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:document.documentElement;return (e=[]).concat.apply(e,Ec(Element.prototype.querySelectorAll.call(n,t)))},findOne:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:document.documentElement;return Element.prototype.querySelector.call(e,t)},children:function(t,e){var n;return (n=[]).concat.apply(n,Ec(t.children)).filter(function(t){return t.matches(e)})},parents:function(t,e){for(var n=[],r=t.parentNode;r&&r.nodeType===Node.ELEMENT_NODE&&3!==r.nodeType;)this.matches(r,e)&&n.push(r),r=r.parentNode;return n},prev:function(t,e){for(var n=t.previousElementSibling;n;){if(n.matches(e))return [n];n=n.previousElementSibling;}return []},next:function(t,e){for(var n=t.nextElementSibling;n;){if(this.matches(n,e))return [n];n=n.nextElementSibling;}return []}};function Tc(t){return (Tc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ac(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function Dc(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?Ac(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):Ac(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function Pc(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}var Mc="ripple",Ic="mdb.ripple",Lc="ripple-surface",Nc="ripple-wave",Rc=["[data-mdb-ripple]"],Bc="ripple-surface-unbound",Hc=[0,0,0],Fc=["primary","secondary","success","danger","warning","info","light","dark"],Vc={rippleCentered:!1,rippleColor:"",rippleDuration:"500ms",rippleRadius:0,rippleUnbound:!1},Yc={rippleCentered:"boolean",rippleColor:"string",rippleDuration:"string",rippleRadius:"number",rippleUnbound:"boolean"},Wc=function(){function n(t,e){if(!(this instanceof n))throw new TypeError("Cannot call a class as a function");this._element=t,this._options=this._getConfig(e),this._element&&(v.setData(t,Ic,this),S.addClass(this._element,Lc)),this._clickHandler=this._createRipple.bind(this),this._rippleTimer=null,this._isMinWidthSet=!1,this.init();}var t,e,r;return t=n,r=[{key:"NAME",get:function(){return Mc}},{key:"autoInitial",value:function(e){return function(t){e._autoInit(t);}}},{key:"jQueryInterface",value:function(t){return this.each(function(){return v.getData(this,Ic)?null:new n(this,t)})}},{key:"getInstance",value:function(t){return v.getData(t,Ic)}},{key:"getOrCreateInstance",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return this.getInstance(t)||new this(t,"object"===Tc(e)?e:null)}}],(e=[{key:"init",value:function(){this._addClickEvent(this._element);}},{key:"dispose",value:function(){v.removeData(this._element,Ic),_.off(this._element,"click",this._clickHandler),this._element=null,this._options=null;}},{key:"_autoInit",value:function(e){var n=this;Rc.forEach(function(t){x.closest(e.target,t)&&(n._element=x.closest(e.target,t));}),this._element.style.minWidth||(S.style(this._element,{"min-width":"".concat(this._element.offsetWidth,"px")}),this._isMinWidthSet=!0),S.addClass(this._element,Lc),this._options=this._getConfig(),this._createRipple(e);}},{key:"_addClickEvent",value:function(t){_.on(t,"mousedown",this._clickHandler);}},{key:"_createRipple",value:function(t){S.hasClass(this._element,Lc)||S.addClass(this._element,Lc);var e=t.layerX,t=t.layerY,n=this._element.offsetHeight,r=this._element.offsetWidth,o=this._durationToMsNumber(this._options.rippleDuration),i={offsetX:this._options.rippleCentered?n/2:e,offsetY:this._options.rippleCentered?r/2:t,height:n,width:r},i=this._getDiameter(i),a=this._options.rippleRadius||i/2,c={delay:.5*o,duration:o-.5*o},r={left:this._options.rippleCentered?"".concat(r/2-a,"px"):"".concat(e-a,"px"),top:this._options.rippleCentered?"".concat(n/2-a,"px"):"".concat(t-a,"px"),height:"".concat(2*this._options.rippleRadius||i,"px"),width:"".concat(2*this._options.rippleRadius||i,"px"),transitionDelay:"0s, ".concat(c.delay,"ms"),transitionDuration:"".concat(o,"ms, ").concat(c.duration,"ms")},e=Va("div");this._createHTMLRipple({wrapper:this._element,ripple:e,styles:r}),this._removeHTMLRipple({ripple:e,duration:o});}},{key:"_createHTMLRipple",value:function(t){var e=t.wrapper,n=t.ripple,r=t.styles;Object.keys(r).forEach(function(t){return n.style[t]=r[t]}),n.classList.add(Nc),""!==this._options.rippleColor&&(this._removeOldColorClasses(e),this._addColor(n,e)),this._toggleUnbound(e),this._appendRipple(n,e);}},{key:"_removeHTMLRipple",value:function(t){var e=this,n=t.ripple,t=t.duration;this._rippleTimer&&(clearTimeout(this._rippleTimer),this._rippleTimer=null),this._rippleTimer=setTimeout(function(){n&&(n.remove(),e._element&&(x.find(".".concat(Nc),e._element).forEach(function(t){t.remove();}),e._isMinWidthSet&&(S.style(e._element,{"min-width":""}),e._isMinWidthSet=!1),S.removeClass(e._element,Lc)));},t);}},{key:"_durationToMsNumber",value:function(t){return Number(t.replace("ms","").replace("s","000"))}},{key:"_getConfig",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=S.getDataAttributes(this._element),t=Dc(Dc(Dc({},Vc),e),t);return Ba(Mc,t,Yc),t}},{key:"_getDiameter",value:function(t){function e(t,e){return Math.sqrt(Math.pow(t,2)+Math.pow(e,2))}var n=t.offsetX,r=t.offsetY,o=t.height,t=t.width,i=r<=o/2,a=n<=t/2,c=r===o/2&&n===t/2,s=!0==i&&!1==a,u=!0==i&&!0==a,l=!1==i&&!0==a,i=!1==i&&!1==a,a={topLeft:e(n,r),topRight:e(t-n,r),bottomLeft:e(n,o-r),bottomRight:e(t-n,o-r)},t=0;return c||i?t=a.topLeft:l?t=a.topRight:u?t=a.bottomRight:s&&(t=a.bottomLeft),2*t}},{key:"_appendRipple",value:function(t,e){e.appendChild(t),setTimeout(function(){S.addClass(t,"active");},50);}},{key:"_toggleUnbound",value:function(t){!0===this._options.rippleUnbound?S.addClass(t,Bc):t.classList.remove(Bc);}},{key:"_addColor",value:function(t,e){var n=this;Fc.find(function(t){return t===n._options.rippleColor.toLowerCase()})?S.addClass(e,"".concat(Lc,"-").concat(this._options.rippleColor.toLowerCase())):(e=this._colorToRGB(this._options.rippleColor).join(","),e="rgba({{color}}, 0.2) 0, rgba({{color}}, 0.3) 40%, rgba({{color}}, 0.4) 50%, rgba({{color}}, 0.5) 60%, rgba({{color}}, 0) 70%".split("{{color}}").join("".concat(e)),t.style.backgroundImage="radial-gradient(circle, ".concat(e,")"));}},{key:"_removeOldColorClasses",value:function(e){var t=new RegExp("".concat(Lc,"-[a-z]+"),"gi");(e.classList.value.match(t)||[]).forEach(function(t){e.classList.remove(t);});}},{key:"_colorToRGB",value:function(t){return "transparent"===t.toLowerCase()?Hc:"#"===t[0]?((e=t).length<7&&(e="#".concat(e[1]).concat(e[1]).concat(e[2]).concat(e[2]).concat(e[3]).concat(e[3])),[parseInt(e.substr(1,2),16),parseInt(e.substr(3,2),16),parseInt(e.substr(5,2),16)]):(-1===t.indexOf("rgb")&&(e=t,n=document.body.appendChild(document.createElement("fictum")),r="rgb(1, 2, 3)",n.style.color=r,t=n.style.color!==r?Hc:(n.style.color=e,n.style.color===r||""===n.style.color?Hc:(e=getComputedStyle(n).color,document.body.removeChild(n),e))),0===t.indexOf("rgb")?((r=(r=t).match(/[.\d]+/g).map(function(t){return +Number(t)})).length=3,r):Hc);var e,n,r;}}])&&Pc(t.prototype,e),r&&Pc(t,r),Object.defineProperty(t,"prototype",{writable:!1}),n}(),zc=(Rc.forEach(function(t){_.one(document,"mousedown",t,Wc.autoInitial(new Wc));}),Fa(function(){var t,e=Ha();e&&(t=e.fn[Mc],e.fn[Mc]=Wc.jQueryInterface,e.fn[Mc].Constructor=Wc,e.fn[Mc].noConflict=function(){return e.fn[Mc]=t,Wc.jQueryInterface});}),Wc);t(187);function Uc(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}var qc=function(){function a(t){var e=this,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},r=2<arguments.length?arguments[2]:void 0,o=this,i=a;if(!(o instanceof i))throw new TypeError("Cannot call a class as a function");this._element=t,this._toggler=r,this._event=n.event||"blur",this._condition=n.condition||function(){return !0},this._selector=n.selector||'button, a, input, select, textarea, [tabindex]:not([tabindex="-1"])',this._onlyVisible=n.onlyVisible||!1,this._focusableElements=[],this._firstElement=null,this._lastElement=null,this.handler=function(t){e._condition(t)&&t.target===e._lastElement&&(t.preventDefault(),e._firstElement.focus());};}var t,e;return t=a,(e=[{key:"trap",value:function(){this._setElements(),this._init(),this._setFocusTrap();}},{key:"disable",value:function(){var e=this;this._focusableElements.forEach(function(t){t.removeEventListener(e._event,e.handler);}),this._toggler&&this._toggler.focus();}},{key:"update",value:function(){this._setElements(),this._setFocusTrap();}},{key:"_init",value:function(){var n=this;window.addEventListener("keydown",function t(e){n._firstElement&&"Tab"===e.key&&!n._focusableElements.includes(e.target)&&(e.preventDefault(),n._firstElement.focus(),window.removeEventListener("keydown",t));});}},{key:"_filterVisible",value:function(t){return t.filter(function(t){if(!(e=t)||(!(e.style&&e.parentNode&&e.parentNode.style)||(n=getComputedStyle(e),e=getComputedStyle(e.parentNode),"none"===n.display||"none"===e.display||"hidden"===n.visibility)))return !1;for(var e,n,r=x.parents(t,"*"),o=0;o<r.length;o++){var i=window.getComputedStyle(r[o]);if(i&&("none"===i.display||"hidden"===i.visibility))return !1}return !0})}},{key:"_setElements",value:function(){this._focusableElements=x.find(this._selector,this._element),this._onlyVisible&&(this._focusableElements=this._filterVisible(this._focusableElements)),this._firstElement=this._focusableElements[0],this._lastElement=this._focusableElements[this._focusableElements.length-1];}},{key:"_setFocusTrap",value:function(){var n=this;this._focusableElements.forEach(function(t,e){e===n._focusableElements.length-1?t.addEventListener(n._event,n.handler):t.removeEventListener(n._event,n.handler);});}}])&&Uc(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),a}();t(188);function O(t){return t.getDate()}function Kc(t){return t.getDay()}function k(t){return t.getMonth()}function C(t){return t.getFullYear()}function $c(t){return Qc((t=t).getFullYear(),t.getMonth()+1,0).getDate()}function Xc(){return new Date}function y(t,e){return D(t,12*e)}function D(t,e){e=Qc(t.getFullYear(),t.getMonth()+e,t.getDate());return O(t)!==O(e)&&e.setDate(0),e}function Gc(t,e){return Qc(t.getFullYear(),t.getMonth(),t.getDate()+e)}function Qc(t,e,n){e=new Date(t,e,n);return 0<=t&&t<100&&e.setFullYear(e.getFullYear()-1900),e}function Zc(t){t=t.split("-");return Qc(t[0],t[1],t[2])}function Jc(t,e){return t.setHours(0,0,0,0),e.setHours(0,0,0,0),t.getTime()===e.getTime()}function ts(t,e){return ((C(t)-function(t,e,n){var r=0;n?(n=C(n),r=n-t+1):e&&(r=C(e));return r}())%e+e)%e}function es(t,e,n,r,o){return "days"===n?C(t)===C(e)&&k(t)===k(e):"months"===n?C(t)===C(e):"years"===n&&(C(e)>=o&&C(e)<=r)}function ns(t,e,n,r,o,i,a,c,s){var u,l,f=k(t),d=C(t),p=O(t),h=Kc(t),v=Va("div"),a="\n      ".concat((p=p,h=h,u=f,'\n      <div class="datepicker-header">\n        <div class="datepicker-title">\n          <span class="datepicker-title-text">'.concat((l=o).title,'</span>\n        </div>\n        <div class="datepicker-date">\n          <span class="datepicker-date-text">').concat(l.weekdaysShort[h],", ").concat(l.monthsShort[u]," ").concat(p,"</span>\n        </div>\n      </div>\n    ")),"\n      ").concat((h=t,l=e,u=n,p=r,t=i,e=a,n=c,'\n    <div class="datepicker-main">\n      '.concat(function(t,e,n){return '\n    <div class="datepicker-date-controls">\n      <button class="datepicker-view-change-button" aria-label="'.concat(n.switchToMultiYearViewLabel,'">\n        ').concat(n.monthsFull[t]," ").concat(e,'\n      </button>\n      <div class="datepicker-arrow-controls">\n        <button class="datepicker-previous-button" aria-label="').concat(n.prevMonthLabel,'"></button>\n        <button class="datepicker-next-button" aria-label="').concat(n.nextMonthLabel,'"></button>\n      </div>\n    </div>\n    ')}(f,r=d,i=o),'\n      <div class="datepicker-view" tabindex="0">\n        ').concat(function(t,e,n,r,o,i,a,c,s){n="days"===i.view?rs(t,n,i):"months"===i.view?os(e,r,o,i,a):is(t,r,0,c,s);return n}(h,r,l,u,p,i,t,e,n),"\n      </div>\n      ").concat(function(t){return '\n        <div class="datepicker-footer">\n          <button class="datepicker-footer-btn datepicker-clear-btn" aria-label="'.concat(t.clearBtnLabel,'">').concat(t.clearBtnText,'</button>\n          <button class="datepicker-footer-btn datepicker-cancel-btn" aria-label="').concat(t.cancelBtnLabel,'">').concat(t.cancelBtnText,'</button>\n          <button class="datepicker-footer-btn datepicker-ok-btn" aria-label="').concat(t.okBtnLabel,'">').concat(t.okBtnText,"</button>\n        </div>\n      ")}(i),"\n    </div>\n  ")),"\n    ");return S.addClass(v,"datepicker-modal-container"),S.addClass(v,"datepicker-modal-container-".concat(s)),v.innerHTML=a,v}function rs(t,e,n){t=function(t,e,n){for(var r=[],o=k(t),i=k(D(t,-1)),a=k(D(t,1)),c=C(t),s=function(t,e,n){return n=0<(n=n.startDay)?7-n:0,7<=(t=new Date(t,e).getDay()+n)?t-7:t}(c,o,n),u=$c(t),l=$c(D(t,-1)),f=1,d=!1,p=1;p<7;p++){var h=[];if(1===p){for(var v=l-s+1;v<=l;v++){var y=Qc(c,i,v);h.push({date:y,currentMonth:d,isSelected:e&&Jc(y,e),isToday:Jc(y,Xc()),dayNumber:O(y)});}d=!0;for(var m=7-h.length,g=0;g<m;g++){var b=Qc(c,o,f);h.push({date:b,currentMonth:d,isSelected:e&&Jc(b,e),isToday:Jc(b,Xc()),dayNumber:O(b)}),f++;}}else for(var _=1;_<8;_++){u<f&&(d=!(f=1));var w=Qc(c,d?o:a,f);h.push({date:w,currentMonth:d,isSelected:e&&Jc(w,e),isToday:Jc(w,Xc()),dayNumber:O(w)}),f++;}r.push(h);}return r}(t,e,n),e=n.weekdaysNarrow,e="\n      <tr>\n        ".concat(e.map(function(t,e){return '<th class="datepicker-day-heading" scope="col" aria-label="'.concat(n.weekdaysFull[e],'">').concat(t,"</th>")}).join(""),"\n      </tr>\n    "),t=t.map(function(t){return "\n        <tr>\n          ".concat(t.map(function(t){return '\n              <td\n              class="datepicker-cell datepicker-small-cell datepicker-day-cell\n              '.concat(t.currentMonth?"":"disabled"," ").concat(t.disabled?"disabled":"","\n              ").concat(t.isToday&&"current"," ").concat(t.isSelected&&"selected",'"\n              data-mdb-date="').concat(C(t.date),"-").concat(k(t.date),"-").concat(O(t.date),'"\n              aria-label="').concat(t.date,'"\n              aria-selected="').concat(t.isSelected,'">\n                <div\n                  class="datepicker-cell-content datepicker-small-cell-content"\n                  style="').concat(t.currentMonth?"display: block":"display: none",'">\n                  ').concat(t.dayNumber,"\n                  </div>\n              </td>\n            ")}).join(""),"\n        </tr>\n      ")}).join("");return '\n      <table class="datepicker-table">\n        <thead>\n          '.concat(e,'\n        </thead>\n        <tbody class="datepicker-table-body">\n         ').concat(t,"\n        </tbody>\n      </table>\n    ")}function os(n,r,o,i,t){var t=function(t,e){for(var n=[],r=[],o=0;o<t.monthsShort.length;o++){var i;r.push(t.monthsShort[o]),r.length===e&&(i=r,n.push(i),r=[]);}return n}(i,t),a=k(Xc()),t="\n      ".concat(t.map(function(t){return "\n          <tr>\n            ".concat(t.map(function(t){var e=i.monthsShort.indexOf(t);return '\n                <td class="datepicker-cell datepicker-large-cell datepicker-month-cell '.concat(e===o&&n===r?"selected":""," ").concat(e===a?"current":"",'" data-mdb-month="').concat(e,'" data-mdb-year="').concat(n,'" aria-label="').concat(t,", ").concat(n,'">\n                  <div class="datepicker-cell-content datepicker-large-cell-content">').concat(t,"</div>\n                </td>\n              ")}).join(""),"\n          </tr>\n        ")}).join(""),"\n    ");return '\n      <table class="datepicker-table">\n        <tbody class="datepicker-table-body">\n         '.concat(t,"\n        </tbody>\n      </table>\n    ")}function is(t,e,n,r,o){var t=function(t,e,n){for(var r=[],o=C(t),t=ts(t,e),i=o-t,a=[],c=0;c<e;c++){var s;a.push(i+c),a.length===n&&(s=a,r.push(s),a=[]);}return r}(t,r,o),i=C(Xc()),r="\n    ".concat(t.map(function(t){return "\n        <tr>\n          ".concat(t.map(function(t){return '\n              <td class="datepicker-cell datepicker-large-cell datepicker-year-cell '.concat(t===e?"selected":""," ").concat(t===i?"current":"",'" aria-label="').concat(t,'" data-mdb-year="').concat(t,'">\n                <div class="datepicker-cell-content datepicker-large-cell-content">').concat(t,"</div>\n              </td>\n            ")}).join(""),"\n        </tr>\n      ")}).join(""),"\n  ");return '\n      <table class="datepicker-table">\n        <tbody class="datepicker-table-body">\n        '.concat(r,"\n        </tbody>\n      </table>\n    ")}function as(t){return (as="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function cs(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function ss(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?cs(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):cs(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function us(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}var ls="datepicker",fs="mdb.datepicker",ds=".".concat(fs),ps="close".concat(ds),hs="open".concat(ds),vs="dateChange".concat(ds),ys="click".concat(ds).concat(".data-api"),ms={title:"Select date",monthsFull:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],weekdaysFull:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],weekdaysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],weekdaysNarrow:["S","M","T","W","T","F","S"],okBtnText:"Ok",clearBtnText:"Clear",cancelBtnText:"Cancel",okBtnLabel:"Confirm selection",clearBtnLabel:"Clear selection",cancelBtnLabel:"Cancel selection",nextMonthLabel:"Next month",prevMonthLabel:"Previous month",nextYearLabel:"Next year",prevYearLabel:"Previous year",nextMultiYearLabel:"Next 24 years",prevMultiYearLabel:"Previous 24 years",switchToMultiYearViewLabel:"Choose year and month",switchToMonthViewLabel:"Choose date",switchToDayViewLabel:"Choose date",startDate:null,startDay:0,format:"dd/mm/yyyy",view:"days",toggleButton:!0,disableToggleButton:!1,disableInput:!1},gs={title:"string",monthsFull:"array",monthsShort:"array",weekdaysFull:"array",weekdaysShort:"array",weekdaysNarrow:"array",okBtnText:"string",clearBtnText:"string",cancelBtnText:"string",okBtnLabel:"string",clearBtnLabel:"string",cancelBtnLabel:"string",nextMonthLabel:"string",prevMonthLabel:"string",nextYearLabel:"string",prevYearLabel:"string",nextMultiYearLabel:"string",prevMultiYearLabel:"string",switchToMultiYearViewLabel:"string",switchToMonthViewLabel:"string",switchToDayViewLabel:"string",startDate:"(null|string|date)",startDay:"number",format:"string",view:"string",toggleButton:"boolean",disableToggleButton:"boolean",disableInput:"boolean"},bs=function(){function n(t,e){if(!(this instanceof n))throw new TypeError("Cannot call a class as a function");this._element=t,this._input=x.findOne("input",this._element),this._options=this._getConfig(e),this._activeDate=new Date,this._selectedDate=null,this._selectedYear=null,this._selectedMonth=null,this._view=this._options.view,this._popper=null,this._focusTrap=null,this._isOpen=!1,this._toggleButtonId=Ra("datepicker-toggle-"),this._element&&v.setData(t,fs,this),this._init(),this.toggleButton&&this._options.disableToggle&&(this.toggleButton.disabled="true"),this._options.disableInput&&(this._input.disabled="true");}var t,e,r;return t=n,r=[{key:"NAME",get:function(){return ls}},{key:"getInstance",value:function(t){return v.getData(t,fs)}},{key:"getOrCreateInstance",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return this.getInstance(t)||new this(t,"object"===as(e)?e:null)}}],(e=[{key:"container",get:function(){return x.findOne(".datepicker-modal-container".concat("-",this._toggleButtonId))||x.findOne(".datepicker-dropdown-container".concat("-",this._toggleButtonId))}},{key:"options",get:function(){return this._options}},{key:"activeCell",get:function(){var t;return "days"===this._view&&(t=this._getActiveDayCell()),"months"===this._view&&(t=this._getActiveMonthCell()),t="years"===this._view?this._getActiveYearCell():t}},{key:"activeDay",get:function(){return O(this._activeDate)}},{key:"activeMonth",get:function(){return k(this._activeDate)}},{key:"activeYear",get:function(){return C(this._activeDate)}},{key:"firstYearInView",get:function(){return this.activeYear-ts(this._activeDate,24)}},{key:"lastYearInView",get:function(){return this.firstYearInView+24-1}},{key:"viewChangeButton",get:function(){return x.findOne(".datepicker-view-change-button",this.container)}},{key:"previousButton",get:function(){return x.findOne(".datepicker-previous-button",this.container)}},{key:"nextButton",get:function(){return x.findOne(".datepicker-next-button",this.container)}},{key:"okButton",get:function(){return x.findOne(".datepicker-ok-btn",this.container)}},{key:"cancelButton",get:function(){return x.findOne(".datepicker-cancel-btn",this.container)}},{key:"clearButton",get:function(){return x.findOne(".datepicker-clear-btn",this.container)}},{key:"datesContainer",get:function(){return x.findOne(".datepicker-view",this.container)}},{key:"toggleButton",get:function(){return x.findOne(".datepicker-toggle-button",this._element)}},{key:"_getConfig",value:function(t){var e=S.getDataAttributes(this._element);return t=ss(ss(ss({},ms),e),t),Ba(ls,t,gs),t.startDay&&0!==t.startDay&&(e=this._getNewDaysOrderArray(t),t.weekdaysNarrow=e),t}},{key:"_getNewDaysOrderArray",value:function(t){var e=t.startDay,t=t.weekdaysNarrow;return t.slice(e).concat(t.slice(0,e))}},{key:"_init",value:function(){!this.toggleButton&&this._options.toggleButton&&(this._appendToggleButton(),(this._input.readOnly||this._input.disabled)&&(this.toggleButton.style.pointerEvents="none")),this._listenToUserInput(),this._listenToToggleClick(),this._listenToToggleKeydown();}},{key:"_appendToggleButton",value:function(){var t='\n    <button id="'.concat(this._toggleButtonId,'" type="button" class="datepicker-toggle-button" data-mdb-toggle="datepicker">\n      <i class="far fa-calendar datepicker-toggle-icon"></i>\n    </button>\n  ');this._element.insertAdjacentHTML("beforeend",t),S.addClass(this._input,"form-icon-trailing");}},{key:"open",value:function(){var t,e,n=this;this._input.readOnly||this._input.disabled||(t=_.trigger(this._element,hs),this._isOpen||t.defaultPrevented||(this._setInitialDate(),t=Va("div"),S.addClass(t,"datepicker-backdrop"),t=t,e=ns(this._activeDate,this._selectedDate,this._selectedYear,this._selectedMonth,this._options,4,24,24,this._toggleButtonId),this._openModal(t,e),S.addClass(this.container,"animation"),S.addClass(this.container,"fade-in"),this.container.style.animationDuration="300ms",S.addClass(t,"animation"),S.addClass(t,"fade-in"),t.style.animationDuration="150ms",this._setFocusTrap(this.container),this._listenToDateSelection(),this._addControlsListeners(),this._listenToEscapeClick(),this._listenToKeyboardNavigation(),this._listenToDatesContainerFocus(),this._listenToDatesContainerBlur(),this._asyncFocusDatesContainer(),this._updateViewControlsAndAttributes(this._view),this._isOpen=!0,setTimeout(function(){n._listenToOutsideClick();},0)));}},{key:"_openDropdown",value:function(t){this._popper=en(this._input,t,{placement:"bottom-start"}),document.body.appendChild(t);}},{key:"_openModal",value:function(t,e){document.body.appendChild(t),document.body.appendChild(e);window.innerWidth>document.documentElement.clientWidth&&(document.body.style.overflow="hidden",document.body.style.paddingRight="15px");}},{key:"_setFocusTrap",value:function(t){this._focusTrap=new qc(t,{event:"keydown",condition:function(t){return "Tab"===t.key}}),this._focusTrap.trap();}},{key:"_listenToUserInput",value:function(){var e=this;_.on(this._input,"input",function(t){e._handleUserInput(t.target.value);});}},{key:"_listenToToggleClick",value:function(){var e=this;_.on(this._element,ys,'[data-mdb-toggle="datepicker"]',function(t){t.preventDefault(),e.open();});}},{key:"_listenToToggleKeydown",value:function(){var e=this;_.on(this._element,"keydown",'[data-mdb-toggle="datepicker"]',function(t){13!==t.keyCode||e._isOpen||e.open();});}},{key:"_listenToDateSelection",value:function(){var r=this;_.on(this.datesContainer,"click",function(t){var e,n=("DIV"===t.target.nodeName?t.target.parentNode:t.target).dataset,t="DIV"===t.target.nodeName?t.target.parentNode:t.target;n.mdbDate&&r._pickDay(n.mdbDate,t),n.mdbMonth&&n.mdbYear&&(t=parseInt(n.mdbMonth,10),e=parseInt(n.mdbYear,10),r._pickMonth(t,e)),n.mdbYear&&!n.mdbMonth&&(t=parseInt(n.mdbYear,10),r._pickYear(t)),r._updateHeaderDate(r._activeDate,r._options.monthsShort,r._options.weekdaysShort);});}},{key:"_updateHeaderDate",value:function(t,e,n){var r=x.findOne(".datepicker-date-text",this.container),o=k(t),i=O(t),t=Kc(t);r.innerHTML="".concat(n[t],", ").concat(e[o]," ").concat(i);}},{key:"_addControlsListeners",value:function(){var t=this;_.on(this.nextButton,"click",function(){"days"===t._view?t.nextMonth():"years"===t._view?t.nextYears():t.nextYear();}),_.on(this.previousButton,"click",function(){"days"===t._view?t.previousMonth():"years"===t._view?t.previousYears():t.previousYear();}),_.on(this.viewChangeButton,"click",function(){"days"===t._view?t._changeView("years"):"years"!==t._view&&"months"!==t._view||t._changeView("days");}),this._listenToFooterButtonsClick();}},{key:"_listenToFooterButtonsClick",value:function(){var t=this;_.on(this.okButton,"click",function(){return t.handleOk()}),_.on(this.cancelButton,"click",function(){return t.handleCancel()}),_.on(this.clearButton,"click",function(){return t.handleClear()});}},{key:"_listenToOutsideClick",value:function(){var n=this;_.on(document,ys,function(t){var e=t.target===n.container,t=n.container&&n.container.contains(t.target);e||t||n.close();});}},{key:"_listenToEscapeClick",value:function(){var e=this;_.on(document,"keydown",function(t){27===t.keyCode&&e._isOpen&&e.close();});}},{key:"_listenToKeyboardNavigation",value:function(){var e=this;_.on(this.datesContainer,"keydown",function(t){e._handleKeydown(t);});}},{key:"_listenToDatesContainerFocus",value:function(){var t=this;_.on(this.datesContainer,"focus",function(){t._focusActiveCell(t.activeCell);});}},{key:"_listenToDatesContainerBlur",value:function(){var t=this;_.on(this.datesContainer,"blur",function(){t._removeCurrentFocusStyles();});}},{key:"_handleKeydown",value:function(t){"days"===this._view&&this._handleDaysViewKeydown(t),"months"===this._view&&this._handleMonthsViewKeydown(t),"years"===this._view&&this._handleYearsViewKeydown(t);}},{key:"_handleDaysViewKeydown",value:function(t){var e=this._activeDate,n=this.activeCell;switch(t.keyCode){case 37:this._activeDate=Gc(this._activeDate,-1);break;case 39:this._activeDate=Gc(this._activeDate,1);break;case 38:this._activeDate=Gc(this._activeDate,-7);break;case 40:this._activeDate=Gc(this._activeDate,7);break;case 36:this._activeDate=Gc(this._activeDate,1-O(this._activeDate));break;case 35:this._activeDate=Gc(this._activeDate,$c(this._activeDate)-O(this._activeDate));break;case 33:this._activeDate=D(this._activeDate,-1);break;case 34:this._activeDate=D(this._activeDate,1);break;case 13:case 32:return this._selectDate(this._activeDate),void t.preventDefault();default:return}es(e,this._activeDate,this._view,24,0)||this._changeView("days"),this._removeHighlightFromCell(n),this._focusActiveCell(this.activeCell),t.preventDefault();}},{key:"_asyncFocusDatesContainer",value:function(){var t=this;setTimeout(function(){t.datesContainer.focus();},0);}},{key:"_focusActiveCell",value:function(t){t&&S.addClass(t,"focused");}},{key:"_removeHighlightFromCell",value:function(t){t&&t.classList.remove("focused");}},{key:"_getActiveDayCell",value:function(){var e=this,t=x.find("td",this.datesContainer);return Array.from(t).find(function(t){return Jc(Zc(t.dataset.mdbDate),e._activeDate)})}},{key:"_handleMonthsViewKeydown",value:function(t){var e=this._activeDate,n=this.activeCell;switch(t.keyCode){case 37:this._activeDate=D(this._activeDate,-1);break;case 39:this._activeDate=D(this._activeDate,1);break;case 38:this._activeDate=D(this._activeDate,-4);break;case 40:this._activeDate=D(this._activeDate,4);break;case 36:this._activeDate=D(this._activeDate,-this.activeMonth);break;case 35:this._activeDate=D(this._activeDate,11-this.activeMonth);break;case 33:this._activeDate=y(this._activeDate,-1);break;case 34:this._activeDate=y(this._activeDate,1);break;case 13:case 32:return void this._selectMonth(this.activeMonth);default:return}es(e,this._activeDate,this._view,24,0)||this._changeView("months"),this._removeHighlightFromCell(n),this._focusActiveCell(this.activeCell),t.preventDefault();}},{key:"_getActiveMonthCell",value:function(){var n=this,t=x.find("td",this.datesContainer);return Array.from(t).find(function(t){var e=parseInt(t.dataset.mdbYear,10),t=parseInt(t.dataset.mdbMonth,10);return e===n.activeYear&&t===n.activeMonth})}},{key:"_handleYearsViewKeydown",value:function(t){var e=this._activeDate,n=this.activeCell;switch(t.keyCode){case 37:this._activeDate=y(this._activeDate,-1);break;case 39:this._activeDate=y(this._activeDate,1);break;case 38:this._activeDate=y(this._activeDate,-4);break;case 40:this._activeDate=y(this._activeDate,4);break;case 36:this._activeDate=y(this._activeDate,-ts(this._activeDate,24));break;case 35:this._activeDate=y(this._activeDate,24-ts(this._activeDate,24)-1);break;case 33:this._activeDate=y(this._activeDate,-24);break;case 34:this._activeDate=y(this._activeDate,24);break;case 13:case 32:return void this._selectYear(this.activeYear);default:return}es(e,this._activeDate,this._view,24,0)||this._changeView("years"),this._removeHighlightFromCell(n),this._focusActiveCell(this.activeCell),t.preventDefault();}},{key:"_getActiveYearCell",value:function(){var e=this,t=x.find("td",this.datesContainer);return Array.from(t).find(function(t){return parseInt(t.dataset.mdbYear,10)===e.activeYear})}},{key:"_setInitialDate",value:function(){this._input.value?this._handleUserInput(this._input.value):this._options.startDate?this._activeDate=new Date(this._options.startDate):this._activeDate=new Date;}},{key:"close",value:function(){var t=_.trigger(this._element,ps);this._isOpen&&!t.defaultPrevented&&(this._removeDatepickerListeners(),S.addClass(this.container,"animation"),S.addClass(this.container,"fade-out"),this._closeModal(),this._isOpen=!1,this._view=this._options.view,(this.toggleButton||this._input).focus());}},{key:"_closeDropdown",value:function(){var t=this,e=x.findOne(".datepicker-dropdown-container");e.addEventListener("animationend",function(){e&&document.body.removeChild(e),t._popper&&t._popper.destroy();}),this._removeFocusTrap();}},{key:"_closeModal",value:function(){var t=x.findOne(".datepicker-backdrop"),e=x.findOne(".datepicker-modal-container");S.addClass(t,"animation"),S.addClass(t,"fade-out"),e&&t&&t.addEventListener("animationend",function(){document.body.removeChild(t),document.body.removeChild(e),document.body.style.overflow="",document.body.style.paddingRight="";});}},{key:"_removeFocusTrap",value:function(){this._focusTrap&&(this._focusTrap.disable(),this._focusTrap=null);}},{key:"_removeDatepickerListeners",value:function(){_.off(this.nextButton,"click"),_.off(this.previousButton,"click"),_.off(this.viewChangeButton,"click"),_.off(this.okButton,"click"),_.off(this.cancelButton,"click"),_.off(this.clearButton,"click"),_.off(this.datesContainer,"click"),_.off(this.datesContainer,"keydown"),_.off(this.datesContainer,"focus"),_.off(this.datesContainer,"blur"),_.off(document,ys);}},{key:"dispose",value:function(){this._isOpen&&this.close(),this._removeInputAndToggleListeners();var t=x.findOne("#".concat(this._toggleButtonId));t&&this._element.removeChild(t),v.removeData(this._element,fs),this._element=null,this._input=null,this._options=null,this._activeDate=null,this._selectedDate=null,this._selectedYear=null,this._selectedMonth=null,this._view=null,this._popper=null,this._focusTrap=null;}},{key:"_removeInputAndToggleListeners",value:function(){_.off(this._input,"input"),_.off(this._element,ys,'[data-mdb-toggle="datepicker"]'),_.off(this._element,"keydown",'[data-mdb-toggle="datepicker"]');}},{key:"handleOk",value:function(){this._confirmSelection(this._selectedDate),this.close();}},{key:"_selectDate",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.activeCell;this._removeCurrentSelectionStyles(),this._removeCurrentFocusStyles(),this._addSelectedStyles(e),this._selectedDate=t;}},{key:"_selectYear",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.activeCell;this._removeCurrentSelectionStyles(),this._removeCurrentFocusStyles(),this._addSelectedStyles(e),this._selectedYear=t,this._asyncChangeView("months");}},{key:"_selectMonth",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.activeCell;this._removeCurrentSelectionStyles(),this._removeCurrentFocusStyles(),this._addSelectedStyles(e),this._selectedMonth=t,this._asyncChangeView("days");}},{key:"_removeSelectedStyles",value:function(t){t&&t.classList.remove("selected");}},{key:"_addSelectedStyles",value:function(t){t&&S.addClass(t,"selected");}},{key:"_confirmSelection",value:function(t){var e;t&&(e=this.formatDate(t),this._input.value=e,S.addClass(this._input,"active"),_.trigger(this._element,vs,{date:t}));}},{key:"handleCancel",value:function(){this._selectedDate=null,this._selectedYear=null,this._selectedMonth=null,this.close();}},{key:"handleClear",value:function(){this._selectedDate=null,this._selectedMonth=null,this._selectedYear=null,this._removeCurrentSelectionStyles(),this._input.value="",this._input.classList.remove("active"),this._setInitialDate(),this._changeView("days");}},{key:"_removeCurrentSelectionStyles",value:function(){var t=x.findOne(".selected",this.container);t&&t.classList.remove("selected");}},{key:"_removeCurrentFocusStyles",value:function(){var t=x.findOne(".focused",this.container);t&&t.classList.remove("focused");}},{key:"formatDate",value:function(t){var e=O(t),n=this._addLeadingZero(O(t)),r=this._options.weekdaysShort[Kc(t)],o=this._options.weekdaysFull[Kc(t)],i=k(t)+1,a=this._addLeadingZero(k(t)+1),c=this._options.monthsShort[k(t)],s=this._options.monthsFull[k(t)],u=2===C(t).toString().length?C(t):C(t).toString().slice(2,4),l=C(t),t=this._options.format.split(/(d{1,4}|m{1,4}|y{4}|yy|!.)/g),f="";return t.forEach(function(t){switch(t){case"dddd":t=t.replace(t,o);break;case"ddd":t=t.replace(t,r);break;case"dd":t=t.replace(t,n);break;case"d":t=t.replace(t,e);break;case"mmmm":t=t.replace(t,s);break;case"mmm":t=t.replace(t,c);break;case"mm":t=t.replace(t,a);break;case"m":t=t.replace(t,i);break;case"yyyy":t=t.replace(t,l);break;case"yy":t=t.replace(t,u);}f+=t;}),f}},{key:"_addLeadingZero",value:function(t){return parseInt(t,10)<10?"0".concat(t):t}},{key:"_pickDay",value:function(t,e){t=Zc(t);this._activeDate=t,this._selectDate(t,e);}},{key:"_pickYear",value:function(t){var e=Qc(t,this.activeMonth,this.activeDay);this._activeDate=e,this._selectedDate=e,this._selectYear(t);}},{key:"_pickMonth",value:function(t,e){e=Qc(e,t,this.activeDay);this._activeDate=e,this._selectMonth(t);}},{key:"nextMonth",value:function(){var t,e=rs(t=D(this._activeDate,1),this._selectedDate,this._options);this._activeDate=t,this.viewChangeButton.textContent="".concat(this._options.monthsFull[this.activeMonth]," ").concat(this.activeYear),this.datesContainer.innerHTML=e;}},{key:"previousMonth",value:function(){var t=D(this._activeDate,-1),t=rs(this._activeDate=t,this._selectedDate,this._options);this.viewChangeButton.textContent="".concat(this._options.monthsFull[this.activeMonth]," ").concat(this.activeYear),this.datesContainer.innerHTML=t;}},{key:"nextYear",value:function(){var t=y(this._activeDate,1),t=(this._activeDate=t,this.viewChangeButton.textContent="".concat(this.activeYear),os(this.activeYear,this._selectedYear,this._selectedMonth,this._options,4));this.datesContainer.innerHTML=t;}},{key:"previousYear",value:function(){var t=y(this._activeDate,-1),t=(this._activeDate=t,this.viewChangeButton.textContent="".concat(this.activeYear),os(this.activeYear,this._selectedYear,this._selectedMonth,this._options,4));this.datesContainer.innerHTML=t;}},{key:"nextYears",value:function(){var t=y(this._activeDate,24),t=is(this._activeDate=t,this._selectedYear,this._options,24,4);this.viewChangeButton.textContent="".concat(this.firstYearInView," - ").concat(this.lastYearInView),this.datesContainer.innerHTML=t;}},{key:"previousYears",value:function(){var t=y(this._activeDate,-24),t=is(this._activeDate=t,this._selectedYear,this._options,24,4);this.viewChangeButton.textContent="".concat(this.firstYearInView," - ").concat(this.lastYearInView),this.datesContainer.innerHTML=t;}},{key:"_asyncChangeView",value:function(t){var e=this;setTimeout(function(){e._changeView(t);},0);}},{key:"_changeView",value:function(t){this._view=t,this.datesContainer.blur(),"days"===t&&(this.datesContainer.innerHTML=rs(this._activeDate,this._selectedDate,this._options)),"months"===t&&(this.datesContainer.innerHTML=os(this.activeYear,this._selectedYear,this._selectedMonth,this._options,4)),"years"===t&&(this.datesContainer.innerHTML=is(this._activeDate,this._selectedYear,this._options,24,4)),this.datesContainer.focus(),this._updateViewControlsAndAttributes(t);}},{key:"_updateViewControlsAndAttributes",value:function(t){"days"===t&&(this.viewChangeButton.textContent="".concat(this._options.monthsFull[this.activeMonth]," ").concat(this.activeYear),this.viewChangeButton.setAttribute("aria-label",this._options.switchToMultiYearViewLabel),this.previousButton.setAttribute("aria-label",this._options.prevMonthLabel),this.nextButton.setAttribute("aria-label",this._options.nextMonthLabel)),"months"===t&&(this.viewChangeButton.textContent="".concat(this.activeYear),this.viewChangeButton.setAttribute("aria-label",this._options.switchToDayViewLabel),this.previousButton.setAttribute("aria-label",this._options.prevYearLabel),this.nextButton.setAttribute("aria-label",this._options.nextYearLabel)),"years"===t&&(this.viewChangeButton.textContent="".concat(this.firstYearInView," - ").concat(this.lastYearInView),this.viewChangeButton.setAttribute("aria-label",this._options.switchToMonthViewLabel),this.previousButton.setAttribute("aria-label",this._options.prevMultiYearLabel),this.nextButton.setAttribute("aria-label",this._options.nextMultiYearLabel));}},{key:"_handleUserInput",value:function(t){var e=this._getDelimeters(this._options.format),t=this._parseDate(t,this._options.format,e);Number.isNaN(t.getTime())?(this._activeDate=new Date,this._selectedDate=null,this._selectedMonth=null,this._selectedYear=null):(this._activeDate=t,this._selectedDate=t);}},{key:"_getDelimeters",value:function(t){return t.match(/[^(dmy)]{1,}/g)}},{key:"_parseDate",value:function(t,e,n){for(var n=n[0]!==n[1]?n[0]+n[1]:n[0],n=new RegExp("[".concat(n,"]")),r=t.split(n),o=e.split(n),t=-1!==e.indexOf("mmm"),i=[],a=0;a<o.length;a++)-1!==o[a].indexOf("yy")&&(i[0]={value:r[a],format:o[a]}),-1!==o[a].indexOf("m")&&(i[1]={value:r[a],format:o[a]}),-1!==o[a].indexOf("d")&&o[a].length<=2&&(i[2]={value:r[a],format:o[a]});n=-1!==e.indexOf("mmmm")?this._options.monthsFull:this._options.monthsShort;return Qc(Number(i[0].value),t?this.getMonthNumberByMonthName(i[1].value,n):Number(i[1].value)-1,Number(i[2].value))}},{key:"getMonthNumberByMonthName",value:function(e,t){return t.findIndex(function(t){return t===e})}}])&&us(t.prototype,e),r&&us(t,r),Object.defineProperty(t,"prototype",{writable:!1}),n}(),ds=bs;x.find(".datepicker").forEach(function(t){var e=bs.getInstance(t);e||new bs(t);}),t(189),t(191);function _s(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(t);!(a=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(t){c=!0,o=t;}finally{try{a||null==n.return||n.return();}finally{if(c)throw o}}return i}}(t,e)||function(t,e){if(t){if("string"==typeof t)return ws(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Map"===(n="Object"===n&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ws(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ws(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Os(t,e){var n=t.clientX,r=t.clientY,t=t.touches,o=2<arguments.length&&void 0!==arguments[2]&&arguments[2],e=e.getBoundingClientRect(),i=e.left,e=e.top,a={};return o&&t?o&&0<Object.keys(t).length&&(a={x:t[0].clientX-i,y:t[0].clientY-e}):a={x:n-i,y:r-e},a}function ks(){return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}var Cs=function(t){return t&&"[object Date]"===Object.prototype.toString.call(t)&&!isNaN(t)},P=function(t){t=(!(1<arguments.length&&void 0!==arguments[1])||arguments[1]?t.value:t).replace(/:/gi," ");return t.split(" ")};function Ss(t){return (Ss="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function xs(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function Es(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?xs(Object(n),!0).forEach(function(t){Ms(e,t,n[t]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):xs(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));});}return e}function js(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(t);!(a=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(t){c=!0,o=t;}finally{try{a||null==n.return||n.return();}finally{if(c)throw o}}return i}}(t,e)||As(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ts(t){return function(t){if(Array.isArray(t))return Ds(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||As(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function As(t,e){if(t){if("string"==typeof t)return Ds(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Map"===(n="Object"===n&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ds(t,e):void 0}}function Ds(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Ps(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function Ms(t,e,n){e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n;}var m="timepicker",Is="mdb.".concat(m),M="active",Ls="".concat(m,"-am"),Ns="".concat(m,"-cancel"),Rs="".concat(m,"-clear"),Bs="".concat(m,"-submit"),Hs="".concat(m,"-circle"),Fs="".concat(m,"-clock-animation"),Vs="".concat(m,"-clock"),Ys="".concat(m,"-clock-inner"),Ws="".concat(m,"-clock-wrapper"),zs=".".concat(m,"-current"),Us="".concat(m,"-current-inline"),qs="".concat(m,"-hand-pointer"),Ks="".concat(m,"-hour"),$s="".concat(m,"-hour-mode"),Xs="".concat(m,"-icon-down"),Gs="".concat(m,"-icon-inline-hour"),Qs="".concat(m,"-icon-inline-minute"),Zs="".concat(m,"-icon-up"),Js="".concat(m,"-inline-hour-icons"),tu="".concat(m,"-middle-dot"),eu="".concat(m,"-minute"),nu="".concat(m,"-modal"),ru="".concat(m,"-pm"),ou="".concat(m,"-tips-element"),iu="".concat(m,"-time-tips-hours"),au="".concat(m,"-tips-inner-element"),cu="".concat(m,"-time-tips-inner"),I="".concat(m,"-time-tips-minutes"),su="".concat(m,"-transform"),uu="".concat(m,"-wrapper"),lu="".concat(m,"-input"),fu={appendValidationInfo:!0,bodyID:"",cancelLabel:"Cancel",clearLabel:"Clear",closeModalOnBackdropClick:!0,closeModalOnMinutesClick:!1,defaultTime:"",disabled:!1,focusInputAfterApprove:!1,footerID:"",format12:!0,headID:"",increment:!1,invalidLabel:"Invalid Time Format",maxHour:"",minHour:"",maxTime:"",minTime:"",modalID:"",okLabel:"Ok",overflowHidden:!0,pickerID:"",readOnly:!1,showClearBtn:!0,switchHoursToMinutesOnClick:!0,iconClass:"far fa-clock fa-sm timepicker-icon",withIcon:!0,pmLabel:"PM",amLabel:"AM"},du={appendValidationInfo:"boolean",bodyID:"string",cancelLabel:"string",clearLabel:"string",closeModalOnBackdropClick:"boolean",closeModalOnMinutesClick:"boolean",disabled:"boolean",footerID:"string",format12:"boolean",headID:"string",increment:"boolean",invalidLabel:"string",maxHour:"(string|number)",minHour:"(string|number)",modalID:"string",okLabel:"string",overflowHidden:"boolean",pickerID:"string",readOnly:"boolean",showClearBtn:"boolean",switchHoursToMinutesOnClick:"boolean",defaultTime:"(string|date|number)",iconClass:"string",withIcon:"boolean",pmLabel:"string",amLabel:"string"},pu=function(){function o(t){var C=this,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},n=this,r=o;if(!(n instanceof r))throw new TypeError("Cannot call a class as a function");Ms(this,"_toggleBackgroundColorCircle",function(t){null!==C._modal.querySelector(".".concat(t,".").concat(M))?S.addStyle(C._circle,{backgroundColor:"#1976d2"}):S.addStyle(C._circle,{backgroundColor:"transparent"});}),Ms(this,"_toggleClassActive",function(t,e,n){var r=e.textContent,o=Ts(t).find(function(t){return Number(t)===Number(r)});return n.forEach(function(t){S.hasClass(t,"disabled")||(t.textContent===o?S.addClass(t,M):S.removeClass(t,M));})}),Ms(this,"_makeMinutesDegrees",function(t,e){var n=C._options.increment;return t=t<0?(e=Math.round(360+t/6)%60,360+6*Math.round(t/6)):(e=Math.round(t/6)%60,6*Math.round(t/6)),n&&(t=30*Math.round(t/30),60===(e=6*Math.round(t/6)/6)&&(e="00")),{degrees:t=360<=t?0:t,minute:e,addDegrees:n?30:6}}),Ms(this,"_makeHourDegrees",function(t,e,n){var r=C._options,o=r.maxHour,r=r.minHour;if(t&&(S.hasClass(t,Ys)||S.hasClass(t,cu)||S.hasClass(t,au)?e<0?(n=Math.round(360+e/30)%24,e=360+e):12===(n=Math.round(e/30)+12)&&(n="00"):e<0?(n=Math.round(360+e/30)%12,e=360+e):(0===(n=Math.round(e/30)%12)||12<n)&&(n=12),360<=e&&(e=0),!(""!==o&&n>Number(o)||""!==r&&n<Number(r))))return {degrees:e,hour:n,addDegrees:30}}),Ms(this,"_makeInnerHoursDegrees",function(t,e){return t<0?(e=Math.round(360+t/30)%24,t=360+t):12===(e=Math.round(t/30)+12)&&(e="00"),{degrees:t,hour:e,addDegrees:30}}),Ms(this,"_getAppendClock",function(){var a,c,s,u=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:".".concat(Vs),l=2<arguments.length?arguments[2]:void 0,e=C._options,f=e.maxHour,d=e.minHour,p=e.minTime,h=e.maxTime,n=e.inline,e=e.format12,r=js(P(h,!1),3),v=r[0],y=r[1],m=r[2],r=js(P(p,!1),3),g=r[0],b=r[1],_=r[2],w=(n||e&&C._isInvalidTimeFormat&&!S.hasClass(C._AM,"active")&&S.addClass(C._PM,"active"),x.findOne(".".concat($s,".").concat(M))),O=x.findOne(t),k=360/u.length;null!==O&&(a=(O.offsetWidth-32)/2,c=(O.offsetHeight-32)/2,s=a-4,Ts(u).forEach(function(t,e){var e=e*k*(Math.PI/180),n=Va("span"),r=Va("span"),o=(r.innerHTML=t,S.addClass(n,l),n.offsetWidth),i=n.offsetHeight;return S.addStyle(n,{left:"".concat(a+Math.sin(e)*s-o,"px"),bottom:"".concat(c+Math.cos(e)*s-i,"px")}),u.includes("05")&&S.addClass(n,"".concat(I)),u.includes("13")?r.classList.add(au):r.classList.add(ou),S.hasClass(n,"".concat(I))?S.hasClass(n,"".concat(I))&&(""!==h&&Number(t)>Number(y)&&Number(C._hour.textContent)>=Number(v)&&S.addClass(n,"disabled"),""!==p&&Number(t)<Number(b)&&Number(C._hour.textContent)<=Number(g)&&S.addClass(n,"disabled"),""!==h&&void 0!==m&&("PM"===m&&"PM"===w.textContent?Number(t)>Number(y)&&Number(C._hour.textContent)>=Number(v)&&S.addClass(n,"disabled"):"PM"===m&&"AM"===w.textContent&&S.removeClass(n,"disabled"),("AM"===m&&"PM"===w.textContent||"AM"===m&&"AM"===w.textContent&&Number(C._hour.textContent)>=Number(v)&&Number(t)>Number(y))&&S.addClass(n,"disabled")),""!==p&&void 0!==_&&("PM"===_&&"PM"===w.textContent?(Number(t)<Number(b)&&Number(C._hour.textContent)===Number(g)||Number(C._hour.textContent)<Number(g))&&S.addClass(n,"disabled"):"PM"===_&&"AM"===w.textContent&&S.addClass(n,"disabled"),"AM"===_&&"PM"===w.textContent?S.removeClass(n,"disabled"):"AM"===_&&"AM"===w.textContent&&(Number(C._hour.textContent)===Number(g)&&Number(t)<Number(b)||Number(C._hour.textContent)<Number(g))&&S.addClass(n,"disabled"))):(""!==f&&Number(t)>Number(f)&&S.addClass(n,"disabled"),""!==d&&Number(t)<Number(d)&&S.addClass(n,"disabled"),""!==h&&(void 0!==m?("PM"===m&&"PM"===w.textContent&&(C._isAmEnabled=!1,C._isPmEnabled=!0,Number(t)>Number(v)&&S.addClass(n,"disabled")),"AM"===m&&"PM"===w.textContent?(C._isAmEnabled=!1,C._isPmEnabled=!0,S.addClass(n,"disabled")):"AM"===m&&"AM"===w.textContent&&(C._isAmEnabled=!0,C._isPmEnabled=!1,Number(t)>Number(v)&&S.addClass(n,"disabled"))):Number(t)>Number(v)&&S.addClass(n,"disabled")),""!==p&&Number(t)<Number(g)&&S.addClass(n,"disabled"),""!==p&&void 0!==_&&("PM"===_&&"PM"===w.textContent?(C._isAmEnabled=!1,C._isPmEnabled=!0,Number(t)<Number(g)&&S.addClass(n,"disabled")):"PM"===_&&"AM"===w.textContent&&(C._isAmEnabled=!0,C._isPmEnabled=!1,S.addClass(n,"disabled")),"AM"===_&&"PM"===w.textContent?(C._isAmEnabled=!1,C._isPmEnabled=!0,S.removeClass(n,"disabled")):"AM"===_&&"AM"===w.textContent&&(C._isAmEnabled=!0,C._isPmEnabled=!1,Number(t)<Number(g)&&S.addClass(n,"disabled")))),n.appendChild(r),O.appendChild(n)}));}),this._element=t,this._element&&v.setData(t,Is,this),this._document=document,this._options=this._getConfig(e),this._currentTime=null,this._toggleButtonId=Ra("timepicker-toggle-"),this.hoursArray=["12","1","2","3","4","5","6","7","8","9","10","11"],this.innerHours=["00","13","14","15","16","17","18","19","20","21","22","23"],this.minutesArray=["00","05","10","15","20","25","30","35","40","45","50","55"],this.input=x.findOne("input",this._element),this.dataWithIcon=t.dataset.withIcon,this.dataToggle=t.dataset.toggle,this.customIcon=x.findOne(".timepicker-toggle-button",this._element),this._checkToggleButton(),this.inputFormatShow=x.findOne("[data-mdb-timepicker-format24]",this._element),this.inputFormat=null===this.inputFormatShow?"":Object.values(this.inputFormatShow.dataset)[0],this.elementToggle=x.findOne("[data-mdb-toggle]",this._element),this.toggleElement=Object.values(t.querySelector("[data-mdb-toggle]").dataset)[0],this._hour=null,this._minutes=null,this._AM=null,this._PM=null,this._wrapper=null,this._modal=null,this._hand=null,this._circle=null,this._focusTrap=null,this._popper=null,this._interval=null,this._inputValue=""!==this._options.defaultTime?this._options.defaultTime:this.input.value,this._options.format12&&(this._currentTime=function(t){var e,n,r;if(""!==t)return Cs(t)?(e=t.getHours(),0===(e%=12)&&(r="AM"),e=e||12,void 0===r&&(r=12<=e?"PM":"AM"),n=(n=t.getMinutes())<10?"0".concat(n):n):(e=(t=_s(P(t,!1),3))[0],n=t[1],r=t[2],0===(e%=12)&&(r="AM"),e=e||12,void 0===r&&(r=12<=e?"PM":"AM")),{hours:e,minutes:n,amOrPm:r}}(this._inputValue)),this._options.readOnly&&this.input.setAttribute("readonly",!0),this.init(),this._isHours=!0,this._isMinutes=!1,this._isInvalidTimeFormat=!1,this._isMouseMove=!1,this._isInner=!1,this._isAmEnabled=!1,this._isPmEnabled=!1,this._objWithDataOnChange={degrees:null};}var t,e,n;return t=o,n=[{key:"NAME",get:function(){return m}},{key:"getInstance",value:function(t){return v.getData(t,Is)}},{key:"getOrCreateInstance",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return this.getInstance(t)||new this(t,"object"===Ss(e)?e:null)}}],(e=[{key:"init",value:function(){var t,e,n,r;S.addClass(this.input,lu),void 0!==this._currentTime?(n=(t=this._currentTime).hours,r=t.minutes,t=t.amOrPm,e=Number(n)<10?0:"",n="".concat(e).concat(Number(n),":").concat(r),r=t,this.input.value="".concat(n," ").concat(r)):this.input.value=r=n=e="",0<this.input.value.length&&""!==this.input.value&&S.addClass(this.input,"active"),null===this._options&&null===this._element||(this._handleOpen(),this._listenToToggleKeydown());}},{key:"dispose",value:function(){this._removeModal(),null!==this._element&&v.removeData(this._element,Is),this._element=null,this._options=null,this.input=null,this._focusTrap=null,_.off(this._document,"click","[data-mdb-toggle='".concat(this.toggleElement,"']")),_.off(this._element,"keydown","[data-mdb-toggle='".concat(this.toggleElement,"']"));}},{key:"_checkToggleButton",value:function(){null===this.customIcon&&(void 0!==this.dataWithIcon&&(this._options.withIcon=null,"true"===this.dataWithIcon&&this._appendToggleButton(this._options)),this._options.withIcon&&this._appendToggleButton(this._options));}},{key:"_appendToggleButton",value:function(){var t=function(t,e){t=t.iconClass;return '\n  <button id="'.concat(e,'" tabindex="0" type="button" class="timepicker-toggle-button" data-mdb-toggle="timepicker"  >\n    <i class="').concat(t,'"></i>\n  </button>\n')}(this._options,this._toggleButtonId);this.input.insertAdjacentHTML("afterend",t);}},{key:"_getDomElements",value:function(){this._hour=x.findOne(".".concat(Ks)),this._minutes=x.findOne(".".concat(eu)),this._AM=x.findOne(".".concat(Ls)),this._PM=x.findOne(".".concat(ru)),this._wrapper=x.findOne(".".concat(uu)),this._modal=x.findOne(".".concat(nu)),this._hand=x.findOne(".".concat(qs)),this._circle=x.findOne(".".concat(Hs)),this._clock=x.findOne(".".concat(Vs)),this._clockInner=x.findOne(".".concat(Ys));}},{key:"_handlerMaxMinHoursOptions",value:function(t,e,n,r,o,i){var a=""!==n?30*n:"",c=""!==r?30*r:"";if(""!==n&&""!==r){if((t=t<=0?360+t:t)<=a&&c<=t)return e()}else if(""!==r){if(t<=0&&(t=360+t),(c=12<Number(r)?30*r-c:c)<=t&&void 0===i)return e();if(void 0!==i){if("PM"===i&&this._isAmEnabled)return;if("PM"===i&&this._isPmEnabled&&c<=t)return e();if("AM"===i&&this._isPmEnabled)return e();if("AM"===i&&this._isAmEnabled&&c<=t)return e()}}else {if(""===n)return e();if((t=t<=0?360+t:t)<=a&&void 0===o)return e();if(void 0!==o){if("AM"===o&&this._isPmEnabled)return;if("AM"===o&&this._isAmEnabled&&t<=a)return e();if("PM"===o&&this._isPmEnabled){if(t<=a)return e()}else if("PM"===o&&this._isAmEnabled)return e()}}return e}},{key:"_handleKeyboard",value:function(){var b=this;_.on(this._document,"keydown","",function(t){var e,n=b._options,r=n.maxHour,o=n.minHour,n=n.increment,i=null!==x.findOne(".".concat(I)),a=null!==x.findOne(".".concat(cu)),c=Number(b._hand.style.transform.replace(/[^\d-]/g,"")),s=x.find(".".concat(I),b._modal),u=x.find(".".concat(iu),b._modal),l=x.find(".".concat(cu),b._modal),f=""!==r?Number(r):"",d=""!==o?Number(o):"",p=b._makeHourDegrees(t.target,c,void 0).hour,h=b._makeHourDegrees(t.target,c,void 0),v=h.degrees,y=h.addDegrees,h=b._makeMinutesDegrees(c,void 0),m=h.minute,h=h.degrees,g=b._makeMinutesDegrees(c,void 0).addDegrees,c=b._makeInnerHoursDegrees(c,void 0).hour;27===t.keyCode&&(e=x.findOne(".".concat(Ns),b._modal),_.trigger(e,"click")),i?(38===t.keyCode&&(S.addStyle(b._hand,{transform:"rotateZ(".concat(h+=g,"deg)")}),m+=1,n&&"0014"===(m+=4)&&(m=5),b._minutes.textContent=b._setHourOrMinute(59<m?0:m),b._toggleClassActive(b.minutesArray,b._minutes,s),b._toggleBackgroundColorCircle("".concat(I))),40===t.keyCode&&(S.addStyle(b._hand,{transform:"rotateZ(".concat(h-=g,"deg)")}),n?m-=5:--m,-1===m?m=59:-5===m&&(m=55),b._minutes.textContent=b._setHourOrMinute(m),b._toggleClassActive(b.minutesArray,b._minutes,s),b._toggleBackgroundColorCircle("".concat(I)))):(a&&(39===t.keyCode&&(b._isInner=!1,S.addStyle(b._hand,{height:"calc(40% + 1px)"}),b._hour.textContent=b._setHourOrMinute(12<p?1:p),b._toggleClassActive(b.hoursArray,b._hour,u),b._toggleClassActive(b.innerHours,b._hour,l)),37===t.keyCode&&(b._isInner=!0,S.addStyle(b._hand,{height:"21.5%"}),b._hour.textContent=b._setHourOrMinute(24<=c||"00"===c?0:c),b._toggleClassActive(b.innerHours,b._hour,l),b._toggleClassActive(b.hoursArray,b._hour-1,u))),38===t.keyCode&&(b._handlerMaxMinHoursOptions(v+30,function(){return S.addStyle(b._hand,{transform:"rotateZ(".concat(v+y,"deg)")})},r,o),b._isInner?(24===(c+=1)?c=0:25!==c&&"001"!==c||(c=13),b._hour.textContent=b._setHourOrMinute(c),b._toggleClassActive(b.innerHours,b._hour,l)):(p+=1,""!==r&&""!==o?r<p?p=f:p<o&&(p=d):""!==r&&""===o?r<p&&(p=f):""===r&&""!==o&&12<=p&&(p=12),b._hour.textContent=b._setHourOrMinute(12<p?1:p),b._toggleClassActive(b.hoursArray,b._hour,u))),40===t.keyCode&&(b._handlerMaxMinHoursOptions(v-30,function(){return S.addStyle(b._hand,{transform:"rotateZ(".concat(v-y,"deg)")})},r,o),b._isInner?(12===--c?c=0:-1===c&&(c=23),b._hour.textContent=b._setHourOrMinute(c),b._toggleClassActive(b.innerHours,b._hour,l)):(--p,""!==r&&""!==o?f<p?p=f:p<d&&(p=d):""===r&&""!==o?p<=d&&(p=d):""!==r&&""===o&&p<=1&&(p=1),b._hour.textContent=b._setHourOrMinute(0===p?12:p),b._toggleClassActive(b.hoursArray,b._hour,u))));});}},{key:"_setActiveClassToTipsOnOpen",value:function(t){var e=this;if(!this._isInvalidTimeFormat){for(var n=arguments.length,r=new Array(1<n?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];[].concat(r).filter(function(t){return "PM"===t?S.addClass(e._PM,M):"AM"===t?S.addClass(e._AM,M):(S.removeClass(e._AM,M),S.removeClass(e._PM,M)),t});var i=x.find(".".concat(iu),this._modal);this._addActiveClassToTip(i,t);}}},{key:"_setTipsAndTimesDependOnInputValue",value:function(t,e){var n=this._options,r=n.inline,n=n.format12;this._isInvalidTimeFormat?(this._hour.textContent="12",this._minutes.textContent="00",r||S.addStyle(this._hand,{transform:"rotateZ(0deg)"}),n&&S.addClass(this._PM,M)):(n=12<t?30*t-360:30*t,this._hour.textContent=t,this._minutes.textContent=e,r||(S.addStyle(this._hand,{transform:"rotateZ(".concat(n,"deg)")}),S.addStyle(this._circle,{backgroundColor:"#1976d2"}),(12<Number(t)||"00"===t)&&S.addStyle(this._hand,{height:"21.5%"})));}},{key:"_listenToToggleKeydown",value:function(){var e=this;_.on(this._element,"keydown","[data-mdb-toggle='".concat(this.toggleElement,"']"),function(t){13===t.keyCode&&(t.preventDefault(),_.trigger(e.elementToggle,"click"));});}},{key:"_handleOpen",value:function(){var b=this;wc(this._element,"click","[data-mdb-toggle='".concat(this.toggleElement,"']"),function(g){var t;null!==b._options&&(t=null!==S.getDataAttribute(b.input,"toggle")?200:0,setTimeout(function(){S.addStyle(b.elementToggle,{pointerEvents:"none"}),b.elementToggle.blur(),h=""===P(b.input)[0]?["12","00","PM"]:P(b.input);var t,e,n,r,o,i,a,c,s,u,l=b._options,f=l.modalID,d=l.inline,p=l.format12,l=l.overflowHidden,h=js(h,3),v=h[0],y=h[1],h=h[2],m=Va("div");(12<Number(v)||"00"===v)&&(b._isInner=!0),b.input.blur(),g.target.blur(),m.innerHTML=(t=b._options,e=t.okLabel,n=t.cancelLabel,u=t.headID,r=t.footerID,o=t.bodyID,s=t.pickerID,i=t.clearLabel,a=t.showClearBtn,c=t.amLabel,t=t.pmLabel,"<div id='".concat(s,"' class='timepicker-wrapper h-full flex items-center justify-center flex-col fixed'>\n      <div class=\"flex items-center justify-center flex-col timepicker-container\">\n        <div class=\"flex flex-col timepicker-elements justify-around\">\n        <div id='").concat(u,"' class='timepicker-head flex flex-row items-center justify-center'>\n        <div class='timepicker-head-content flex w-100 justify-evenly'>\n            <div class=\"timepicker-current-wrapper\">\n              <span class=\"relative h-100\">\n                <button type='button' class='timepicker-current timepicker-hour active ripple' tabindex=\"0\">21</button>\n              </span>\n              <button type='button' class='timepicker-dot' disabled>:</button>\n            <span class=\"relative h-100\">\n              <button type='button' class='timepicker-current timepicker-minute ripple' tabindex=\"0\">21</button>\n            </span>\n            </div>\n            <div class=\"flex flex-col justify-center timepicker-mode-wrapper\">\n              <button type='button' class=\"timepicker-hour-mode timepicker-am ripple\" tabindex=\"0\">").concat(c,'</button>\n              <button class="timepicker-hour-mode timepicker-pm ripple" tabindex="0">').concat(t,"</button>\n            </div>\n        </div>\n      </div>\n      <div id='").concat(o,"' class='timepicker-clock-wrapper flex justify-center flex-col items-center'>\n        <div class='timepicker-clock'>\n          <span class='timepicker-middle-dot absolute'></span>\n          <div class='timepicker-hand-pointer absolute'>\n            <div class='timepicker-circle absolute'></div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div id='").concat(r,"' class='timepicker-footer'>\n      <div class=\"w-full flex justify-between\">\n        ").concat(a?"<button type='button' class='timepicker-button timepicker-clear ripple' tabindex=\"0\">".concat(i,"</button>"):"","\n        <button type='button' class='timepicker-button timepicker-cancel ripple' tabindex=\"0\">").concat(n,"</button>\n        <button type='button' class='timepicker-button timepicker-submit ripple' tabindex=\"0\">").concat(e,"</button>\n      </div>\n    </div>\n  </div>\n</div>")),S.addClass(m,nu),m.setAttribute("role","dialog"),m.setAttribute("tabIndex","-1"),m.setAttribute("id",f),d&&(b._popper=en(b.input,m,{placement:"bottom-start"})),b._document.body.appendChild(m),b._getDomElements(),b._toggleBackdropAnimation(),b._setActiveClassToTipsOnOpen(v,y,h),b._appendTimes(),b._setActiveClassToTipsOnOpen(v,y,h),b._setTipsAndTimesDependOnInputValue(v,y),""===b.input.value&&(s=x.find(".".concat(iu),b._modal),p&&S.addClass(b._PM,M),b._hour.textContent="12",b._minutes.textContent="00",b._addActiveClassToTip(s,Number(b._hour.textContent))),b._handleSwitchTimeMode(),b._handleOkButton(),b._handleClose(),d?(b._handleHoverInlineBtn(),b._handleDocumentClickInline(),b._handleInlineClicks()):(b._handleSwitchHourMinute(),b._handleClockClick(),b._handleKeyboard(),S.addStyle(b._hour,{pointerEvents:"none"}),S.addStyle(b._minutes,{pointerEvents:""})),l&&(u=window.innerWidth>document.documentElement.clientWidth,S.addStyle(b._document.body,{overflow:"hidden"}),!ks()&&u&&S.addStyle(b._document.body,{paddingRight:"15px"})),b._focusTrap=new qc(b._wrapper,{event:"keydown",condition:function(t){return "Tab"===t.key}}),b._focusTrap.trap();},t));});}},{key:"_handleInlineClicks",value:function(){var d=this;wc(this._modal,"click mousedown mouseup touchstart touchend contextmenu",".".concat(Zs,", .").concat(Xs),function(t){function e(t){t=f(t),d._hour.textContent=d._setHourOrMinute(t);}function n(t){t=l(t),d._minutes.textContent=d._setHourOrMinute(t);}function r(){e(s+=1);}function o(){n(u+=1);}function i(){e(--s);}function a(){n(--u);}var c=t.target,t=t.type,s=Number(d._hour.textContent),u=Number(d._minutes.textContent),l=function(t){return 59<t?t=0:t<0&&(t=59),t},f=function(t){return 12<t?t=1:t<1&&(t=12),t=12<t?1:t};S.hasClass(c,Zs)?S.hasClass(c.parentNode,Js)?"mousedown"===t||"touchstart"===t?(clearInterval(d._interval),d._interval=setInterval(r,100)):"mouseup"===t||"touchend"===t||"contextmenu"===t?clearInterval(d._interval):r():"mousedown"===t||"touchstart"===t?(clearInterval(d._interval),d._interval=setInterval(o,100)):"mouseup"===t||"touchend"===t||"contextmenu"===t?clearInterval(d._interval):o():S.hasClass(c,Xs)&&(S.hasClass(c.parentNode,Js)?"mousedown"===t||"touchstart"===t?(clearInterval(d._interval),d._interval=setInterval(i,100)):"mouseup"===t||"touchend"===t?clearInterval(d._interval):i():"mousedown"===t||"touchstart"===t?(clearInterval(d._interval),d._interval=setInterval(a,100)):"mouseup"===t||"touchend"===t?clearInterval(d._interval):a());});}},{key:"_handleClose",value:function(){var a=this;_.on(this._modal,"click",".".concat(uu,", .").concat(Ns,", .").concat(Rs),function(t){function e(){S.addStyle(a.elementToggle,{pointerEvents:"auto"}),a._toggleBackdropAnimation(!0),a._removeModal(),a._focusTrap.disable(),a._focusTrap=null,a.elementToggle?a.elementToggle.focus():a.input&&a.input.focus();}var n,r,o,t=t.target,i=a._options.closeModalOnBackdropClick;S.hasClass(t,Rs)?(a.input.value="",S.removeClass(a.input,"active"),o=""===P(a.input)[0]?["12","00","PM"]:P(a.input),n=(o=js(o,3))[0],r=o[1],o=o[2],a._setTipsAndTimesDependOnInputValue("12","00"),a._setActiveClassToTipsOnOpen(n,r,o),a._hour.click()):(S.hasClass(t,Ns)||S.hasClass(t,uu)&&i)&&e();});}},{key:"showValueInput",value:function(){return this.input.value}},{key:"_handleOkButton",value:function(){var o=this;wc(this._modal,"click",".".concat(Bs),function(){var t=o._options,e=t.readOnly,t=t.focusInputAfterApprove,n=o._document.querySelector(".".concat($s,".").concat(M)),r="".concat(o._hour.textContent,":").concat(o._minutes.textContent);S.addClass(o.input,"active"),S.addStyle(o.elementToggle,{pointerEvents:"auto"}),o._isInvalidTimeFormat&&S.removeClass(o.input,"is-invalid"),!e&&t&&o.input.focus(),S.addStyle(o.elementToggle,{pointerEvents:"auto"}),o.input.value=null===n?"".concat(r," PM"):"".concat(r," ").concat(n.textContent),o._toggleBackdropAnimation(!0),o._removeModal(),_.trigger(o.input,"input.mdb.timepicker");});}},{key:"_handleHoverInlineBtn",value:function(){var o=this;wc(this._modal,"mouseover mouseleave",".".concat(Us),function(t){var e=t.type,t=t.target,n=x.find(".".concat(Gs),o._modal),r=x.find(".".concat(Qs),o._modal);"mouseover"===e?S.hasClass(t,Ks)?n.forEach(function(t){return S.addClass(t,M)}):r.forEach(function(t){return S.addClass(t,M)}):S.hasClass(t,Ks)?n.forEach(function(t){return S.removeClass(t,M)}):r.forEach(function(t){return S.removeClass(t,M)});});}},{key:"_handleDocumentClickInline",value:function(){var e=this;_.on(document,"click",function(t){t=t.target;!e._modal||e._modal.contains(t)||S.hasClass(t,"timepicker-icon")||(clearInterval(e._interval),S.addStyle(e.elementToggle,{pointerEvents:"auto"}),e._removeModal());});}},{key:"_handleSwitchHourMinute",value:function(){var t,e,c=this;t="click",e=zs,_.on(document,t,e,function(t){t=t.target;S.hasClass(t,"active")||(document.querySelectorAll(e).forEach(function(t){S.hasClass(t,"active")&&S.removeClass(t,"active");}),S.addClass(t,"active"));}),_.on(this._modal,"click",zs,function(){function e(t,e){r.forEach(function(t){return t.remove()}),n.forEach(function(t){return t.remove()}),S.addClass(c._hand,su),setTimeout(function(){S.removeClass(c._hand,su);},401),c._getAppendClock(t,".".concat(Vs),e),setTimeout(function(){var t,e;t=x.find(".".concat(iu),c._modal),e=x.find(".".concat(I),c._modal),c._addActiveClassToTip(t,i),c._addActiveClassToTip(e,a);},401);}var t=x.find(zs,c._modal),n=x.find(".".concat(I),c._modal),r=x.find(".".concat(iu),c._modal),o=x.find(".".concat(cu),c._modal),i=Number(c._hour.textContent),a=Number(c._minutes.textContent);t.forEach(function(t){S.hasClass(t,M)&&(S.hasClass(t,eu)?(S.addClass(c._hand,su),S.addStyle(c._hand,{transform:"rotateZ(".concat(6*c._minutes.textContent,"deg)"),height:"calc(40% + 1px)"}),0<o.length&&o.forEach(function(t){return t.remove()}),e(c.minutesArray,"".concat(I)),c._hour.style.pointerEvents="",c._minutes.style.pointerEvents="none"):S.hasClass(t,Ks)&&(S.addStyle(c._hand,{transform:"rotateZ(".concat(30*c._hour.textContent,"deg)")}),12<Number(c._hour.textContent)?(S.addStyle(c._hand,{transform:"rotateZ(".concat(30*c._hour.textContent-360,"deg)"),height:"21.5%"}),12<Number(c._hour.textContent)&&S.addStyle(c._hand,{height:"21.5%"})):S.addStyle(c._hand,{height:"calc(40% + 1px)"}),0<o.length&&o.forEach(function(t){return t.remove()}),e(c.hoursArray,"".concat(iu)),S.addStyle(c._hour,{pointerEvents:"none"}),S.addStyle(c._minutes,{pointerEvents:""})));});});}},{key:"_handleSwitchTimeMode",value:function(){_.on(document,"click",".".concat($s),function(t){t=t.target;S.hasClass(t,M)||(x.find(".".concat($s)).forEach(function(t){S.hasClass(t,M)&&S.removeClass(t,M);}),S.addClass(t,M));});}},{key:"_handleClockClick",value:function(){var y=this,m=x.findOne(".".concat(Ws));wc(document,"mousedown mouseup mousemove mouseleave mouseover touchstart touchmove touchend","",function(t){ks()||t.preventDefault();var e=y._options,n=e.maxHour,e=e.minHour,r=t.type,o=t.target,i=y._options,a=i.closeModalOnMinutesClick,i=i.switchHoursToMinutesOnClick,c=null!==x.findOne(".".concat(I),y._modal),s=null!==x.findOne(".".concat(iu),y._modal),u=null!==x.findOne(".".concat(cu),y._modal),l=x.find(".".concat(I),y._modal),f=Os(t,m),d=m.offsetWidth/2,f=Math.atan2(f.y-d,f.x-d),p=(ks()&&(h=Os(t,m,!0),f=Math.atan2(h.y-d,h.x-d)),null);if("mousedown"===r||"mousemove"===r||"touchmove"===r||"touchstart"===r?"mousedown"!==r&&"touchstart"!==r&&"touchmove"!==r||(S.hasClass(o,Ws)||S.hasClass(o,Vs)||S.hasClass(o,I)||S.hasClass(o,Ys)||S.hasClass(o,cu)||S.hasClass(o,iu)||S.hasClass(o,Hs)||S.hasClass(o,qs)||S.hasClass(o,tu)||S.hasClass(o,ou)||S.hasClass(o,au))&&(y._isMouseMove=!0,ks()&&t.touches&&(h=t.touches[0].clientX,d=t.touches[0].clientY,p=document.elementFromPoint(h,d))):"mouseup"!==r&&"touchend"!==r||(y._isMouseMove=!1,(S.hasClass(o,Vs)||S.hasClass(o,Ys)||S.hasClass(o,cu)||S.hasClass(o,iu)||S.hasClass(o,Hs)||S.hasClass(o,qs)||S.hasClass(o,tu)||S.hasClass(o,ou)||S.hasClass(o,au))&&(s||u)&&i&&_.trigger(y._minutes,"click"),c&&a&&(h=x.findOne(".".concat(Bs),y._modal),_.trigger(h,"click"))),c){d=Math.trunc(180*f/Math.PI)+90,r=y._makeMinutesDegrees(d,void 0),i=r.degrees,a=r.minute;if(void 0===y._handlerMaxMinMinutesOptions(i,a))return;var h=y._handlerMaxMinMinutesOptions(i,a),c=h.degrees,d=h.minute;if(y._isMouseMove){if(S.addStyle(y._hand,{transform:"rotateZ(".concat(c,"deg)")}),void 0===d)return;y._minutes.textContent=10<=d||"00"===d?d:"0".concat(d),y._toggleClassActive(y.minutesArray,y._minutes,l),y._toggleBackgroundColorCircle("".concat(I)),y._objWithDataOnChange.degreesMinutes=c,y._objWithDataOnChange.minutes=d;}}if(s||u){var v=Math.trunc(180*f/Math.PI)+90,v=30*Math.round(v/30);if(S.addStyle(y._circle,{backgroundColor:"#1976d2"}),void 0===y._makeHourDegrees(o,v,void 0))return;y._objWithDataOnChange.degreesHours=v,y._handlerMaxMinHoursOptions(v,function(){var t,e;return ks()&&v?(t=(e=y._makeHourDegrees(p,v,void 0)).degrees,e=e.hour,y._handleMoveHand(p,e,t)):(t=(e=y._makeHourDegrees(o,v,void 0)).degrees,e=e.hour,y._handleMoveHand(o,e,t))},n,e);}t.stopPropagation();});}},{key:"_handleMoveHand",value:function(t,e,n){var r=x.find(".".concat(iu),this._modal),o=x.find(".".concat(cu),this._modal);this._isMouseMove&&(S.hasClass(t,Ys)||S.hasClass(t,cu)||S.hasClass(t,au)?S.addStyle(this._hand,{height:"21.5%"}):S.addStyle(this._hand,{height:"calc(40% + 1px)"}),S.addStyle(this._hand,{transform:"rotateZ(".concat(n,"deg)")}),this._hour.textContent=10<=e||"00"===e?e:"0".concat(e),this._toggleClassActive(this.hoursArray,this._hour,r),this._toggleClassActive(this.innerHours,this._hour,o),this._objWithDataOnChange.hour=10<=e||"00"===e?e:"0".concat(e));}},{key:"_handlerMaxMinMinutesOptions",value:function(t,e){var n=this._options,r=n.increment,o=n.maxTime,n=n.minTime,i=P(o,!1)[1],a=P(n,!1)[1],c=P(o,!1)[0],s=P(n,!1)[0],u=P(o,!1)[2],l=P(n,!1)[2],i=""!==i?6*i:"",a=""!==a?6*a:"";if(void 0===u&&void 0===l){if(""!==o&&""!==n){if(t<=i&&a<=t)return t}else if(""!==n&&Number(this._hour.textContent)<=Number(s)){if(t<=a-6)return t}else if(""!==o&&Number(this._hour.textContent)>=Number(c)&&i+6<=t)return t}else if(""!==n){if("PM"===l&&this._isAmEnabled)return;if("PM"===l&&this._isPmEnabled){if(Number(this._hour.textContent)<Number(s))return;if(Number(this._hour.textContent)<=Number(s)&&t<=a-6)return t}else if("AM"===l&&this._isAmEnabled){if(Number(this._hour.textContent)<Number(s))return;if(Number(this._hour.textContent)<=Number(s)&&t<=a-6)return t}}else if(""!==o){if("AM"===u&&this._isPmEnabled)return;if("PM"===u&&this._isPmEnabled){if(Number(this._hour.textContent)>=Number(c)&&i+6<=t)return t}else if("AM"===u&&this._isAmEnabled&&Number(this._hour.textContent)>=Number(c)&&i+6<=t)return t}return (t=r?30*Math.round(t/30):t)<=0?t=360+t:360<=t&&(t=0),{degrees:t,minute:e}}},{key:"_removeModal",value:function(){var t=this;setTimeout(function(){t._modal.remove(),S.addStyle(t._document.body,{overflow:""}),ks()||S.addStyle(t._document.body,{paddingRight:""});},300),Oc(this._document,"click keydown mousedown mouseup mousemove mouseleave mouseover touchmove touchend");}},{key:"_toggleBackdropAnimation",value:function(){0<arguments.length&&void 0!==arguments[0]&&arguments[0]?(S.addClass(this._wrapper,"animation"),S.addClass(this._wrapper,"fade-out"),this._wrapper.style.animationDuration="300ms"):(S.addClass(this._wrapper,"animation"),S.addClass(this._wrapper,"fade-in"),this._wrapper.style.animationDuration="300ms",this._options.inline||S.addClass(this._clock,Fs));}},{key:"_addActiveClassToTip",value:function(t,e){t.forEach(function(t){Number(t.textContent)===Number(e)&&S.addClass(t,M);});}},{key:"_setHourOrMinute",value:function(t){return t<10?"0".concat(t):t}},{key:"_appendTimes",value:function(){this._getAppendClock(this.hoursArray,".".concat(Vs),"".concat(iu));}},{key:"_getConfig",value:function(t){var e=S.getDataAttributes(this._element);return t=Es(Es(Es({},fu),e),t),Ba(m,t,du),t}}])&&Ps(t.prototype,e),n&&Ps(t,n),Object.defineProperty(t,"prototype",{writable:!1}),o}(),t=pu;function hu(t){return (hu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function vu(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function yu(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?vu(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):vu(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function mu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}_.on(window,"DOMContentLoaded",function(){x.find(".".concat(m)).forEach(function(t){var e=pu.getInstance(t);e||new pu(t);});});var g="stepper",gu="mdb.stepper",bu=".".concat(gu),_u="horizontal",wu="vertical",Ou={stepperType:"string",stepperLinear:"boolean",stepperNoEditable:"boolean",stepperActive:"string",stepperCompleted:"string",stepperInvalid:"string",stepperDisabled:"string",stepperVerticalBreakpoint:"number",stepperMobileBreakpoint:"number",stepperMobileBarBreakpoint:"number"},ku={stepperType:_u,stepperLinear:!1,stepperNoEditable:!1,stepperActive:"",stepperCompleted:"",stepperInvalid:"",stepperDisabled:"",stepperVerticalBreakpoint:0,stepperMobileBreakpoint:0,stepperMobileBarBreakpoint:4},Cu="mousedown".concat(bu),Su="keydown".concat(bu),xu="keyup".concat(bu),Eu="resize".concat(bu),ju="animationend",Tu="".concat(g,"-step"),w="".concat(g,"-head"),L="".concat(g,"-content"),Au="".concat(g,"-active"),Du="".concat(g,"-completed"),Pu="".concat(g,"-invalid"),Mu="".concat(g,"-disabled"),Iu="".concat(g,"-").concat(wu),Lu="".concat(g,"-content-hide"),Nu="".concat(g,"-").concat(_u),Ru=function(){function n(t,e){if(!(this instanceof n))throw new TypeError("Cannot call a class as a function");this._element=t,this._options=this._getConfig(e),this._elementHeight=0,this._steps=x.find(".".concat(Tu),this._element),this._currentView="",this._activeStepIndex=0,this._verticalStepperStyles=[],this._element&&(v.setData(t,gu,this),this._init());}var t,e,r;return t=n,r=[{key:"NAME",get:function(){return g}},{key:"getInstance",value:function(t){return v.getData(t,gu)}},{key:"getOrCreateInstance",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return this.getInstance(t)||new this(t,"object"===hu(e)?e:null)}}],(e=[{key:"activeStep",get:function(){return this._steps[this._activeStepIndex]}},{key:"activeStepIndex",get:function(){return this._activeStepIndex}},{key:"dispose",value:function(){this._steps.forEach(function(t){_.off(t,Cu),_.off(t,Su);}),_.off(window,Eu),v.removeData(this._element,gu),this._element=null;}},{key:"changeStep",value:function(t){this._toggleStep(t);}},{key:"nextStep",value:function(){this._toggleStep(this._activeStepIndex+1);}},{key:"previousStep",value:function(){this._toggleStep(this._activeStepIndex-1);}},{key:"_init",value:function(){var t=x.findOne(".".concat(Au),this._element);t?this._activeStepIndex=this._steps.indexOf(t):this._toggleStepClass(this._activeStepIndex,"add",Au),this._toggleStepClass(this._activeStepIndex,"add",this._options.stepperActive),this._bindMouseDown(),this._bindKeysNavigation(),this._options.stepperType===wu?this._toggleVertical():this._toggleHorizontal(),(this._options.stepperVerticalBreakpoint||this._options.stepperMobileBreakpoint)&&this._toggleStepperView(),this._bindResize();}},{key:"_getConfig",value:function(t){var e=S.getDataAttributes(this._element);return t=yu(yu(yu({},ku),e),t),Ba(g,t,Ou),t}},{key:"_bindMouseDown",value:function(){var n=this;this._steps.forEach(function(t){t=x.findOne(".".concat(w),t);_.on(t,Cu,function(t){var e=x.parents(t.target,".".concat(Tu))[0],e=n._steps.indexOf(e);t.preventDefault(),n._toggleStep(e);});});}},{key:"_bindResize",value:function(){var t=this;_.on(window,Eu,function(){t._currentView===wu&&t._setSingleStepHeight(t.activeStep),t._currentView===_u&&t._setHeight(t.activeStep),(t._options.stepperVerticalBreakpoint||t._options.stepperMobileBreakpoint)&&t._toggleStepperView();});}},{key:"_toggleStepperView",value:function(){var e=this,t=this._options.stepperVerticalBreakpoint<window.innerWidth,n=this._options.stepperVerticalBreakpoint>window.innerWidth,r=this._options.stepperMobileBreakpoint>window.innerWidth;t&&this._currentView!==_u&&this._toggleHorizontal(),n&&!r&&this._currentView!==wu&&(this._steps.forEach(function(t){t=x.findOne(".".concat(L),t);e._resetStepperHeight(),e._showElement(t);}),this._toggleVertical());}},{key:"_toggleStep",value:function(t){this._activeStepIndex!==t&&(this._options.stepperNoEditable&&this._toggleDisabled(),this._showElement(x.findOne(".".concat(L),this._steps[t])),this._toggleActive(t),t>this._activeStepIndex&&this._toggleCompleted(this._activeStepIndex),this._currentView===_u?this._animateHorizontalStep(t):(this._animateVerticalStep(t),this._setSingleStepHeight(this._steps[t])),this._toggleStepTabIndex(x.findOne(".".concat(w),this.activeStep),x.findOne(".".concat(w),this._steps[t])),this._activeStepIndex=t);}},{key:"_resetStepperHeight",value:function(){this._element.style.height="";}},{key:"_setStepsHeight",value:function(){var n=this;this._steps.forEach(function(t){var t=x.findOne(".".concat(L),t),e=window.getComputedStyle(t),e=(n._verticalStepperStyles.push({paddingTop:parseFloat(e.paddingTop),paddingBottom:parseFloat(e.paddingBottom)}),t.scrollHeight);t.style.height="".concat(e,"px");});}},{key:"_setSingleStepHeight",value:function(t){var e=x.findOne(".".concat(L),t),n=this.activeStep===t,t=this._steps.indexOf(t),n=n?(e.style.height="",e.scrollHeight):e.scrollHeight+this._verticalStepperStyles[t].paddingTop+this._verticalStepperStyles[t].paddingBottom;e.style.height="".concat(n,"px");}},{key:"_toggleVertical",value:function(){this._currentView=wu,this._toggleStepperClass(Iu),this._setStepsHeight(),this._hideInactiveSteps();}},{key:"_toggleHorizontal",value:function(){this._currentView=_u,this._toggleStepperClass(Nu),this._setHeight(this.activeStep),this._hideInactiveSteps();}},{key:"_toggleStepperClass",value:function(t){this._element.classList.remove(Nu,Iu),this._element.classList.add(t),t!==Iu&&this._steps.forEach(function(t){x.findOne(".".concat(L),t).classList.remove(Lu);});}},{key:"_toggleStepClass",value:function(t,e,n){n&&this._steps[t].classList[e](n);}},{key:"_bindKeysNavigation",value:function(){var s=this;this._toggleStepTabIndex(!1,x.findOne(".".concat(w),this.activeStep)),this._steps.forEach(function(t){t=x.findOne(".".concat(w),t);_.on(t,Su,function(t){var e=x.parents(t.currentTarget,".".concat(Tu))[0],n=x.next(e,".".concat(Tu))[0],r=x.prev(e,".".concat(Tu))[0],o=x.findOne(".".concat(w),e),i=x.findOne(".".concat(w),s.activeStep),a=null,c=null;n&&(a=x.findOne(".".concat(w),n)),r&&(c=x.findOne(".".concat(w),r)),37===t.keyCode&&s._currentView!==wu&&(c?(s._toggleStepTabIndex(o,c),s._toggleOutlineStyles(o,c),c.focus()):a&&(s._toggleStepTabIndex(o,a),s._toggleOutlineStyles(o,a),a.focus())),39===t.keyCode&&s._currentView!==wu&&(a?(s._toggleStepTabIndex(o,a),s._toggleOutlineStyles(o,a),a.focus()):c&&(s._toggleStepTabIndex(o,c),s._toggleOutlineStyles(o,c),c.focus())),40===t.keyCode&&s._currentView===wu&&(t.preventDefault(),a&&(s._toggleStepTabIndex(o,a),s._toggleOutlineStyles(o,a),a.focus())),38===t.keyCode&&s._currentView===wu&&(t.preventDefault(),c&&(s._toggleStepTabIndex(o,c),s._toggleOutlineStyles(o,c),c.focus())),36===t.keyCode&&(n=x.findOne(".".concat(w),s._steps[0]),s._toggleStepTabIndex(o,n),s._toggleOutlineStyles(o,n),n.focus()),35===t.keyCode&&(r=s._steps[s._steps.length-1],a=x.findOne(".".concat(w),r),s._toggleStepTabIndex(o,a),s._toggleOutlineStyles(o,a),a.focus()),13!==t.keyCode&&32!==t.keyCode||(t.preventDefault(),s.changeStep(s._steps.indexOf(e))),9===t.keyCode&&(s._toggleStepTabIndex(o,i),s._toggleOutlineStyles(o,!1),i.focus());}),_.on(t,xu,function(t){var e=x.parents(t.currentTarget,".".concat(Tu))[0],e=x.findOne(".".concat(w),e),n=x.findOne(".".concat(w),s.activeStep);9===t.keyCode&&(s._toggleStepTabIndex(e,n),s._toggleOutlineStyles(!1,n),n.focus());});});}},{key:"_toggleStepTabIndex",value:function(t,e){t&&t.setAttribute("tabIndex",-1),e&&e.setAttribute("tabIndex",0);}},{key:"_toggleOutlineStyles",value:function(t,e){t&&(t.style.outline=""),e&&(e.style.outline="revert");}},{key:"_toggleDisabled",value:function(){this._toggleStepClass(this._activeStepIndex,"add",Mu),this._toggleStepClass(this._activeStepIndex,"add",this._options.stepperDisabled);}},{key:"_toggleActive",value:function(t){this._toggleStepClass(t,"add",Au),this._toggleStepClass(this._activeStepIndex,"remove",Au),this._toggleStepClass(t,"add",this._options.stepperActive),this._toggleStepClass(this._activeStepIndex,"remove",this._options.stepperActive);}},{key:"_toggleCompleted",value:function(t){this._toggleStepClass(t,"add",Du),this._toggleStepClass(t,"remove",Pu),this._toggleStepClass(t,"add",this._options.stepperCompleted),this._toggleStepClass(t,"remove",this._options.stepperInvalid);}},{key:"_hideInactiveSteps",value:function(){var e=this;this._steps.forEach(function(t){t.classList.contains(Au)||e._hideElement(x.findOne(".".concat(L),t));});}},{key:"_setHeight",value:function(t){var e=x.findOne(".".concat(L),t),n=getComputedStyle(e),t=x.findOne(".".concat(w),t),r=getComputedStyle(t),e=e.offsetHeight+parseFloat(n.marginTop)+parseFloat(n.marginBottom),n=t.offsetHeight+parseFloat(r.marginTop)+parseFloat(r.marginBottom);this._element.style.height="".concat(n+e,"px");}},{key:"_hideElement",value:function(t){x.parents(t,".".concat(Tu))[0].classList.contains(Au)||this._currentView===wu?t.classList.add(Lu):t.style.display="none";}},{key:"_showElement",value:function(t){this._currentView===wu?t.classList.remove(Lu):t.style.display="block";}},{key:"_animateHorizontalStep",value:function(n){var t,r=this,e=n>this._activeStepIndex,o=x.findOne(".".concat(L),this._steps[n]),i=x.findOne(".".concat(L),this.activeStep);this._steps.forEach(function(t,e){t=x.findOne(".".concat(L),t);r._clearStepAnimation(t),e!==n&&e!==r._activeStepIndex&&r._hideElement(t);}),e=e?(t="slide-out-left","slide-in-right"):(t="slide-out-right","slide-in-left"),i.classList.add(t,"animation","fast"),o.classList.add(e,"animation","fast"),this._setHeight(this._steps[n]),_.one(i,ju,function(t){r._clearStepAnimation(t.target),r._hideElement(t.target);}),_.one(o,ju,function(t){r._clearStepAnimation(t.target);});}},{key:"_animateVerticalStep",value:function(t){var t=x.findOne(".".concat(L),this._steps[t]),e=x.findOne(".".concat(L),this.activeStep);this._hideElement(e),this._showElement(t);}},{key:"_clearStepAnimation",value:function(t){t.classList.remove("slide-out-left","slide-in-right","slide-out-right","slide-in-left","animation","fast");}}])&&mu(t.prototype,e),r&&mu(t,r),Object.defineProperty(t,"prototype",{writable:!1}),n}(),bu=(x.find('[data-mdb-stepper="stepper"]').forEach(function(t){return Ru.getInstance(t)||new Ru(t)}),Ru);window.Alert=n,window.Button=R,window.Dropdown=bn,window.Carousel=vo,window.Collapse=jn,window.Offcanvas=r,window.Modal=Io,window.Popover=l,window.ScrollSpy=o,window.Tab=_a,window.Toast=h,window.Tooltip=Ri,window.Ripple=zc,window.Datepicker=ds,window.Timepicker=t,window.Stepper=bu;}]);

    /* src\components\Navbar.svelte generated by Svelte v3.49.0 */

    const file$b = "src\\components\\Navbar.svelte";

    function create_fragment$c(ctx) {
    	let nav;
    	let div;
    	let a;
    	let t1;
    	let hr;

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			div = element("div");
    			a = element("a");
    			a.textContent = "USARS Mapping";
    			t1 = space();
    			hr = element("hr");
    			attr_dev(a, "href", "#/");
    			attr_dev(a, "class", "py-4 text-xl ");
    			add_location(a, file$b, 5, 2, 98);
    			attr_dev(div, "class", "flex items-center space-x-4");
    			add_location(div, file$b, 4, 1, 53);
    			attr_dev(nav, "class", "bg-dark px-5 ");
    			add_location(nav, file$b, 3, 0, 23);
    			add_location(hr, file$b, 9, 0, 173);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			append_dev(nav, div);
    			append_dev(div, a);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, hr, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(hr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Navbar', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Navbar> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Navbar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Navbar",
    			options,
    			id: create_fragment$c.name
    		});
    	}
    }

    /* src\components\Footer.svelte generated by Svelte v3.49.0 */

    const file$a = "src\\components\\Footer.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    // (75:3) {#each projectList as item}
    function create_each_block_2(ctx) {
    	let div;
    	let a;
    	let t0_value = /*item*/ ctx[3].name + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			a = element("a");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(a, "href", `#${/*item*/ ctx[3].link}`);
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "rel", "noreferrer");
    			attr_dev(a, "class", "text-sm hover:underline");
    			add_location(a, file$a, 76, 5, 1506);
    			attr_dev(div, "key", /*item*/ ctx[3].id);
    			attr_dev(div, "class", "my-2");
    			add_location(div, file$a, 75, 4, 1467);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, a);
    			append_dev(a, t0);
    			append_dev(div, t1);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(75:3) {#each projectList as item}",
    		ctx
    	});

    	return block;
    }

    // (84:3) {#each applicationToolsList as item}
    function create_each_block_1(ctx) {
    	let div;
    	let a;
    	let t0_value = /*item*/ ctx[3].name + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			a = element("a");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(a, "href", `${/*item*/ ctx[3].link}`);
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "rel", "noreferrer");
    			attr_dev(a, "class", "text-sm hover:underline");
    			add_location(a, file$a, 85, 5, 1810);
    			attr_dev(div, "key", /*item*/ ctx[3].id);
    			attr_dev(div, "class", "my-2");
    			add_location(div, file$a, 84, 4, 1771);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, a);
    			append_dev(a, t0);
    			append_dev(div, t1);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(84:3) {#each applicationToolsList as item}",
    		ctx
    	});

    	return block;
    }

    // (94:3) {#each aboutList as item}
    function create_each_block$2(ctx) {
    	let div;
    	let a;
    	let t0_value = /*item*/ ctx[3].name + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			a = element("a");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(a, "href", `${/*item*/ ctx[3].link}`);
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "class", "text-sm hover:underline");
    			attr_dev(a, "rel", "noreferrer");
    			add_location(a, file$a, 95, 5, 2093);
    			attr_dev(div, "key", /*item*/ ctx[3].id);
    			attr_dev(div, "class", "my-2");
    			add_location(div, file$a, 94, 4, 2054);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, a);
    			append_dev(a, t0);
    			append_dev(div, t1);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(94:3) {#each aboutList as item}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let hr;
    	let t0;
    	let footer;
    	let div3;
    	let div0;
    	let p0;
    	let t2;
    	let t3;
    	let div1;
    	let p1;
    	let t5;
    	let t6;
    	let div2;
    	let p2;
    	let t8;
    	let t9;
    	let div7;
    	let div4;
    	let p3;
    	let t11;
    	let p4;
    	let t13;
    	let p5;
    	let t15;
    	let p6;
    	let t17;
    	let div5;
    	let t18;
    	let div6;
    	let p7;
    	let t20;
    	let p8;
    	let each_value_2 = /*projectList*/ ctx[0];
    	validate_each_argument(each_value_2);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	let each_value_1 = /*applicationToolsList*/ ctx[1];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	let each_value = /*aboutList*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			hr = element("hr");
    			t0 = space();
    			footer = element("footer");
    			div3 = element("div");
    			div0 = element("div");
    			p0 = element("p");
    			p0.textContent = "Project Details";
    			t2 = space();

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t3 = space();
    			div1 = element("div");
    			p1 = element("p");
    			p1.textContent = "Application Tools";
    			t5 = space();

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t6 = space();
    			div2 = element("div");
    			p2 = element("p");
    			p2.textContent = "About";
    			t8 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t9 = space();
    			div7 = element("div");
    			div4 = element("div");
    			p3 = element("p");
    			p3.textContent = "Disclaimer";
    			t11 = space();
    			p4 = element("p");
    			p4.textContent = "© CAPSTONE API. All rights reserved.";
    			t13 = space();
    			p5 = element("p");
    			p5.textContent = "Website Terms and Policies";
    			t15 = space();
    			p6 = element("p");
    			p6.textContent = "If you require any more information or have any questions about our sites disclaimer, please feel free to contact me by email at alexcanales766@gmail.com. The Disclaimer was generated with the\r\n\t\t\t\thelp of the Disclaimer Generator. All the information on this website - Showcase - is published in good faith and for general information purpose only.";
    			t17 = space();
    			div5 = element("div");
    			t18 = space();
    			div6 = element("div");
    			p7 = element("p");
    			p7.textContent = "License Terms";
    			t20 = space();
    			p8 = element("p");
    			p8.textContent = "Welcome to the CAPSTONE API portal. The objective of this site is to make CAPSTONE data, including imagery, eminently accessible to application developers.";
    			add_location(hr, file$a, 68, 0, 1256);
    			attr_dev(p0, "class", "font-bold");
    			add_location(p0, file$a, 72, 3, 1387);
    			attr_dev(div0, "class", "col-span-1 ");
    			add_location(div0, file$a, 71, 2, 1357);
    			attr_dev(p1, "class", "font-bold");
    			add_location(p1, file$a, 82, 3, 1682);
    			attr_dev(div1, "class", "col-span-1");
    			add_location(div1, file$a, 81, 2, 1653);
    			attr_dev(p2, "class", "font-bold");
    			add_location(p2, file$a, 91, 3, 1986);
    			attr_dev(div2, "class", "col-span-1 ");
    			add_location(div2, file$a, 90, 2, 1956);
    			attr_dev(div3, "class", "grid grid-cols-1 md:grid-cols-3 py-2");
    			add_location(div3, file$a, 70, 1, 1303);
    			attr_dev(p3, "class", "font-bold");
    			add_location(p3, file$a, 103, 3, 2330);
    			attr_dev(p4, "class", "font-bold text-xs my-2");
    			add_location(p4, file$a, 104, 3, 2370);
    			attr_dev(p5, "class", "font-bold text-xs my-2");
    			add_location(p5, file$a, 105, 3, 2449);
    			attr_dev(p6, "class", "text-xs my-2");
    			add_location(p6, file$a, 107, 3, 2520);
    			attr_dev(div4, "class", "col-span-1");
    			add_location(div4, file$a, 102, 2, 2301);
    			attr_dev(div5, "class", "col-span-1 py-2 ");
    			add_location(div5, file$a, 113, 2, 2924);
    			attr_dev(p7, "class", "font-bold");
    			add_location(p7, file$a, 116, 3, 2991);
    			attr_dev(p8, "class", "text-xs my-2");
    			add_location(p8, file$a, 118, 3, 3036);
    			attr_dev(div6, "class", "col-span-1");
    			add_location(div6, file$a, 115, 2, 2962);
    			attr_dev(div7, "class", "grid grid-cols-1 sm:grid-cols-3 mt-8");
    			add_location(div7, file$a, 101, 1, 2247);
    			attr_dev(footer, "class", "bg-smoke py-8 px-5");
    			add_location(footer, file$a, 69, 0, 1264);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, hr, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, footer, anchor);
    			append_dev(footer, div3);
    			append_dev(div3, div0);
    			append_dev(div0, p0);
    			append_dev(div0, t2);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(div0, null);
    			}

    			append_dev(div3, t3);
    			append_dev(div3, div1);
    			append_dev(div1, p1);
    			append_dev(div1, t5);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div1, null);
    			}

    			append_dev(div3, t6);
    			append_dev(div3, div2);
    			append_dev(div2, p2);
    			append_dev(div2, t8);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div2, null);
    			}

    			append_dev(footer, t9);
    			append_dev(footer, div7);
    			append_dev(div7, div4);
    			append_dev(div4, p3);
    			append_dev(div4, t11);
    			append_dev(div4, p4);
    			append_dev(div4, t13);
    			append_dev(div4, p5);
    			append_dev(div4, t15);
    			append_dev(div4, p6);
    			append_dev(div7, t17);
    			append_dev(div7, div5);
    			append_dev(div7, t18);
    			append_dev(div7, div6);
    			append_dev(div6, p7);
    			append_dev(div6, t20);
    			append_dev(div6, p8);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*projectList*/ 1) {
    				each_value_2 = /*projectList*/ ctx[0];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_2(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}

    				each_blocks_2.length = each_value_2.length;
    			}

    			if (dirty & /*applicationToolsList*/ 2) {
    				each_value_1 = /*applicationToolsList*/ ctx[1];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(div1, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*aboutList*/ 4) {
    				each_value = /*aboutList*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div2, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(hr);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(footer);
    			destroy_each(each_blocks_2, detaching);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Footer', slots, []);

    	const projectList = [
    		{
    			id: 0,
    			name: "Mapping UI Github",
    			link: "https://github.com/canaleal/Capstone_Map_Client"
    		},
    		{
    			id: 1,
    			name: "Pothole Object Detection",
    			link: "https://github.com/canaleal/PotholeObjectDetection"
    		},
    		{
    			id: 2,
    			name: "Project Capstone",
    			link: "https://github.com/canaleal/Capstone"
    		}
    	];

    	const applicationToolsList = [
    		{
    			id: 0,
    			name: "Animista",
    			link: "https://animista.net/play/basic"
    		},
    		{
    			id: 1,
    			name: "Developer Icons",
    			link: "https://devicon.dev/"
    		},
    		{
    			id: 2,
    			name: "Color Designer",
    			link: "https://colordesigner.io/tools"
    		},
    		{
    			id: 3,
    			name: "Font Awesome",
    			link: "https://fontawesome.com/"
    		},
    		{
    			id: 4,
    			name: "Cool Backgrounds",
    			link: "https://coolbackgrounds.io/"
    		},
    		{
    			id: 5,
    			name: "Gradient Generator",
    			link: "https://cssgradient.io/"
    		}
    	];

    	const aboutList = [
    		{
    			id: 0,
    			name: "Linkedin",
    			link: "https://www.linkedin.com/in/alex-canales"
    		},
    		{
    			id: 1,
    			name: "Github",
    			link: "https://github.com/canaleal"
    		},
    		{
    			id: 2,
    			name: "Bitbucket",
    			link: "https://bitbucket.org/Canaleal/"
    		}
    	];

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Footer> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		projectList,
    		applicationToolsList,
    		aboutList
    	});

    	return [projectList, applicationToolsList, aboutList];
    }

    class Footer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Footer",
    			options,
    			id: create_fragment$b.name
    		});
    	}
    }

    var bind = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };

    // utils is a library of generic helper functions non-specific to axios

    var toString = Object.prototype.toString;

    // eslint-disable-next-line func-names
    var kindOf = (function(cache) {
      // eslint-disable-next-line func-names
      return function(thing) {
        var str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
      };
    })(Object.create(null));

    function kindOfTest(type) {
      type = type.toLowerCase();
      return function isKindOf(thing) {
        return kindOf(thing) === type;
      };
    }

    /**
     * Determine if a value is an Array
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Array, otherwise false
     */
    function isArray$1(val) {
      return Array.isArray(val);
    }

    /**
     * Determine if a value is undefined
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if the value is undefined, otherwise false
     */
    function isUndefined(val) {
      return typeof val === 'undefined';
    }

    /**
     * Determine if a value is a Buffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Buffer, otherwise false
     */
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
        && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
    }

    /**
     * Determine if a value is an ArrayBuffer
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an ArrayBuffer, otherwise false
     */
    var isArrayBuffer = kindOfTest('ArrayBuffer');


    /**
     * Determine if a value is a view on an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
     */
    function isArrayBufferView(val) {
      var result;
      if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
        result = ArrayBuffer.isView(val);
      } else {
        result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
      }
      return result;
    }

    /**
     * Determine if a value is a String
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a String, otherwise false
     */
    function isString$1(val) {
      return typeof val === 'string';
    }

    /**
     * Determine if a value is a Number
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Number, otherwise false
     */
    function isNumber$1(val) {
      return typeof val === 'number';
    }

    /**
     * Determine if a value is an Object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Object, otherwise false
     */
    function isObject$1(val) {
      return val !== null && typeof val === 'object';
    }

    /**
     * Determine if a value is a plain Object
     *
     * @param {Object} val The value to test
     * @return {boolean} True if value is a plain Object, otherwise false
     */
    function isPlainObject(val) {
      if (kindOf(val) !== 'object') {
        return false;
      }

      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }

    /**
     * Determine if a value is a Date
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Date, otherwise false
     */
    var isDate$1 = kindOfTest('Date');

    /**
     * Determine if a value is a File
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a File, otherwise false
     */
    var isFile = kindOfTest('File');

    /**
     * Determine if a value is a Blob
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Blob, otherwise false
     */
    var isBlob = kindOfTest('Blob');

    /**
     * Determine if a value is a FileList
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a File, otherwise false
     */
    var isFileList = kindOfTest('FileList');

    /**
     * Determine if a value is a Function
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Function, otherwise false
     */
    function isFunction(val) {
      return toString.call(val) === '[object Function]';
    }

    /**
     * Determine if a value is a Stream
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Stream, otherwise false
     */
    function isStream(val) {
      return isObject$1(val) && isFunction(val.pipe);
    }

    /**
     * Determine if a value is a FormData
     *
     * @param {Object} thing The value to test
     * @returns {boolean} True if value is an FormData, otherwise false
     */
    function isFormData(thing) {
      var pattern = '[object FormData]';
      return thing && (
        (typeof FormData === 'function' && thing instanceof FormData) ||
        toString.call(thing) === pattern ||
        (isFunction(thing.toString) && thing.toString() === pattern)
      );
    }

    /**
     * Determine if a value is a URLSearchParams object
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a URLSearchParams object, otherwise false
     */
    var isURLSearchParams = kindOfTest('URLSearchParams');

    /**
     * Trim excess whitespace off the beginning and end of a string
     *
     * @param {String} str The String to trim
     * @returns {String} The String freed of excess whitespace
     */
    function trim$1(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
    }

    /**
     * Determine if we're running in a standard browser environment
     *
     * This allows axios to run in a web worker, and react-native.
     * Both environments support XMLHttpRequest, but not fully standard globals.
     *
     * web workers:
     *  typeof window -> undefined
     *  typeof document -> undefined
     *
     * react-native:
     *  navigator.product -> 'ReactNative'
     * nativescript
     *  navigator.product -> 'NativeScript' or 'NS'
     */
    function isStandardBrowserEnv() {
      if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                               navigator.product === 'NativeScript' ||
                                               navigator.product === 'NS')) {
        return false;
      }
      return (
        typeof window !== 'undefined' &&
        typeof document !== 'undefined'
      );
    }

    /**
     * Iterate over an Array or an Object invoking a function for each item.
     *
     * If `obj` is an Array callback will be called passing
     * the value, index, and complete array for each item.
     *
     * If 'obj' is an Object callback will be called passing
     * the value, key, and complete object for each property.
     *
     * @param {Object|Array} obj The object to iterate
     * @param {Function} fn The callback to invoke for each item
     */
    function forEach(obj, fn) {
      // Don't bother if no value provided
      if (obj === null || typeof obj === 'undefined') {
        return;
      }

      // Force an array if not already something iterable
      if (typeof obj !== 'object') {
        /*eslint no-param-reassign:0*/
        obj = [obj];
      }

      if (isArray$1(obj)) {
        // Iterate over array values
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        // Iterate over object keys
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }

    /**
     * Accepts varargs expecting each argument to be an object, then
     * immutably merges the properties of each object and returns result.
     *
     * When multiple objects contain the same key the later object in
     * the arguments list will take precedence.
     *
     * Example:
     *
     * ```js
     * var result = merge({foo: 123}, {foo: 456});
     * console.log(result.foo); // outputs 456
     * ```
     *
     * @param {Object} obj1 Object to merge
     * @returns {Object} Result of all merge properties
     */
    function merge(/* obj1, obj2, obj3, ... */) {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray$1(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }

      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }

    /**
     * Extends object a by mutably adding to it the properties of object b.
     *
     * @param {Object} a The object to be extended
     * @param {Object} b The object to copy properties from
     * @param {Object} thisArg The object to bind function to
     * @return {Object} The resulting value of object a
     */
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === 'function') {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }

    /**
     * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
     *
     * @param {string} content with BOM
     * @return {string} content value without BOM
     */
    function stripBOM(content) {
      if (content.charCodeAt(0) === 0xFEFF) {
        content = content.slice(1);
      }
      return content;
    }

    /**
     * Inherit the prototype methods from one constructor into another
     * @param {function} constructor
     * @param {function} superConstructor
     * @param {object} [props]
     * @param {object} [descriptors]
     */

    function inherits(constructor, superConstructor, props, descriptors) {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors);
      constructor.prototype.constructor = constructor;
      props && Object.assign(constructor.prototype, props);
    }

    /**
     * Resolve object with deep prototype chain to a flat object
     * @param {Object} sourceObj source object
     * @param {Object} [destObj]
     * @param {Function} [filter]
     * @returns {Object}
     */

    function toFlatObject(sourceObj, destObj, filter) {
      var props;
      var i;
      var prop;
      var merged = {};

      destObj = destObj || {};

      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if (!merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = Object.getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

      return destObj;
    }

    /*
     * determines whether a string ends with the characters of a specified string
     * @param {String} str
     * @param {String} searchString
     * @param {Number} [position= 0]
     * @returns {boolean}
     */
    function endsWith(str, searchString, position) {
      str = String(str);
      if (position === undefined || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      var lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    }


    /**
     * Returns new array from array like object
     * @param {*} [thing]
     * @returns {Array}
     */
    function toArray$1(thing) {
      if (!thing) return null;
      var i = thing.length;
      if (isUndefined(i)) return null;
      var arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    }

    // eslint-disable-next-line func-names
    var isTypedArray = (function(TypedArray) {
      // eslint-disable-next-line func-names
      return function(thing) {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== 'undefined' && Object.getPrototypeOf(Uint8Array));

    var utils = {
      isArray: isArray$1,
      isArrayBuffer: isArrayBuffer,
      isBuffer: isBuffer,
      isFormData: isFormData,
      isArrayBufferView: isArrayBufferView,
      isString: isString$1,
      isNumber: isNumber$1,
      isObject: isObject$1,
      isPlainObject: isPlainObject,
      isUndefined: isUndefined,
      isDate: isDate$1,
      isFile: isFile,
      isBlob: isBlob,
      isFunction: isFunction,
      isStream: isStream,
      isURLSearchParams: isURLSearchParams,
      isStandardBrowserEnv: isStandardBrowserEnv,
      forEach: forEach,
      merge: merge,
      extend: extend,
      trim: trim$1,
      stripBOM: stripBOM,
      inherits: inherits,
      toFlatObject: toFlatObject,
      kindOf: kindOf,
      kindOfTest: kindOfTest,
      endsWith: endsWith,
      toArray: toArray$1,
      isTypedArray: isTypedArray,
      isFileList: isFileList
    };

    function encode(val) {
      return encodeURIComponent(val).
        replace(/%3A/gi, ':').
        replace(/%24/g, '$').
        replace(/%2C/gi, ',').
        replace(/%20/g, '+').
        replace(/%5B/gi, '[').
        replace(/%5D/gi, ']');
    }

    /**
     * Build a URL by appending params to the end
     *
     * @param {string} url The base of the url (e.g., http://www.google.com)
     * @param {object} [params] The params to be appended
     * @returns {string} The formatted url
     */
    var buildURL = function buildURL(url, params, paramsSerializer) {
      /*eslint no-param-reassign:0*/
      if (!params) {
        return url;
      }

      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];

        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === 'undefined') {
            return;
          }

          if (utils.isArray(val)) {
            key = key + '[]';
          } else {
            val = [val];
          }

          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + '=' + encode(v));
          });
        });

        serializedParams = parts.join('&');
      }

      if (serializedParams) {
        var hashmarkIndex = url.indexOf('#');
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }

        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
      }

      return url;
    };

    function InterceptorManager() {
      this.handlers = [];
    }

    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };

    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     */
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };

    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     */
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };

    var InterceptorManager_1 = InterceptorManager;

    var normalizeHeaderName = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };

    /**
     * Create an Error with the specified message, config, error code, request and response.
     *
     * @param {string} message The error message.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [config] The config.
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The created error.
     */
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      this.message = message;
      this.name = 'AxiosError';
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }

    utils.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });

    var prototype = AxiosError.prototype;
    var descriptors = {};

    [
      'ERR_BAD_OPTION_VALUE',
      'ERR_BAD_OPTION',
      'ECONNABORTED',
      'ETIMEDOUT',
      'ERR_NETWORK',
      'ERR_FR_TOO_MANY_REDIRECTS',
      'ERR_DEPRECATED',
      'ERR_BAD_RESPONSE',
      'ERR_BAD_REQUEST',
      'ERR_CANCELED'
    // eslint-disable-next-line func-names
    ].forEach(function(code) {
      descriptors[code] = {value: code};
    });

    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype, 'isAxiosError', {value: true});

    // eslint-disable-next-line func-names
    AxiosError.from = function(error, code, config, request, response, customProps) {
      var axiosError = Object.create(prototype);

      utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      });

      AxiosError.call(axiosError, error.message, code, config, request, response);

      axiosError.name = error.name;

      customProps && Object.assign(axiosError, customProps);

      return axiosError;
    };

    var AxiosError_1 = AxiosError;

    var transitional = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };

    /**
     * Convert a data object to FormData
     * @param {Object} obj
     * @param {?Object} [formData]
     * @returns {Object}
     **/

    function toFormData(obj, formData) {
      // eslint-disable-next-line no-param-reassign
      formData = formData || new FormData();

      var stack = [];

      function convertValue(value) {
        if (value === null) return '';

        if (utils.isDate(value)) {
          return value.toISOString();
        }

        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
          return typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
        }

        return value;
      }

      function build(data, parentKey) {
        if (utils.isPlainObject(data) || utils.isArray(data)) {
          if (stack.indexOf(data) !== -1) {
            throw Error('Circular reference detected in ' + parentKey);
          }

          stack.push(data);

          utils.forEach(data, function each(value, key) {
            if (utils.isUndefined(value)) return;
            var fullKey = parentKey ? parentKey + '.' + key : key;
            var arr;

            if (value && !parentKey && typeof value === 'object') {
              if (utils.endsWith(key, '{}')) {
                // eslint-disable-next-line no-param-reassign
                value = JSON.stringify(value);
              } else if (utils.endsWith(key, '[]') && (arr = utils.toArray(value))) {
                // eslint-disable-next-line func-names
                arr.forEach(function(el) {
                  !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
                });
                return;
              }
            }

            build(value, fullKey);
          });

          stack.pop();
        } else {
          formData.append(parentKey, convertValue(data));
        }
      }

      build(obj);

      return formData;
    }

    var toFormData_1 = toFormData;

    /**
     * Resolve or reject a Promise based on response status.
     *
     * @param {Function} resolve A function that resolves the promise.
     * @param {Function} reject A function that rejects the promise.
     * @param {object} response The response.
     */
    var settle = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError_1(
          'Request failed with status code ' + response.status,
          [AxiosError_1.ERR_BAD_REQUEST, AxiosError_1.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    };

    var cookies = (
      utils.isStandardBrowserEnv() ?

      // Standard browser envs support document.cookie
        (function standardBrowserEnv() {
          return {
            write: function write(name, value, expires, path, domain, secure) {
              var cookie = [];
              cookie.push(name + '=' + encodeURIComponent(value));

              if (utils.isNumber(expires)) {
                cookie.push('expires=' + new Date(expires).toGMTString());
              }

              if (utils.isString(path)) {
                cookie.push('path=' + path);
              }

              if (utils.isString(domain)) {
                cookie.push('domain=' + domain);
              }

              if (secure === true) {
                cookie.push('secure');
              }

              document.cookie = cookie.join('; ');
            },

            read: function read(name) {
              var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
              return (match ? decodeURIComponent(match[3]) : null);
            },

            remove: function remove(name) {
              this.write(name, '', Date.now() - 86400000);
            }
          };
        })() :

      // Non standard browser env (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return {
            write: function write() {},
            read: function read() { return null; },
            remove: function remove() {}
          };
        })()
    );

    /**
     * Determines whether the specified URL is absolute
     *
     * @param {string} url The URL to test
     * @returns {boolean} True if the specified URL is absolute, otherwise false
     */
    var isAbsoluteURL = function isAbsoluteURL(url) {
      // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
      // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
      // by any combination of letters, digits, plus, period, or hyphen.
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };

    /**
     * Creates a new URL by combining the specified URLs
     *
     * @param {string} baseURL The base URL
     * @param {string} relativeURL The relative URL
     * @returns {string} The combined URL
     */
    var combineURLs = function combineURLs(baseURL, relativeURL) {
      return relativeURL
        ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
        : baseURL;
    };

    /**
     * Creates a new URL by combining the baseURL with the requestedURL,
     * only when the requestedURL is not already an absolute URL.
     * If the requestURL is absolute, this function returns the requestedURL untouched.
     *
     * @param {string} baseURL The base URL
     * @param {string} requestedURL Absolute or relative URL to combine
     * @returns {string} The combined full path
     */
    var buildFullPath = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };

    // Headers whose duplicates are ignored by node
    // c.f. https://nodejs.org/api/http.html#http_message_headers
    var ignoreDuplicateOf = [
      'age', 'authorization', 'content-length', 'content-type', 'etag',
      'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
      'last-modified', 'location', 'max-forwards', 'proxy-authorization',
      'referer', 'retry-after', 'user-agent'
    ];

    /**
     * Parse headers into an object
     *
     * ```
     * Date: Wed, 27 Aug 2014 08:58:49 GMT
     * Content-Type: application/json
     * Connection: keep-alive
     * Transfer-Encoding: chunked
     * ```
     *
     * @param {String} headers Headers needing to be parsed
     * @returns {Object} Headers parsed into an object
     */
    var parseHeaders = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;

      if (!headers) { return parsed; }

      utils.forEach(headers.split('\n'), function parser(line) {
        i = line.indexOf(':');
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));

        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === 'set-cookie') {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
          }
        }
      });

      return parsed;
    };

    var isURLSameOrigin = (
      utils.isStandardBrowserEnv() ?

      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
        (function standardBrowserEnv() {
          var msie = /(msie|trident)/i.test(navigator.userAgent);
          var urlParsingNode = document.createElement('a');
          var originURL;

          /**
        * Parse a URL to discover it's components
        *
        * @param {String} url The URL to be parsed
        * @returns {Object}
        */
          function resolveURL(url) {
            var href = url;

            if (msie) {
            // IE needs attribute set twice to normalize properties
              urlParsingNode.setAttribute('href', href);
              href = urlParsingNode.href;
            }

            urlParsingNode.setAttribute('href', href);

            // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
            return {
              href: urlParsingNode.href,
              protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
              host: urlParsingNode.host,
              search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
              hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
              hostname: urlParsingNode.hostname,
              port: urlParsingNode.port,
              pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                urlParsingNode.pathname :
                '/' + urlParsingNode.pathname
            };
          }

          originURL = resolveURL(window.location.href);

          /**
        * Determine if a URL shares the same origin as the current location
        *
        * @param {String} requestURL The URL to test
        * @returns {boolean} True if URL shares the same origin, otherwise false
        */
          return function isURLSameOrigin(requestURL) {
            var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
            return (parsed.protocol === originURL.protocol &&
                parsed.host === originURL.host);
          };
        })() :

      // Non standard browser envs (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return function isURLSameOrigin() {
            return true;
          };
        })()
    );

    /**
     * A `CanceledError` is an object that is thrown when an operation is canceled.
     *
     * @class
     * @param {string=} message The message.
     */
    function CanceledError(message) {
      // eslint-disable-next-line no-eq-null,eqeqeq
      AxiosError_1.call(this, message == null ? 'canceled' : message, AxiosError_1.ERR_CANCELED);
      this.name = 'CanceledError';
    }

    utils.inherits(CanceledError, AxiosError_1, {
      __CANCEL__: true
    });

    var CanceledError_1 = CanceledError;

    var parseProtocol = function parseProtocol(url) {
      var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || '';
    };

    var xhr = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }

          if (config.signal) {
            config.signal.removeEventListener('abort', onCanceled);
          }
        }

        if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {
          delete requestHeaders['Content-Type']; // Let the browser set it
        }

        var request = new XMLHttpRequest();

        // HTTP basic authentication
        if (config.auth) {
          var username = config.auth.username || '';
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
          requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
        }

        var fullPath = buildFullPath(config.baseURL, config.url);

        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

        // Set the request timeout in MS
        request.timeout = config.timeout;

        function onloadend() {
          if (!request) {
            return;
          }
          // Prepare the response
          var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
            request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config,
            request: request
          };

          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);

          // Clean up request
          request = null;
        }

        if ('onloadend' in request) {
          // Use onloadend if available
          request.onloadend = onloadend;
        } else {
          // Listen for ready state to emulate onloadend
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }

            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
              return;
            }
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
          };
        }

        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }

          reject(new AxiosError_1('Request aborted', AxiosError_1.ECONNABORTED, config, request));

          // Clean up request
          request = null;
        };

        // Handle low level network errors
        request.onerror = function handleError() {
          // Real errors are hidden from us by the browser
          // onerror should only fire if it's a network error
          reject(new AxiosError_1('Network Error', AxiosError_1.ERR_NETWORK, config, request, request));

          // Clean up request
          request = null;
        };

        // Handle timeout
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
          var transitional$1 = config.transitional || transitional;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError_1(
            timeoutErrorMessage,
            transitional$1.clarifyTimeoutError ? AxiosError_1.ETIMEDOUT : AxiosError_1.ECONNABORTED,
            config,
            request));

          // Clean up request
          request = null;
        };

        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils.isStandardBrowserEnv()) {
          // Add xsrf header
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
            cookies.read(config.xsrfCookieName) :
            undefined;

          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }

        // Add headers to the request
        if ('setRequestHeader' in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
              // Remove Content-Type if data is undefined
              delete requestHeaders[key];
            } else {
              // Otherwise add header to the request
              request.setRequestHeader(key, val);
            }
          });
        }

        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }

        // Add responseType to request if needed
        if (responseType && responseType !== 'json') {
          request.responseType = config.responseType;
        }

        // Handle progress if needed
        if (typeof config.onDownloadProgress === 'function') {
          request.addEventListener('progress', config.onDownloadProgress);
        }

        // Not all browsers support upload events
        if (typeof config.onUploadProgress === 'function' && request.upload) {
          request.upload.addEventListener('progress', config.onUploadProgress);
        }

        if (config.cancelToken || config.signal) {
          // Handle cancellation
          // eslint-disable-next-line func-names
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || (cancel && cancel.type) ? new CanceledError_1() : cancel);
            request.abort();
            request = null;
          };

          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
          }
        }

        if (!requestData) {
          requestData = null;
        }

        var protocol = parseProtocol(fullPath);

        if (protocol && [ 'http', 'https', 'file' ].indexOf(protocol) === -1) {
          reject(new AxiosError_1('Unsupported protocol ' + protocol + ':', AxiosError_1.ERR_BAD_REQUEST, config));
          return;
        }


        // Send the request
        request.send(requestData);
      });
    };

    // eslint-disable-next-line strict
    var _null = null;

    var DEFAULT_CONTENT_TYPE = {
      'Content-Type': 'application/x-www-form-urlencoded'
    };

    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
        headers['Content-Type'] = value;
      }
    }

    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== 'undefined') {
        // For browsers use XHR adapter
        adapter = xhr;
      } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
        // For node use HTTP adapter
        adapter = xhr;
      }
      return adapter;
    }

    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== 'SyntaxError') {
            throw e;
          }
        }
      }

      return (encoder || JSON.stringify)(rawValue);
    }

    var defaults = {

      transitional: transitional,

      adapter: getDefaultAdapter(),

      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, 'Accept');
        normalizeHeaderName(headers, 'Content-Type');

        if (utils.isFormData(data) ||
          utils.isArrayBuffer(data) ||
          utils.isBuffer(data) ||
          utils.isStream(data) ||
          utils.isFile(data) ||
          utils.isBlob(data)
        ) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
          return data.toString();
        }

        var isObjectPayload = utils.isObject(data);
        var contentType = headers && headers['Content-Type'];

        var isFileList;

        if ((isFileList = utils.isFileList(data)) || (isObjectPayload && contentType === 'multipart/form-data')) {
          var _FormData = this.env && this.env.FormData;
          return toFormData_1(isFileList ? {'files[]': data} : data, _FormData && new _FormData());
        } else if (isObjectPayload || contentType === 'application/json') {
          setContentTypeIfUnset(headers, 'application/json');
          return stringifySafely(data);
        }

        return data;
      }],

      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

        if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === 'SyntaxError') {
                throw AxiosError_1.from(e, AxiosError_1.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }

        return data;
      }],

      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,

      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',

      maxContentLength: -1,
      maxBodyLength: -1,

      env: {
        FormData: _null
      },

      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },

      headers: {
        common: {
          'Accept': 'application/json, text/plain, */*'
        }
      }
    };

    utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });

    var defaults_1 = defaults;

    /**
     * Transform the data for a request or a response
     *
     * @param {Object|String} data The data to be transformed
     * @param {Array} headers The headers for the request or response
     * @param {Array|Function} fns A single function or Array of functions
     * @returns {*} The resulting transformed data
     */
    var transformData = function transformData(data, headers, fns) {
      var context = this || defaults_1;
      /*eslint no-param-reassign:0*/
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });

      return data;
    };

    var isCancel = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };

    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }

      if (config.signal && config.signal.aborted) {
        throw new CanceledError_1();
      }
    }

    /**
     * Dispatch a request to the server using the configured adapter.
     *
     * @param {object} config The config that is to be used for the request
     * @returns {Promise} The Promise to be fulfilled
     */
    var dispatchRequest = function dispatchRequest(config) {
      throwIfCancellationRequested(config);

      // Ensure headers exist
      config.headers = config.headers || {};

      // Transform request data
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );

      // Flatten headers
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );

      utils.forEach(
        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );

      var adapter = config.adapter || defaults_1.adapter;

      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);

        // Transform response data
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );

        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);

          // Transform response data
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }

        return Promise.reject(reason);
      });
    };

    /**
     * Config-specific merge-function which creates a new config-object
     * by merging two configuration objects together.
     *
     * @param {Object} config1
     * @param {Object} config2
     * @returns {Object} New object resulting from merging config2 to config1
     */
    var mergeConfig = function mergeConfig(config1, config2) {
      // eslint-disable-next-line no-param-reassign
      config2 = config2 || {};
      var config = {};

      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }

      // eslint-disable-next-line consistent-return
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      var mergeMap = {
        'url': valueFromConfig2,
        'method': valueFromConfig2,
        'data': valueFromConfig2,
        'baseURL': defaultToConfig2,
        'transformRequest': defaultToConfig2,
        'transformResponse': defaultToConfig2,
        'paramsSerializer': defaultToConfig2,
        'timeout': defaultToConfig2,
        'timeoutMessage': defaultToConfig2,
        'withCredentials': defaultToConfig2,
        'adapter': defaultToConfig2,
        'responseType': defaultToConfig2,
        'xsrfCookieName': defaultToConfig2,
        'xsrfHeaderName': defaultToConfig2,
        'onUploadProgress': defaultToConfig2,
        'onDownloadProgress': defaultToConfig2,
        'decompress': defaultToConfig2,
        'maxContentLength': defaultToConfig2,
        'maxBodyLength': defaultToConfig2,
        'beforeRedirect': defaultToConfig2,
        'transport': defaultToConfig2,
        'httpAgent': defaultToConfig2,
        'httpsAgent': defaultToConfig2,
        'cancelToken': defaultToConfig2,
        'socketPath': defaultToConfig2,
        'responseEncoding': defaultToConfig2,
        'validateStatus': mergeDirectKeys
      };

      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
      });

      return config;
    };

    var data = {
      "version": "0.27.2"
    };

    var VERSION = data.version;


    var validators$1 = {};

    // eslint-disable-next-line func-names
    ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
      validators$1[type] = function validator(thing) {
        return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
      };
    });

    var deprecatedWarnings = {};

    /**
     * Transitional option validator
     * @param {function|boolean?} validator - set to false if the transitional option has been removed
     * @param {string?} version - deprecated version / removed since version
     * @param {string?} message - some message with additional info
     * @returns {function}
     */
    validators$1.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
      }

      // eslint-disable-next-line func-names
      return function(value, opt, opts) {
        if (validator === false) {
          throw new AxiosError_1(
            formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
            AxiosError_1.ERR_DEPRECATED
          );
        }

        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          // eslint-disable-next-line no-console
          console.warn(
            formatMessage(
              opt,
              ' has been deprecated since v' + version + ' and will be removed in the near future'
            )
          );
        }

        return validator ? validator(value, opt, opts) : true;
      };
    };

    /**
     * Assert object's properties type
     * @param {object} options
     * @param {object} schema
     * @param {boolean?} allowUnknown
     */

    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== 'object') {
        throw new AxiosError_1('options must be an object', AxiosError_1.ERR_BAD_OPTION_VALUE);
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === undefined || validator(value, opt, options);
          if (result !== true) {
            throw new AxiosError_1('option ' + opt + ' must be ' + result, AxiosError_1.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError_1('Unknown option ' + opt, AxiosError_1.ERR_BAD_OPTION);
        }
      }
    }

    var validator = {
      assertOptions: assertOptions,
      validators: validators$1
    };

    var validators = validator.validators;
    /**
     * Create a new instance of Axios
     *
     * @param {Object} instanceConfig The default config for the instance
     */
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager_1(),
        response: new InterceptorManager_1()
      };
    }

    /**
     * Dispatch a request
     *
     * @param {Object} config The config specific for this request (merged with this.defaults)
     */
    Axios.prototype.request = function request(configOrUrl, config) {
      /*eslint no-param-reassign:0*/
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof configOrUrl === 'string') {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }

      config = mergeConfig(this.defaults, config);

      // Set config.method
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = 'get';
      }

      var transitional = config.transitional;

      if (transitional !== undefined) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }

      // filter out skipped interceptors
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
          return;
        }

        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });

      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });

      var promise;

      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, undefined];

        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);

        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }

        return promise;
      }


      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }

      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }

      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }

      return promise;
    };

    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      var fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    };

    // Provide aliases for supported request methods
    utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
      /*eslint func-names:0*/
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method: method,
          url: url,
          data: (config || {}).data
        }));
      };
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      /*eslint func-names:0*/

      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method: method,
            headers: isForm ? {
              'Content-Type': 'multipart/form-data'
            } : {},
            url: url,
            data: data
          }));
        };
      }

      Axios.prototype[method] = generateHTTPMethod();

      Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
    });

    var Axios_1 = Axios;

    /**
     * A `CancelToken` is an object that can be used to request cancellation of an operation.
     *
     * @class
     * @param {Function} executor The executor function.
     */
    function CancelToken(executor) {
      if (typeof executor !== 'function') {
        throw new TypeError('executor must be a function.');
      }

      var resolvePromise;

      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });

      var token = this;

      // eslint-disable-next-line func-names
      this.promise.then(function(cancel) {
        if (!token._listeners) return;

        var i;
        var l = token._listeners.length;

        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });

      // eslint-disable-next-line func-names
      this.promise.then = function(onfulfilled) {
        var _resolve;
        // eslint-disable-next-line func-names
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);

        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };

        return promise;
      };

      executor(function cancel(message) {
        if (token.reason) {
          // Cancellation has already been requested
          return;
        }

        token.reason = new CanceledError_1(message);
        resolvePromise(token.reason);
      });
    }

    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };

    /**
     * Subscribe to the cancel signal
     */

    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }

      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };

    /**
     * Unsubscribe from the cancel signal
     */

    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };

    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token: token,
        cancel: cancel
      };
    };

    var CancelToken_1 = CancelToken;

    /**
     * Syntactic sugar for invoking a function and expanding an array for arguments.
     *
     * Common use case would be to use `Function.prototype.apply`.
     *
     *  ```js
     *  function f(x, y, z) {}
     *  var args = [1, 2, 3];
     *  f.apply(null, args);
     *  ```
     *
     * With `spread` this example can be re-written.
     *
     *  ```js
     *  spread(function(x, y, z) {})([1, 2, 3]);
     *  ```
     *
     * @param {Function} callback
     * @returns {Function}
     */
    var spread = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };

    /**
     * Determines whether the payload is an error thrown by Axios
     *
     * @param {*} payload The value to test
     * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
     */
    var isAxiosError = function isAxiosError(payload) {
      return utils.isObject(payload) && (payload.isAxiosError === true);
    };

    /**
     * Create an instance of Axios
     *
     * @param {Object} defaultConfig The default config for the instance
     * @return {Axios} A new instance of Axios
     */
    function createInstance(defaultConfig) {
      var context = new Axios_1(defaultConfig);
      var instance = bind(Axios_1.prototype.request, context);

      // Copy axios.prototype to instance
      utils.extend(instance, Axios_1.prototype, context);

      // Copy context to instance
      utils.extend(instance, context);

      // Factory for creating new instances
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };

      return instance;
    }

    // Create the default instance to be exported
    var axios$1 = createInstance(defaults_1);

    // Expose Axios class to allow class inheritance
    axios$1.Axios = Axios_1;

    // Expose Cancel & CancelToken
    axios$1.CanceledError = CanceledError_1;
    axios$1.CancelToken = CancelToken_1;
    axios$1.isCancel = isCancel;
    axios$1.VERSION = data.version;
    axios$1.toFormData = toFormData_1;

    // Expose AxiosError class
    axios$1.AxiosError = AxiosError_1;

    // alias for CanceledError for backward compatibility
    axios$1.Cancel = axios$1.CanceledError;

    // Expose all/spread
    axios$1.all = function all(promises) {
      return Promise.all(promises);
    };
    axios$1.spread = spread;

    // Expose isAxiosError
    axios$1.isAxiosError = isAxiosError;

    var axios_1 = axios$1;

    // Allow use of default import syntax in TypeScript
    var _default = axios$1;
    axios_1.default = _default;

    var axios = axios_1;

    const getDataWithAxios = async (sourceLink) => {
      const response = await axios.get(
        sourceLink,
      );
      return response.data;
    };

    const getDataWithAxiosAndParams = async (sourceLink, payload) => {
      const response = await axios.get(
        sourceLink,
        {
          params: payload,
        },
      );
      return response.data;
    };

    function getFullWindowPath() {
      if (typeof window !== 'undefined') {
        return `${window.location.protocol}//${window.location.host}`;
      }
      return null;
    }

    const Data = {
      NEIGHBOURHOODS_URL: `${getFullWindowPath()}/Data/neighbourhoods.geojson`,
      TREES_URL: `${getFullWindowPath()}/Data/trees.geojson`,
      SIDEWALK_URL: `${getFullWindowPath()}/Data/sidewalk.geojson`,
      ROADWORK_URL: `${getFullWindowPath()}/Data/roadwork.geojson`,
      TREES_SEARCH_URL: 'https://mapboxdemoapi.ue.r.appspot.com/trees',
    };

    const getListOfObjectWhereKeyContainsString = (listOfObjects, key, stringToSearchFor) => {
      const filteredList = listOfObjects.filter((object) => {
        const objectKey = object[key];
        return objectKey.includes(stringToSearchFor);
      });
      return filteredList;
    };

    const removeObjectWhereValueEqualsString = (listOfObjects, key, value) => {
      const filteredList = listOfObjects.filter((object) => {
        const objectKey = object[key];
        return objectKey !== value;
      });
      return filteredList;
    };

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    var mapboxGlDraw = createCommonjsModule(function (module, exports) {
    !function(t,e){module.exports=e();}(commonjsGlobal,(function(){var t=function(t,e){var n={drag:[],click:[],mousemove:[],mousedown:[],mouseup:[],mouseout:[],keydown:[],keyup:[],touchstart:[],touchmove:[],touchend:[],tap:[]},o={on:function(t,e,o){if(void 0===n[t])throw new Error("Invalid event type: "+t);n[t].push({selector:e,fn:o});},render:function(t){e.store.featureChanged(t);}},r=function(t,r){for(var i=n[t],a=i.length;a--;){var s=i[a];if(s.selector(r)){s.fn.call(o,r)||e.store.render(),e.ui.updateMapClasses();break}}};return t.start.call(o),{render:t.render,stop:function(){t.stop&&t.stop();},trash:function(){t.trash&&(t.trash(),e.store.render());},combineFeatures:function(){t.combineFeatures&&t.combineFeatures();},uncombineFeatures:function(){t.uncombineFeatures&&t.uncombineFeatures();},drag:function(t){r("drag",t);},click:function(t){r("click",t);},mousemove:function(t){r("mousemove",t);},mousedown:function(t){r("mousedown",t);},mouseup:function(t){r("mouseup",t);},mouseout:function(t){r("mouseout",t);},keydown:function(t){r("keydown",t);},keyup:function(t){r("keyup",t);},touchstart:function(t){r("touchstart",t);},touchmove:function(t){r("touchmove",t);},touchend:function(t){r("touchend",t);},tap:function(t){r("tap",t);}}},e=6378137;function n(t){var e=0;if(t&&t.length>0){e+=Math.abs(o(t[0]));for(var n=1;n<t.length;n++)e-=Math.abs(o(t[n]));}return e}function o(t){var n,o,i,a,s,u,c=0,l=t.length;if(l>2){for(u=0;u<l;u++)u===l-2?(i=l-2,a=l-1,s=0):u===l-1?(i=l-1,a=0,s=1):(i=u,a=u+1,s=u+2),n=t[i],o=t[a],c+=(r(t[s][0])-r(n[0]))*Math.sin(r(o[1]));c=c*e*e/2;}return c}function r(t){return t*Math.PI/180}var i={geometry:function t(e){var o,r=0;switch(e.type){case"Polygon":return n(e.coordinates);case"MultiPolygon":for(o=0;o<e.coordinates.length;o++)r+=n(e.coordinates[o]);return r;case"Point":case"MultiPoint":case"LineString":case"MultiLineString":return 0;case"GeometryCollection":for(o=0;o<e.geometries.length;o++)r+=t(e.geometries[o]);return r}},ring:o},a="mapboxgl-ctrl",s="mapbox-gl-draw_ctrl-draw-btn",u="mapbox-gl-draw_line",c="mapbox-gl-draw_polygon",l="mapbox-gl-draw_point",d="mapbox-gl-draw_trash",p="mapbox-gl-draw_combine",f="mapbox-gl-draw_uncombine",h="mapboxgl-ctrl-group",g="active",y="mapbox-gl-draw_boxselect",v="mapbox-gl-draw-hot",m="mapbox-gl-draw-cold",b="add",_="move",S="drag",x="pointer",C="none",E={POLYGON:"polygon",LINE:"line_string",POINT:"point"},M="Feature",w="Polygon",I="LineString",L="Point",P="FeatureCollection",F="Multi",O="MultiPoint",k="MultiLineString",T="MultiPolygon",j={DRAW_LINE_STRING:"draw_line_string",DRAW_POLYGON:"draw_polygon",DRAW_POINT:"draw_point",SIMPLE_SELECT:"simple_select",DIRECT_SELECT:"direct_select",STATIC:"static"},A="draw.create",D="draw.delete",N="draw.update",U="draw.selectionchange",R="draw.modechange",B="draw.actionable",V="draw.render",J="draw.combine",G="draw.uncombine",z="move",$="change_coordinates",W="feature",q="midpoint",Y="vertex",Z="true",K="false",X=["scrollZoom","boxZoom","dragRotate","dragPan","keyboard","doubleClickZoom","touchZoomRotate"],H={Point:0,LineString:1,Polygon:2};function Q(t,e){var n=H[t.geometry.type]-H[e.geometry.type];return 0===n&&t.geometry.type===w?t.area-e.area:n}function tt(t){if(this._items={},this._nums={},this._length=t?t.length:0,t)for(var e=0,n=t.length;e<n;e++)this.add(t[e]),void 0!==t[e]&&("string"==typeof t[e]?this._items[t[e]]=e:this._nums[t[e]]=e);}tt.prototype.add=function(t){return this.has(t)||(this._length++,"string"==typeof t?this._items[t]=this._length:this._nums[t]=this._length),this},tt.prototype.delete=function(t){return !1===this.has(t)||(this._length--,delete this._items[t],delete this._nums[t]),this},tt.prototype.has=function(t){return ("string"==typeof t||"number"==typeof t)&&(void 0!==this._items[t]||void 0!==this._nums[t])},tt.prototype.values=function(){var t=this,e=[];return Object.keys(this._items).forEach((function(n){e.push({k:n,v:t._items[n]});})),Object.keys(this._nums).forEach((function(n){e.push({k:JSON.parse(n),v:t._nums[n]});})),e.sort((function(t,e){return t.v-e.v})).map((function(t){return t.k}))},tt.prototype.clear=function(){return this._length=0,this._items={},this._nums={},this};var et=[W,q,Y],nt={click:function(t,e,n){return ot(t,e,n,n.options.clickBuffer)},touch:function(t,e,n){return ot(t,e,n,n.options.touchBuffer)}};function ot(t,e,n,o){if(null===n.map)return [];var r=t?function(t,e){return void 0===e&&(e=0),[[t.point.x-e,t.point.y-e],[t.point.x+e,t.point.y+e]]}(t,o):e,a={};n.options.styles&&(a.layers=n.options.styles.map((function(t){return t.id})));var s=n.map.queryRenderedFeatures(r,a).filter((function(t){return -1!==et.indexOf(t.properties.meta)})),u=new tt,c=[];return s.forEach((function(t){var e=t.properties.id;u.has(e)||(u.add(e),c.push(t));})),function(t){return t.map((function(t){return t.geometry.type===w&&(t.area=i.geometry({type:M,property:{},geometry:t.geometry})),t})).sort(Q).map((function(t){return delete t.area,t}))}(c)}function rt(t,e){var n=nt.click(t,null,e),o={mouse:C};return n[0]&&(o.mouse=n[0].properties.active===Z?_:x,o.feature=n[0].properties.meta),-1!==e.events.currentModeName().indexOf("draw")&&(o.mouse=b),e.ui.queueMapClasses(o),e.ui.updateMapClasses(),n[0]}function it(t,e){var n=t.x-e.x,o=t.y-e.y;return Math.sqrt(n*n+o*o)}function at(t,e,n){void 0===n&&(n={});var o=null!=n.fineTolerance?n.fineTolerance:4,r=null!=n.grossTolerance?n.grossTolerance:12,i=null!=n.interval?n.interval:500;t.point=t.point||e.point,t.time=t.time||e.time;var a=it(t.point,e.point);return a<o||a<r&&e.time-t.time<i}function st(t,e,n){void 0===n&&(n={});var o=null!=n.tolerance?n.tolerance:25,r=null!=n.interval?n.interval:250;return t.point=t.point||e.point,t.time=t.time||e.time,it(t.point,e.point)<o&&e.time-t.time<r}function ut(t,e){return t(e={exports:{}},e.exports),e.exports}var ct=ut((function(t){var e=t.exports=function(t,n){if(n||(n=16),void 0===t&&(t=128),t<=0)return "0";for(var o=Math.log(Math.pow(2,t))/Math.log(n),r=2;o===1/0;r*=2)o=Math.log(Math.pow(2,t/r))/Math.log(n)*r;var i=o-Math.floor(o),a="";for(r=0;r<Math.floor(o);r++){a=Math.floor(Math.random()*n).toString(n)+a;}if(i){var s=Math.pow(n,i);a=Math.floor(Math.random()*s).toString(n)+a;}var u=parseInt(a,n);return u!==1/0&&u>=Math.pow(2,t)?e(t,n):a};e.rack=function(t,n,o){var r=function(r){var a=0;do{if(a++>10){if(!o)throw new Error("too many ID collisions, use more bits");t+=o;}var s=e(t,n);}while(Object.hasOwnProperty.call(i,s));return i[s]=r,s},i=r.hats={};return r.get=function(t){return r.hats[t]},r.set=function(t,e){return r.hats[t]=e,r},r.bits=t||128,r.base=n||16,r};})),lt=function(t,e){this.ctx=t,this.properties=e.properties||{},this.coordinates=e.geometry.coordinates,this.id=e.id||ct(),this.type=e.geometry.type;};lt.prototype.changed=function(){this.ctx.store.featureChanged(this.id);},lt.prototype.incomingCoords=function(t){this.setCoordinates(t);},lt.prototype.setCoordinates=function(t){this.coordinates=t,this.changed();},lt.prototype.getCoordinates=function(){return JSON.parse(JSON.stringify(this.coordinates))},lt.prototype.setProperty=function(t,e){this.properties[t]=e;},lt.prototype.toGeoJSON=function(){return JSON.parse(JSON.stringify({id:this.id,type:M,properties:this.properties,geometry:{coordinates:this.getCoordinates(),type:this.type}}))},lt.prototype.internal=function(t){var e={id:this.id,meta:W,"meta:type":this.type,active:K,mode:t};if(this.ctx.options.userProperties)for(var n in this.properties)e["user_"+n]=this.properties[n];return {type:M,properties:e,geometry:{coordinates:this.getCoordinates(),type:this.type}}};var dt=function(t,e){lt.call(this,t,e);};(dt.prototype=Object.create(lt.prototype)).isValid=function(){return "number"==typeof this.coordinates[0]&&"number"==typeof this.coordinates[1]},dt.prototype.updateCoordinate=function(t,e,n){this.coordinates=3===arguments.length?[e,n]:[t,e],this.changed();},dt.prototype.getCoordinate=function(){return this.getCoordinates()};var pt=function(t,e){lt.call(this,t,e);};(pt.prototype=Object.create(lt.prototype)).isValid=function(){return this.coordinates.length>1},pt.prototype.addCoordinate=function(t,e,n){this.changed();var o=parseInt(t,10);this.coordinates.splice(o,0,[e,n]);},pt.prototype.getCoordinate=function(t){var e=parseInt(t,10);return JSON.parse(JSON.stringify(this.coordinates[e]))},pt.prototype.removeCoordinate=function(t){this.changed(),this.coordinates.splice(parseInt(t,10),1);},pt.prototype.updateCoordinate=function(t,e,n){var o=parseInt(t,10);this.coordinates[o]=[e,n],this.changed();};var ft=function(t,e){lt.call(this,t,e),this.coordinates=this.coordinates.map((function(t){return t.slice(0,-1)}));};(ft.prototype=Object.create(lt.prototype)).isValid=function(){return 0!==this.coordinates.length&&this.coordinates.every((function(t){return t.length>2}))},ft.prototype.incomingCoords=function(t){this.coordinates=t.map((function(t){return t.slice(0,-1)})),this.changed();},ft.prototype.setCoordinates=function(t){this.coordinates=t,this.changed();},ft.prototype.addCoordinate=function(t,e,n){this.changed();var o=t.split(".").map((function(t){return parseInt(t,10)}));this.coordinates[o[0]].splice(o[1],0,[e,n]);},ft.prototype.removeCoordinate=function(t){this.changed();var e=t.split(".").map((function(t){return parseInt(t,10)})),n=this.coordinates[e[0]];n&&(n.splice(e[1],1),n.length<3&&this.coordinates.splice(e[0],1));},ft.prototype.getCoordinate=function(t){var e=t.split(".").map((function(t){return parseInt(t,10)})),n=this.coordinates[e[0]];return JSON.parse(JSON.stringify(n[e[1]]))},ft.prototype.getCoordinates=function(){return this.coordinates.map((function(t){return t.concat([t[0]])}))},ft.prototype.updateCoordinate=function(t,e,n){this.changed();var o=t.split("."),r=parseInt(o[0],10),i=parseInt(o[1],10);void 0===this.coordinates[r]&&(this.coordinates[r]=[]),this.coordinates[r][i]=[e,n];};var ht={MultiPoint:dt,MultiLineString:pt,MultiPolygon:ft},gt=function(t,e,n,o,r){var i=n.split("."),a=parseInt(i[0],10),s=i[1]?i.slice(1).join("."):null;return t[a][e](s,o,r)},yt=function(t,e){if(lt.call(this,t,e),delete this.coordinates,this.model=ht[e.geometry.type],void 0===this.model)throw new TypeError(e.geometry.type+" is not a valid type");this.features=this._coordinatesToFeatures(e.geometry.coordinates);};function vt(t){this.map=t.map,this.drawConfig=JSON.parse(JSON.stringify(t.options||{})),this._ctx=t;}(yt.prototype=Object.create(lt.prototype))._coordinatesToFeatures=function(t){var e=this,n=this.model.bind(this);return t.map((function(t){return new n(e.ctx,{id:ct(),type:M,properties:{},geometry:{coordinates:t,type:e.type.replace("Multi","")}})}))},yt.prototype.isValid=function(){return this.features.every((function(t){return t.isValid()}))},yt.prototype.setCoordinates=function(t){this.features=this._coordinatesToFeatures(t),this.changed();},yt.prototype.getCoordinate=function(t){return gt(this.features,"getCoordinate",t)},yt.prototype.getCoordinates=function(){return JSON.parse(JSON.stringify(this.features.map((function(t){return t.type===w?t.getCoordinates():t.coordinates}))))},yt.prototype.updateCoordinate=function(t,e,n){gt(this.features,"updateCoordinate",t,e,n),this.changed();},yt.prototype.addCoordinate=function(t,e,n){gt(this.features,"addCoordinate",t,e,n),this.changed();},yt.prototype.removeCoordinate=function(t){gt(this.features,"removeCoordinate",t),this.changed();},yt.prototype.getFeatures=function(){return this.features},vt.prototype.setSelected=function(t){return this._ctx.store.setSelected(t)},vt.prototype.setSelectedCoordinates=function(t){var e=this;this._ctx.store.setSelectedCoordinates(t),t.reduce((function(t,n){return void 0===t[n.feature_id]&&(t[n.feature_id]=!0,e._ctx.store.get(n.feature_id).changed()),t}),{});},vt.prototype.getSelected=function(){return this._ctx.store.getSelected()},vt.prototype.getSelectedIds=function(){return this._ctx.store.getSelectedIds()},vt.prototype.isSelected=function(t){return this._ctx.store.isSelected(t)},vt.prototype.getFeature=function(t){return this._ctx.store.get(t)},vt.prototype.select=function(t){return this._ctx.store.select(t)},vt.prototype.deselect=function(t){return this._ctx.store.deselect(t)},vt.prototype.deleteFeature=function(t,e){return void 0===e&&(e={}),this._ctx.store.delete(t,e)},vt.prototype.addFeature=function(t){return this._ctx.store.add(t)},vt.prototype.clearSelectedFeatures=function(){return this._ctx.store.clearSelected()},vt.prototype.clearSelectedCoordinates=function(){return this._ctx.store.clearSelectedCoordinates()},vt.prototype.setActionableState=function(t){void 0===t&&(t={});var e={trash:t.trash||!1,combineFeatures:t.combineFeatures||!1,uncombineFeatures:t.uncombineFeatures||!1};return this._ctx.events.actionable(e)},vt.prototype.changeMode=function(t,e,n){return void 0===e&&(e={}),void 0===n&&(n={}),this._ctx.events.changeMode(t,e,n)},vt.prototype.updateUIClasses=function(t){return this._ctx.ui.queueMapClasses(t)},vt.prototype.activateUIButton=function(t){return this._ctx.ui.setActiveButton(t)},vt.prototype.featuresAt=function(t,e,n){if(void 0===n&&(n="click"),"click"!==n&&"touch"!==n)throw new Error("invalid buffer type");return nt[n](t,e,this._ctx)},vt.prototype.newFeature=function(t){var e=t.geometry.type;return e===L?new dt(this._ctx,t):e===I?new pt(this._ctx,t):e===w?new ft(this._ctx,t):new yt(this._ctx,t)},vt.prototype.isInstanceOf=function(t,e){if(t===L)return e instanceof dt;if(t===I)return e instanceof pt;if(t===w)return e instanceof ft;if("MultiFeature"===t)return e instanceof yt;throw new Error("Unknown feature class: "+t)},vt.prototype.doRender=function(t){return this._ctx.store.featureChanged(t)},vt.prototype.onSetup=function(){},vt.prototype.onDrag=function(){},vt.prototype.onClick=function(){},vt.prototype.onMouseMove=function(){},vt.prototype.onMouseDown=function(){},vt.prototype.onMouseUp=function(){},vt.prototype.onMouseOut=function(){},vt.prototype.onKeyUp=function(){},vt.prototype.onKeyDown=function(){},vt.prototype.onTouchStart=function(){},vt.prototype.onTouchMove=function(){},vt.prototype.onTouchEnd=function(){},vt.prototype.onTap=function(){},vt.prototype.onStop=function(){},vt.prototype.onTrash=function(){},vt.prototype.onCombineFeature=function(){},vt.prototype.onUncombineFeature=function(){},vt.prototype.toDisplayFeatures=function(){throw new Error("You must overwrite toDisplayFeatures")};var mt={drag:"onDrag",click:"onClick",mousemove:"onMouseMove",mousedown:"onMouseDown",mouseup:"onMouseUp",mouseout:"onMouseOut",keyup:"onKeyUp",keydown:"onKeyDown",touchstart:"onTouchStart",touchmove:"onTouchMove",touchend:"onTouchEnd",tap:"onTap"},bt=Object.keys(mt);function _t(t){var e=Object.keys(t);return function(n,o){void 0===o&&(o={});var r={},i=e.reduce((function(e,n){return e[n]=t[n],e}),new vt(n));return {start:function(){var e=this;r=i.onSetup(o),bt.forEach((function(n){var o,a=mt[n],s=function(){return !1};t[a]&&(s=function(){return !0}),e.on(n,s,(o=a,function(t){return i[o](r,t)}));}));},stop:function(){i.onStop(r);},trash:function(){i.onTrash(r);},combineFeatures:function(){i.onCombineFeatures(r);},uncombineFeatures:function(){i.onUncombineFeatures(r);},render:function(t,e){i.toDisplayFeatures(r,t,e);}}}}function St(t){return [].concat(t).filter((function(t){return void 0!==t}))}function xt(){var t=this;if(!(t.ctx.map&&void 0!==t.ctx.map.getSource(v)))return u();var e=t.ctx.events.currentModeName();t.ctx.ui.queueMapClasses({mode:e});var n=[],o=[];t.isDirty?o=t.getAllIds():(n=t.getChangedIds().filter((function(e){return void 0!==t.get(e)})),o=t.sources.hot.filter((function(e){return e.properties.id&&-1===n.indexOf(e.properties.id)&&void 0!==t.get(e.properties.id)})).map((function(t){return t.properties.id}))),t.sources.hot=[];var r=t.sources.cold.length;t.sources.cold=t.isDirty?[]:t.sources.cold.filter((function(t){var e=t.properties.id||t.properties.parent;return -1===n.indexOf(e)}));var i=r!==t.sources.cold.length||o.length>0;function a(n,o){var r=t.get(n).internal(e);t.ctx.events.currentModeRender(r,(function(e){t.sources[o].push(e);}));}if(n.forEach((function(t){return a(t,"hot")})),o.forEach((function(t){return a(t,"cold")})),i&&t.ctx.map.getSource(m).setData({type:P,features:t.sources.cold}),t.ctx.map.getSource(v).setData({type:P,features:t.sources.hot}),t._emitSelectionChange&&(t.ctx.map.fire(U,{features:t.getSelected().map((function(t){return t.toGeoJSON()})),points:t.getSelectedCoordinates().map((function(t){return {type:M,properties:{},geometry:{type:L,coordinates:t.coordinates}}}))}),t._emitSelectionChange=!1),t._deletedFeaturesToEmit.length){var s=t._deletedFeaturesToEmit.map((function(t){return t.toGeoJSON()}));t._deletedFeaturesToEmit=[],t.ctx.map.fire(D,{features:s});}function u(){t.isDirty=!1,t.clearChangedIds();}u(),t.ctx.map.fire(V,{});}function Ct(t){var e,n=this;this._features={},this._featureIds=new tt,this._selectedFeatureIds=new tt,this._selectedCoordinates=[],this._changedFeatureIds=new tt,this._deletedFeaturesToEmit=[],this._emitSelectionChange=!1,this._mapInitialConfig={},this.ctx=t,this.sources={hot:[],cold:[]},this.render=function(){e||(e=requestAnimationFrame((function(){e=null,xt.call(n);})));},this.isDirty=!1;}function Et(t,e){var n=t._selectedCoordinates.filter((function(e){return t._selectedFeatureIds.has(e.feature_id)}));t._selectedCoordinates.length===n.length||e.silent||(t._emitSelectionChange=!0),t._selectedCoordinates=n;}Ct.prototype.createRenderBatch=function(){var t=this,e=this.render,n=0;return this.render=function(){n++;},function(){t.render=e,n>0&&t.render();}},Ct.prototype.setDirty=function(){return this.isDirty=!0,this},Ct.prototype.featureChanged=function(t){return this._changedFeatureIds.add(t),this},Ct.prototype.getChangedIds=function(){return this._changedFeatureIds.values()},Ct.prototype.clearChangedIds=function(){return this._changedFeatureIds.clear(),this},Ct.prototype.getAllIds=function(){return this._featureIds.values()},Ct.prototype.add=function(t){return this.featureChanged(t.id),this._features[t.id]=t,this._featureIds.add(t.id),this},Ct.prototype.delete=function(t,e){var n=this;return void 0===e&&(e={}),St(t).forEach((function(t){n._featureIds.has(t)&&(n._featureIds.delete(t),n._selectedFeatureIds.delete(t),e.silent||-1===n._deletedFeaturesToEmit.indexOf(n._features[t])&&n._deletedFeaturesToEmit.push(n._features[t]),delete n._features[t],n.isDirty=!0);})),Et(this,e),this},Ct.prototype.get=function(t){return this._features[t]},Ct.prototype.getAll=function(){var t=this;return Object.keys(this._features).map((function(e){return t._features[e]}))},Ct.prototype.select=function(t,e){var n=this;return void 0===e&&(e={}),St(t).forEach((function(t){n._selectedFeatureIds.has(t)||(n._selectedFeatureIds.add(t),n._changedFeatureIds.add(t),e.silent||(n._emitSelectionChange=!0));})),this},Ct.prototype.deselect=function(t,e){var n=this;return void 0===e&&(e={}),St(t).forEach((function(t){n._selectedFeatureIds.has(t)&&(n._selectedFeatureIds.delete(t),n._changedFeatureIds.add(t),e.silent||(n._emitSelectionChange=!0));})),Et(this,e),this},Ct.prototype.clearSelected=function(t){return void 0===t&&(t={}),this.deselect(this._selectedFeatureIds.values(),{silent:t.silent}),this},Ct.prototype.setSelected=function(t,e){var n=this;return void 0===e&&(e={}),t=St(t),this.deselect(this._selectedFeatureIds.values().filter((function(e){return -1===t.indexOf(e)})),{silent:e.silent}),this.select(t.filter((function(t){return !n._selectedFeatureIds.has(t)})),{silent:e.silent}),this},Ct.prototype.setSelectedCoordinates=function(t){return this._selectedCoordinates=t,this._emitSelectionChange=!0,this},Ct.prototype.clearSelectedCoordinates=function(){return this._selectedCoordinates=[],this._emitSelectionChange=!0,this},Ct.prototype.getSelectedIds=function(){return this._selectedFeatureIds.values()},Ct.prototype.getSelected=function(){var t=this;return this._selectedFeatureIds.values().map((function(e){return t.get(e)}))},Ct.prototype.getSelectedCoordinates=function(){var t=this;return this._selectedCoordinates.map((function(e){return {coordinates:t.get(e.feature_id).getCoordinate(e.coord_path)}}))},Ct.prototype.isSelected=function(t){return this._selectedFeatureIds.has(t)},Ct.prototype.setFeatureProperty=function(t,e,n){this.get(t).setProperty(e,n),this.featureChanged(t);},Ct.prototype.storeMapConfig=function(){var t=this;X.forEach((function(e){t.ctx.map[e]&&(t._mapInitialConfig[e]=t.ctx.map[e].isEnabled());}));},Ct.prototype.restoreMapConfig=function(){var t=this;Object.keys(this._mapInitialConfig).forEach((function(e){t._mapInitialConfig[e]?t.ctx.map[e].enable():t.ctx.map[e].disable();}));},Ct.prototype.getInitialConfigValue=function(t){return void 0===this._mapInitialConfig[t]||this._mapInitialConfig[t]};var Mt=function(){for(var t=arguments,e={},n=0;n<arguments.length;n++){var o=t[n];for(var r in o)wt.call(o,r)&&(e[r]=o[r]);}return e},wt=Object.prototype.hasOwnProperty;var It=["mode","feature","mouse"];function Lt(e){var n=null,o=null,r={onRemove:function(){return e.map.off("load",r.connect),clearInterval(o),r.removeLayers(),e.store.restoreMapConfig(),e.ui.removeButtons(),e.events.removeEventListeners(),e.ui.clearMapClasses(),e.map=null,e.container=null,e.store=null,n&&n.parentNode&&n.parentNode.removeChild(n),n=null,this},connect:function(){e.map.off("load",r.connect),clearInterval(o),r.addLayers(),e.store.storeMapConfig(),e.events.addEventListeners();},onAdd:function(i){var y=i.fire;return i.fire=function(t,e){var n=arguments;return 1===y.length&&1!==arguments.length&&(n=[Mt({},{type:t},e)]),y.apply(i,n)},e.map=i,e.events=function(e){var n=Object.keys(e.options.modes).reduce((function(t,n){return t[n]=_t(e.options.modes[n]),t}),{}),o={},r={},i={},a=null,s=null;i.drag=function(t,n){n({point:t.point,time:(new Date).getTime()})?(e.ui.queueMapClasses({mouse:S}),s.drag(t)):t.originalEvent.stopPropagation();},i.mousedrag=function(t){i.drag(t,(function(t){return !at(o,t)}));},i.touchdrag=function(t){i.drag(t,(function(t){return !st(r,t)}));},i.mousemove=function(t){if(1===(void 0!==t.originalEvent.buttons?t.originalEvent.buttons:t.originalEvent.which))return i.mousedrag(t);var n=rt(t,e);t.featureTarget=n,s.mousemove(t);},i.mousedown=function(t){o={time:(new Date).getTime(),point:t.point};var n=rt(t,e);t.featureTarget=n,s.mousedown(t);},i.mouseup=function(t){var n=rt(t,e);t.featureTarget=n,at(o,{point:t.point,time:(new Date).getTime()})?s.click(t):s.mouseup(t);},i.mouseout=function(t){s.mouseout(t);},i.touchstart=function(t){if(t.originalEvent.preventDefault(),e.options.touchEnabled){r={time:(new Date).getTime(),point:t.point};var n=nt.touch(t,null,e)[0];t.featureTarget=n,s.touchstart(t);}},i.touchmove=function(t){if(t.originalEvent.preventDefault(),e.options.touchEnabled)return s.touchmove(t),i.touchdrag(t)},i.touchend=function(t){if(t.originalEvent.preventDefault(),e.options.touchEnabled){var n=nt.touch(t,null,e)[0];t.featureTarget=n,st(r,{time:(new Date).getTime(),point:t.point})?s.tap(t):s.touchend(t);}};var u=function(t){return !(8===t||46===t||t>=48&&t<=57)};function c(o,r,i){void 0===i&&(i={}),s.stop();var u=n[o];if(void 0===u)throw new Error(o+" is not valid");a=o;var c=u(e,r);s=t(c,e),i.silent||e.map.fire(R,{mode:o}),e.store.setDirty(),e.store.render();}i.keydown=function(t){"mapboxgl-canvas"===(t.srcElement||t.target).classList[0]&&(8!==t.keyCode&&46!==t.keyCode||!e.options.controls.trash?u(t.keyCode)?s.keydown(t):49===t.keyCode&&e.options.controls.point?c(j.DRAW_POINT):50===t.keyCode&&e.options.controls.line_string?c(j.DRAW_LINE_STRING):51===t.keyCode&&e.options.controls.polygon&&c(j.DRAW_POLYGON):(t.preventDefault(),s.trash()));},i.keyup=function(t){u(t.keyCode)&&s.keyup(t);},i.zoomend=function(){e.store.changeZoom();},i.data=function(t){if("style"===t.dataType){var n=e.setup,o=e.map,r=e.options,i=e.store;r.styles.some((function(t){return o.getLayer(t.id)}))||(n.addLayers(),i.setDirty(),i.render());}};var l={trash:!1,combineFeatures:!1,uncombineFeatures:!1};return {start:function(){a=e.options.defaultMode,s=t(n[a](e),e);},changeMode:c,actionable:function(t){var n=!1;Object.keys(t).forEach((function(e){if(void 0===l[e])throw new Error("Invalid action type");l[e]!==t[e]&&(n=!0),l[e]=t[e];})),n&&e.map.fire(B,{actions:l});},currentModeName:function(){return a},currentModeRender:function(t,e){return s.render(t,e)},fire:function(t,e){i[t]&&i[t](e);},addEventListeners:function(){e.map.on("mousemove",i.mousemove),e.map.on("mousedown",i.mousedown),e.map.on("mouseup",i.mouseup),e.map.on("data",i.data),e.map.on("touchmove",i.touchmove),e.map.on("touchstart",i.touchstart),e.map.on("touchend",i.touchend),e.container.addEventListener("mouseout",i.mouseout),e.options.keybindings&&(e.container.addEventListener("keydown",i.keydown),e.container.addEventListener("keyup",i.keyup));},removeEventListeners:function(){e.map.off("mousemove",i.mousemove),e.map.off("mousedown",i.mousedown),e.map.off("mouseup",i.mouseup),e.map.off("data",i.data),e.map.off("touchmove",i.touchmove),e.map.off("touchstart",i.touchstart),e.map.off("touchend",i.touchend),e.container.removeEventListener("mouseout",i.mouseout),e.options.keybindings&&(e.container.removeEventListener("keydown",i.keydown),e.container.removeEventListener("keyup",i.keyup));},trash:function(t){s.trash(t);},combineFeatures:function(){s.combineFeatures();},uncombineFeatures:function(){s.uncombineFeatures();},getMode:function(){return a}}}(e),e.ui=function(t){var e={},n=null,o={mode:null,feature:null,mouse:null},r={mode:null,feature:null,mouse:null};function i(t){r=Mt(r,t);}function y(){var e,n;if(t.container){var i=[],a=[];It.forEach((function(t){r[t]!==o[t]&&(i.push(t+"-"+o[t]),null!==r[t]&&a.push(t+"-"+r[t]));})),i.length>0&&(e=t.container.classList).remove.apply(e,i),a.length>0&&(n=t.container.classList).add.apply(n,a),o=Mt(o,r);}}function v(t,e){void 0===e&&(e={});var o=document.createElement("button");return o.className=s+" "+e.className,o.setAttribute("title",e.title),e.container.appendChild(o),o.addEventListener("click",(function(o){if(o.preventDefault(),o.stopPropagation(),o.target===n)return m(),void e.onDeactivate();b(t),e.onActivate();}),!0),o}function m(){n&&(n.classList.remove(g),n=null);}function b(t){m();var o=e[t];o&&o&&"trash"!==t&&(o.classList.add(g),n=o);}return {setActiveButton:b,queueMapClasses:i,updateMapClasses:y,clearMapClasses:function(){i({mode:null,feature:null,mouse:null}),y();},addButtons:function(){var n=t.options.controls,o=document.createElement("div");return o.className=h+" "+a,n?(n[E.LINE]&&(e[E.LINE]=v(E.LINE,{container:o,className:u,title:"LineString tool "+(t.options.keybindings?"(l)":""),onActivate:function(){return t.events.changeMode(j.DRAW_LINE_STRING)},onDeactivate:function(){return t.events.trash()}})),n[E.POLYGON]&&(e[E.POLYGON]=v(E.POLYGON,{container:o,className:c,title:"Polygon tool "+(t.options.keybindings?"(p)":""),onActivate:function(){return t.events.changeMode(j.DRAW_POLYGON)},onDeactivate:function(){return t.events.trash()}})),n[E.POINT]&&(e[E.POINT]=v(E.POINT,{container:o,className:l,title:"Marker tool "+(t.options.keybindings?"(m)":""),onActivate:function(){return t.events.changeMode(j.DRAW_POINT)},onDeactivate:function(){return t.events.trash()}})),n.trash&&(e.trash=v("trash",{container:o,className:d,title:"Delete",onActivate:function(){t.events.trash();}})),n.combine_features&&(e.combine_features=v("combineFeatures",{container:o,className:p,title:"Combine",onActivate:function(){t.events.combineFeatures();}})),n.uncombine_features&&(e.uncombine_features=v("uncombineFeatures",{container:o,className:f,title:"Uncombine",onActivate:function(){t.events.uncombineFeatures();}})),o):o},removeButtons:function(){Object.keys(e).forEach((function(t){var n=e[t];n.parentNode&&n.parentNode.removeChild(n),delete e[t];}));}}}(e),e.container=i.getContainer(),e.store=new Ct(e),n=e.ui.addButtons(),e.options.boxSelect&&(i.boxZoom.disable(),i.dragPan.disable(),i.dragPan.enable()),i.loaded()?r.connect():(i.on("load",r.connect),o=setInterval((function(){i.loaded()&&r.connect();}),16)),e.events.start(),n},addLayers:function(){e.map.addSource(m,{data:{type:P,features:[]},type:"geojson"}),e.map.addSource(v,{data:{type:P,features:[]},type:"geojson"}),e.options.styles.forEach((function(t){e.map.addLayer(t);})),e.store.setDirty(!0),e.store.render();},removeLayers:function(){e.options.styles.forEach((function(t){e.map.getLayer(t.id)&&e.map.removeLayer(t.id);})),e.map.getSource(m)&&e.map.removeSource(m),e.map.getSource(v)&&e.map.removeSource(v);}};return e.setup=r,r}function Pt(t){return function(e){var n=e.featureTarget;return !!n&&(!!n.properties&&n.properties.meta===t)}}function Ft(t){return !!t.featureTarget&&(!!t.featureTarget.properties&&(t.featureTarget.properties.active===Z&&t.featureTarget.properties.meta===W))}function Ot(t){return !!t.featureTarget&&(!!t.featureTarget.properties&&(t.featureTarget.properties.active===K&&t.featureTarget.properties.meta===W))}function kt(t){return void 0===t.featureTarget}function Tt(t){var e=t.featureTarget;return !!e&&(!!e.properties&&e.properties.meta===Y)}function jt(t){return !!t.originalEvent&&!0===t.originalEvent.shiftKey}function At(t){return 27===t.keyCode}function Dt(t){return 13===t.keyCode}var Nt=Ut;function Ut(t,e){this.x=t,this.y=e;}function Rt(t,e){var n=e.getBoundingClientRect();return new Nt(t.clientX-n.left-(e.clientLeft||0),t.clientY-n.top-(e.clientTop||0))}function Bt(t,e,n,o){return {type:M,properties:{meta:Y,parent:t,coord_path:n,active:o?Z:K},geometry:{type:L,coordinates:e}}}function Vt(t,e,n){void 0===e&&(e={}),void 0===n&&(n=null);var o,r=t.geometry,i=r.type,a=r.coordinates,s=t.properties&&t.properties.id,u=[];function c(t,n){var o="",r=null;t.forEach((function(t,i){var a=null!=n?n+"."+i:String(i),c=Bt(s,t,a,l(a));if(e.midpoints&&r){var d=function(t,e,n){var o=e.geometry.coordinates,r=n.geometry.coordinates;if(o[1]>85||o[1]<-85||r[1]>85||r[1]<-85)return null;var i={lng:(o[0]+r[0])/2,lat:(o[1]+r[1])/2};return {type:M,properties:{meta:q,parent:t,lng:i.lng,lat:i.lat,coord_path:n.properties.coord_path},geometry:{type:L,coordinates:[i.lng,i.lat]}}}(s,r,c);d&&u.push(d);}r=c;var p=JSON.stringify(t);o!==p&&u.push(c),0===i&&(o=p);}));}function l(t){return !!e.selectedPaths&&-1!==e.selectedPaths.indexOf(t)}return i===L?u.push(Bt(s,a,n,l(n))):i===w?a.forEach((function(t,e){c(t,null!==n?n+"."+e:String(e));})):i===I?c(a,n):0===i.indexOf(F)&&(o=i.replace(F,""),a.forEach((function(n,r){var i={type:M,properties:t.properties,geometry:{type:o,coordinates:n}};u=u.concat(Vt(i,e,r));}))),u}Ut.prototype={clone:function(){return new Ut(this.x,this.y)},add:function(t){return this.clone()._add(t)},sub:function(t){return this.clone()._sub(t)},multByPoint:function(t){return this.clone()._multByPoint(t)},divByPoint:function(t){return this.clone()._divByPoint(t)},mult:function(t){return this.clone()._mult(t)},div:function(t){return this.clone()._div(t)},rotate:function(t){return this.clone()._rotate(t)},rotateAround:function(t,e){return this.clone()._rotateAround(t,e)},matMult:function(t){return this.clone()._matMult(t)},unit:function(){return this.clone()._unit()},perp:function(){return this.clone()._perp()},round:function(){return this.clone()._round()},mag:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},equals:function(t){return this.x===t.x&&this.y===t.y},dist:function(t){return Math.sqrt(this.distSqr(t))},distSqr:function(t){var e=t.x-this.x,n=t.y-this.y;return e*e+n*n},angle:function(){return Math.atan2(this.y,this.x)},angleTo:function(t){return Math.atan2(this.y-t.y,this.x-t.x)},angleWith:function(t){return this.angleWithSep(t.x,t.y)},angleWithSep:function(t,e){return Math.atan2(this.x*e-this.y*t,this.x*t+this.y*e)},_matMult:function(t){var e=t[0]*this.x+t[1]*this.y,n=t[2]*this.x+t[3]*this.y;return this.x=e,this.y=n,this},_add:function(t){return this.x+=t.x,this.y+=t.y,this},_sub:function(t){return this.x-=t.x,this.y-=t.y,this},_mult:function(t){return this.x*=t,this.y*=t,this},_div:function(t){return this.x/=t,this.y/=t,this},_multByPoint:function(t){return this.x*=t.x,this.y*=t.y,this},_divByPoint:function(t){return this.x/=t.x,this.y/=t.y,this},_unit:function(){return this._div(this.mag()),this},_perp:function(){var t=this.y;return this.y=this.x,this.x=-t,this},_rotate:function(t){var e=Math.cos(t),n=Math.sin(t),o=e*this.x-n*this.y,r=n*this.x+e*this.y;return this.x=o,this.y=r,this},_rotateAround:function(t,e){var n=Math.cos(t),o=Math.sin(t),r=e.x+n*(this.x-e.x)-o*(this.y-e.y),i=e.y+o*(this.x-e.x)+n*(this.y-e.y);return this.x=r,this.y=i,this},_round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}},Ut.convert=function(t){return t instanceof Ut?t:Array.isArray(t)?new Ut(t[0],t[1]):t};var Jt=function(t){setTimeout((function(){t.map&&t.map.doubleClickZoom&&t._ctx&&t._ctx.store&&t._ctx.store.getInitialConfigValue&&t._ctx.store.getInitialConfigValue("doubleClickZoom")&&t.map.doubleClickZoom.enable();}),0);},Gt=function(t){setTimeout((function(){t.map&&t.map.doubleClickZoom&&t.map.doubleClickZoom.disable();}),0);},zt=function(t){if(!t||!t.type)return null;var e=$t[t.type];if(!e)return null;if("geometry"===e)return {type:"FeatureCollection",features:[{type:"Feature",properties:{},geometry:t}]};if("feature"===e)return {type:"FeatureCollection",features:[t]};if("featurecollection"===e)return t},$t={Point:"geometry",MultiPoint:"geometry",LineString:"geometry",MultiLineString:"geometry",Polygon:"geometry",MultiPolygon:"geometry",GeometryCollection:"geometry",Feature:"feature",FeatureCollection:"featurecollection"};function Wt(t){switch(t&&t.type||null){case"FeatureCollection":return t.features=t.features.reduce((function(t,e){return t.concat(Wt(e))}),[]),t;case"Feature":return t.geometry?Wt(t.geometry).map((function(e){var n={type:"Feature",properties:JSON.parse(JSON.stringify(t.properties)),geometry:e};return void 0!==t.id&&(n.id=t.id),n})):[t];case"MultiPoint":return t.coordinates.map((function(t){return {type:"Point",coordinates:t}}));case"MultiPolygon":return t.coordinates.map((function(t){return {type:"Polygon",coordinates:t}}));case"MultiLineString":return t.coordinates.map((function(t){return {type:"LineString",coordinates:t}}));case"GeometryCollection":return t.geometries.map(Wt).reduce((function(t,e){return t.concat(e)}),[]);case"Point":case"Polygon":case"LineString":return [t]}}var qt=function(t){if(!t)return [];var e=Wt(zt(t)),n=[];return e.features.forEach((function(t){t.geometry&&(n=n.concat(function t(e){return Array.isArray(e)&&e.length&&"number"==typeof e[0]?[e]:e.reduce((function(e,n){return Array.isArray(n)&&Array.isArray(n[0])?e.concat(t(n)):(e.push(n),e)}),[])}(t.geometry.coordinates)));})),n},Yt=ut((function(t){var e=t.exports=function(t){return new n(t)};function n(t){this.value=t;}function o(t,e,n){var o=[],a=[],l=!0;return function t(d){var p=n?r(d):d,f={},h=!0,g={node:p,node_:d,path:[].concat(o),parent:a[a.length-1],parents:a,key:o.slice(-1)[0],isRoot:0===o.length,level:o.length,circular:null,update:function(t,e){g.isRoot||(g.parent.node[g.key]=t),g.node=t,e&&(h=!1);},delete:function(t){delete g.parent.node[g.key],t&&(h=!1);},remove:function(t){s(g.parent.node)?g.parent.node.splice(g.key,1):delete g.parent.node[g.key],t&&(h=!1);},keys:null,before:function(t){f.before=t;},after:function(t){f.after=t;},pre:function(t){f.pre=t;},post:function(t){f.post=t;},stop:function(){l=!1;},block:function(){h=!1;}};if(!l)return g;function y(){if("object"==typeof g.node&&null!==g.node){g.keys&&g.node_===g.node||(g.keys=i(g.node)),g.isLeaf=0==g.keys.length;for(var t=0;t<a.length;t++)if(a[t].node_===d){g.circular=a[t];break}}else g.isLeaf=!0,g.keys=null;g.notLeaf=!g.isLeaf,g.notRoot=!g.isRoot;}y();var v=e.call(g,g.node);return void 0!==v&&g.update&&g.update(v),f.before&&f.before.call(g,g.node),h?("object"!=typeof g.node||null===g.node||g.circular||(a.push(g),y(),u(g.keys,(function(e,r){o.push(e),f.pre&&f.pre.call(g,g.node[e],e);var i=t(g.node[e]);n&&c.call(g.node,e)&&(g.node[e]=i.node),i.isLast=r==g.keys.length-1,i.isFirst=0==r,f.post&&f.post.call(g,i),o.pop();})),a.pop()),f.after&&f.after.call(g,g.node),g):g}(t).node}function r(t){if("object"==typeof t&&null!==t){var e;if(s(t))e=[];else if("[object Date]"===a(t))e=new Date(t.getTime?t.getTime():t);else if(function(t){return "[object RegExp]"===a(t)}(t))e=new RegExp(t);else if(function(t){return "[object Error]"===a(t)}(t))e={message:t.message};else if(function(t){return "[object Boolean]"===a(t)}(t))e=new Boolean(t);else if(function(t){return "[object Number]"===a(t)}(t))e=new Number(t);else if(function(t){return "[object String]"===a(t)}(t))e=new String(t);else if(Object.create&&Object.getPrototypeOf)e=Object.create(Object.getPrototypeOf(t));else if(t.constructor===Object)e={};else {var n=t.constructor&&t.constructor.prototype||t.__proto__||{},o=function(){};o.prototype=n,e=new o;}return u(i(t),(function(n){e[n]=t[n];})),e}return t}n.prototype.get=function(t){for(var e=this.value,n=0;n<t.length;n++){var o=t[n];if(!e||!c.call(e,o)){e=void 0;break}e=e[o];}return e},n.prototype.has=function(t){for(var e=this.value,n=0;n<t.length;n++){var o=t[n];if(!e||!c.call(e,o))return !1;e=e[o];}return !0},n.prototype.set=function(t,e){for(var n=this.value,o=0;o<t.length-1;o++){var r=t[o];c.call(n,r)||(n[r]={}),n=n[r];}return n[t[o]]=e,e},n.prototype.map=function(t){return o(this.value,t,!0)},n.prototype.forEach=function(t){return this.value=o(this.value,t,!1),this.value},n.prototype.reduce=function(t,e){var n=1===arguments.length,o=n?this.value:e;return this.forEach((function(e){this.isRoot&&n||(o=t.call(this,o,e));})),o},n.prototype.paths=function(){var t=[];return this.forEach((function(e){t.push(this.path);})),t},n.prototype.nodes=function(){var t=[];return this.forEach((function(e){t.push(this.node);})),t},n.prototype.clone=function(){var t=[],e=[];return function n(o){for(var a=0;a<t.length;a++)if(t[a]===o)return e[a];if("object"==typeof o&&null!==o){var s=r(o);return t.push(o),e.push(s),u(i(o),(function(t){s[t]=n(o[t]);})),t.pop(),e.pop(),s}return o}(this.value)};var i=Object.keys||function(t){var e=[];for(var n in t)e.push(n);return e};function a(t){return Object.prototype.toString.call(t)}var s=Array.isArray||function(t){return "[object Array]"===Object.prototype.toString.call(t)},u=function(t,e){if(t.forEach)return t.forEach(e);for(var n=0;n<t.length;n++)e(t[n],n,t);};u(i(n.prototype),(function(t){e[t]=function(e){var o=[].slice.call(arguments,1),r=new n(e);return r[t].apply(r,o)};}));var c=Object.hasOwnProperty||function(t,e){return e in t};})),Zt=Kt;function Kt(t){if(!(this instanceof Kt))return new Kt(t);this._bbox=t||[1/0,1/0,-1/0,-1/0],this._valid=!!t;}Kt.prototype.include=function(t){return this._valid=!0,this._bbox[0]=Math.min(this._bbox[0],t[0]),this._bbox[1]=Math.min(this._bbox[1],t[1]),this._bbox[2]=Math.max(this._bbox[2],t[0]),this._bbox[3]=Math.max(this._bbox[3],t[1]),this},Kt.prototype.equals=function(t){var e;return e=t instanceof Kt?t.bbox():t,this._bbox[0]==e[0]&&this._bbox[1]==e[1]&&this._bbox[2]==e[2]&&this._bbox[3]==e[3]},Kt.prototype.center=function(t){return this._valid?[(this._bbox[0]+this._bbox[2])/2,(this._bbox[1]+this._bbox[3])/2]:null},Kt.prototype.union=function(t){var e;return this._valid=!0,e=t instanceof Kt?t.bbox():t,this._bbox[0]=Math.min(this._bbox[0],e[0]),this._bbox[1]=Math.min(this._bbox[1],e[1]),this._bbox[2]=Math.max(this._bbox[2],e[2]),this._bbox[3]=Math.max(this._bbox[3],e[3]),this},Kt.prototype.bbox=function(){return this._valid?this._bbox:null},Kt.prototype.contains=function(t){if(!t)return this._fastContains();if(!this._valid)return null;var e=t[0],n=t[1];return this._bbox[0]<=e&&this._bbox[1]<=n&&this._bbox[2]>=e&&this._bbox[3]>=n},Kt.prototype.intersect=function(t){return this._valid?(e=t instanceof Kt?t.bbox():t,!(this._bbox[0]>e[2]||this._bbox[2]<e[0]||this._bbox[3]<e[1]||this._bbox[1]>e[3])):null;var e;},Kt.prototype._fastContains=function(){if(!this._valid)return new Function("return null;");var t="return "+this._bbox[0]+"<= ll[0] &&"+this._bbox[1]+"<= ll[1] &&"+this._bbox[2]+">= ll[0] &&"+this._bbox[3]+">= ll[1]";return new Function("ll",t)},Kt.prototype.polygon=function(){return this._valid?{type:"Polygon",coordinates:[[[this._bbox[0],this._bbox[1]],[this._bbox[2],this._bbox[1]],[this._bbox[2],this._bbox[3]],[this._bbox[0],this._bbox[3]],[this._bbox[0],this._bbox[1]]]]}:null};var Xt={features:["FeatureCollection"],coordinates:["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon"],geometry:["Feature"],geometries:["GeometryCollection"]},Ht=Object.keys(Xt),Qt=function(t){return te(t).bbox()};function te(t){for(var e=Zt(),n=qt(t),o=0;o<n.length;o++)e.include(n[o]);return e}Qt.polygon=function(t){return te(t).polygon()},Qt.bboxify=function(t){return Yt(t).map((function(t){t&&(Ht.some((function(e){return !!t[e]&&-1!==Xt[e].indexOf(t.type)}))&&(t.bbox=te(t).bbox(),this.update(t)));}))};function ee(t,e){var n=-90,o=90,r=-90,i=90,a=270,s=-270;t.forEach((function(t){var e=Qt(t),u=e[1],c=e[3],l=e[0],d=e[2];u>n&&(n=u),c<o&&(o=c),c>r&&(r=c),u<i&&(i=u),l<a&&(a=l),d>s&&(s=d);}));var u=e;return n+u.lat>85&&(u.lat=85-n),r+u.lat>90&&(u.lat=90-r),o+u.lat<-85&&(u.lat=-85-o),i+u.lat<-90&&(u.lat=-90-i),a+u.lng<=-270&&(u.lng+=360*Math.ceil(Math.abs(u.lng)/360)),s+u.lng>=270&&(u.lng-=360*Math.ceil(Math.abs(u.lng)/360)),u}function ne(t,e){var n=ee(t.map((function(t){return t.toGeoJSON()})),e);t.forEach((function(t){var e,o=t.getCoordinates(),r=function(t){var e={lng:t[0]+n.lng,lat:t[1]+n.lat};return [e.lng,e.lat]},i=function(t){return t.map((function(t){return r(t)}))};t.type===L?e=r(o):t.type===I||t.type===O?e=o.map(r):t.type===w||t.type===k?e=o.map(i):t.type===T&&(e=o.map((function(t){return t.map((function(t){return i(t)}))}))),t.incomingCoords(e);}));}var oe={onSetup:function(t){var e=this,n={dragMoveLocation:null,boxSelectStartLocation:null,boxSelectElement:void 0,boxSelecting:!1,canBoxSelect:!1,dragMoving:!1,canDragMove:!1,initiallySelectedFeatureIds:t.featureIds||[]};return this.setSelected(n.initiallySelectedFeatureIds.filter((function(t){return void 0!==e.getFeature(t)}))),this.fireActionable(),this.setActionableState({combineFeatures:!0,uncombineFeatures:!0,trash:!0}),n},fireUpdate:function(){this.map.fire(N,{action:z,features:this.getSelected().map((function(t){return t.toGeoJSON()}))});},fireActionable:function(){var t=this,e=this.getSelected(),n=e.filter((function(e){return t.isInstanceOf("MultiFeature",e)})),o=!1;if(e.length>1){o=!0;var r=e[0].type.replace("Multi","");e.forEach((function(t){t.type.replace("Multi","")!==r&&(o=!1);}));}var i=n.length>0,a=e.length>0;this.setActionableState({combineFeatures:o,uncombineFeatures:i,trash:a});},getUniqueIds:function(t){return t.length?t.map((function(t){return t.properties.id})).filter((function(t){return void 0!==t})).reduce((function(t,e){return t.add(e),t}),new tt).values():[]},stopExtendedInteractions:function(t){t.boxSelectElement&&(t.boxSelectElement.parentNode&&t.boxSelectElement.parentNode.removeChild(t.boxSelectElement),t.boxSelectElement=null),this.map.dragPan.enable(),t.boxSelecting=!1,t.canBoxSelect=!1,t.dragMoving=!1,t.canDragMove=!1;},onStop:function(){Jt(this);},onMouseMove:function(t){return this.stopExtendedInteractions(t),!0},onMouseOut:function(t){return !t.dragMoving||this.fireUpdate()}};oe.onTap=oe.onClick=function(t,e){return kt(e)?this.clickAnywhere(t,e):Pt(Y)(e)?this.clickOnVertex(t,e):function(t){return !!t.featureTarget&&(!!t.featureTarget.properties&&t.featureTarget.properties.meta===W)}(e)?this.clickOnFeature(t,e):void 0},oe.clickAnywhere=function(t){var e=this,n=this.getSelectedIds();n.length&&(this.clearSelectedFeatures(),n.forEach((function(t){return e.doRender(t)}))),Jt(this),this.stopExtendedInteractions(t);},oe.clickOnVertex=function(t,e){this.changeMode(j.DIRECT_SELECT,{featureId:e.featureTarget.properties.parent,coordPath:e.featureTarget.properties.coord_path,startPos:e.lngLat}),this.updateUIClasses({mouse:_});},oe.startOnActiveFeature=function(t,e){this.stopExtendedInteractions(t),this.map.dragPan.disable(),this.doRender(e.featureTarget.properties.id),t.canDragMove=!0,t.dragMoveLocation=e.lngLat;},oe.clickOnFeature=function(t,e){var n=this;Gt(this),this.stopExtendedInteractions(t);var o=jt(e),r=this.getSelectedIds(),i=e.featureTarget.properties.id,a=this.isSelected(i);if(!o&&a&&this.getFeature(i).type!==L)return this.changeMode(j.DIRECT_SELECT,{featureId:i});a&&o?(this.deselect(i),this.updateUIClasses({mouse:x}),1===r.length&&Jt(this)):!a&&o?(this.select(i),this.updateUIClasses({mouse:_})):a||o||(r.forEach((function(t){return n.doRender(t)})),this.setSelected(i),this.updateUIClasses({mouse:_})),this.doRender(i);},oe.onMouseDown=function(t,e){return Ft(e)?this.startOnActiveFeature(t,e):this.drawConfig.boxSelect&&function(t){return !!t.originalEvent&&(!!t.originalEvent.shiftKey&&0===t.originalEvent.button)}(e)?this.startBoxSelect(t,e):void 0},oe.startBoxSelect=function(t,e){this.stopExtendedInteractions(t),this.map.dragPan.disable(),t.boxSelectStartLocation=Rt(e.originalEvent,this.map.getContainer()),t.canBoxSelect=!0;},oe.onTouchStart=function(t,e){if(Ft(e))return this.startOnActiveFeature(t,e)},oe.onDrag=function(t,e){return t.canDragMove?this.dragMove(t,e):this.drawConfig.boxSelect&&t.canBoxSelect?this.whileBoxSelect(t,e):void 0},oe.whileBoxSelect=function(t,e){t.boxSelecting=!0,this.updateUIClasses({mouse:b}),t.boxSelectElement||(t.boxSelectElement=document.createElement("div"),t.boxSelectElement.classList.add(y),this.map.getContainer().appendChild(t.boxSelectElement));var n=Rt(e.originalEvent,this.map.getContainer()),o=Math.min(t.boxSelectStartLocation.x,n.x),r=Math.max(t.boxSelectStartLocation.x,n.x),i=Math.min(t.boxSelectStartLocation.y,n.y),a=Math.max(t.boxSelectStartLocation.y,n.y),s="translate("+o+"px, "+i+"px)";t.boxSelectElement.style.transform=s,t.boxSelectElement.style.WebkitTransform=s,t.boxSelectElement.style.width=r-o+"px",t.boxSelectElement.style.height=a-i+"px";},oe.dragMove=function(t,e){t.dragMoving=!0,e.originalEvent.stopPropagation();var n={lng:e.lngLat.lng-t.dragMoveLocation.lng,lat:e.lngLat.lat-t.dragMoveLocation.lat};ne(this.getSelected(),n),t.dragMoveLocation=e.lngLat;},oe.onMouseUp=function(t,e){var n=this;if(t.dragMoving)this.fireUpdate();else if(t.boxSelecting){var o=[t.boxSelectStartLocation,Rt(e.originalEvent,this.map.getContainer())],r=this.featuresAt(null,o,"click"),i=this.getUniqueIds(r).filter((function(t){return !n.isSelected(t)}));i.length&&(this.select(i),i.forEach((function(t){return n.doRender(t)})),this.updateUIClasses({mouse:_}));}this.stopExtendedInteractions(t);},oe.toDisplayFeatures=function(t,e,n){e.properties.active=this.isSelected(e.properties.id)?Z:K,n(e),this.fireActionable(),e.properties.active===Z&&e.geometry.type!==L&&Vt(e).forEach(n);},oe.onTrash=function(){this.deleteFeature(this.getSelectedIds()),this.fireActionable();},oe.onCombineFeatures=function(){var t=this.getSelected();if(!(0===t.length||t.length<2)){for(var e=[],n=[],o=t[0].type.replace("Multi",""),r=0;r<t.length;r++){var i=t[r];if(i.type.replace("Multi","")!==o)return;i.type.includes("Multi")?i.getCoordinates().forEach((function(t){e.push(t);})):e.push(i.getCoordinates()),n.push(i.toGeoJSON());}if(n.length>1){var a=this.newFeature({type:M,properties:n[0].properties,geometry:{type:"Multi"+o,coordinates:e}});this.addFeature(a),this.deleteFeature(this.getSelectedIds(),{silent:!0}),this.setSelected([a.id]),this.map.fire(J,{createdFeatures:[a.toGeoJSON()],deletedFeatures:n});}this.fireActionable();}},oe.onUncombineFeatures=function(){var t=this,e=this.getSelected();if(0!==e.length){for(var n=[],o=[],r=function(r){var i=e[r];t.isInstanceOf("MultiFeature",i)&&(i.getFeatures().forEach((function(e){t.addFeature(e),e.properties=i.properties,n.push(e.toGeoJSON()),t.select([e.id]);})),t.deleteFeature(i.id,{silent:!0}),o.push(i.toGeoJSON()));},i=0;i<e.length;i++)r(i);n.length>1&&this.map.fire(G,{createdFeatures:n,deletedFeatures:o}),this.fireActionable();}};var re=Pt(Y),ie=Pt(q),ae={fireUpdate:function(){this.map.fire(N,{action:$,features:this.getSelected().map((function(t){return t.toGeoJSON()}))});},fireActionable:function(t){this.setActionableState({combineFeatures:!1,uncombineFeatures:!1,trash:t.selectedCoordPaths.length>0});},startDragging:function(t,e){this.map.dragPan.disable(),t.canDragMove=!0,t.dragMoveLocation=e.lngLat;},stopDragging:function(t){this.map.dragPan.enable(),t.dragMoving=!1,t.canDragMove=!1,t.dragMoveLocation=null;},onVertex:function(t,e){this.startDragging(t,e);var n=e.featureTarget.properties,o=t.selectedCoordPaths.indexOf(n.coord_path);jt(e)||-1!==o?jt(e)&&-1===o&&t.selectedCoordPaths.push(n.coord_path):t.selectedCoordPaths=[n.coord_path];var r=this.pathsToCoordinates(t.featureId,t.selectedCoordPaths);this.setSelectedCoordinates(r);},onMidpoint:function(t,e){this.startDragging(t,e);var n=e.featureTarget.properties;t.feature.addCoordinate(n.coord_path,n.lng,n.lat),this.fireUpdate(),t.selectedCoordPaths=[n.coord_path];},pathsToCoordinates:function(t,e){return e.map((function(e){return {feature_id:t,coord_path:e}}))},onFeature:function(t,e){0===t.selectedCoordPaths.length?this.startDragging(t,e):this.stopDragging(t);},dragFeature:function(t,e,n){ne(this.getSelected(),n),t.dragMoveLocation=e.lngLat;},dragVertex:function(t,e,n){for(var o=t.selectedCoordPaths.map((function(e){return t.feature.getCoordinate(e)})),r=ee(o.map((function(t){return {type:M,properties:{},geometry:{type:L,coordinates:t}}})),n),i=0;i<o.length;i++){var a=o[i];t.feature.updateCoordinate(t.selectedCoordPaths[i],a[0]+r.lng,a[1]+r.lat);}},clickNoTarget:function(){this.changeMode(j.SIMPLE_SELECT);},clickInactive:function(){this.changeMode(j.SIMPLE_SELECT);},clickActiveFeature:function(t){t.selectedCoordPaths=[],this.clearSelectedCoordinates(),t.feature.changed();},onSetup:function(t){var e=t.featureId,n=this.getFeature(e);if(!n)throw new Error("You must provide a featureId to enter direct_select mode");if(n.type===L)throw new TypeError("direct_select mode doesn't handle point features");var o={featureId:e,feature:n,dragMoveLocation:t.startPos||null,dragMoving:!1,canDragMove:!1,selectedCoordPaths:t.coordPath?[t.coordPath]:[]};return this.setSelectedCoordinates(this.pathsToCoordinates(e,o.selectedCoordPaths)),this.setSelected(e),Gt(this),this.setActionableState({trash:!0}),o},onStop:function(){Jt(this),this.clearSelectedCoordinates();},toDisplayFeatures:function(t,e,n){t.featureId===e.properties.id?(e.properties.active=Z,n(e),Vt(e,{map:this.map,midpoints:!0,selectedPaths:t.selectedCoordPaths}).forEach(n)):(e.properties.active=K,n(e)),this.fireActionable(t);},onTrash:function(t){t.selectedCoordPaths.sort((function(t,e){return e.localeCompare(t,"en",{numeric:!0})})).forEach((function(e){return t.feature.removeCoordinate(e)})),this.fireUpdate(),t.selectedCoordPaths=[],this.clearSelectedCoordinates(),this.fireActionable(t),!1===t.feature.isValid()&&(this.deleteFeature([t.featureId]),this.changeMode(j.SIMPLE_SELECT,{}));},onMouseMove:function(t,e){var n=Ft(e),o=re(e),r=0===t.selectedCoordPaths.length;return n&&r||o&&!r?this.updateUIClasses({mouse:_}):this.updateUIClasses({mouse:C}),this.stopDragging(t),!0},onMouseOut:function(t){return t.dragMoving&&this.fireUpdate(),!0}};ae.onTouchStart=ae.onMouseDown=function(t,e){return re(e)?this.onVertex(t,e):Ft(e)?this.onFeature(t,e):ie(e)?this.onMidpoint(t,e):void 0},ae.onDrag=function(t,e){if(!0===t.canDragMove){t.dragMoving=!0,e.originalEvent.stopPropagation();var n={lng:e.lngLat.lng-t.dragMoveLocation.lng,lat:e.lngLat.lat-t.dragMoveLocation.lat};t.selectedCoordPaths.length>0?this.dragVertex(t,e,n):this.dragFeature(t,e,n),t.dragMoveLocation=e.lngLat;}},ae.onClick=function(t,e){return kt(e)?this.clickNoTarget(t,e):Ft(e)?this.clickActiveFeature(t,e):Ot(e)?this.clickInactive(t,e):void this.stopDragging(t)},ae.onTap=function(t,e){return kt(e)?this.clickNoTarget(t,e):Ft(e)?this.clickActiveFeature(t,e):Ot(e)?this.clickInactive(t,e):void 0},ae.onTouchEnd=ae.onMouseUp=function(t){t.dragMoving&&this.fireUpdate(),this.stopDragging(t);};var se={};function ue(t,e){return !!t.lngLat&&(t.lngLat.lng===e[0]&&t.lngLat.lat===e[1])}se.onSetup=function(){var t=this.newFeature({type:M,properties:{},geometry:{type:L,coordinates:[]}});return this.addFeature(t),this.clearSelectedFeatures(),this.updateUIClasses({mouse:b}),this.activateUIButton(E.POINT),this.setActionableState({trash:!0}),{point:t}},se.stopDrawingAndRemove=function(t){this.deleteFeature([t.point.id],{silent:!0}),this.changeMode(j.SIMPLE_SELECT);},se.onTap=se.onClick=function(t,e){this.updateUIClasses({mouse:_}),t.point.updateCoordinate("",e.lngLat.lng,e.lngLat.lat),this.map.fire(A,{features:[t.point.toGeoJSON()]}),this.changeMode(j.SIMPLE_SELECT,{featureIds:[t.point.id]});},se.onStop=function(t){this.activateUIButton(),t.point.getCoordinate().length||this.deleteFeature([t.point.id],{silent:!0});},se.toDisplayFeatures=function(t,e,n){var o=e.properties.id===t.point.id;if(e.properties.active=o?Z:K,!o)return n(e)},se.onTrash=se.stopDrawingAndRemove,se.onKeyUp=function(t,e){if(At(e)||Dt(e))return this.stopDrawingAndRemove(t,e)};var ce={onSetup:function(){var t=this.newFeature({type:M,properties:{},geometry:{type:w,coordinates:[[]]}});return this.addFeature(t),this.clearSelectedFeatures(),Gt(this),this.updateUIClasses({mouse:b}),this.activateUIButton(E.POLYGON),this.setActionableState({trash:!0}),{polygon:t,currentVertexPosition:0}},clickAnywhere:function(t,e){if(t.currentVertexPosition>0&&ue(e,t.polygon.coordinates[0][t.currentVertexPosition-1]))return this.changeMode(j.SIMPLE_SELECT,{featureIds:[t.polygon.id]});this.updateUIClasses({mouse:b}),t.polygon.updateCoordinate("0."+t.currentVertexPosition,e.lngLat.lng,e.lngLat.lat),t.currentVertexPosition++,t.polygon.updateCoordinate("0."+t.currentVertexPosition,e.lngLat.lng,e.lngLat.lat);},clickOnVertex:function(t){return this.changeMode(j.SIMPLE_SELECT,{featureIds:[t.polygon.id]})},onMouseMove:function(t,e){t.polygon.updateCoordinate("0."+t.currentVertexPosition,e.lngLat.lng,e.lngLat.lat),Tt(e)&&this.updateUIClasses({mouse:x});}};ce.onTap=ce.onClick=function(t,e){return Tt(e)?this.clickOnVertex(t,e):this.clickAnywhere(t,e)},ce.onKeyUp=function(t,e){At(e)?(this.deleteFeature([t.polygon.id],{silent:!0}),this.changeMode(j.SIMPLE_SELECT)):Dt(e)&&this.changeMode(j.SIMPLE_SELECT,{featureIds:[t.polygon.id]});},ce.onStop=function(t){this.updateUIClasses({mouse:C}),Jt(this),this.activateUIButton(),void 0!==this.getFeature(t.polygon.id)&&(t.polygon.removeCoordinate("0."+t.currentVertexPosition),t.polygon.isValid()?this.map.fire(A,{features:[t.polygon.toGeoJSON()]}):(this.deleteFeature([t.polygon.id],{silent:!0}),this.changeMode(j.SIMPLE_SELECT,{},{silent:!0})));},ce.toDisplayFeatures=function(t,e,n){var o=e.properties.id===t.polygon.id;if(e.properties.active=o?Z:K,!o)return n(e);if(0!==e.geometry.coordinates.length){var r=e.geometry.coordinates[0].length;if(!(r<3)){if(e.properties.meta=W,n(Bt(t.polygon.id,e.geometry.coordinates[0][0],"0.0",!1)),r>3){var i=e.geometry.coordinates[0].length-3;n(Bt(t.polygon.id,e.geometry.coordinates[0][i],"0."+i,!1));}if(r<=4){var a=[[e.geometry.coordinates[0][0][0],e.geometry.coordinates[0][0][1]],[e.geometry.coordinates[0][1][0],e.geometry.coordinates[0][1][1]]];if(n({type:M,properties:e.properties,geometry:{coordinates:a,type:I}}),3===r)return}return n(e)}}},ce.onTrash=function(t){this.deleteFeature([t.polygon.id],{silent:!0}),this.changeMode(j.SIMPLE_SELECT);};var le={onSetup:function(t){var e,n,o=(t=t||{}).featureId,r="forward";if(o){if(!(e=this.getFeature(o)))throw new Error("Could not find a feature with the provided featureId");var i=t.from;if(i&&"Feature"===i.type&&i.geometry&&"Point"===i.geometry.type&&(i=i.geometry),i&&"Point"===i.type&&i.coordinates&&2===i.coordinates.length&&(i=i.coordinates),!i||!Array.isArray(i))throw new Error("Please use the `from` property to indicate which point to continue the line from");var a=e.coordinates.length-1;if(e.coordinates[a][0]===i[0]&&e.coordinates[a][1]===i[1])n=a+1,e.addCoordinate.apply(e,[n].concat(e.coordinates[a]));else {if(e.coordinates[0][0]!==i[0]||e.coordinates[0][1]!==i[1])throw new Error("`from` should match the point at either the start or the end of the provided LineString");r="backwards",n=0,e.addCoordinate.apply(e,[n].concat(e.coordinates[0]));}}else e=this.newFeature({type:M,properties:{},geometry:{type:I,coordinates:[]}}),n=0,this.addFeature(e);return this.clearSelectedFeatures(),Gt(this),this.updateUIClasses({mouse:b}),this.activateUIButton(E.LINE),this.setActionableState({trash:!0}),{line:e,currentVertexPosition:n,direction:r}},clickAnywhere:function(t,e){if(t.currentVertexPosition>0&&ue(e,t.line.coordinates[t.currentVertexPosition-1])||"backwards"===t.direction&&ue(e,t.line.coordinates[t.currentVertexPosition+1]))return this.changeMode(j.SIMPLE_SELECT,{featureIds:[t.line.id]});this.updateUIClasses({mouse:b}),t.line.updateCoordinate(t.currentVertexPosition,e.lngLat.lng,e.lngLat.lat),"forward"===t.direction?(t.currentVertexPosition++,t.line.updateCoordinate(t.currentVertexPosition,e.lngLat.lng,e.lngLat.lat)):t.line.addCoordinate(0,e.lngLat.lng,e.lngLat.lat);},clickOnVertex:function(t){return this.changeMode(j.SIMPLE_SELECT,{featureIds:[t.line.id]})},onMouseMove:function(t,e){t.line.updateCoordinate(t.currentVertexPosition,e.lngLat.lng,e.lngLat.lat),Tt(e)&&this.updateUIClasses({mouse:x});}};le.onTap=le.onClick=function(t,e){if(Tt(e))return this.clickOnVertex(t,e);this.clickAnywhere(t,e);},le.onKeyUp=function(t,e){Dt(e)?this.changeMode(j.SIMPLE_SELECT,{featureIds:[t.line.id]}):At(e)&&(this.deleteFeature([t.line.id],{silent:!0}),this.changeMode(j.SIMPLE_SELECT));},le.onStop=function(t){Jt(this),this.activateUIButton(),void 0!==this.getFeature(t.line.id)&&(t.line.removeCoordinate(""+t.currentVertexPosition),t.line.isValid()?this.map.fire(A,{features:[t.line.toGeoJSON()]}):(this.deleteFeature([t.line.id],{silent:!0}),this.changeMode(j.SIMPLE_SELECT,{},{silent:!0})));},le.onTrash=function(t){this.deleteFeature([t.line.id],{silent:!0}),this.changeMode(j.SIMPLE_SELECT);},le.toDisplayFeatures=function(t,e,n){var o=e.properties.id===t.line.id;if(e.properties.active=o?Z:K,!o)return n(e);e.geometry.coordinates.length<2||(e.properties.meta=W,n(Bt(t.line.id,e.geometry.coordinates["forward"===t.direction?e.geometry.coordinates.length-2:1],""+("forward"===t.direction?e.geometry.coordinates.length-2:1),!1)),n(e));};var de={simple_select:oe,direct_select:ae,draw_point:se,draw_polygon:ce,draw_line_string:le},pe={defaultMode:j.SIMPLE_SELECT,keybindings:!0,touchEnabled:!0,clickBuffer:2,touchBuffer:25,boxSelect:!0,displayControlsDefault:!0,styles:[{id:"gl-draw-polygon-fill-inactive",type:"fill",filter:["all",["==","active","false"],["==","$type","Polygon"],["!=","mode","static"]],paint:{"fill-color":"#3bb2d0","fill-outline-color":"#3bb2d0","fill-opacity":.1}},{id:"gl-draw-polygon-fill-active",type:"fill",filter:["all",["==","active","true"],["==","$type","Polygon"]],paint:{"fill-color":"#fbb03b","fill-outline-color":"#fbb03b","fill-opacity":.1}},{id:"gl-draw-polygon-midpoint",type:"circle",filter:["all",["==","$type","Point"],["==","meta","midpoint"]],paint:{"circle-radius":3,"circle-color":"#fbb03b"}},{id:"gl-draw-polygon-stroke-inactive",type:"line",filter:["all",["==","active","false"],["==","$type","Polygon"],["!=","mode","static"]],layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":"#3bb2d0","line-width":2}},{id:"gl-draw-polygon-stroke-active",type:"line",filter:["all",["==","active","true"],["==","$type","Polygon"]],layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":"#fbb03b","line-dasharray":[.2,2],"line-width":2}},{id:"gl-draw-line-inactive",type:"line",filter:["all",["==","active","false"],["==","$type","LineString"],["!=","mode","static"]],layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":"#3bb2d0","line-width":2}},{id:"gl-draw-line-active",type:"line",filter:["all",["==","$type","LineString"],["==","active","true"]],layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":"#fbb03b","line-dasharray":[.2,2],"line-width":2}},{id:"gl-draw-polygon-and-line-vertex-stroke-inactive",type:"circle",filter:["all",["==","meta","vertex"],["==","$type","Point"],["!=","mode","static"]],paint:{"circle-radius":5,"circle-color":"#fff"}},{id:"gl-draw-polygon-and-line-vertex-inactive",type:"circle",filter:["all",["==","meta","vertex"],["==","$type","Point"],["!=","mode","static"]],paint:{"circle-radius":3,"circle-color":"#fbb03b"}},{id:"gl-draw-point-point-stroke-inactive",type:"circle",filter:["all",["==","active","false"],["==","$type","Point"],["==","meta","feature"],["!=","mode","static"]],paint:{"circle-radius":5,"circle-opacity":1,"circle-color":"#fff"}},{id:"gl-draw-point-inactive",type:"circle",filter:["all",["==","active","false"],["==","$type","Point"],["==","meta","feature"],["!=","mode","static"]],paint:{"circle-radius":3,"circle-color":"#3bb2d0"}},{id:"gl-draw-point-stroke-active",type:"circle",filter:["all",["==","$type","Point"],["==","active","true"],["!=","meta","midpoint"]],paint:{"circle-radius":7,"circle-color":"#fff"}},{id:"gl-draw-point-active",type:"circle",filter:["all",["==","$type","Point"],["!=","meta","midpoint"],["==","active","true"]],paint:{"circle-radius":5,"circle-color":"#fbb03b"}},{id:"gl-draw-polygon-fill-static",type:"fill",filter:["all",["==","mode","static"],["==","$type","Polygon"]],paint:{"fill-color":"#404040","fill-outline-color":"#404040","fill-opacity":.1}},{id:"gl-draw-polygon-stroke-static",type:"line",filter:["all",["==","mode","static"],["==","$type","Polygon"]],layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":"#404040","line-width":2}},{id:"gl-draw-line-static",type:"line",filter:["all",["==","mode","static"],["==","$type","LineString"]],layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":"#404040","line-width":2}},{id:"gl-draw-point-static",type:"circle",filter:["all",["==","mode","static"],["==","$type","Point"]],paint:{"circle-radius":5,"circle-color":"#404040"}}],modes:de,controls:{},userProperties:!1},fe={point:!0,line_string:!0,polygon:!0,trash:!0,combine_features:!0,uncombine_features:!0},he={point:!1,line_string:!1,polygon:!1,trash:!1,combine_features:!1,uncombine_features:!1};function ge(t,e){return t.map((function(t){return t.source?t:Mt(t,{id:t.id+"."+e,source:"hot"===e?v:m})}))}var ye=ut((function(t,e){var n="[object Arguments]",o="[object Map]",r="[object Object]",i="[object Set]",a=/^\[object .+?Constructor\]$/,s=/^(?:0|[1-9]\d*)$/,u={};u["[object Float32Array]"]=u["[object Float64Array]"]=u["[object Int8Array]"]=u["[object Int16Array]"]=u["[object Int32Array]"]=u["[object Uint8Array]"]=u["[object Uint8ClampedArray]"]=u["[object Uint16Array]"]=u["[object Uint32Array]"]=!0,u[n]=u["[object Array]"]=u["[object ArrayBuffer]"]=u["[object Boolean]"]=u["[object DataView]"]=u["[object Date]"]=u["[object Error]"]=u["[object Function]"]=u[o]=u["[object Number]"]=u[r]=u["[object RegExp]"]=u[i]=u["[object String]"]=u["[object WeakMap]"]=!1;var c="object"==typeof commonjsGlobal&&commonjsGlobal&&commonjsGlobal.Object===Object&&commonjsGlobal,l="object"==typeof self&&self&&self.Object===Object&&self,d=c||l||Function("return this")(),p=e&&!e.nodeType&&e,f=p&&t&&!t.nodeType&&t,h=f&&f.exports===p,g=h&&c.process,y=function(){try{return g&&g.binding&&g.binding("util")}catch(t){}}(),v=y&&y.isTypedArray;function m(t,e){for(var n=-1,o=null==t?0:t.length;++n<o;)if(e(t[n],n,t))return !0;return !1}function b(t){var e=-1,n=Array(t.size);return t.forEach((function(t,o){n[++e]=[o,t];})),n}function _(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t;})),n}var S,x,C,E=Array.prototype,M=Function.prototype,w=Object.prototype,I=d["__core-js_shared__"],L=M.toString,P=w.hasOwnProperty,F=(S=/[^.]+$/.exec(I&&I.keys&&I.keys.IE_PROTO||""))?"Symbol(src)_1."+S:"",O=w.toString,k=RegExp("^"+L.call(P).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),T=h?d.Buffer:void 0,j=d.Symbol,A=d.Uint8Array,D=w.propertyIsEnumerable,N=E.splice,U=j?j.toStringTag:void 0,R=Object.getOwnPropertySymbols,B=T?T.isBuffer:void 0,V=(x=Object.keys,C=Object,function(t){return x(C(t))}),J=yt(d,"DataView"),G=yt(d,"Map"),z=yt(d,"Promise"),$=yt(d,"Set"),W=yt(d,"WeakMap"),q=yt(Object,"create"),Y=_t(J),Z=_t(G),K=_t(z),X=_t($),H=_t(W),Q=j?j.prototype:void 0,tt=Q?Q.valueOf:void 0;function et(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var o=t[e];this.set(o[0],o[1]);}}function nt(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var o=t[e];this.set(o[0],o[1]);}}function ot(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var o=t[e];this.set(o[0],o[1]);}}function rt(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new ot;++e<n;)this.add(t[e]);}function it(t){var e=this.__data__=new nt(t);this.size=e.size;}function at(t,e){var n=Ct(t),o=!n&&xt(t),r=!n&&!o&&Et(t),i=!n&&!o&&!r&&Pt(t),a=n||o||r||i,s=a?function(t,e){for(var n=-1,o=Array(t);++n<t;)o[n]=e(n);return o}(t.length,String):[],u=s.length;for(var c in t)!e&&!P.call(t,c)||a&&("length"==c||r&&("offset"==c||"parent"==c)||i&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||bt(c,u))||s.push(c);return s}function st(t,e){for(var n=t.length;n--;)if(St(t[n][0],e))return n;return -1}function ut(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":U&&U in Object(t)?function(t){var e=P.call(t,U),n=t[U];try{t[U]=void 0;var o=!0;}catch(t){}var r=O.call(t);o&&(e?t[U]=n:delete t[U]);return r}(t):function(t){return O.call(t)}(t)}function ct(t){return Lt(t)&&ut(t)==n}function lt(t,e,a,s,u){return t===e||(null==t||null==e||!Lt(t)&&!Lt(e)?t!=t&&e!=e:function(t,e,a,s,u,c){var l=Ct(t),d=Ct(e),p=l?"[object Array]":mt(t),f=d?"[object Array]":mt(e),h=(p=p==n?r:p)==r,g=(f=f==n?r:f)==r,y=p==f;if(y&&Et(t)){if(!Et(e))return !1;l=!0,h=!1;}if(y&&!h)return c||(c=new it),l||Pt(t)?ft(t,e,a,s,u,c):function(t,e,n,r,a,s,u){switch(n){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return !1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return !(t.byteLength!=e.byteLength||!s(new A(t),new A(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return St(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case o:var c=b;case i:var l=1&r;if(c||(c=_),t.size!=e.size&&!l)return !1;var d=u.get(t);if(d)return d==e;r|=2,u.set(t,e);var p=ft(c(t),c(e),r,a,s,u);return u.delete(t),p;case"[object Symbol]":if(tt)return tt.call(t)==tt.call(e)}return !1}(t,e,p,a,s,u,c);if(!(1&a)){var v=h&&P.call(t,"__wrapped__"),m=g&&P.call(e,"__wrapped__");if(v||m){var S=v?t.value():t,x=m?e.value():e;return c||(c=new it),u(S,x,a,s,c)}}if(!y)return !1;return c||(c=new it),function(t,e,n,o,r,i){var a=1&n,s=ht(t),u=s.length,c=ht(e).length;if(u!=c&&!a)return !1;var l=u;for(;l--;){var d=s[l];if(!(a?d in e:P.call(e,d)))return !1}var p=i.get(t);if(p&&i.get(e))return p==e;var f=!0;i.set(t,e),i.set(e,t);var h=a;for(;++l<u;){d=s[l];var g=t[d],y=e[d];if(o)var v=a?o(y,g,d,e,t,i):o(g,y,d,t,e,i);if(!(void 0===v?g===y||r(g,y,n,o,i):v)){f=!1;break}h||(h="constructor"==d);}if(f&&!h){var m=t.constructor,b=e.constructor;m==b||!("constructor"in t)||!("constructor"in e)||"function"==typeof m&&m instanceof m&&"function"==typeof b&&b instanceof b||(f=!1);}return i.delete(t),i.delete(e),f}(t,e,a,s,u,c)}(t,e,a,s,lt,u))}function dt(t){return !(!It(t)||function(t){return !!F&&F in t}(t))&&(Mt(t)?k:a).test(_t(t))}function pt(t){if(n=(e=t)&&e.constructor,o="function"==typeof n&&n.prototype||w,e!==o)return V(t);var e,n,o,r=[];for(var i in Object(t))P.call(t,i)&&"constructor"!=i&&r.push(i);return r}function ft(t,e,n,o,r,i){var a=1&n,s=t.length,u=e.length;if(s!=u&&!(a&&u>s))return !1;var c=i.get(t);if(c&&i.get(e))return c==e;var l=-1,d=!0,p=2&n?new rt:void 0;for(i.set(t,e),i.set(e,t);++l<s;){var f=t[l],h=e[l];if(o)var g=a?o(h,f,l,e,t,i):o(f,h,l,t,e,i);if(void 0!==g){if(g)continue;d=!1;break}if(p){if(!m(e,(function(t,e){if(a=e,!p.has(a)&&(f===t||r(f,t,n,o,i)))return p.push(e);var a;}))){d=!1;break}}else if(f!==h&&!r(f,h,n,o,i)){d=!1;break}}return i.delete(t),i.delete(e),d}function ht(t){return function(t,e,n){var o=e(t);return Ct(t)?o:function(t,e){for(var n=-1,o=e.length,r=t.length;++n<o;)t[r+n]=e[n];return t}(o,n(t))}(t,Ft,vt)}function gt(t,e){var n,o,r=t.__data__;return ("string"==(o=typeof(n=e))||"number"==o||"symbol"==o||"boolean"==o?"__proto__"!==n:null===n)?r["string"==typeof e?"string":"hash"]:r.map}function yt(t,e){var n=function(t,e){return null==t?void 0:t[e]}(t,e);return dt(n)?n:void 0}et.prototype.clear=function(){this.__data__=q?q(null):{},this.size=0;},et.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},et.prototype.get=function(t){var e=this.__data__;if(q){var n=e[t];return "__lodash_hash_undefined__"===n?void 0:n}return P.call(e,t)?e[t]:void 0},et.prototype.has=function(t){var e=this.__data__;return q?void 0!==e[t]:P.call(e,t)},et.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=q&&void 0===e?"__lodash_hash_undefined__":e,this},nt.prototype.clear=function(){this.__data__=[],this.size=0;},nt.prototype.delete=function(t){var e=this.__data__,n=st(e,t);return !(n<0)&&(n==e.length-1?e.pop():N.call(e,n,1),--this.size,!0)},nt.prototype.get=function(t){var e=this.__data__,n=st(e,t);return n<0?void 0:e[n][1]},nt.prototype.has=function(t){return st(this.__data__,t)>-1},nt.prototype.set=function(t,e){var n=this.__data__,o=st(n,t);return o<0?(++this.size,n.push([t,e])):n[o][1]=e,this},ot.prototype.clear=function(){this.size=0,this.__data__={hash:new et,map:new(G||nt),string:new et};},ot.prototype.delete=function(t){var e=gt(this,t).delete(t);return this.size-=e?1:0,e},ot.prototype.get=function(t){return gt(this,t).get(t)},ot.prototype.has=function(t){return gt(this,t).has(t)},ot.prototype.set=function(t,e){var n=gt(this,t),o=n.size;return n.set(t,e),this.size+=n.size==o?0:1,this},rt.prototype.add=rt.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},rt.prototype.has=function(t){return this.__data__.has(t)},it.prototype.clear=function(){this.__data__=new nt,this.size=0;},it.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},it.prototype.get=function(t){return this.__data__.get(t)},it.prototype.has=function(t){return this.__data__.has(t)},it.prototype.set=function(t,e){var n=this.__data__;if(n instanceof nt){var o=n.__data__;if(!G||o.length<199)return o.push([t,e]),this.size=++n.size,this;n=this.__data__=new ot(o);}return n.set(t,e),this.size=n.size,this};var vt=R?function(t){return null==t?[]:(t=Object(t),function(t,e){for(var n=-1,o=null==t?0:t.length,r=0,i=[];++n<o;){var a=t[n];e(a,n,t)&&(i[r++]=a);}return i}(R(t),(function(e){return D.call(t,e)})))}:function(){return []},mt=ut;function bt(t,e){return !!(e=null==e?9007199254740991:e)&&("number"==typeof t||s.test(t))&&t>-1&&t%1==0&&t<e}function _t(t){if(null!=t){try{return L.call(t)}catch(t){}try{return t+""}catch(t){}}return ""}function St(t,e){return t===e||t!=t&&e!=e}(J&&"[object DataView]"!=mt(new J(new ArrayBuffer(1)))||G&&mt(new G)!=o||z&&"[object Promise]"!=mt(z.resolve())||$&&mt(new $)!=i||W&&"[object WeakMap]"!=mt(new W))&&(mt=function(t){var e=ut(t),n=e==r?t.constructor:void 0,a=n?_t(n):"";if(a)switch(a){case Y:return "[object DataView]";case Z:return o;case K:return "[object Promise]";case X:return i;case H:return "[object WeakMap]"}return e});var xt=ct(function(){return arguments}())?ct:function(t){return Lt(t)&&P.call(t,"callee")&&!D.call(t,"callee")},Ct=Array.isArray;var Et=B||function(){return !1};function Mt(t){if(!It(t))return !1;var e=ut(t);return "[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}function wt(t){return "number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function It(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Lt(t){return null!=t&&"object"==typeof t}var Pt=v?function(t){return function(e){return t(e)}}(v):function(t){return Lt(t)&&wt(t.length)&&!!u[ut(t)]};function Ft(t){return null!=(e=t)&&wt(e.length)&&!Mt(e)?at(t):pt(t);var e;}t.exports=function(t,e){return lt(t,e)};}));var ve={Polygon:ft,LineString:pt,Point:dt,MultiPolygon:yt,MultiLineString:yt,MultiPoint:yt};function me(t,e){return e.modes=j,e.getFeatureIdsAt=function(e){return nt.click({point:e},null,t).map((function(t){return t.properties.id}))},e.getSelectedIds=function(){return t.store.getSelectedIds()},e.getSelected=function(){return {type:P,features:t.store.getSelectedIds().map((function(e){return t.store.get(e)})).map((function(t){return t.toGeoJSON()}))}},e.getSelectedPoints=function(){return {type:P,features:t.store.getSelectedCoordinates().map((function(t){return {type:M,properties:{},geometry:{type:L,coordinates:t.coordinates}}}))}},e.set=function(n){if(void 0===n.type||n.type!==P||!Array.isArray(n.features))throw new Error("Invalid FeatureCollection");var o=t.store.createRenderBatch(),r=t.store.getAllIds().slice(),i=e.add(n),a=new tt(i);return (r=r.filter((function(t){return !a.has(t)}))).length&&e.delete(r),o(),i},e.add=function(e){var n=JSON.parse(JSON.stringify(zt(e))).features.map((function(e){if(e.id=e.id||ct(),null===e.geometry)throw new Error("Invalid geometry: null");if(void 0===t.store.get(e.id)||t.store.get(e.id).type!==e.geometry.type){var n=ve[e.geometry.type];if(void 0===n)throw new Error("Invalid geometry type: "+e.geometry.type+".");var o=new n(t,e);t.store.add(o);}else {var r=t.store.get(e.id);r.properties=e.properties,ye(r.getCoordinates(),e.geometry.coordinates)||r.incomingCoords(e.geometry.coordinates);}return e.id}));return t.store.render(),n},e.get=function(e){var n=t.store.get(e);if(n)return n.toGeoJSON()},e.getAll=function(){return {type:P,features:t.store.getAll().map((function(t){return t.toGeoJSON()}))}},e.delete=function(n){return t.store.delete(n,{silent:!0}),e.getMode()!==j.DIRECT_SELECT||t.store.getSelectedIds().length?t.store.render():t.events.changeMode(j.SIMPLE_SELECT,void 0,{silent:!0}),e},e.deleteAll=function(){return t.store.delete(t.store.getAllIds(),{silent:!0}),e.getMode()===j.DIRECT_SELECT?t.events.changeMode(j.SIMPLE_SELECT,void 0,{silent:!0}):t.store.render(),e},e.changeMode=function(n,o){return void 0===o&&(o={}),n===j.SIMPLE_SELECT&&e.getMode()===j.SIMPLE_SELECT?(r=o.featureIds||[],i=t.store.getSelectedIds(),r.length===i.length&&JSON.stringify(r.map((function(t){return t})).sort())===JSON.stringify(i.map((function(t){return t})).sort())||(t.store.setSelected(o.featureIds,{silent:!0}),t.store.render()),e):(n===j.DIRECT_SELECT&&e.getMode()===j.DIRECT_SELECT&&o.featureId===t.store.getSelectedIds()[0]||t.events.changeMode(n,o,{silent:!0}),e);var r,i;},e.getMode=function(){return t.events.getMode()},e.trash=function(){return t.events.trash({silent:!0}),e},e.combineFeatures=function(){return t.events.combineFeatures({silent:!0}),e},e.uncombineFeatures=function(){return t.events.uncombineFeatures({silent:!0}),e},e.setFeatureProperty=function(n,o,r){return t.store.setFeatureProperty(n,o,r),e},e}var be=function(t,e){var n={options:t=function(t){void 0===t&&(t={});var e=Mt(t);return t.controls||(e.controls={}),!1===t.displayControlsDefault?e.controls=Mt(he,t.controls):e.controls=Mt(fe,t.controls),(e=Mt(pe,e)).styles=ge(e.styles,"cold").concat(ge(e.styles,"hot")),e}(t)};e=me(n,e),n.api=e;var o=Lt(n);return e.onAdd=o.onAdd,e.onRemove=o.onRemove,e.types=E,e.options=t,e};function _e(t){be(t,this);}return _e.modes=de,_e}));

    });

    /* src\components\Map.svelte generated by Svelte v3.49.0 */

    const { Object: Object_1, console: console_1$1 } = globals;
    const file$9 = "src\\components\\Map.svelte";

    function create_fragment$a(ctx) {
    	let div1;
    	let div0;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			attr_dev(div0, "class", "h-full rounded-lg");
    			attr_dev(div0, "id", "map");
    			add_location(div0, file$9, 399, 28, 11774);
    			attr_dev(div1, "class", "h-96 md:h-full");
    			add_location(div1, file$9, 399, 0, 11746);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Map', slots, []);
    	let { collectionList } = $$props;
    	let { selectedPolygon } = $$props;
    	let { mapStyle } = $$props;
    	let { isReadyForStyleSwitching } = $$props;
    	let { kingstonDetails } = $$props;
    	let { pointOfInterest } = $$props;
    	let { treesData } = $$props;
    	let layerDictionary;
    	let isDataLoaded = false;
    	let map;
    	const small_popup = new mapboxgl.Popup();

    	const fetchInitialMapData = async () => {
    		try {
    			let tempList = [];
    			let tempDictionary = {};

    			tempList.push({
    				id: 0,
    				menu: 1,
    				icon: "fa-building",
    				type: "Polygon",
    				isShown: true,
    				name: "Buildings",
    				layerName: "add-3d-buildings",
    				sourceName: "building"
    			});

    			tempDictionary["Buildings"] = 0;

    			tempList.push({
    				id: 1,
    				menu: 1,
    				icon: "fa-cloud",
    				type: "Polygon",
    				isShown: true,
    				name: "sky",
    				layerName: "sky",
    				sourceName: "sky"
    			});

    			tempDictionary["Sky"] = 1;

    			// // Neighbourhoods Data
    			let neighbourhoodsLayerName = "Neighbourhoods";

    			let neighbourhoodsSourceName = "neighbourhoodsSource";
    			let neighbourhoodsData = await getDataWithAxios(Data.NEIGHBOURHOODS_URL);

    			tempList.push({
    				id: 2,
    				menu: 1,
    				icon: "fa-border-all",
    				type: "Polygon",
    				isShown: false,
    				name: neighbourhoodsLayerName,
    				layerName: neighbourhoodsLayerName,
    				sourceName: neighbourhoodsSourceName,
    				data: neighbourhoodsData
    			});

    			tempList.push({
    				id: 3,
    				menu: 1,
    				icon: "fa-border-all",
    				type: "Polygon",
    				isShown: false,
    				name: neighbourhoodsLayerName + " Outline",
    				layerName: neighbourhoodsLayerName + " Outline",
    				sourceName: neighbourhoodsSourceName,
    				data: neighbourhoodsData
    			});

    			tempDictionary["Neighbourhoods"] = 2;
    			tempDictionary["Neighbourhoods_Outline"] = 3;
    			$$invalidate(0, collectionList = tempList);
    			layerDictionary = tempDictionary;
    			console.log(layerDictionary);
    		} catch(e) {
    			
    		}
    	};

    	const addDataSources = () => {
    		try {
    			const neighbourhoodsList = collectionList[layerDictionary["Neighbourhoods"]];

    			map.addSource(neighbourhoodsList.sourceName, {
    				type: "geojson",
    				data: neighbourhoodsList.data
    			});

    			$$invalidate(7, isDataLoaded = true);
    			addLayers();
    		} catch(e) {
    			console.error(e);
    		}
    	};

    	const addLayers = () => {
    		addTerrainLayer();
    		addBuildingLayer(collectionList[layerDictionary["Buildings"]]);
    		addNeighbourhoodsLayer(collectionList[layerDictionary["Neighbourhoods"]], collectionList[layerDictionary["Neighbourhoods_Outline"]]);
    	};

    	const addTerrainLayer = () => {
    		map.addSource("mapbox-dem", {
    			type: "raster-dem",
    			url: "mapbox://mapbox.mapbox-terrain-dem-v1",
    			tileSize: 512,
    			maxzoom: 14
    		});

    		// add the DEM source as a terrain layer with exaggerated height
    		map.setTerrain({ source: "mapbox-dem", exaggeration: 1.5 });

    		// add a sky layer that will show when the map is highly pitched
    		map.addLayer({
    			id: "sky",
    			type: "sky",
    			paint: {
    				"sky-type": "atmosphere",
    				"sky-atmosphere-sun": [0.0, 0.0],
    				"sky-atmosphere-sun-intensity": 15
    			}
    		});
    	};

    	const addBuildingLayer = fillList => {
    		map.addLayer({
    			id: fillList.layerName,
    			source: "composite",
    			"source-layer": "building",
    			filter: ["==", "extrude", "true"],
    			type: "fill-extrusion",
    			minzoom: 15,
    			paint: {
    				"fill-extrusion-color": "#dee7e7",
    				"fill-extrusion-height": ["interpolate", ["linear"], ["zoom"], 15, 0, 15.05, ["get", "height"]],
    				"fill-extrusion-base": ["interpolate", ["linear"], ["zoom"], 15, 0, 15.05, ["get", "min_height"]],
    				"fill-extrusion-opacity": 1
    			}
    		});
    	};

    	const addNeighbourhoodsLayer = (fillList, outlineList) => {
    		map.addLayer({
    			id: fillList.layerName,
    			type: "fill",
    			source: fillList.sourceName,
    			layout: {},
    			paint: {
    				"fill-color": ["get", "fill"],
    				"fill-opacity": ["case", ["boolean", ["feature-state", "hover"], false], 0.5, 0.2]
    			}
    		});

    		map.setLayoutProperty(fillList.layerName, "visibility", "none");

    		map.addLayer({
    			id: outlineList.layerName,
    			type: "line",
    			source: outlineList.sourceName,
    			layout: {},
    			paint: { "line-color": "#ffffff", "line-width": 1 }
    		});

    		map.setLayoutProperty(outlineList.layerName, "visibility", "none");
    		let hoveredStateId = null;

    		map.on("mousemove", fillList.layerName, e => {
    			if (e.features.length > 0) {
    				if (hoveredStateId !== null) {
    					map.setFeatureState(
    						{
    							source: fillList.sourceName,
    							id: hoveredStateId
    						},
    						{ hover: false }
    					);
    				}

    				hoveredStateId = e.features[0].id;

    				map.setFeatureState(
    					{
    						source: fillList.sourceName,
    						id: hoveredStateId
    					},
    					{ hover: true }
    				);
    			}
    		});

    		map.on("mouseleave", fillList.layerName, () => {
    			if (hoveredStateId !== null) {
    				map.setFeatureState(
    					{
    						source: fillList.sourceName,
    						id: hoveredStateId
    					},
    					{ hover: false }
    				);
    			}

    			hoveredStateId = null;
    		});
    	};

    	const addTreesLayer = fillList => {
    		map.addLayer(
    			{
    				id: fillList.layerName,
    				type: "circle",
    				source: fillList.sourceName,
    				minzoom: 12,
    				paint: {
    					"circle-radius": [
    						"interpolate",
    						["linear"],
    						["zoom"],
    						7,
    						["interpolate", ["linear"], ["get", "trunk_diameter"], 1, 2, 3, 4],
    						16,
    						["interpolate", ["linear"], ["get", "trunk_diameter"], 3, 6, 9, 12]
    					],
    					"circle-color": "green"
    				}
    			},
    			"waterway-label"
    		);

    		map.setLayoutProperty(fillList.layerName, "visibility", "none");
    		map.moveLayer(fillList.layerName);

    		map.on("click", fillList.layerName, e => {
    			let description = "";
    			const sliced = Object.fromEntries(Object.entries(e.features[0].properties).slice(0, 4));

    			for (const [key, value] of Object.entries(sliced)) {
    				description += `<span class="block font-bold">${key}</span><span class="block">${value}</span>`;
    			}

    			small_popup.setLngLat(e.lngLat).setHTML(description).addTo(map);

    			$$invalidate(2, pointOfInterest = {
    				lat: e.lngLat["lat"],
    				lng: e.lngLat["lng"]
    			});
    		});

    		// Change the cursor to a pointer when the mouse is over the places layer.
    		map.on("mouseenter", fillList.layerName, e => {
    			map.getCanvas().style.cursor = "pointer";
    		});

    		// Change it back to a pointer when it leaves.
    		map.on("mouseleave", fillList.layerName, () => {
    			map.getCanvas().style.cursor = "";
    		});
    	};

    	// const addLineLayer = (fillList, color) => {
    	// 	map.addLayer({
    	// 		id: fillList.layerName,
    	// 		type: "line",
    	// 		source: fillList.sourceName,
    	// 		layout: {
    	// 			"line-join": "round",
    	// 			"line-cap": "round",
    	// 		},
    	// 		paint: {
    	// 			"line-color": color,
    	// 			"line-width": 4,
    	// 		},
    	// 	});
    	// 	map.on("click", fillList.layerName, (e) => {
    	// 		let description = "";
    	// 		const sliced = Object.fromEntries(Object.entries(e.features[0].properties).slice(0, 4));
    	// 		for (const [key, value] of Object.entries(sliced)) {
    	// 			description += `<span class="block font-bold">${key}</span><span class="block">${value}</span>`;
    	// 		}
    	// 		small_popup.setLngLat(e.lngLat).setHTML(description).addTo(map);
    	// 	});
    	// 	// Change the cursor to a pointer when the mouse is over the places layer.
    	// 	map.on("mouseenter", fillList.layerName, (e) => {
    	// 		map.getCanvas().style.cursor = "pointer";
    	// 	});
    	// 	// Change it back to a pointer when it leaves.
    	// 	map.on("mouseleave", fillList.layerName, () => {
    	// 		map.getCanvas().style.cursor = "";
    	// 	});
    	// };
    	const updatePolygon = ({ features }) => {
    		$$invalidate(1, selectedPolygon = features[0]);
    	};

    	const clearPolygon = () => {
    		$$invalidate(1, selectedPolygon = null);
    	};

    	const addDynamicTrees = () => {
    		if (map === null || treesData === null) return;

    		try {
    			// Remove the old layer and source if they exist
    			let tempList = collectionList;

    			let treesLayerName = "Trees";
    			let treesSourceName = "treesSource";
    			tempList = removeObjectWhereValueEqualsString(tempList, "layerName", "Trees");

    			if (map.getLayer(treesLayerName)) {
    				map.removeLayer(treesLayerName);
    				map.removeSource(treesSourceName);
    			}

    			let treesList = {
    				id: 4,
    				icon: "fa-tree",
    				type: "Point",
    				isShown: true,
    				name: treesLayerName,
    				layerName: treesLayerName,
    				sourceName: treesSourceName,
    				data: treesData
    			};

    			tempList.push(treesList);
    			$$invalidate(0, collectionList = tempList);
    			map.addSource(treesList.sourceName, { type: "geojson", data: treesList.data });
    			addTreesLayer(treesList);
    			map.resize();
    		} catch(err) {
    			console.log(err);
    		}
    	};

    	const addFilter = () => {
    		// If map not loaded, abort
    		if (map === null) return;

    		try {
    			// If any of the layers are not loaded, abort
    			for (let i = 0; i < collectionList.length; i++) {
    				const tempLayerName = collectionList[i]["layerName"];
    				const tempLayerIsShown = collectionList[i]["isShown"];

    				if (!map.getLayer(tempLayerName)) {
    					return;
    				}

    				if (tempLayerIsShown === true) {
    					map.setLayoutProperty(tempLayerName, "visibility", "visible");
    				} else {
    					map.setLayoutProperty(tempLayerName, "visibility", "none");
    				}

    				if (tempLayerName.includes("Trees") && tempLayerIsShown === false) {
    					small_popup.remove();
    				}
    			}
    		} catch(e) {
    			
    		}
    	};

    	const switchStyle = () => {
    		if (isReadyForStyleSwitching === false) return;

    		try {
    			map.setStyle("mapbox://styles/mapbox/" + mapStyle);
    			small_popup.remove();
    		} catch(e) {
    			
    		}
    	};

    	onMount(async () => {
    		// Get the initial Data
    		await fetchInitialMapData();

    		mapboxgl.accessToken = "pk.eyJ1IjoiY2FuYWxlYWwiLCJhIjoiY2t6NmgzdGd0MTBhcTJ3bXprNjM1a3NsbiJ9.umUsk2Ky68kLBFUa6PeAxA";

    		map = new mapboxgl.Map({
    				center: kingstonDetails.center,
    				zoom: kingstonDetails.zoom,
    				pitch: kingstonDetails.pitch,
    				bearing: kingstonDetails.bearing,
    				container: "map",
    				antialias: true,
    				style: "mapbox://styles/mapbox/" + mapStyle
    			});

    		const draw = new mapboxGlDraw({
    				displayControlsDefault: false,
    				// Select which mapbox-gl-draw control buttons to add to the map.
    				controls: { polygon: true, trash: true },
    				// Set mapbox-gl-draw to draw by default.
    				// The user does not have to click the polygon control button first.
    				defaultMode: "draw_polygon"
    			});

    		map.addControl(draw, "bottom-left");

    		map.addControl(new MapboxGeocoder({
    				accessToken: mapboxgl.accessToken,
    				mapboxgl
    			}));

    		map.addControl(new mapboxgl.FullscreenControl(), "bottom-right");
    		map.addControl(new mapboxgl.NavigationControl(), "bottom-right");

    		map.on("style.load", function () {
    			addDataSources();
    			addDynamicTrees();
    			addFilter();
    		});

    		map.on("draw.create", updatePolygon);
    		map.on("draw.delete", clearPolygon);
    		map.on("draw.update", updatePolygon);
    	});

    	onDestroy(() => {
    		try {
    			// Remove all the layers and data sources as they are cached and take up a lot of memory
    			for (let i = 0; i < collectionList.length; i++) {
    				map.removeLayer(collectionList[i]["layerName"]);
    				map.removeSource(collectionList[i]["sourceName"]);
    			}

    			map = null;
    		} catch(e) {
    			
    		}
    	});

    	const writable_props = [
    		'collectionList',
    		'selectedPolygon',
    		'mapStyle',
    		'isReadyForStyleSwitching',
    		'kingstonDetails',
    		'pointOfInterest',
    		'treesData'
    	];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<Map> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('collectionList' in $$props) $$invalidate(0, collectionList = $$props.collectionList);
    		if ('selectedPolygon' in $$props) $$invalidate(1, selectedPolygon = $$props.selectedPolygon);
    		if ('mapStyle' in $$props) $$invalidate(3, mapStyle = $$props.mapStyle);
    		if ('isReadyForStyleSwitching' in $$props) $$invalidate(4, isReadyForStyleSwitching = $$props.isReadyForStyleSwitching);
    		if ('kingstonDetails' in $$props) $$invalidate(5, kingstonDetails = $$props.kingstonDetails);
    		if ('pointOfInterest' in $$props) $$invalidate(2, pointOfInterest = $$props.pointOfInterest);
    		if ('treesData' in $$props) $$invalidate(6, treesData = $$props.treesData);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		onDestroy,
    		getDataWithAxios,
    		Data,
    		getListOfObjectWhereKeyContainsString,
    		removeObjectWhereValueEqualsString,
    		MapboxDraw: mapboxGlDraw,
    		collectionList,
    		selectedPolygon,
    		mapStyle,
    		isReadyForStyleSwitching,
    		kingstonDetails,
    		pointOfInterest,
    		treesData,
    		layerDictionary,
    		isDataLoaded,
    		map,
    		small_popup,
    		fetchInitialMapData,
    		addDataSources,
    		addLayers,
    		addTerrainLayer,
    		addBuildingLayer,
    		addNeighbourhoodsLayer,
    		addTreesLayer,
    		updatePolygon,
    		clearPolygon,
    		addDynamicTrees,
    		addFilter,
    		switchStyle
    	});

    	$$self.$inject_state = $$props => {
    		if ('collectionList' in $$props) $$invalidate(0, collectionList = $$props.collectionList);
    		if ('selectedPolygon' in $$props) $$invalidate(1, selectedPolygon = $$props.selectedPolygon);
    		if ('mapStyle' in $$props) $$invalidate(3, mapStyle = $$props.mapStyle);
    		if ('isReadyForStyleSwitching' in $$props) $$invalidate(4, isReadyForStyleSwitching = $$props.isReadyForStyleSwitching);
    		if ('kingstonDetails' in $$props) $$invalidate(5, kingstonDetails = $$props.kingstonDetails);
    		if ('pointOfInterest' in $$props) $$invalidate(2, pointOfInterest = $$props.pointOfInterest);
    		if ('treesData' in $$props) $$invalidate(6, treesData = $$props.treesData);
    		if ('layerDictionary' in $$props) layerDictionary = $$props.layerDictionary;
    		if ('isDataLoaded' in $$props) $$invalidate(7, isDataLoaded = $$props.isDataLoaded);
    		if ('map' in $$props) map = $$props.map;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*treesData*/ 64) {
    			treesData && treesData != null && addDynamicTrees();
    		}

    		if ($$self.$$.dirty & /*collectionList, isDataLoaded*/ 129) {
    			collectionList && isDataLoaded && addFilter();
    		}

    		if ($$self.$$.dirty & /*mapStyle, isDataLoaded*/ 136) {
    			mapStyle && isDataLoaded && switchStyle();
    		}
    	};

    	return [
    		collectionList,
    		selectedPolygon,
    		pointOfInterest,
    		mapStyle,
    		isReadyForStyleSwitching,
    		kingstonDetails,
    		treesData,
    		isDataLoaded
    	];
    }

    class Map$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {
    			collectionList: 0,
    			selectedPolygon: 1,
    			mapStyle: 3,
    			isReadyForStyleSwitching: 4,
    			kingstonDetails: 5,
    			pointOfInterest: 2,
    			treesData: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Map",
    			options,
    			id: create_fragment$a.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*collectionList*/ ctx[0] === undefined && !('collectionList' in props)) {
    			console_1$1.warn("<Map> was created without expected prop 'collectionList'");
    		}

    		if (/*selectedPolygon*/ ctx[1] === undefined && !('selectedPolygon' in props)) {
    			console_1$1.warn("<Map> was created without expected prop 'selectedPolygon'");
    		}

    		if (/*mapStyle*/ ctx[3] === undefined && !('mapStyle' in props)) {
    			console_1$1.warn("<Map> was created without expected prop 'mapStyle'");
    		}

    		if (/*isReadyForStyleSwitching*/ ctx[4] === undefined && !('isReadyForStyleSwitching' in props)) {
    			console_1$1.warn("<Map> was created without expected prop 'isReadyForStyleSwitching'");
    		}

    		if (/*kingstonDetails*/ ctx[5] === undefined && !('kingstonDetails' in props)) {
    			console_1$1.warn("<Map> was created without expected prop 'kingstonDetails'");
    		}

    		if (/*pointOfInterest*/ ctx[2] === undefined && !('pointOfInterest' in props)) {
    			console_1$1.warn("<Map> was created without expected prop 'pointOfInterest'");
    		}

    		if (/*treesData*/ ctx[6] === undefined && !('treesData' in props)) {
    			console_1$1.warn("<Map> was created without expected prop 'treesData'");
    		}
    	}

    	get collectionList() {
    		throw new Error("<Map>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set collectionList(value) {
    		throw new Error("<Map>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedPolygon() {
    		throw new Error("<Map>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedPolygon(value) {
    		throw new Error("<Map>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get mapStyle() {
    		throw new Error("<Map>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mapStyle(value) {
    		throw new Error("<Map>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isReadyForStyleSwitching() {
    		throw new Error("<Map>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isReadyForStyleSwitching(value) {
    		throw new Error("<Map>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get kingstonDetails() {
    		throw new Error("<Map>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set kingstonDetails(value) {
    		throw new Error("<Map>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pointOfInterest() {
    		throw new Error("<Map>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pointOfInterest(value) {
    		throw new Error("<Map>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get treesData() {
    		throw new Error("<Map>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set treesData(value) {
    		throw new Error("<Map>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const getCurrentDateTime = () => {
      const currentDate = new Date();
      const currentDateTime = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${currentDate.getDate()} ${currentDate.getHours()}:${currentDate.getMinutes()}:${currentDate.getSeconds()}`;

      return currentDateTime;
    };

    const getCurrentDateInYYYYMMDD = () => {
      const today = new Date();
      const dd = String(today.getDate()).padStart(2, '0');
      const mm = String(today.getMonth() + 1).padStart(2, '0'); // January is 0!
      const yyyy = today.getFullYear();
      return `${yyyy}-${mm}-${dd}`;
    };

    const getCurrentTime = () => {
      const currentDate = new Date();
      const currentTime = `${currentDate.getHours()}:${currentDate.getMinutes()}`;
      return currentTime;
    };

    /* src\components\AttentionBar.svelte generated by Svelte v3.49.0 */
    const file$8 = "src\\components\\AttentionBar.svelte";

    function create_fragment$9(ctx) {
    	let section1;
    	let div0;
    	let p;
    	let span;
    	let t1;
    	let t2_value = getCurrentDateTime() + "";
    	let t2;
    	let t3;
    	let section0;
    	let div1;
    	let t4;
    	let div2;
    	let button0;
    	let t5;
    	let button0_class_value;
    	let t6;
    	let div3;
    	let button1;
    	let t7;
    	let button1_class_value;
    	let t8;
    	let div4;
    	let button2;
    	let t9;
    	let button2_class_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			section1 = element("section");
    			div0 = element("div");
    			p = element("p");
    			span = element("span");
    			span.textContent = "Last Updated :";
    			t1 = text(" Fetch to API on ");
    			t2 = text(t2_value);
    			t3 = space();
    			section0 = element("section");
    			div1 = element("div");
    			t4 = space();
    			div2 = element("div");
    			button0 = element("button");
    			t5 = text("Date Time View");
    			t6 = space();
    			div3 = element("div");
    			button1 = element("button");
    			t7 = text("Street View");
    			t8 = space();
    			div4 = element("div");
    			button2 = element("button");
    			t9 = text("Chart View");
    			attr_dev(span, "class", "font-bold");
    			add_location(span, file$8, 7, 32, 211);
    			attr_dev(p, "class", "text-white text-sm");
    			add_location(p, file$8, 7, 2, 181);
    			attr_dev(div0, "class", "bg-blue py-1 px-5");
    			add_location(div0, file$8, 6, 1, 146);
    			attr_dev(div1, "class", "col-span-1 md:col-span-3 row-span-1 ");
    			add_location(div1, file$8, 11, 2, 398);
    			attr_dev(button0, "class", button0_class_value = `card-btn ${/*selectedMenu*/ ctx[0] == 1 ? "card-btn-green" : ""} my-1 `);
    			add_location(button0, file$8, 13, 3, 509);
    			attr_dev(div2, "class", "col-span-1 md:col-span-3 row-span-1 ");
    			add_location(div2, file$8, 12, 2, 454);
    			attr_dev(button1, "class", button1_class_value = `card-btn ${/*selectedMenu*/ ctx[0] == 2 ? "card-btn-green" : ""} my-1 `);
    			add_location(button1, file$8, 16, 3, 716);
    			attr_dev(div3, "class", "col-span-1 md:col-span-3 row-span-1");
    			add_location(div3, file$8, 15, 2, 662);
    			attr_dev(button2, "class", button2_class_value = `card-btn ${/*selectedMenu*/ ctx[0] == 3 ? "card-btn-green" : ""} my-1 `);
    			add_location(button2, file$8, 19, 3, 920);
    			attr_dev(div4, "class", "col-span-1 md:col-span-3 row-span-1");
    			add_location(div4, file$8, 18, 2, 866);
    			attr_dev(section0, "class", "grid grid-cols-1 md:grid-cols-12 grid-rows-1 gap-4 px-4 h-fit");
    			add_location(section0, file$8, 10, 1, 313);
    			attr_dev(section1, "class", "sticky top-0 z-10");
    			add_location(section1, file$8, 5, 0, 107);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section1, anchor);
    			append_dev(section1, div0);
    			append_dev(div0, p);
    			append_dev(p, span);
    			append_dev(p, t1);
    			append_dev(p, t2);
    			append_dev(section1, t3);
    			append_dev(section1, section0);
    			append_dev(section0, div1);
    			append_dev(section0, t4);
    			append_dev(section0, div2);
    			append_dev(div2, button0);
    			append_dev(button0, t5);
    			append_dev(section0, t6);
    			append_dev(section0, div3);
    			append_dev(div3, button1);
    			append_dev(button1, t7);
    			append_dev(section0, t8);
    			append_dev(section0, div4);
    			append_dev(div4, button2);
    			append_dev(button2, t9);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[1], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[2], false, false, false),
    					listen_dev(button2, "click", /*click_handler_2*/ ctx[3], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*selectedMenu*/ 1 && button0_class_value !== (button0_class_value = `card-btn ${/*selectedMenu*/ ctx[0] == 1 ? "card-btn-green" : ""} my-1 `)) {
    				attr_dev(button0, "class", button0_class_value);
    			}

    			if (dirty & /*selectedMenu*/ 1 && button1_class_value !== (button1_class_value = `card-btn ${/*selectedMenu*/ ctx[0] == 2 ? "card-btn-green" : ""} my-1 `)) {
    				attr_dev(button1, "class", button1_class_value);
    			}

    			if (dirty & /*selectedMenu*/ 1 && button2_class_value !== (button2_class_value = `card-btn ${/*selectedMenu*/ ctx[0] == 3 ? "card-btn-green" : ""} my-1 `)) {
    				attr_dev(button2, "class", button2_class_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AttentionBar', slots, []);
    	let { selectedMenu } = $$props;
    	const writable_props = ['selectedMenu'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AttentionBar> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => $$invalidate(0, selectedMenu = 1);
    	const click_handler_1 = () => $$invalidate(0, selectedMenu = 2);
    	const click_handler_2 = () => $$invalidate(0, selectedMenu = 3);

    	$$self.$$set = $$props => {
    		if ('selectedMenu' in $$props) $$invalidate(0, selectedMenu = $$props.selectedMenu);
    	};

    	$$self.$capture_state = () => ({ getCurrentDateTime, selectedMenu });

    	$$self.$inject_state = $$props => {
    		if ('selectedMenu' in $$props) $$invalidate(0, selectedMenu = $$props.selectedMenu);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [selectedMenu, click_handler, click_handler_1, click_handler_2];
    }

    class AttentionBar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, { selectedMenu: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AttentionBar",
    			options,
    			id: create_fragment$9.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*selectedMenu*/ ctx[0] === undefined && !('selectedMenu' in props)) {
    			console.warn("<AttentionBar> was created without expected prop 'selectedMenu'");
    		}
    	}

    	get selectedMenu() {
    		throw new Error("<AttentionBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedMenu(value) {
    		throw new Error("<AttentionBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * Callback for geomEach
     *
     * @callback geomEachCallback
     * @param {Geometry} currentGeometry The current Geometry being processed.
     * @param {number} featureIndex The current index of the Feature being processed.
     * @param {Object} featureProperties The current Feature Properties being processed.
     * @param {Array<number>} featureBBox The current Feature BBox being processed.
     * @param {number|string} featureId The current Feature Id being processed.
     */

    /**
     * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()
     *
     * @name geomEach
     * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
     * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
     * @returns {void}
     * @example
     * var features = turf.featureCollection([
     *     turf.point([26, 37], {foo: 'bar'}),
     *     turf.point([36, 53], {hello: 'world'})
     * ]);
     *
     * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
     *   //=currentGeometry
     *   //=featureIndex
     *   //=featureProperties
     *   //=featureBBox
     *   //=featureId
     * });
     */
    function geomEach(geojson, callback) {
      var i,
        j,
        g,
        geometry,
        stopG,
        geometryMaybeCollection,
        isGeometryCollection,
        featureProperties,
        featureBBox,
        featureId,
        featureIndex = 0,
        isFeatureCollection = geojson.type === "FeatureCollection",
        isFeature = geojson.type === "Feature",
        stop = isFeatureCollection ? geojson.features.length : 1;

      // This logic may look a little weird. The reason why it is that way
      // is because it's trying to be fast. GeoJSON supports multiple kinds
      // of objects at its root: FeatureCollection, Features, Geometries.
      // This function has the responsibility of handling all of them, and that
      // means that some of the `for` loops you see below actually just don't apply
      // to certain inputs. For instance, if you give this just a
      // Point geometry, then both loops are short-circuited and all we do
      // is gradually rename the input until it's called 'geometry'.
      //
      // This also aims to allocate as few resources as possible: just a
      // few numbers and booleans, rather than any temporary arrays as would
      // be required with the normalization approach.
      for (i = 0; i < stop; i++) {
        geometryMaybeCollection = isFeatureCollection
          ? geojson.features[i].geometry
          : isFeature
          ? geojson.geometry
          : geojson;
        featureProperties = isFeatureCollection
          ? geojson.features[i].properties
          : isFeature
          ? geojson.properties
          : {};
        featureBBox = isFeatureCollection
          ? geojson.features[i].bbox
          : isFeature
          ? geojson.bbox
          : undefined;
        featureId = isFeatureCollection
          ? geojson.features[i].id
          : isFeature
          ? geojson.id
          : undefined;
        isGeometryCollection = geometryMaybeCollection
          ? geometryMaybeCollection.type === "GeometryCollection"
          : false;
        stopG = isGeometryCollection
          ? geometryMaybeCollection.geometries.length
          : 1;

        for (g = 0; g < stopG; g++) {
          geometry = isGeometryCollection
            ? geometryMaybeCollection.geometries[g]
            : geometryMaybeCollection;

          // Handle null Geometry
          if (geometry === null) {
            if (
              callback(
                null,
                featureIndex,
                featureProperties,
                featureBBox,
                featureId
              ) === false
            )
              return false;
            continue;
          }
          switch (geometry.type) {
            case "Point":
            case "LineString":
            case "MultiPoint":
            case "Polygon":
            case "MultiLineString":
            case "MultiPolygon": {
              if (
                callback(
                  geometry,
                  featureIndex,
                  featureProperties,
                  featureBBox,
                  featureId
                ) === false
              )
                return false;
              break;
            }
            case "GeometryCollection": {
              for (j = 0; j < geometry.geometries.length; j++) {
                if (
                  callback(
                    geometry.geometries[j],
                    featureIndex,
                    featureProperties,
                    featureBBox,
                    featureId
                  ) === false
                )
                  return false;
              }
              break;
            }
            default:
              throw new Error("Unknown Geometry Type");
          }
        }
        // Only increase `featureIndex` per each feature
        featureIndex++;
      }
    }

    /**
     * Callback for geomReduce
     *
     * The first time the callback function is called, the values provided as arguments depend
     * on whether the reduce method has an initialValue argument.
     *
     * If an initialValue is provided to the reduce method:
     *  - The previousValue argument is initialValue.
     *  - The currentValue argument is the value of the first element present in the array.
     *
     * If an initialValue is not provided:
     *  - The previousValue argument is the value of the first element present in the array.
     *  - The currentValue argument is the value of the second element present in the array.
     *
     * @callback geomReduceCallback
     * @param {*} previousValue The accumulated value previously returned in the last invocation
     * of the callback, or initialValue, if supplied.
     * @param {Geometry} currentGeometry The current Geometry being processed.
     * @param {number} featureIndex The current index of the Feature being processed.
     * @param {Object} featureProperties The current Feature Properties being processed.
     * @param {Array<number>} featureBBox The current Feature BBox being processed.
     * @param {number|string} featureId The current Feature Id being processed.
     */

    /**
     * Reduce geometry in any GeoJSON object, similar to Array.reduce().
     *
     * @name geomReduce
     * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
     * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
     * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
     * @returns {*} The value that results from the reduction.
     * @example
     * var features = turf.featureCollection([
     *     turf.point([26, 37], {foo: 'bar'}),
     *     turf.point([36, 53], {hello: 'world'})
     * ]);
     *
     * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
     *   //=previousValue
     *   //=currentGeometry
     *   //=featureIndex
     *   //=featureProperties
     *   //=featureBBox
     *   //=featureId
     *   return currentGeometry
     * });
     */
    function geomReduce(geojson, callback, initialValue) {
      var previousValue = initialValue;
      geomEach(
        geojson,
        function (
          currentGeometry,
          featureIndex,
          featureProperties,
          featureBBox,
          featureId
        ) {
          if (featureIndex === 0 && initialValue === undefined)
            previousValue = currentGeometry;
          else
            previousValue = callback(
              previousValue,
              currentGeometry,
              featureIndex,
              featureProperties,
              featureBBox,
              featureId
            );
        }
      );
      return previousValue;
    }

    // Note: change RADIUS => earthRadius
    var RADIUS = 6378137;
    /**
     * Takes one or more features and returns their area in square meters.
     *
     * @name area
     * @param {GeoJSON} geojson input GeoJSON feature(s)
     * @returns {number} area in square meters
     * @example
     * var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);
     *
     * var area = turf.area(polygon);
     *
     * //addToMap
     * var addToMap = [polygon]
     * polygon.properties.area = area
     */
    function area$1(geojson) {
        return geomReduce(geojson, function (value, geom) {
            return value + calculateArea(geom);
        }, 0);
    }
    /**
     * Calculate Area
     *
     * @private
     * @param {Geometry} geom GeoJSON Geometries
     * @returns {number} area
     */
    function calculateArea(geom) {
        var total = 0;
        var i;
        switch (geom.type) {
            case "Polygon":
                return polygonArea(geom.coordinates);
            case "MultiPolygon":
                for (i = 0; i < geom.coordinates.length; i++) {
                    total += polygonArea(geom.coordinates[i]);
                }
                return total;
            case "Point":
            case "MultiPoint":
            case "LineString":
            case "MultiLineString":
                return 0;
        }
        return 0;
    }
    function polygonArea(coords) {
        var total = 0;
        if (coords && coords.length > 0) {
            total += Math.abs(ringArea(coords[0]));
            for (var i = 1; i < coords.length; i++) {
                total -= Math.abs(ringArea(coords[i]));
            }
        }
        return total;
    }
    /**
     * @private
     * Calculate the approximate area of the polygon were it projected onto the earth.
     * Note that this area will be positive if ring is oriented clockwise, otherwise it will be negative.
     *
     * Reference:
     * Robert. G. Chamberlain and William H. Duquette, "Some Algorithms for Polygons on a Sphere",
     * JPL Publication 07-03, Jet Propulsion
     * Laboratory, Pasadena, CA, June 2007 https://trs.jpl.nasa.gov/handle/2014/40409
     *
     * @param {Array<Array<number>>} coords Ring Coordinates
     * @returns {number} The approximate signed geodesic area of the polygon in square meters.
     */
    function ringArea(coords) {
        var p1;
        var p2;
        var p3;
        var lowerIndex;
        var middleIndex;
        var upperIndex;
        var i;
        var total = 0;
        var coordsLength = coords.length;
        if (coordsLength > 2) {
            for (i = 0; i < coordsLength; i++) {
                if (i === coordsLength - 2) {
                    // i = N-2
                    lowerIndex = coordsLength - 2;
                    middleIndex = coordsLength - 1;
                    upperIndex = 0;
                }
                else if (i === coordsLength - 1) {
                    // i = N-1
                    lowerIndex = coordsLength - 1;
                    middleIndex = 0;
                    upperIndex = 1;
                }
                else {
                    // i = 0 to N-3
                    lowerIndex = i;
                    middleIndex = i + 1;
                    upperIndex = i + 2;
                }
                p1 = coords[lowerIndex];
                p2 = coords[middleIndex];
                p3 = coords[upperIndex];
                total += (rad(p3[0]) - rad(p1[0])) * Math.sin(rad(p2[1]));
            }
            total = (total * RADIUS * RADIUS) / 2;
        }
        return total;
    }
    function rad(num) {
        return (num * Math.PI) / 180;
    }

    /* src\components\Profile.svelte generated by Svelte v3.49.0 */
    const file$7 = "src\\components\\Profile.svelte";

    // (16:1) {:else}
    function create_else_block$3(ctx) {
    	let div;
    	let t0_value = Math.round(/*polygonArea*/ ctx[2] * 100) / 100 + "";
    	let t0;
    	let t1;
    	let sup;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text(t0_value);
    			t1 = text(" m");
    			sup = element("sup");
    			sup.textContent = "2";
    			add_location(sup, file$7, 17, 42, 552);
    			attr_dev(div, "class", "alert alert-green my-1");
    			attr_dev(div, "role", "alert");
    			add_location(div, file$7, 16, 2, 459);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, t1);
    			append_dev(div, sup);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*polygonArea*/ 4 && t0_value !== (t0_value = Math.round(/*polygonArea*/ ctx[2] * 100) / 100 + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(16:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (14:1) {#if selectedPolygon === null}
    function create_if_block$4(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Draw a polygon before searching.";
    			attr_dev(div, "class", "alert alert-red my-1");
    			attr_dev(div, "role", "alert");
    			add_location(div, file$7, 14, 2, 360);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(14:1) {#if selectedPolygon === null}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let section;
    	let p0;
    	let t1;
    	let t2;
    	let p1;
    	let t4;
    	let p2;
    	let t5_value = /*kingstonDetails*/ ctx[0].displayName + "";
    	let t5;
    	let t6;
    	let p3;
    	let t8;
    	let p4;

    	function select_block_type(ctx, dirty) {
    		if (/*selectedPolygon*/ ctx[1] === null) return create_if_block$4;
    		return create_else_block$3;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			p0 = element("p");
    			p0.textContent = "Selected Polygon:";
    			t1 = space();
    			if_block.c();
    			t2 = space();
    			p1 = element("p");
    			p1.textContent = "City:";
    			t4 = space();
    			p2 = element("p");
    			t5 = text(t5_value);
    			t6 = space();
    			p3 = element("p");
    			p3.textContent = "Map Data:";
    			t8 = space();
    			p4 = element("p");
    			p4.textContent = `Data taken from API on ${getCurrentDateTime()}`;
    			attr_dev(p0, "class", "font-bold my-1");
    			add_location(p0, file$7, 11, 1, 274);
    			attr_dev(p1, "class", "font-bold my-1");
    			add_location(p1, file$7, 21, 1, 587);
    			add_location(p2, file$7, 22, 1, 625);
    			attr_dev(p3, "class", "font-bold my-1");
    			add_location(p3, file$7, 24, 1, 666);
    			add_location(p4, file$7, 25, 1, 708);
    			attr_dev(section, "class", "card h-fit");
    			add_location(section, file$7, 10, 0, 243);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, p0);
    			append_dev(section, t1);
    			if_block.m(section, null);
    			append_dev(section, t2);
    			append_dev(section, p1);
    			append_dev(section, t4);
    			append_dev(section, p2);
    			append_dev(p2, t5);
    			append_dev(section, t6);
    			append_dev(section, p3);
    			append_dev(section, t8);
    			append_dev(section, p4);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(section, t2);
    				}
    			}

    			if (dirty & /*kingstonDetails*/ 1 && t5_value !== (t5_value = /*kingstonDetails*/ ctx[0].displayName + "")) set_data_dev(t5, t5_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let polygonArea;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Profile', slots, []);
    	let { kingstonDetails } = $$props;
    	let { selectedPolygon } = $$props;
    	const writable_props = ['kingstonDetails', 'selectedPolygon'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Profile> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('kingstonDetails' in $$props) $$invalidate(0, kingstonDetails = $$props.kingstonDetails);
    		if ('selectedPolygon' in $$props) $$invalidate(1, selectedPolygon = $$props.selectedPolygon);
    	};

    	$$self.$capture_state = () => ({
    		getCurrentDateTime,
    		area: area$1,
    		kingstonDetails,
    		selectedPolygon,
    		polygonArea
    	});

    	$$self.$inject_state = $$props => {
    		if ('kingstonDetails' in $$props) $$invalidate(0, kingstonDetails = $$props.kingstonDetails);
    		if ('selectedPolygon' in $$props) $$invalidate(1, selectedPolygon = $$props.selectedPolygon);
    		if ('polygonArea' in $$props) $$invalidate(2, polygonArea = $$props.polygonArea);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*selectedPolygon*/ 2) {
    			$$invalidate(2, polygonArea = selectedPolygon ? area$1(selectedPolygon) : null);
    		}
    	};

    	return [kingstonDetails, selectedPolygon, polygonArea];
    }

    class Profile extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, { kingstonDetails: 0, selectedPolygon: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Profile",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*kingstonDetails*/ ctx[0] === undefined && !('kingstonDetails' in props)) {
    			console.warn("<Profile> was created without expected prop 'kingstonDetails'");
    		}

    		if (/*selectedPolygon*/ ctx[1] === undefined && !('selectedPolygon' in props)) {
    			console.warn("<Profile> was created without expected prop 'selectedPolygon'");
    		}
    	}

    	get kingstonDetails() {
    		throw new Error("<Profile>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set kingstonDetails(value) {
    		throw new Error("<Profile>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedPolygon() {
    		throw new Error("<Profile>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedPolygon(value) {
    		throw new Error("<Profile>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\DateTime.svelte generated by Svelte v3.49.0 */

    const file$6 = "src\\components\\DateTime.svelte";

    // (60:1) {:else}
    function create_else_block$2(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let button;
    	let i;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text(/*selectedDate*/ ctx[0]);
    			t1 = text(" from ");
    			t2 = text(/*selectedFrom*/ ctx[1]);
    			t3 = text(" to ");
    			t4 = text(/*selectedTo*/ ctx[2]);
    			t5 = space();
    			button = element("button");
    			i = element("i");
    			attr_dev(i, "class", "fa-solid fa-xmark ");
    			add_location(i, file$6, 61, 113, 2508);
    			attr_dev(button, "class", "float-right fa-lg");
    			add_location(button, file$6, 61, 54, 2449);
    			attr_dev(div, "class", "alert alert-green my-1");
    			attr_dev(div, "role", "alert");
    			add_location(div, file$6, 60, 2, 2344);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, t1);
    			append_dev(div, t2);
    			append_dev(div, t3);
    			append_dev(div, t4);
    			append_dev(div, t5);
    			append_dev(div, button);
    			append_dev(button, i);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*clearDateTime*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*selectedDate*/ 1) set_data_dev(t0, /*selectedDate*/ ctx[0]);
    			if (dirty & /*selectedFrom*/ 2) set_data_dev(t2, /*selectedFrom*/ ctx[1]);
    			if (dirty & /*selectedTo*/ 4) set_data_dev(t4, /*selectedTo*/ ctx[2]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(60:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (58:1) {#if selectedDate === "" || selectedFrom === "" || selectedTo === ""}
    function create_if_block$3(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Select a Date and Time before Searching.";
    			attr_dev(div, "class", "alert alert-red my-1");
    			attr_dev(div, "role", "alert");
    			add_location(div, file$6, 58, 2, 2237);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(58:1) {#if selectedDate === \\\"\\\" || selectedFrom === \\\"\\\" || selectedTo === \\\"\\\"}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let section;
    	let p;
    	let t1;
    	let div1;
    	let div0;
    	let input0;
    	let t2;
    	let label0;
    	let t4;
    	let div4;
    	let div2;
    	let input1;
    	let t5;
    	let label1;
    	let t7;
    	let div3;
    	let input2;
    	let t8;
    	let label2;
    	let t10;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*selectedDate*/ ctx[0] === "" || /*selectedFrom*/ ctx[1] === "" || /*selectedTo*/ ctx[2] === "") return create_if_block$3;
    		return create_else_block$2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			p = element("p");
    			p.textContent = "Date Time Selection:";
    			t1 = space();
    			div1 = element("div");
    			div0 = element("div");
    			input0 = element("input");
    			t2 = space();
    			label0 = element("label");
    			label0.textContent = "Select a date";
    			t4 = space();
    			div4 = element("div");
    			div2 = element("div");
    			input1 = element("input");
    			t5 = space();
    			label1 = element("label");
    			label1.textContent = "From";
    			t7 = space();
    			div3 = element("div");
    			input2 = element("input");
    			t8 = space();
    			label2 = element("label");
    			label2.textContent = "To";
    			t10 = space();
    			if_block.c();
    			attr_dev(p, "class", "font-bold my-1");
    			add_location(p, file$6, 13, 1, 264);
    			attr_dev(input0, "type", "date");
    			attr_dev(input0, "class", "form-control block w-full text-sm text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none");
    			attr_dev(input0, "placeholder", "Select a date");
    			attr_dev(input0, "data-mdb-toggle", "datepicker");
    			attr_dev(input0, "min", "2010-01-01");
    			attr_dev(input0, "max", "2022-12-31");
    			add_location(input0, file$6, 17, 3, 455);
    			attr_dev(label0, "for", "floatingInput");
    			attr_dev(label0, "class", "text-gray-700 text-sm");
    			add_location(label0, file$6, 26, 3, 865);
    			attr_dev(div0, "class", "datepicker form-floating my-1 w-full");
    			attr_dev(div0, "data-mdb-toggle-button", "false");
    			add_location(div0, file$6, 16, 2, 369);
    			attr_dev(div1, "class", "flex items-center justify-center");
    			add_location(div1, file$6, 15, 1, 319);
    			attr_dev(input1, "type", "time");
    			attr_dev(input1, "class", "form-control block w-full text-sm text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none");
    			attr_dev(input1, "placeholder", "From");
    			attr_dev(input1, "data-mdb-toggle", "timepicker");
    			attr_dev(input1, "min", "2010-01-01");
    			attr_dev(input1, "max", "2022-12-31");
    			add_location(input1, file$6, 32, 3, 1104);
    			attr_dev(label1, "for", "floatingInput");
    			attr_dev(label1, "class", "text-gray-700 text-sm");
    			add_location(label1, file$6, 41, 3, 1505);
    			attr_dev(div2, "class", "datepicker form-floating my-1 w-full");
    			attr_dev(div2, "data-mdb-toggle-button", "false");
    			add_location(div2, file$6, 31, 2, 1018);
    			attr_dev(input2, "type", "time");
    			attr_dev(input2, "class", "form-control block w-full text-sm text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none");
    			attr_dev(input2, "placeholder", "To");
    			attr_dev(input2, "data-mdb-toggle", "timepicker");
    			attr_dev(input2, "min", "2010-01-01");
    			attr_dev(input2, "max", "2022-12-31");
    			add_location(input2, file$6, 44, 3, 1675);
    			attr_dev(label2, "for", "floatingInput");
    			attr_dev(label2, "class", "text-gray-700 text-sm");
    			add_location(label2, file$6, 53, 3, 2072);
    			attr_dev(div3, "class", "datepicker form-floating my-1 w-full");
    			attr_dev(div3, "data-mdb-toggle-button", "false");
    			add_location(div3, file$6, 43, 2, 1589);
    			attr_dev(div4, "class", "flex items-center justify-center");
    			add_location(div4, file$6, 30, 1, 968);
    			attr_dev(section, "class", "h-fit rounded-lg shadow-xl p-4 text-sm");
    			add_location(section, file$6, 12, 0, 205);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, p);
    			append_dev(section, t1);
    			append_dev(section, div1);
    			append_dev(div1, div0);
    			append_dev(div0, input0);
    			set_input_value(input0, /*selectedDate*/ ctx[0]);
    			append_dev(div0, t2);
    			append_dev(div0, label0);
    			append_dev(section, t4);
    			append_dev(section, div4);
    			append_dev(div4, div2);
    			append_dev(div2, input1);
    			set_input_value(input1, /*selectedFrom*/ ctx[1]);
    			append_dev(div2, t5);
    			append_dev(div2, label1);
    			append_dev(div4, t7);
    			append_dev(div4, div3);
    			append_dev(div3, input2);
    			set_input_value(input2, /*selectedTo*/ ctx[2]);
    			append_dev(div3, t8);
    			append_dev(div3, label2);
    			append_dev(section, t10);
    			if_block.m(section, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[4]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[5]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[6])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*selectedDate*/ 1) {
    				set_input_value(input0, /*selectedDate*/ ctx[0]);
    			}

    			if (dirty & /*selectedFrom*/ 2) {
    				set_input_value(input1, /*selectedFrom*/ ctx[1]);
    			}

    			if (dirty & /*selectedTo*/ 4) {
    				set_input_value(input2, /*selectedTo*/ ctx[2]);
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(section, null);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('DateTime', slots, []);
    	let { selectedDate } = $$props;
    	let { selectedFrom } = $$props;
    	let { selectedTo } = $$props;

    	const clearDateTime = () => {
    		$$invalidate(0, selectedDate = "");
    		$$invalidate(1, selectedFrom = "");
    		$$invalidate(2, selectedTo = "");
    	};

    	const writable_props = ['selectedDate', 'selectedFrom', 'selectedTo'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<DateTime> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		selectedDate = this.value;
    		$$invalidate(0, selectedDate);
    	}

    	function input1_input_handler() {
    		selectedFrom = this.value;
    		$$invalidate(1, selectedFrom);
    	}

    	function input2_input_handler() {
    		selectedTo = this.value;
    		$$invalidate(2, selectedTo);
    	}

    	$$self.$$set = $$props => {
    		if ('selectedDate' in $$props) $$invalidate(0, selectedDate = $$props.selectedDate);
    		if ('selectedFrom' in $$props) $$invalidate(1, selectedFrom = $$props.selectedFrom);
    		if ('selectedTo' in $$props) $$invalidate(2, selectedTo = $$props.selectedTo);
    	};

    	$$self.$capture_state = () => ({
    		selectedDate,
    		selectedFrom,
    		selectedTo,
    		clearDateTime
    	});

    	$$self.$inject_state = $$props => {
    		if ('selectedDate' in $$props) $$invalidate(0, selectedDate = $$props.selectedDate);
    		if ('selectedFrom' in $$props) $$invalidate(1, selectedFrom = $$props.selectedFrom);
    		if ('selectedTo' in $$props) $$invalidate(2, selectedTo = $$props.selectedTo);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		selectedDate,
    		selectedFrom,
    		selectedTo,
    		clearDateTime,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler
    	];
    }

    class DateTime extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
    			selectedDate: 0,
    			selectedFrom: 1,
    			selectedTo: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DateTime",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*selectedDate*/ ctx[0] === undefined && !('selectedDate' in props)) {
    			console.warn("<DateTime> was created without expected prop 'selectedDate'");
    		}

    		if (/*selectedFrom*/ ctx[1] === undefined && !('selectedFrom' in props)) {
    			console.warn("<DateTime> was created without expected prop 'selectedFrom'");
    		}

    		if (/*selectedTo*/ ctx[2] === undefined && !('selectedTo' in props)) {
    			console.warn("<DateTime> was created without expected prop 'selectedTo'");
    		}
    	}

    	get selectedDate() {
    		throw new Error("<DateTime>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedDate(value) {
    		throw new Error("<DateTime>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedFrom() {
    		throw new Error("<DateTime>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedFrom(value) {
    		throw new Error("<DateTime>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedTo() {
    		throw new Error("<DateTime>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedTo(value) {
    		throw new Error("<DateTime>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\Layers.svelte generated by Svelte v3.49.0 */

    const file$5 = "src\\components\\Layers.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    // (66:1) {:else}
    function create_else_block$1(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Loading Data.";
    			attr_dev(div, "class", "bg-green-100 rounded-lg py-4 px-6 text-green-700 my-1");
    			attr_dev(div, "role", "alert");
    			add_location(div, file$5, 66, 2, 2036);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(66:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (56:1) {#if collectionList.length >= 1}
    function create_if_block$2(ctx) {
    	let button;
    	let t0;
    	let button_class_value;
    	let t1;
    	let div;
    	let mounted;
    	let dispose;
    	let each_value = /*collectionList*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			t0 = text(/*toggleName*/ ctx[2]);
    			t1 = space();
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(button, "class", button_class_value = `card-btn   ${/*toggleBool*/ ctx[1]
			? "card-btn-green"
			: "card-btn-red"}  my-1 `);

    			add_location(button, file$5, 56, 2, 1583);
    			attr_dev(div, "class", "overflow-auto ");
    			add_location(div, file$5, 57, 2, 1725);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*toggleName*/ 4) set_data_dev(t0, /*toggleName*/ ctx[2]);

    			if (dirty & /*toggleBool*/ 2 && button_class_value !== (button_class_value = `card-btn   ${/*toggleBool*/ ctx[1]
			? "card-btn-green"
			: "card-btn-red"}  my-1 `)) {
    				attr_dev(button, "class", button_class_value);
    			}

    			if (dirty & /*collectionList, toggleIsShown*/ 17) {
    				each_value = /*collectionList*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(56:1) {#if collectionList.length >= 1}",
    		ctx
    	});

    	return block;
    }

    // (59:3) {#each collectionList as layer}
    function create_each_block$1(ctx) {
    	let button;
    	let i;
    	let i_class_value;
    	let t0;
    	let t1_value = /*layer*/ ctx[8].name + "";
    	let t1;
    	let t2;
    	let button_key_value;
    	let button_class_value;
    	let mounted;
    	let dispose;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[6](/*layer*/ ctx[8]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			i = element("i");
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = space();
    			attr_dev(i, "class", i_class_value = "fa-solid " + /*layer*/ ctx[8].icon + "");
    			add_location(i, file$5, 60, 5, 1930);
    			attr_dev(button, "key", button_key_value = /*layer*/ ctx[8].name);
    			attr_dev(button, "class", button_class_value = `card-btn ${/*layer*/ ctx[8].isShown ? "card-btn-blue" : ""} my-1 `);
    			add_location(button, file$5, 59, 4, 1795);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, i);
    			append_dev(button, t0);
    			append_dev(button, t1);
    			append_dev(button, t2);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*collectionList*/ 1 && i_class_value !== (i_class_value = "fa-solid " + /*layer*/ ctx[8].icon + "")) {
    				attr_dev(i, "class", i_class_value);
    			}

    			if (dirty & /*collectionList*/ 1 && t1_value !== (t1_value = /*layer*/ ctx[8].name + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*collectionList*/ 1 && button_key_value !== (button_key_value = /*layer*/ ctx[8].name)) {
    				attr_dev(button, "key", button_key_value);
    			}

    			if (dirty & /*collectionList*/ 1 && button_class_value !== (button_class_value = `card-btn ${/*layer*/ ctx[8].isShown ? "card-btn-blue" : ""} my-1 `)) {
    				attr_dev(button, "class", button_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(59:3) {#each collectionList as layer}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let section;
    	let p;
    	let t1;

    	function select_block_type(ctx, dirty) {
    		if (/*collectionList*/ ctx[0].length >= 1) return create_if_block$2;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			p = element("p");
    			p.textContent = "Layers:";
    			t1 = space();
    			if_block.c();
    			attr_dev(p, "class", "font-bold my-1");
    			add_location(p, file$5, 53, 1, 1505);
    			attr_dev(section, "class", "card h-fit");
    			add_location(section, file$5, 52, 0, 1474);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, p);
    			append_dev(section, t1);
    			if_block.m(section, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(section, null);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Layers', slots, []);
    	let { collectionList = [] } = $$props;
    	let toggleBool = false;
    	let toggleName = "Disable All";

    	function toggleAll() {
    		try {
    			//Change all the isShow values to true or false
    			let tempCollection = collectionList;

    			tempCollection = tempCollection.map(item => {
    				item["isShown"] = toggleBool;
    				return item;
    			});

    			$$invalidate(1, toggleBool = !toggleBool);
    			$$invalidate(2, toggleName = toggleBool ? "Show All" : "Disable All");
    			$$invalidate(0, collectionList = tempCollection);
    		} catch(e) {
    			
    		}
    	}

    	function toggleIsShown(item) {
    		try {
    			// Get the object from the list and toggle the is shown
    			let tempCollection = collectionList;

    			let objIndex = tempCollection.findIndex(obj => obj.id == item["id"]);
    			tempCollection[objIndex]["isShown"] = !tempCollection[objIndex]["isShown"];
    			$$invalidate(0, collectionList = tempCollection);
    			allToggleButton();
    		} catch(e) {
    			
    		}
    	}

    	const allToggleButton = () => {
    		// Get a list of all the is shown values and check if they are all the same
    		let tempCollection = collectionList;

    		const isShownList = tempCollection.map(item => item["isShown"]);
    		const allSame = isShownList.every((element, index, isShownList) => element === isShownList[0]);

    		// If they are all the same, change the toggle
    		if (allSame === true) {
    			if (isShownList[0] === true) {
    				$$invalidate(1, toggleBool = false);
    				$$invalidate(2, toggleName = "Disable All");
    			} else {
    				$$invalidate(1, toggleBool = true);
    				$$invalidate(2, toggleName = "Show All");
    			}
    		}
    	};

    	const writable_props = ['collectionList'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Layers> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => toggleAll();
    	const click_handler_1 = layer => toggleIsShown(layer);

    	$$self.$$set = $$props => {
    		if ('collectionList' in $$props) $$invalidate(0, collectionList = $$props.collectionList);
    	};

    	$$self.$capture_state = () => ({
    		collectionList,
    		toggleBool,
    		toggleName,
    		toggleAll,
    		toggleIsShown,
    		allToggleButton
    	});

    	$$self.$inject_state = $$props => {
    		if ('collectionList' in $$props) $$invalidate(0, collectionList = $$props.collectionList);
    		if ('toggleBool' in $$props) $$invalidate(1, toggleBool = $$props.toggleBool);
    		if ('toggleName' in $$props) $$invalidate(2, toggleName = $$props.toggleName);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		collectionList,
    		toggleBool,
    		toggleName,
    		toggleAll,
    		toggleIsShown,
    		click_handler,
    		click_handler_1
    	];
    }

    class Layers extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, { collectionList: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Layers",
    			options,
    			id: create_fragment$6.name
    		});
    	}

    	get collectionList() {
    		throw new Error("<Layers>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set collectionList(value) {
    		throw new Error("<Layers>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\StyleSelector.svelte generated by Svelte v3.49.0 */

    const file$4 = "src\\components\\StyleSelector.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	return child_ctx;
    }

    // (23:1) {#each mapStyleList as item}
    function create_each_block(ctx) {
    	let div;
    	let input;
    	let input_checked_value;
    	let t0;
    	let label;
    	let t1_value = /*item*/ ctx[5]["name"] + "";
    	let t1;
    	let t2;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[4](/*item*/ ctx[5]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			input = element("input");
    			t0 = space();
    			label = element("label");
    			t1 = text(t1_value);
    			t2 = space();
    			attr_dev(input, "id", /*item*/ ctx[5].name);
    			attr_dev(input, "type", "radio");
    			input.value = /*item*/ ctx[5].value;
    			input.checked = input_checked_value = /*mapStyle*/ ctx[0] === /*item*/ ctx[5].value;
    			attr_dev(input, "data-bs-toggle", "collapse");
    			attr_dev(input, "data-bs-target", "#collapseMenu");
    			add_location(input, file$4, 24, 3, 637);
    			attr_dev(label, "class", "ml-2");
    			attr_dev(label, "for", /*item*/ ctx[5]["name"]);
    			add_location(label, file$4, 25, 3, 833);
    			attr_dev(div, "key", /*item*/ ctx[5].name);
    			add_location(div, file$4, 23, 2, 611);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, input);
    			append_dev(div, t0);
    			append_dev(div, label);
    			append_dev(label, t1);
    			append_dev(div, t2);

    			if (!mounted) {
    				dispose = listen_dev(input, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*mapStyle*/ 1 && input_checked_value !== (input_checked_value = /*mapStyle*/ ctx[0] === /*item*/ ctx[5].value)) {
    				prop_dev(input, "checked", input_checked_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(23:1) {#each mapStyleList as item}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let section;
    	let p;
    	let t1;
    	let each_value = /*mapStyleList*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			p = element("p");
    			p.textContent = "Map Style:";
    			t1 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(p, "class", "font-bold my-1");
    			add_location(p, file$4, 21, 1, 536);
    			attr_dev(section, "class", "card h-fit mb-4");
    			add_location(section, file$4, 20, 0, 500);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, p);
    			append_dev(section, t1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(section, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*mapStyleList, mapStyle, toggleStyle*/ 7) {
    				each_value = /*mapStyleList*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(section, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('StyleSelector', slots, []);
    	let { mapStyle } = $$props;
    	let { isReadyForStyleSwitching } = $$props;

    	const mapStyleList = [
    		{ name: "Streets", value: "streets-v11" },
    		{ name: "Dark", value: "dark-v10" },
    		{ name: "Outdoors", value: "outdoors-v11" },
    		{
    			name: "Satellite",
    			value: "satellite-streets-v11"
    		},
    		{
    			name: "Navigation - Night",
    			value: "navigation-night-v1"
    		}
    	];

    	const toggleStyle = item => {
    		try {
    			$$invalidate(0, mapStyle = item);
    			$$invalidate(3, isReadyForStyleSwitching = true);
    		} catch(e) {
    			
    		}
    	};

    	const writable_props = ['mapStyle', 'isReadyForStyleSwitching'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StyleSelector> was created with unknown prop '${key}'`);
    	});

    	const click_handler = item => toggleStyle(item["value"]);

    	$$self.$$set = $$props => {
    		if ('mapStyle' in $$props) $$invalidate(0, mapStyle = $$props.mapStyle);
    		if ('isReadyForStyleSwitching' in $$props) $$invalidate(3, isReadyForStyleSwitching = $$props.isReadyForStyleSwitching);
    	};

    	$$self.$capture_state = () => ({
    		mapStyle,
    		isReadyForStyleSwitching,
    		mapStyleList,
    		toggleStyle
    	});

    	$$self.$inject_state = $$props => {
    		if ('mapStyle' in $$props) $$invalidate(0, mapStyle = $$props.mapStyle);
    		if ('isReadyForStyleSwitching' in $$props) $$invalidate(3, isReadyForStyleSwitching = $$props.isReadyForStyleSwitching);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [mapStyle, mapStyleList, toggleStyle, isReadyForStyleSwitching, click_handler];
    }

    class StyleSelector extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, { mapStyle: 0, isReadyForStyleSwitching: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "StyleSelector",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*mapStyle*/ ctx[0] === undefined && !('mapStyle' in props)) {
    			console.warn("<StyleSelector> was created without expected prop 'mapStyle'");
    		}

    		if (/*isReadyForStyleSwitching*/ ctx[3] === undefined && !('isReadyForStyleSwitching' in props)) {
    			console.warn("<StyleSelector> was created without expected prop 'isReadyForStyleSwitching'");
    		}
    	}

    	get mapStyle() {
    		throw new Error("<StyleSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mapStyle(value) {
    		throw new Error("<StyleSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isReadyForStyleSwitching() {
    		throw new Error("<StyleSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isReadyForStyleSwitching(value) {
    		throw new Error("<StyleSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\FormRequest.svelte generated by Svelte v3.49.0 */

    const file$3 = "src\\components\\FormRequest.svelte";

    // (14:1) {:else}
    function create_else_block(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "Search Data";
    			attr_dev(button, "class", `card-btn card-btn-green my-1`);
    			add_location(button, file$3, 14, 2, 474);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*fetchData*/ ctx[4])) /*fetchData*/ ctx[4].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(14:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (12:1) {#if selectedDate === "" || selectedFrom === "" || selectedTo === "" || selectedPolygon === null}
    function create_if_block$1(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Select a Date, Time Range, and Polygon before Searching.";
    			attr_dev(div, "class", "alert alert-red my-1");
    			attr_dev(div, "role", "alert");
    			add_location(div, file$3, 12, 2, 351);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(12:1) {#if selectedDate === \\\"\\\" || selectedFrom === \\\"\\\" || selectedTo === \\\"\\\" || selectedPolygon === null}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let section;
    	let p;
    	let t1;

    	function select_block_type(ctx, dirty) {
    		if (/*selectedDate*/ ctx[0] === "" || /*selectedFrom*/ ctx[1] === "" || /*selectedTo*/ ctx[2] === "" || /*selectedPolygon*/ ctx[3] === null) return create_if_block$1;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			p = element("p");
    			p.textContent = "Search Polygon Vehicle Data:";
    			t1 = space();
    			if_block.c();
    			attr_dev(p, "class", "font-bold my-1");
    			add_location(p, file$3, 9, 1, 187);
    			attr_dev(section, "class", "card h-fit");
    			add_location(section, file$3, 8, 0, 156);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, p);
    			append_dev(section, t1);
    			if_block.m(section, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(section, null);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FormRequest', slots, []);
    	let { selectedDate } = $$props;
    	let { selectedFrom } = $$props;
    	let { selectedTo } = $$props;
    	let { selectedPolygon } = $$props;
    	let { fetchData } = $$props;
    	const writable_props = ['selectedDate', 'selectedFrom', 'selectedTo', 'selectedPolygon', 'fetchData'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<FormRequest> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('selectedDate' in $$props) $$invalidate(0, selectedDate = $$props.selectedDate);
    		if ('selectedFrom' in $$props) $$invalidate(1, selectedFrom = $$props.selectedFrom);
    		if ('selectedTo' in $$props) $$invalidate(2, selectedTo = $$props.selectedTo);
    		if ('selectedPolygon' in $$props) $$invalidate(3, selectedPolygon = $$props.selectedPolygon);
    		if ('fetchData' in $$props) $$invalidate(4, fetchData = $$props.fetchData);
    	};

    	$$self.$capture_state = () => ({
    		selectedDate,
    		selectedFrom,
    		selectedTo,
    		selectedPolygon,
    		fetchData
    	});

    	$$self.$inject_state = $$props => {
    		if ('selectedDate' in $$props) $$invalidate(0, selectedDate = $$props.selectedDate);
    		if ('selectedFrom' in $$props) $$invalidate(1, selectedFrom = $$props.selectedFrom);
    		if ('selectedTo' in $$props) $$invalidate(2, selectedTo = $$props.selectedTo);
    		if ('selectedPolygon' in $$props) $$invalidate(3, selectedPolygon = $$props.selectedPolygon);
    		if ('fetchData' in $$props) $$invalidate(4, fetchData = $$props.fetchData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [selectedDate, selectedFrom, selectedTo, selectedPolygon, fetchData];
    }

    class FormRequest extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
    			selectedDate: 0,
    			selectedFrom: 1,
    			selectedTo: 2,
    			selectedPolygon: 3,
    			fetchData: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FormRequest",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*selectedDate*/ ctx[0] === undefined && !('selectedDate' in props)) {
    			console.warn("<FormRequest> was created without expected prop 'selectedDate'");
    		}

    		if (/*selectedFrom*/ ctx[1] === undefined && !('selectedFrom' in props)) {
    			console.warn("<FormRequest> was created without expected prop 'selectedFrom'");
    		}

    		if (/*selectedTo*/ ctx[2] === undefined && !('selectedTo' in props)) {
    			console.warn("<FormRequest> was created without expected prop 'selectedTo'");
    		}

    		if (/*selectedPolygon*/ ctx[3] === undefined && !('selectedPolygon' in props)) {
    			console.warn("<FormRequest> was created without expected prop 'selectedPolygon'");
    		}

    		if (/*fetchData*/ ctx[4] === undefined && !('fetchData' in props)) {
    			console.warn("<FormRequest> was created without expected prop 'fetchData'");
    		}
    	}

    	get selectedDate() {
    		throw new Error("<FormRequest>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedDate(value) {
    		throw new Error("<FormRequest>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedFrom() {
    		throw new Error("<FormRequest>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedFrom(value) {
    		throw new Error("<FormRequest>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedTo() {
    		throw new Error("<FormRequest>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedTo(value) {
    		throw new Error("<FormRequest>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedPolygon() {
    		throw new Error("<FormRequest>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedPolygon(value) {
    		throw new Error("<FormRequest>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fetchData() {
    		throw new Error("<FormRequest>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fetchData(value) {
    		throw new Error("<FormRequest>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\StreetView.svelte generated by Svelte v3.49.0 */
    const file$2 = "src\\components\\StreetView.svelte";

    function create_fragment$3(ctx) {
    	let section;
    	let div;

    	const block = {
    		c: function create() {
    			section = element("section");
    			div = element("div");
    			attr_dev(div, "class", "h-full w-full rounded-lg");
    			add_location(div, file$2, 26, 1, 595);
    			attr_dev(section, "class", "card card-2xl");
    			add_location(section, file$2, 25, 0, 561);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div);
    			/*div_binding*/ ctx[2](div);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			/*div_binding*/ ctx[2](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('StreetView', slots, []);
    	let { pointOfInterest } = $$props;
    	let mapContainer = null;

    	onMount(() => {
    		$$invalidate(0, mapContainer = new google.maps.StreetViewPanorama(mapContainer,
    		{
    				position: pointOfInterest,
    				pov: { heading: 34, pitch: 10 }
    			}));
    	});

    	// When the location changes, set the new lat long to the map
    	const onLocationChange = () => {
    		try {
    			mapContainer.setPosition(pointOfInterest);
    		} catch(e) {
    			
    		}
    	};

    	const writable_props = ['pointOfInterest'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StreetView> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			mapContainer = $$value;
    			$$invalidate(0, mapContainer);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('pointOfInterest' in $$props) $$invalidate(1, pointOfInterest = $$props.pointOfInterest);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		pointOfInterest,
    		mapContainer,
    		onLocationChange
    	});

    	$$self.$inject_state = $$props => {
    		if ('pointOfInterest' in $$props) $$invalidate(1, pointOfInterest = $$props.pointOfInterest);
    		if ('mapContainer' in $$props) $$invalidate(0, mapContainer = $$props.mapContainer);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*pointOfInterest, mapContainer*/ 3) {
    			pointOfInterest && mapContainer != null && onLocationChange();
    		}
    	};

    	return [mapContainer, pointOfInterest, div_binding];
    }

    class StreetView extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { pointOfInterest: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "StreetView",
    			options,
    			id: create_fragment$3.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*pointOfInterest*/ ctx[1] === undefined && !('pointOfInterest' in props)) {
    			console.warn("<StreetView> was created without expected prop 'pointOfInterest'");
    		}
    	}

    	get pointOfInterest() {
    		throw new Error("<StreetView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pointOfInterest(value) {
    		throw new Error("<StreetView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    /**
     * A collection of utility functions for various type checks and conversion
     * @hidden
     */
    /**
     * ============================================================================
     * TYPE CHECK
     * ============================================================================
     * @hidden
     */
    /**
     * Returns `true` if value is not a number (NaN).
     *
     * @param value Input value
     * @return Is NaN?
     */
    function isNaN$1(value) {
        return Number(value) !== value;
    }
    /**
     * Returns a type of the value.
     *
     * @param value  Input value
     * @return Type of the value
     * @ignore
     */
    function getType(value) {
        return ({}).toString.call(value);
    }
    /**
     * ============================================================================
     * QUICK CONVERSION
     * ============================================================================
     * @hidden
     */
    /**
     * Converts any value into a `number`.
     *
     * @param value  Source value
     * @return Number representation of value
     */
    function toNumber(value) {
        if (value != null && !isNumber(value)) {
            var converted = Number(value);
            if (isNaN$1(converted) && isString(value) && value != "") {
                return toNumber(value.replace(/[^0-9.\-]+/g, ''));
            }
            return converted;
        }
        return value;
    }
    /**
     * Converts anything to Date object.
     *
     * @param value  A value of any type
     * @return Date object representing a value
     */
    function toDate(value) {
        if (isDate(value)) {
            // TODO maybe don't create a new Date ?
            return new Date(value);
        }
        else if (isNumber(value)) {
            return new Date(value);
        }
        else {
            // Try converting to number (assuming timestamp)
            var num = Number(value);
            if (!isNumber(num)) {
                return new Date(value);
            }
            else {
                return new Date(num);
            }
        }
    }
    /**
     * Converts numeric value into string. Deals with large or small numbers that
     * would otherwise use exponents.
     *
     * @param value  Numeric value
     * @return Numeric value as string
     */
    function numberToString(value) {
        // TODO handle Infinity and -Infinity
        if (isNaN$1(value)) {
            return "NaN";
        }
        if (value === Infinity) {
            return "Infinity";
        }
        if (value === -Infinity) {
            return "-Infinity";
        }
        // Negative 0
        if ((value === 0) && (1 / value === -Infinity)) {
            return "-0";
        }
        // Preserve negative and deal with absoute values
        var negative = value < 0;
        value = Math.abs(value);
        // TODO test this
        var parsed = /^([0-9]+)(?:\.([0-9]+))?(?:e[\+\-]([0-9]+))?$/.exec("" + value);
        var digits = parsed[1];
        var decimals = parsed[2] || "";
        var res;
        // Leave the nummber as it is if it does not use exponents
        if (parsed[3] === undefined) {
            res = (decimals === "" ? digits : digits + "." + decimals);
        }
        else {
            var exponent = +parsed[3];
            // Deal with decimals
            if (value < 1) {
                var zeros = exponent - 1;
                res = "0." + repeat("0", zeros) + digits + decimals;
                // Deal with integers
            }
            else {
                var zeros = exponent - decimals.length;
                if (zeros === 0) {
                    res = digits + decimals;
                }
                else if (zeros < 0) {
                    res = digits + decimals.slice(0, zeros) + "." + decimals.slice(zeros);
                }
                else {
                    res = digits + decimals + repeat("0", zeros);
                }
            }
        }
        return negative ? "-" + res : res;
    }
    /**
     * Repeats a `string` number of times as set in `amount`.
     *
     * @ignore Exclude from docs
     * @todo Make this faster
     * @param string  Source string
     * @param amount  Number of times to repeat string
     * @return New string
     */
    function repeat(string, amount) {
        return new Array(amount + 1).join(string);
    }
    /**
     * ============================================================================
     * TYPE CHECK
     * ============================================================================
     * @hidden
     */
    /**
     * Checks if parameter is `Date`.
     *
     * @param value  Input value
     * @return Is Date?
     */
    function isDate(value) {
        return getType(value) === "[object Date]";
    }
    /**
     * Checks if parameter is `string`.
     *
     * @param value  Input value
     * @return Is string?
     */
    function isString(value) {
        return typeof value === "string";
    }
    /**
     * Checks if parameter is `number`.
     *
     * @param value  Input value
     * @return Is number?
     */
    function isNumber(value) {
        return typeof value === "number" && Number(value) == value;
    }
    /**
     * Checks if parameter is `object`.
     *
     * @param value  Input value
     * @return Is object?
     */
    function isObject(value) {
        return typeof value === "object" && value !== null;
    }
    /**
     * Checks if parameter is `Array`.
     *
     * @param value  Input value
     * @return Is Array?
     */
    function isArray(value) {
        return Array.isArray(value);
    }
    /**
     * ============================================================================
     * STATIC CONSTANTS
     * ============================================================================
     * @hidden
     */
    /**
     * @ignore Exclude from docs
     */
    var PLACEHOLDER = "__§§§__";
    /**
     * @ignore Exclude from docs
     */
    var PLACEHOLDER2 = "__§§§§__";

    var Type = /*#__PURE__*/Object.freeze({
        __proto__: null,
        isNaN: isNaN$1,
        getType: getType,
        toNumber: toNumber,
        toDate: toDate,
        numberToString: numberToString,
        repeat: repeat,
        isDate: isDate,
        isString: isString,
        isNumber: isNumber,
        isObject: isObject,
        isArray: isArray,
        PLACEHOLDER: PLACEHOLDER,
        PLACEHOLDER2: PLACEHOLDER2
    });

    /**
     * ============================================================================
     * UTILITY FUNCTIONS
     * ============================================================================
     * @hidden
     */
    /**
     * Searches `array` for `value`.
     *
     * Returns -1 if not found.
     *
     * @param array  Source array
     * @param value  Value to search
     * @returns Index
     */
    function indexOf(array, value) {
        var length = array.length;
        for (var i = 0; i < length; ++i) {
            // TODO handle NaN
            if (array[i] === value) {
                return i;
            }
        }
        return -1;
    }
    /**
     * Calls `test` for each element in `array`.
     *
     * If `test` returns `true` then it immediately returns `true`.
     *
     * If `test` returns `false` for all of the elements in `array` then it returns `false`.
     *
     * @param array  Source array
     * @param test   Function which is called on each element
     * @returns Whether `test` returned true or not
     */
    function any(array, test) {
        var length = array.length;
        for (var i = 0; i < length; ++i) {
            if (test(array[i])) {
                return true;
            }
        }
        return false;
    }
    /**
     * Calls `fn` function for every member of array and returns a new array out
     * of all outputs.
     *
     * @param array  Source array
     * @param fn     Callback function
     * @returns New array
     */
    function map(array, fn) {
        var length = array.length;
        var output = new Array(length);
        for (var i = 0; i < length; ++i) {
            output[i] = fn(array[i], i);
        }
        return output;
    }
    /**
     * Iterates through all items in array and calls `fn` function for each of
     * them.
     *
     * @param array  Source array
     * @param fn     Callback function
     */
    function each$1(array, fn) {
        var length = array.length;
        for (var i = 0; i < length; ++i) {
            fn(array[i], i);
        }
    }
    /**
     * Iterates through all items in array in reverse order and calls `fn` function for each of
     * them.
     *
     * @param array  Source array
     * @param fn     Callback function
     */
    function eachReverse(array, fn) {
        var i = array.length;
        while (i > 0) {
            --i;
            fn(array[i], i);
        }
    }
    /**
     * Iterates through all items in array and calls `fn` function for each of
     * them.
     *
     * If `fn` call evaluates to `false`, further iteration is cancelled.
     *
     * @param array  Source array
     * @param fn     Callback function
     */
    function eachContinue$1(array, fn) {
        var length = array.length;
        for (var i = 0; i < length; ++i) {
            if (!fn(array[i], i)) {
                break;
            }
        }
    }
    /**
     * Shifts an item at `index` towards beginning of the array.
     *
     * @param array  Source array
     * @param index  Target element index
     */
    function shiftLeft(array, index) {
        var length = array.length;
        for (var i = index; i < length; ++i) {
            array[i - index] = array[i];
        }
        array.length = length - index;
    }
    /**
     * Returns the last item of the array.
     *
     * @param array  Source array
     * @returns Last item
     */
    function last(array) {
        var length = array.length;
        return length ? array[length - 1] : undefined;
    }
    /**
     * Returns the first item of the array.
     *
     * @param array  Source array
     * @returns Last item
     */
    function first(array) {
        return array[0];
    }
    /**
     * Inserts `element` into `array` at `index`.
     *
     * Caps `index` to be between `0` and `array.length`
     *
     * @param array    Source array
     * @param element  Item to insert
     * @param array    Index to insert item at
     */
    function insert(array, element, index) {
        //if (array) {
        index = Math.max(0, Math.min(index, array.length));
        array.splice(index, 0, element);
        //}
    }
    /**
     * Removes all copies of `element` from `array` (if they exist) and then
     * inserts `element` at `index`.
     *
     * @param array    Source array
     * @param element  Item
     * @param array    Index to move item to
     */
    function setIndex(array, element, index) {
        remove(array, element);
        insert(array, element, index);
    }
    /**
     * Pushes all of the elements from `input` into `array`.
     *
     * @param array  Output array
     * @param input  Input array
     */
    function pushAll(array, input) {
        var length = input.length;
        for (var i = 0; i < length; ++i) {
            array.push(input[i]);
        }
    }
    /**
     * Removes `element` from `array`.
     *
     * If there are multiple copies of `element`, they are all removed.
     *
     * @param array    Source array
     * @param element  Item to remove
     */
    function remove(array, element) {
        var found = false;
        var index = 0;
        for (;;) {
            index = array.indexOf(element, index);
            if (index === -1) {
                return found;
            }
            else {
                found = true;
                array.splice(index, 1);
            }
        }
    }
    function removeFirst(array, element) {
        var index = array.indexOf(element);
        if (index !== -1) {
            array.splice(index, 1);
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * Adds an `element` to `array`.
     *
     * If array already contains and item like this, it is removed before adding
     * it again.
     *
     * Optionally `toIndex` can be specified to add element at specific index.
     *
     * @param array    Source array
     * @param element  Item to add
     * @param array    Index to move item to
     */
    function move(array, element, toIndex) {
        // @todo this implementation must be the same as the List.moveValue method
        // @todo don't do anything if the desired index is the same as the current index
        var index = indexOf(array, element);
        // @todo remove all old values rather than only the first ?
        if (index !== -1) {
            removeIndex(array, index);
        }
        if (toIndex == null) {
            array.push(element);
        }
        else {
            insertIndex(array, toIndex, element);
        }
    }
    /**
     * Inserts `element` into `array` at `index`.
     *
     * If `index` is not provided, it will insert `element` at the end of `array`.
     *
     * @param array    Source array
     * @param element  Item to add
     * @param array    Index to add item at
     */
    function add$1(array, element, index) {
        // Append to the end if index is not set
        if (!isNumber(index)) {
            array.push(element);
        }
        // Add to the beginning of array if index is 0
        else if (index === 0) {
            array.unshift(element);
        }
        // Add to indicated place if index is set
        else {
            array.splice(index, 0, element);
        }
    }
    /**
     * Pushes `element` into `array` if it doesn't already exist.
     *
     * @param array    Source array
     * @param element  Item to add
     */
    function pushOne(array, element) {
        if (array.indexOf(element) === -1) {
            array.push(element);
        }
    }
    /**
     * Removes `element` from `array` (if it exists) and then inserts `element` at
     * `index`.
     *
     * If `index` is not provided, it will insert `element` at the end of `array`.
     *
     * @param array    Source array
     * @param element  Item to remove
     * @param array    Index to move item to
     */
    function replace(array, element, index) {
        // check if exists
        var ind = array.indexOf(element);
        // remove if exists
        if (ind !== -1) {
            array.splice(ind, 1);
        }
        // add to end if index is not set
        if (!isNumber(index)) {
            array.push(element);
        }
        // add to indicated place if index is set
        else {
            array.splice(index, 0, element);
        }
    }
    /**
     * Wraps `input` in an array, if it isn't already an array.
     *
     * @param input  Source value
     * @return An array
     */
    function toArray(input) {
        if (Array.isArray(input)) {
            return input;
        }
        else {
            return [input];
        }
    }
    /**
     * Returns `true` if `element` exists in `array`.
     *
     * @param array    Source array
     * @param element  Item to search for
     * @returns Item in array?
     */
    function has(array, element) {
        return indexOf(array, element) !== -1;
    }
    /**
     * Returns a shallow copy of `array`.
     *
     * @param array  Source array
     * @returns Copy of the array
     */
    function copy$2(array) {
        var length = array.length;
        // It's faster to create the array with a pre-defined length
        var output = new Array(length);
        for (var i = 0; i < length; ++i) {
            // Because the array has a pre-defined length, we have to assign rather than push
            // This is also faster than pushing
            output[i] = array[i];
        }
        return output;
    }
    /**
     * Returns a copy of `array` which contains all the elements between `start`
     * and `end`. (including `start` and excluding `end`)
     *
     * If `end` is not provided, it defaults to `array.length`.
     *
     * @param array  Source array
     * @param start  Start index
     * @param end    End index
     * @returns Part of the array
     */
    function slice(array, start, end) {
        if (end === void 0) { end = array.length; }
        var output = new Array(end - start);
        for (var i = start; i < end; ++i) {
            output[i - start] = array[i];
        }
        return output;
    }
    /**
     * Inserts a value into array at specific index.
     *
     * @param array  Source array
     * @param index  Index
     * @param value  Value to insert
     */
    function insertIndex(array, index, value) {
        array.splice(index, 0, value);
    }
    /**
     * Removes a value from array at specific index.
     *
     * @param array  Source array
     * @param index  Index
     */
    function removeIndex(array, index) {
        array.splice(index, 1);
    }
    /**
     * Searches the array using custom function and returns index of the item if
     * found.
     *
     * Will call `matches` function on all items of the array. If return value
     * evaluates to `true`, index is returned.
     *
     * Otherwise returns -1.
     *
     * @param array    Source array
     * @param matches  Search function
     * @returns Index of the item if found
     */
    function findIndex(array, matches) {
        var length = array.length;
        for (var i = 0; i < length; ++i) {
            if (matches(array[i], i)) {
                return i;
            }
        }
        return -1;
    }
    /**
     * This is the same as `findIndex` except it searches from right to left.
     *
     * @param array    Source array
     * @param matches  Search function
     * @returns Index of the item if found
     */
    function findIndexReverse(array, matches) {
        var i = array.length;
        while (i > 0) {
            --i;
            if (matches(array[i], i)) {
                return i;
            }
        }
        return -1;
    }
    /**
     * Searches the array using custom function and returns item if found.
     *
     * Will call `matches` function on all items of the array. If return value
     * evaluates to `true`, index is returned.
     *
     * Otherwise returns `undefined`.
     *
     * @param array    Source array
     * @param matches  Search function
     * @returns Item if found
     */
    function find(array, matches) {
        var index = findIndex(array, matches);
        if (index !== -1) {
            return array[index];
        }
    }
    /**
     * This is the same as `find` except it searches from right to left.
     *
     * @param array    Source array
     * @param matches  Search function
     * @returns Item if found
     */
    function findReverse(array, matches) {
        var index = findIndexReverse(array, matches);
        if (index !== -1) {
            return array[index];
        }
    }
    /**
     * Searches the array using custom function and returns item if found.
     *
     * Will call `matches` function on all items of the array. If value
     * is not `undefined`, it returns it.
     *
     * Otherwise returns `undefined`.
     *
     * @param array    Source array
     * @param matches  Search function
     * @returns Item if found
     */
    function findMap(array, matches) {
        var length = array.length;
        for (var i = 0; i < length; ++i) {
            var value = matches(array[i], i);
            if (value !== undefined) {
                return value;
            }
        }
    }
    /**
     * Iterates through all items in array and calls `fn` function for each of
     * them.
     *
     * @param array  Source array
     * @param fn     Callback function
     */
    function shuffle(array) {
        // https://stackoverflow.com/a/2450976/449477
        var currentIndex = array.length, temporaryValue, randomIndex;
        // While there remain elements to shuffle...
        while (0 !== currentIndex) {
            // Pick a remaining element...
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex -= 1;
            // And swap it with the current element.
            temporaryValue = array[currentIndex];
            array[currentIndex] = array[randomIndex];
            array[randomIndex] = temporaryValue;
        }
    }
    /**
     * Orders an array using specific `ordering` function and returns right-most index of
     * the `value`.
     *
     * @ignore Exclude from docs
     * @param array     Source array
     * @param ordering  An ordering function
     * @returns Result of the search
     */
    function getSortedIndex(array, ordering) {
        var start = 0;
        var end = array.length;
        var found = false;
        while (start < end) {
            // TODO is this faster/slower than using Math.floor ?
            var pivot = (start + end) >> 1;
            var order = ordering(array[pivot]);
            // less
            if (order < 0) {
                start = pivot + 1;
                // equal
            }
            else if (order === 0) {
                found = true;
                start = pivot + 1;
                // more
            }
            else {
                end = pivot;
            }
        }
        return {
            found: found,
            index: (found ? start - 1 : start)
        };
    }
    /**
     * Orders an array using specific `ordering` function and returns left-most index of
     * the `value`.
     *
     * @ignore Exclude from docs
     * @param array     Source array
     * @param ordering  An ordering function
     * @returns Result of the search
     */
    function getFirstSortedIndex(array, ordering) {
        var start = 0;
        var end = array.length;
        var found = false;
        while (start < end) {
            // TODO is this faster/slower than using Math.floor ?
            var pivot = (start + end) >> 1;
            var order = ordering(array[pivot]);
            // less
            if (order < 0) {
                start = pivot + 1;
                // equal
            }
            else if (order === 0) {
                found = true;
                end = pivot;
                // more
            }
            else {
                end = pivot;
            }
        }
        return {
            found: found,
            index: start
        };
    }
    function keepIf(array, keep) {
        var i = array.length;
        while (i > 0) {
            --i;
            if (!keep(array[i])) {
                array.splice(i, 1);
            }
        }
    }

    var Array$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        indexOf: indexOf,
        any: any,
        map: map,
        each: each$1,
        eachReverse: eachReverse,
        eachContinue: eachContinue$1,
        shiftLeft: shiftLeft,
        last: last,
        first: first,
        insert: insert,
        setIndex: setIndex,
        pushAll: pushAll,
        remove: remove,
        removeFirst: removeFirst,
        move: move,
        add: add$1,
        pushOne: pushOne,
        replace: replace,
        toArray: toArray,
        has: has,
        copy: copy$2,
        slice: slice,
        insertIndex: insertIndex,
        removeIndex: removeIndex,
        findIndex: findIndex,
        findIndexReverse: findIndexReverse,
        find: find,
        findReverse: findReverse,
        findMap: findMap,
        shuffle: shuffle,
        getSortedIndex: getSortedIndex,
        getFirstSortedIndex: getFirstSortedIndex,
        keepIf: keepIf
    });

    /**
     * A base class for disposable objects.
     *
     * @ignore Exclude from docs
     */
    var DisposerClass = /** @class */ (function () {
        /**
         * Constructor.
         */
        function DisposerClass() {
            /**
             * Is object disposed?
             */
            Object.defineProperty(this, "_disposed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this._disposed = false;
        }
        /**
         * Checks if object is disposed.
         *
         * @return Disposed?
         */
        Object.defineProperty(DisposerClass.prototype, "isDisposed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._disposed;
            }
        });
        /**
         * Disposes the object.
         */
        Object.defineProperty(DisposerClass.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._disposed) {
                    this._disposed = true;
                    this._dispose();
                }
            }
        });
        return DisposerClass;
    }());
    /**
     * A class for creating an IDisposer.
     *
     * @ignore Exclude from docs
     */
    var Disposer = /** @class */ (function () {
        /**
         * Constructor.
         *
         * @param dispose  Function that disposes object
         */
        function Disposer(dispose) {
            /**
             * Is object disposed?
             */
            Object.defineProperty(this, "_disposed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * Method that disposes the object.
             */
            Object.defineProperty(this, "_dispose", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this._disposed = false;
            this._dispose = dispose;
        }
        /**
         * Checks if object is disposed.
         *
         * @return Disposed?
         */
        Object.defineProperty(Disposer.prototype, "isDisposed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._disposed;
            }
        });
        /**
         * Disposes the object.
         */
        Object.defineProperty(Disposer.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._disposed) {
                    this._disposed = true;
                    this._dispose();
                }
            }
        });
        return Disposer;
    }());
    /**
     * This can be extended by other classes to add a `_disposers` property.
     *
     * @ignore Exclude from docs
     */
    var ArrayDisposer = /** @class */ (function (_super) {
        __extends(ArrayDisposer, _super);
        function ArrayDisposer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_disposers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            return _this;
        }
        Object.defineProperty(ArrayDisposer.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                each$1(this._disposers, function (x) {
                    x.dispose();
                });
            }
        });
        return ArrayDisposer;
    }(DisposerClass));
    /**
     * A collection of related disposers that can be disposed in one go.
     *
     * @ignore Exclude from docs
     */
    var MultiDisposer = /** @class */ (function (_super) {
        __extends(MultiDisposer, _super);
        function MultiDisposer(disposers) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "_disposers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this._disposers = disposers;
            return _this;
        }
        Object.defineProperty(MultiDisposer.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                each$1(this._disposers, function (x) {
                    x.dispose();
                });
            }
        });
        return MultiDisposer;
    }(DisposerClass));
    /**
     * A special kind of Disposer that has attached value set.
     *
     * If a new value is set using `set()` method, the old disposer value is
     * disposed.
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    /** @class */ ((function (_super) {
        __extends(MutableValueDisposer, _super);
        function MutableValueDisposer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * Current disposer.
             */
            Object.defineProperty(_this, "_disposer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * Current value.
             */
            Object.defineProperty(_this, "_value", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(MutableValueDisposer.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._disposer != null) {
                    this._disposer.dispose();
                    this._disposer = undefined;
                }
            }
        });
        /**
         * Returns current value.
         *
         * @return Value
         */
        Object.defineProperty(MutableValueDisposer.prototype, "get", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._value;
            }
        });
        /**
         * Sets value and disposes previous disposer if it was set.
         *
         * @param value     New value
         * @param disposer  Disposer
         */
        Object.defineProperty(MutableValueDisposer.prototype, "set", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, disposer) {
                if (this._disposer != null) {
                    this._disposer.dispose();
                }
                this._disposer = disposer;
                this._value = value;
            }
        });
        /**
         * Resets the disposer value.
         */
        Object.defineProperty(MutableValueDisposer.prototype, "reset", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.set(undefined, undefined);
            }
        });
        return MutableValueDisposer;
    })(DisposerClass));
    /**
     * @ignore Exclude from docs
     * @todo Description
     */
    var CounterDisposer = /** @class */ (function (_super) {
        __extends(CounterDisposer, _super);
        function CounterDisposer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * [_counter description]
             *
             * @todo Description
             */
            Object.defineProperty(_this, "_counter", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            return _this;
        }
        /**
         * [increment description]
         *
         * @todo Description
         */
        Object.defineProperty(CounterDisposer.prototype, "increment", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                // TODO throw an error if it is disposed
                ++this._counter;
                // TODO make this more efficient
                return new Disposer(function () {
                    --_this._counter;
                    if (_this._counter === 0) {
                        _this.dispose();
                    }
                });
            }
        });
        return CounterDisposer;
    }(Disposer));

    /**
     * Event Dispatcher module is used for registering listeners and dispatching
     * events across amCharts system.
     */
    /**
     * Universal Event Dispatcher.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/events/} for more info
     */
    var EventDispatcher = /** @class */ (function () {
        /**
         * Constructor
         */
        function EventDispatcher() {
            Object.defineProperty(this, "_listeners", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_killed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_disabled", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_iterating", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_enabled", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_disposed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this._listeners = [];
            this._killed = [];
            this._disabled = {};
            this._iterating = 0;
            this._enabled = true;
            this._disposed = false;
        }
        /**
         * Returns if this object has been already disposed.
         *
         * @return Disposed?
         */
        Object.defineProperty(EventDispatcher.prototype, "isDisposed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._disposed;
            }
        });
        /**
         * Dispose (destroy) this object.
         */
        Object.defineProperty(EventDispatcher.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._disposed) {
                    this._disposed = true;
                    var a = this._listeners;
                    this._iterating = 1;
                    this._listeners = null;
                    this._disabled = null;
                    try {
                        each$1(a, function (x) {
                            x.disposer.dispose();
                        });
                    }
                    finally {
                        this._killed = null;
                        this._iterating = null;
                    }
                }
            }
        });
        /**
         * Checks if this particular event dispatcher has any listeners set.
         *
         * @return Has listeners?
         */
        Object.defineProperty(EventDispatcher.prototype, "hasListeners", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._listeners.length !== 0;
            }
        });
        /**
         * Checks if this particular event dispatcher has any particular listeners set.
         *
         * @return Has particular event listeners?
         */
        Object.defineProperty(EventDispatcher.prototype, "hasListenersByType", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type) {
                return any(this._listeners, function (x) { return (x.type === null || x.type === type) && !x.killed; });
            }
        });
        /**
         * Enable dispatching of events if they were previously disabled by
         * `disable()`.
         */
        Object.defineProperty(EventDispatcher.prototype, "enable", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._enabled = true;
            }
        });
        /**
         * Disable dispatching of events until re-enabled by `enable()`.
         */
        Object.defineProperty(EventDispatcher.prototype, "disable", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._enabled = false;
            }
        });
        /**
         * Enable dispatching particular event, if it was disabled before by
         * `disableType()`.
         *
         * @param type Event type
         */
        Object.defineProperty(EventDispatcher.prototype, "enableType", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type) {
                delete this._disabled[type];
            }
        });
        /**
         * Disable dispatching of events for a certain event type.
         *
         * Optionally, can set how many dispatches to skip before automatically
         * re-enabling the dispatching.
         *
         * @param type    Event type
         * @param amount  Number of event dispatches to skip
         */
        Object.defineProperty(EventDispatcher.prototype, "disableType", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type, amount) {
                if (amount === void 0) { amount = Infinity; }
                this._disabled[type] = amount;
            }
        });
        /**
         * Removes listener from dispatcher.
         *
         * Will throw an exception if such listener does not exists.
         *
         * @param listener Listener to remove
         */
        Object.defineProperty(EventDispatcher.prototype, "_removeListener", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (listener) {
                if (this._iterating === 0) {
                    var index = this._listeners.indexOf(listener);
                    if (index === -1) {
                        throw new Error("Invalid state: could not remove listener");
                    }
                    this._listeners.splice(index, 1);
                }
                else {
                    this._killed.push(listener);
                }
            }
        });
        /**
         * Removes existing listener by certain parameters.
         *
         * @param once         Listener's once setting
         * @param type         Listener's type
         * @param callback     Callback function
         * @param context      Callback context
         */
        Object.defineProperty(EventDispatcher.prototype, "_removeExistingListener", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (once, type, callback, context) {
                if (this._disposed) {
                    throw new Error("EventDispatcher is disposed");
                }
                this._eachListener(function (info) {
                    if (info.once === once && // TODO is this correct ?
                        info.type === type &&
                        (callback === undefined || info.callback === callback) &&
                        info.context === context) {
                        info.disposer.dispose();
                    }
                });
            }
        });
        /**
         * Checks if dispatching for particular event type is enabled.
         *
         * @param type  Event type
         * @return Enabled?
         */
        Object.defineProperty(EventDispatcher.prototype, "isEnabled", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type) {
                if (this._disposed) {
                    throw new Error("EventDispatcher is disposed");
                }
                // TODO is this check correct ?
                return this._enabled && this._listeners.length > 0 && this.hasListenersByType(type) && this._disabled[type] === undefined;
            }
        });
        /**
         * Removes all listeners of a particular event type
         *
         * @param type  Listener's type
         */
        Object.defineProperty(EventDispatcher.prototype, "removeType", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type) {
                if (this._disposed) {
                    throw new Error("EventDispatcher is disposed");
                }
                this._eachListener(function (info) {
                    if (info.type === type) {
                        info.disposer.dispose();
                    }
                });
            }
        });
        /**
         * Checks if there's already a listener with specific parameters.
         *
         * @param type      Listener's type
         * @param callback  Callback function
         * @param context   Callback context
         * @return Has listener?
         */
        Object.defineProperty(EventDispatcher.prototype, "has", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type, callback, context) {
                var index = findIndex(this._listeners, function (info) {
                    return info.once !== true && // Ignoring "once" listeners
                        info.type === type &&
                        (callback === undefined || info.callback === callback) &&
                        info.context === context;
                });
                return index !== -1;
            }
        });
        /**
         * Checks whether event of the particular type should be dispatched.
         *
         * @param type  Event type
         * @return Dispatch?
         */
        Object.defineProperty(EventDispatcher.prototype, "_shouldDispatch", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type) {
                if (this._disposed) {
                    throw new Error("EventDispatcher is disposed");
                }
                var count = this._disabled[type];
                if (!isNumber(count)) {
                    return this._enabled;
                }
                else {
                    if (count <= 1) {
                        delete this._disabled[type];
                    }
                    else {
                        --this._disabled[type];
                    }
                    return false;
                }
            }
        });
        /**
         * [_eachListener description]
         *
         * All of this extra code is needed when a listener is removed while iterating
         *
         * @todo Description
         * @param fn [description]
         */
        Object.defineProperty(EventDispatcher.prototype, "_eachListener", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (fn) {
                var _this = this;
                ++this._iterating;
                try {
                    each$1(this._listeners, fn);
                }
                finally {
                    --this._iterating;
                    // TODO should this be inside or outside the finally ?
                    if (this._iterating === 0 && this._killed.length !== 0) {
                        // Remove killed listeners
                        each$1(this._killed, function (killed) {
                            _this._removeListener(killed);
                        });
                        this._killed.length = 0;
                    }
                }
            }
        });
        /**
         * Dispatches an event immediately without waiting for next cycle.
         *
         * @param type   Event type
         * @param event  Event object
         * @todo automatically add in type and target properties if they are missing
         */
        Object.defineProperty(EventDispatcher.prototype, "dispatch", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type, event) {
                if (this._shouldDispatch(type)) {
                    // TODO check if it's faster to use an object of listeners rather than a single big array
                    // TODO if the function throws, maybe it should keep going ?
                    this._eachListener(function (listener) {
                        if (!listener.killed && (listener.type === null || listener.type === type)) {
                            listener.dispatch(type, event);
                        }
                    });
                }
            }
        });
        /**
         * Shelves the event to be dispatched within next update cycle.
         *
         * @param type   Event type
         * @param event  Event object
         * @todo automatically add in type and target properties if they are missing
         */
        /*public dispatchLater<Key extends keyof T>(type: Key, event: T[Key]): void {
            if (this._shouldDispatch(type)) {
                this._eachListener((listener) => {
                    // TODO check if it's faster to use an object of listeners rather than a single big array
                    if (!listener.killed && (listener.type === null || listener.type === type)) {
                        // TODO if the function throws, maybe it should keep going ?
                        // TODO dispatch during the update cycle, rather than using whenIdle
                        $async.whenIdle(() => {
                            if (!listener.killed) {
                                listener.dispatch(type, event);
                            }
                        });
                    }
                });
            }
        }*/
        /**
         * Creates, catalogs and returns an [[EventListener]].
         *
         * Event listener can be disposed.
         *
         * @param once         Listener's once setting
         * @param type         Listener's type
         * @param callback     Callback function
         * @param context      Callback context
         * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
         * @param dispatch
         * @returns An event listener
         */
        Object.defineProperty(EventDispatcher.prototype, "_on", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (once, type, callback, context, shouldClone, dispatch) {
                var _this = this;
                if (this._disposed) {
                    throw new Error("EventDispatcher is disposed");
                }
                this._removeExistingListener(once, type, callback, context);
                var info = {
                    type: type,
                    callback: callback,
                    context: context,
                    shouldClone: shouldClone,
                    dispatch: dispatch,
                    killed: false,
                    once: once,
                    disposer: new Disposer(function () {
                        info.killed = true;
                        _this._removeListener(info);
                    })
                };
                this._listeners.push(info);
                return info;
            }
        });
        /**
         * Creates an event listener to be invoked on **any** event.
         *
         * @param callback     Callback function
         * @param context      Callback context
         * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
         * @returns A disposable event listener
         */
        Object.defineProperty(EventDispatcher.prototype, "onAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (callback, context, shouldClone) {
                if (shouldClone === void 0) { shouldClone = true; }
                return this._on(false, null, callback, context, shouldClone, function (_type, event) { return callback.call(context, event); }).disposer;
            }
        });
        /**
         * Creates an event listener to be invoked on a specific event type.
         *
         * ```TypeScript
         * button.events.once("click", (ev) => {
         *   console.log("Button clicked");
         * }, this);
         * ```
         * ```JavaScript
         * button.events.once("click", (ev) => {
         *   console.log("Button clicked");
         * }, this);
         * ```
         *
         * The above will invoke our custom event handler whenever series we put
         * event on is hidden.
         *
         * @param type         Listener's type
         * @param callback     Callback function
         * @param context      Callback context
         * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
         * @returns A disposable event listener
         */
        Object.defineProperty(EventDispatcher.prototype, "on", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type, callback, context, shouldClone) {
                if (shouldClone === void 0) { shouldClone = true; }
                return this._on(false, type, callback, context, shouldClone, function (_type, event) { return callback.call(context, event); }).disposer;
            }
        });
        /**
         * Creates an event listener to be invoked on a specific event type once.
         *
         * Once the event listener is invoked, it is automatically disposed.
         *
         * ```TypeScript
         * button.events.once("click", (ev) => {
         *   console.log("Button clicked");
         * }, this);
         * ```
         * ```JavaScript
         * button.events.once("click", (ev) => {
         *   console.log("Button clicked");
         * }, this);
         * ```
         *
         * The above will invoke our custom event handler the first time series we
         * put event on is hidden.
         *
         * @param type         Listener's type
         * @param callback     Callback function
         * @param context      Callback context
         * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
         * @returns A disposable event listener
         */
        Object.defineProperty(EventDispatcher.prototype, "once", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type, callback, context, shouldClone) {
                if (shouldClone === void 0) { shouldClone = true; }
                var x = this._on(true, type, callback, context, shouldClone, function (_type, event) {
                    x.disposer.dispose();
                    callback.call(context, event);
                });
                // TODO maybe this should return a different Disposer ?
                return x.disposer;
            }
        });
        /**
         * Removes the event listener with specific parameters.
         *
         * @param type         Listener's type
         * @param callback     Callback function
         * @param context      Callback context
         */
        Object.defineProperty(EventDispatcher.prototype, "off", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type, callback, context) {
                this._removeExistingListener(false, type, callback, context);
            }
        });
        /**
         * Copies all dispatcher parameters, including listeners, from another event
         * dispatcher.
         *
         * @param source Source event dispatcher
         * @ignore
         */
        Object.defineProperty(EventDispatcher.prototype, "copyFrom", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (source) {
                var _this = this;
                if (this._disposed) {
                    throw new Error("EventDispatcher is disposed");
                }
                if (source === this) {
                    throw new Error("Cannot copyFrom the same TargetedEventDispatcher");
                }
                var disposers = [];
                each$1(source._listeners, function (x) {
                    // TODO is this correct ?
                    if (!x.killed && x.shouldClone) {
                        if (x.type === null) {
                            disposers.push(_this.onAll(x.callback, x.context));
                        }
                        else if (x.once) {
                            disposers.push(_this.once(x.type, x.callback, x.context));
                        }
                        else {
                            disposers.push(_this.on(x.type, x.callback, x.context));
                        }
                    }
                });
                return new MultiDisposer(disposers);
            }
        });
        return EventDispatcher;
    }());
    /**
     * A version of the [[EventDispatcher]] that dispatches events for a specific
     * target object.
     *
     * @ignore
     */
    /** @class */ ((function (_super) {
        __extends(TargetedEventDispatcher, _super);
        /**
         * Constructor
         *
         * @param target Event dispatcher target
         */
        function TargetedEventDispatcher(target) {
            var _this = _super.call(this) || this;
            /**
             * A target object which is originating events using this dispatcher.
             */
            Object.defineProperty(_this, "target", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this.target = target;
            return _this;
        }
        /**
         * Copies all dispatcher parameters, including listeners, from another event
         * dispatcher.
         *
         * @param source Source event dispatcher
         * @ignore
         */
        Object.defineProperty(TargetedEventDispatcher.prototype, "copyFrom", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (source) {
                var _this = this;
                if (this._disposed) {
                    throw new Error("EventDispatcher is disposed");
                }
                if (source === this) {
                    throw new Error("Cannot copyFrom the same TargetedEventDispatcher");
                }
                var disposers = [];
                each$1(source._listeners, function (x) {
                    // TODO very hacky
                    if (x.context === source.target) {
                        return;
                    }
                    // TODO is this correct ?
                    if (!x.killed && x.shouldClone) {
                        if (x.type === null) {
                            disposers.push(_this.onAll(x.callback, x.context));
                        }
                        else if (x.once) {
                            disposers.push(_this.once(x.type, x.callback, x.context));
                        }
                        else {
                            disposers.push(_this.on(x.type, x.callback, x.context));
                        }
                    }
                });
                return new MultiDisposer(disposers);
            }
        });
        return TargetedEventDispatcher;
    })(EventDispatcher));

    /**
     * Checks if specific index fits into length.
     *
     * @param index  Index
     * @param len    Length
     * @ignore
     */
    function checkBounds(index, len) {
        if (!(index >= 0 && index < len)) {
            throw new Error("Index out of bounds: " + index);
        }
    }
    /**
     * A List class is used to hold a number of indexed items of the same type.
     */
    var List = /** @class */ (function () {
        /**
         * Constructor
         *
         * @param initial  Inital list of values to add to list
         */
        function List(initial) {
            if (initial === void 0) { initial = []; }
            /**
             * List values.
             */
            Object.defineProperty(this, "_values", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "events", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new EventDispatcher()
            });
            this._values = initial;
        }
        Object.defineProperty(List.prototype, "values", {
            /**
             * An array of values in the list.
             *
             * Do not use this property to add values. Rather use dedicated methods, like
             * `push()`, `removeIndex()`, etc.
             *
             * @readonly
             * @return List values
             */
            get: function () {
                return this._values;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Checks if list contains specific item reference.
         *
         * @param item  Item to search for
         * @return `true` if found, `false` if not found
         */
        Object.defineProperty(List.prototype, "contains", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                return this._values.indexOf(value) !== -1;
            }
        });
        /**
         * Removes specific item from the list.
         *
         * @param item An item to remove
         */
        Object.defineProperty(List.prototype, "removeValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var i = 0;
                var length = this._values.length;
                while (i < length) {
                    // TODO handle NaN
                    if (this._values[i] === value) {
                        this.removeIndex(i);
                        --length;
                    }
                    else {
                        ++i;
                    }
                }
            }
        });
        /**
         * Searches the list for specific item and returns its index.
         *
         * @param item  An item to search for
         * @return Index or -1 if not found
         */
        Object.defineProperty(List.prototype, "indexOf", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                return indexOf(this._values, value);
            }
        });
        Object.defineProperty(List.prototype, "length", {
            /**
             * Number of items in list.
             *
             * @readonly
             * @return Number of items
             */
            get: function () {
                return this._values.length;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Checks if there's a value at specific index.
         *
         * @param index  Index
         * @return Value exists?
         */
        Object.defineProperty(List.prototype, "hasIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index) {
                return index >= 0 && index < this._values.length;
            }
        });
        /**
         * Returns an item at specified index.
         *
         * @param index  Index
         * @return List item
         */
        Object.defineProperty(List.prototype, "getIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index) {
                return this._values[index];
            }
        });
        Object.defineProperty(List.prototype, "_onPush", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (newValue) {
                if (this.events.isEnabled("push")) {
                    this.events.dispatch("push", {
                        type: "push",
                        target: this,
                        newValue: newValue
                    });
                }
            }
        });
        Object.defineProperty(List.prototype, "_onInsertIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, newValue) {
                if (this.events.isEnabled("insertIndex")) {
                    this.events.dispatch("insertIndex", {
                        type: "insertIndex",
                        target: this,
                        index: index,
                        newValue: newValue
                    });
                }
            }
        });
        Object.defineProperty(List.prototype, "_onSetIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, oldValue, newValue) {
                if (this.events.isEnabled("setIndex")) {
                    this.events.dispatch("setIndex", {
                        type: "setIndex",
                        target: this,
                        index: index,
                        oldValue: oldValue,
                        newValue: newValue
                    });
                }
            }
        });
        Object.defineProperty(List.prototype, "_onRemoveIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, oldValue) {
                if (this.events.isEnabled("removeIndex")) {
                    this.events.dispatch("removeIndex", {
                        type: "removeIndex",
                        target: this,
                        index: index,
                        oldValue: oldValue
                    });
                }
            }
        });
        Object.defineProperty(List.prototype, "_onMoveIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (oldIndex, newIndex, value) {
                if (this.events.isEnabled("moveIndex")) {
                    this.events.dispatch("moveIndex", {
                        type: "moveIndex",
                        target: this,
                        oldIndex: oldIndex,
                        newIndex: newIndex,
                        value: value,
                    });
                }
            }
        });
        Object.defineProperty(List.prototype, "_onClear", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (oldValues) {
                if (this.events.isEnabled("clear")) {
                    this.events.dispatch("clear", {
                        type: "clear",
                        target: this,
                        oldValues: oldValues
                    });
                }
            }
        });
        /**
         * Sets value at specific index.
         *
         * If there's already a value at the index, it is overwritten.
         *
         * @param index  Index
         * @param value  New value
         * @return New value
         */
        Object.defineProperty(List.prototype, "setIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, value) {
                checkBounds(index, this._values.length);
                var oldValue = this._values[index];
                // Do nothing if the old value and the new value are the same
                if (oldValue !== value) {
                    this._values[index] = value;
                    this._onSetIndex(index, oldValue, value);
                }
                return oldValue;
            }
        });
        /**
         * Adds an item to the list at a specific index, which pushes all the other
         * items further down the list.
         *
         * @param index Index
         * @param item  An item to add
         */
        Object.defineProperty(List.prototype, "insertIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, value) {
                checkBounds(index, this._values.length + 1);
                insertIndex(this._values, index, value);
                this._onInsertIndex(index, value);
                return value;
            }
        });
        /**
         * Swaps indexes of two items in the list.
         *
         * @param a  Item 1
         * @param b  Item 2
         */
        Object.defineProperty(List.prototype, "swap", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (a, b) {
                var len = this._values.length;
                checkBounds(a, len);
                checkBounds(b, len);
                if (a !== b) {
                    var value_a = this._values[a];
                    var value_b = this._values[b];
                    this._values[a] = value_b;
                    this._onSetIndex(a, value_a, value_b);
                    this._values[b] = value_a;
                    this._onSetIndex(b, value_b, value_a);
                }
            }
        });
        /**
         * Removes a value at specific index.
         *
         * @param index  Index of value to remove
         * @return Removed value
         */
        Object.defineProperty(List.prototype, "removeIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index) {
                checkBounds(index, this._values.length);
                var oldValue = this._values[index];
                removeIndex(this._values, index);
                this._onRemoveIndex(index, oldValue);
                return oldValue;
            }
        });
        /**
         * Moves an item to a specific index within the list.
         *
         * If the index is not specified it will move the item to the end of the
         * list.
         *
         * @param value  Item to move
         * @param index  Index to place item at
         */
        Object.defineProperty(List.prototype, "moveValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, toIndex) {
                // TODO don't do anything if the desired index is the same as the current index
                var index = this.indexOf(value);
                // TODO remove all old values rather than only the first ?
                if (index !== -1) {
                    removeIndex(this._values, index);
                    if (toIndex == null) {
                        var toIndex_1 = this._values.length;
                        this._values.push(value);
                        this._onMoveIndex(index, toIndex_1, value);
                    }
                    else {
                        insertIndex(this._values, toIndex, value);
                        this._onMoveIndex(index, toIndex, value);
                    }
                }
                else if (toIndex == null) {
                    this._values.push(value);
                    this._onPush(value);
                }
                else {
                    insertIndex(this._values, toIndex, value);
                    this._onInsertIndex(toIndex, value);
                }
                return value;
            }
        });
        /**
         * Adds an item to the end of the list.
         *
         * @param item  An item to add
         */
        Object.defineProperty(List.prototype, "push", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                this._values.push(value);
                this._onPush(value);
                return value;
            }
        });
        /**
         * Adds an item as a first item in the list.
         *
         * @param item  An item to add
         */
        Object.defineProperty(List.prototype, "unshift", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                this.insertIndex(0, value);
                return value;
            }
        });
        /**
         * Adds multiple items to the list.
         *
         * @param items  An Array of items to add
         */
        Object.defineProperty(List.prototype, "pushAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (values) {
                var _this = this;
                each$1(values, function (value) {
                    _this.push(value);
                });
            }
        });
        /**
         * Copies and adds items from abother list.
         *
         * @param source  A list top copy items from
         */
        Object.defineProperty(List.prototype, "copyFrom", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (source) {
                this.pushAll(source._values);
            }
        });
        /**
         * Returns the last item from the list, and removes it.
         *
         * @return Item
         */
        Object.defineProperty(List.prototype, "pop", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var index = this._values.length - 1;
                return index < 0 ? undefined : this.removeIndex(this._values.length - 1);
            }
        });
        /**
         * Returns the first item from the list, and removes it.
         *
         * @return Item
         */
        Object.defineProperty(List.prototype, "shift", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._values.length ? this.removeIndex(0) : undefined;
            }
        });
        /**
         * Sets multiple items to the list.
         *
         * All current items are removed.
         *
         * @param newArray  New items
         */
        Object.defineProperty(List.prototype, "setAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (newArray) {
                var _this = this;
                var old = this._values;
                this._values = [];
                this._onClear(old);
                each$1(newArray, function (value) {
                    _this._values.push(value);
                    _this._onPush(value);
                });
            }
        });
        /**
         * Removes all items from the list.
         */
        Object.defineProperty(List.prototype, "clear", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setAll([]);
            }
        });
        /**
         * Returns an ES6 iterator for the list.
         */
        Object.defineProperty(List.prototype, Symbol.iterator, {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var length, i;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            length = this._values.length;
                            i = 0;
                            _a.label = 1;
                        case 1:
                            if (!(i < length)) return [3 /*break*/, 4];
                            return [4 /*yield*/, this._values[i]];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3:
                            ++i;
                            return [3 /*break*/, 1];
                        case 4: return [2 /*return*/];
                    }
                });
            }
        });
        /**
         * Calls `f` for each element in the list.
         *
         * `f` should have at least one parameter defined which will get a current
         * item, with optional second argument - index.
         */
        Object.defineProperty(List.prototype, "each", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                each$1(this._values, f);
            }
        });
        /**
         * Calls `f` for each element in the list, from right to left.
         *
         * `f` should have at least one parameter defined which will get a current
         * item, with optional second argument - index.
         */
        Object.defineProperty(List.prototype, "eachReverse", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                eachReverse(this._values, f);
            }
        });
        return List;
    }());
    /**
     * A version of a [[List]] where the elements are disposed automatically when
     * removed from the list, unless `autoDispose` is set to `false`.
     */
    var ListAutoDispose = /** @class */ (function (_super) {
        __extends(ListAutoDispose, _super);
        function ListAutoDispose() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * Automatically disposes elements that are removed from the list.
             *
             * @default true
             */
            Object.defineProperty(_this, "autoDispose", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(_this, "_disposed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            return _this;
        }
        Object.defineProperty(ListAutoDispose.prototype, "_onSetIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, oldValue, newValue) {
                if (this.autoDispose) {
                    oldValue.dispose();
                }
                _super.prototype._onSetIndex.call(this, index, oldValue, newValue);
            }
        });
        Object.defineProperty(ListAutoDispose.prototype, "_onRemoveIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, oldValue) {
                if (this.autoDispose) {
                    oldValue.dispose();
                }
                _super.prototype._onRemoveIndex.call(this, index, oldValue);
            }
        });
        Object.defineProperty(ListAutoDispose.prototype, "_onClear", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (oldValues) {
                if (this.autoDispose) {
                    each$1(oldValues, function (x) {
                        x.dispose();
                    });
                }
                _super.prototype._onClear.call(this, oldValues);
            }
        });
        Object.defineProperty(ListAutoDispose.prototype, "isDisposed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._disposed;
            }
        });
        Object.defineProperty(ListAutoDispose.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._disposed) {
                    this._disposed = true;
                    if (this.autoDispose) {
                        each$1(this._values, function (x) {
                            x.dispose();
                        });
                    }
                }
            }
        });
        return ListAutoDispose;
    }(List));
    /**
     * A version of a [[List]] that is able to create new elements as well as
     * apply additional settings to newly created items.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/list-templates/} for more info
     */
    var ListTemplate = /** @class */ (function (_super) {
        __extends(ListTemplate, _super);
        function ListTemplate(template, make) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "template", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "make", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this.template = template;
            _this.make = make;
            return _this;
        }
        return ListTemplate;
    }(ListAutoDispose));

    /**
     * A version of [[List]] to hold children of the [[Container]].
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/} for more info
     */
    var Children = /** @class */ (function (_super) {
        __extends(Children, _super);
        function Children(container) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "_disposed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_container", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_events", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this._container = container;
            _this._events = _this.events.onAll(function (change) {
                if (change.type === "clear") {
                    each$1(change.oldValues, function (x) {
                        _this._onRemoved(x);
                    });
                }
                else if (change.type === "push") {
                    _this._onInserted(change.newValue);
                }
                else if (change.type === "setIndex") {
                    _this._onRemoved(change.oldValue);
                    _this._onInserted(change.newValue, change.index);
                }
                else if (change.type === "insertIndex") {
                    _this._onInserted(change.newValue, change.index);
                }
                else if (change.type === "removeIndex") {
                    _this._onRemoved(change.oldValue);
                }
                else if (change.type === "moveIndex") {
                    _this._onRemoved(change.value);
                    _this._onInserted(change.value, change.newIndex);
                }
                else {
                    throw new Error("Unknown IListEvent type");
                }
            });
            return _this;
        }
        Object.defineProperty(Children.prototype, "_onInserted", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (child, index) {
                child._setParent(this._container, true);
                var childrenDisplay = this._container._childrenDisplay;
                if (index === undefined) {
                    childrenDisplay.addChild(child._display);
                }
                else {
                    childrenDisplay.addChildAt(child._display, index);
                }
            }
        });
        Object.defineProperty(Children.prototype, "_onRemoved", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (child) {
                this._container._childrenDisplay.removeChild(child._display);
                this._container.markDirtyBounds();
                this._container.markDirty();
            }
        });
        /**
         * Returns `true` if obejct is disposed.
         */
        Object.defineProperty(Children.prototype, "isDisposed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._disposed;
            }
        });
        /**
         * Permanently dispose this object.
         */
        Object.defineProperty(Children.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._disposed) {
                    this._disposed = true;
                    this._events.dispose();
                    each$1(this.values, function (child) {
                        child.dispose();
                    });
                }
            }
        });
        return Children;
    }(List));

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */
    /**
     * Represents a relative value (percent).
     *
     * The Percent object, can be instantiated using two ways:
     *
     * * Via `new Percent(X)`.
     * * Via `am5.percent(X)`.
     *
     * You can also use shortcut functions for `0%`, `50%`, and `100%`:
     * * `am5.p0`
     * * `am5.p50`
     * * `am5.p1000`
     */
    var Percent = /** @class */ (function () {
        /**
         * Constructor.
         *
         * @param percent  Percent value
         */
        function Percent(percent) {
            /**
             * Value in percent.
             */
            Object.defineProperty(this, "_value", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this._value = percent;
        }
        Object.defineProperty(Percent.prototype, "value", {
            /**
             * Relative value.
             *
             * E.g. 100% is 1, 50% is 0.5, etc.
             *
             * This is useful to apply transformations to other values. E.g.:
             *
             * ```TypeScript
             * let value = 256;
             * let percent = new am5.p50;
             * console.log(value * percent.value); // outputs 128
             * ```
             * ```JavaScript
             * var value = 256;
             * var percent = new am5.p50;
             * console.log(value * percent.value); // outputs 128
             * ```
             *
             * Alternatively, you can use `am5.percent()` helper function:
             *
             * ```TypeScript
             * let value = 256;
             * let percent = am5.p50;
             * console.log(value * percent.value); // outputs 128
             * ```
             * ```JavaScript
             * var value = 256;
             * var percent = am5.p50;
             * console.log(value * percent.value); // outputs 128
             * ```
             *
             * @readonly
             * @return Relative value
             */
            get: function () {
                return this._value / 100;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Percent.prototype, "percent", {
            /**
             * Value in percent.
             *
             * @return Percent
             */
            get: function () {
                return this._value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Percent.prototype, "toString", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return "" + this._value + "%";
            }
        });
        Object.defineProperty(Percent.prototype, "interpolate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (min, max) {
                return min + (this.value * (max - min));
            }
        });
        Object.defineProperty(Percent, "normalize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (percent, min, max) {
                if (percent instanceof Percent) {
                    return percent;
                }
                else {
                    if (min === max) {
                        return new Percent(0);
                    }
                    else {
                        return new Percent(Math.min(Math.max((percent - min) * (1 / (max - min)), 0), 1) * 100);
                    }
                }
            }
        });
        return Percent;
    }());
    /**
     * Converts numeric percent value to a proper [[Percent]] object.
     *
     * ```TypeScript
     * pieSeries.set("radius", am5.percent(80));
     * ```
     * ```JavaScript
     * pieSeries.set("radius", am5.percent(80));
     * ```
     *
     * @param value  Percent
     * @return Percent object
     */
    function percent(value) {
        return new Percent(value);
    }
    /**
     * A shortcut function to `am5.percent(0)`.
     */
    var p0 = percent(0);
    /**
     * A shortcut function to `am5.percent(100)`.
     */
    var p100 = percent(100);
    /**
     * A shortcut function to `am5.percent(50)`.
     */
    var p50 = percent(50);

    function keys(object) {
        return Object.keys(object);
    }
    /**
     * Returns an array of object's property names ordered using specific ordering
     * function.
     *
     * @param object  Source object
     * @param order   Ordering function
     * @returns Object property names
     */
    function keysOrdered(object, order) {
        return keys(object).sort(order);
    }
    function copy$1(object) {
        return Object.assign({}, object);
    }
    function each(object, f) {
        keys(object).forEach(function (key) {
            f(key, object[key]);
        });
    }
    /**
     * Iterates through all properties of the object calling `fn` for each of them.
     *
     * If return value of the function evaluates to `false` further iteration is
     * cancelled.
     *
     * @param object  Source object
     * @param fn      Callback function
     */
    function eachContinue(object, fn) {
        for (var key in object) {
            if (hasKey(object, key)) {
                if (!fn(key, object[key])) {
                    break;
                }
            }
        }
    }
    /**
     * Orders object properties using custom `ord` function and iterates through
     * them calling `fn` for each of them.
     *
     * @param object  Source object
     * @param fn      Callback function
     * @param order   Ordering function
     */
    function eachOrdered(object, fn, ord) {
        each$1(keysOrdered(object, ord), function (key) {
            fn(key, object[key]);
        });
    }
    /**
     * Checks if `object` has a specific `key`.
     *
     * @param object  Source object
     * @param key     Property name
     * @returns Has key?
     */
    function hasKey(object, key) {
        return {}.hasOwnProperty.call(object, key);
    }
    /**
     * Copies all properties of one object to the other, omitting undefined, but only if property in target object doesn't have a value set.
     *
     * @param fromObject  Source object
     * @param toObject    Target object
     * @return Updated target object
     * @todo Maybe consolidate with utils.copy?
     */
    function softCopyProperties(source, target) {
        each(source, function (key, value) {
            // only if value is set
            //if ($type.hasValue(value) && !($type.hasValue((<any>target)[key]))) {
            if (value != null && target[key] == null) {
                target[key] = value;
            }
        });
        return target;
    }

    var Object$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        keys: keys,
        keysOrdered: keysOrdered,
        copy: copy$1,
        each: each,
        eachContinue: eachContinue,
        eachOrdered: eachOrdered,
        hasKey: hasKey,
        softCopyProperties: softCopyProperties
    });

    /**
     * ============================================================================
     * DOM FUNCTIONS
     * ============================================================================
     * @hidden
     */
    /**
     * Execute a function when DOM is ready.
     *
     * @since 5.0.2
     * @param  f  Callback
     */
    function ready(f) {
        if (document.readyState !== "loading") {
            f();
        }
        else {
            var listener_1 = function () {
                if (document.readyState !== "loading") {
                    document.removeEventListener("readystatechange", listener_1);
                    f();
                }
            };
            document.addEventListener("readystatechange", listener_1);
        }
    }
    /**
     * Removes a DOM element.
     * @param  el  Target element
     */
    function removeElement(el) {
        if (el.parentNode) {
            el.parentNode.removeChild(el);
        }
    }
    /**
     * Function that adds a disposable event listener directly to a DOM element.
     *
     * @ignore Exclude from docs
     * @param dom       A DOM element to add event to
     * @param type      Event type
     * @param listener  Event listener
     * @returns Disposable event
     */
    function addEventListener(dom, type, listener, options) {
        //@todo proper type check for options: EventListenerOptions | boolean (TS for some reason gives error on passive parameter)
        //console.log(type, dom);
        dom.addEventListener(type, listener, options || false);
        return new Disposer(function () {
            dom.removeEventListener(type, listener, options || false);
        });
    }
    /**
     * @ignore
     */
    function supports(cap) {
        switch (cap) {
            case "touchevents":
                //return "ontouchstart" in document.documentElement;
                return window.hasOwnProperty("TouchEvent");
            case "pointerevents":
                return window.hasOwnProperty("PointerEvent");
            case "mouseevents":
                return window.hasOwnProperty("MouseEvent");
            case "wheelevents":
                return window.hasOwnProperty("WheelEvent");
            case "keyboardevents":
                return window.hasOwnProperty("KeyboardEvent");
        }
        return false;
    }
    /**
     * @ignore
     */
    function getPointerId(event) {
        var id = event.pointerId || 0;
        //console.log(event);
        return id;
    }
    /**
     * Removes focus from any element by shifting focus to body.
     *
     * @ignore
     */
    function blur() {
        if (document.activeElement && document.activeElement != document.body) {
            if (document.activeElement.blur) {
                document.activeElement.blur();
            }
            else {
                var input = document.createElement("button");
                input.style.position = "fixed";
                input.style.top = "0px";
                input.style.left = "-10000px";
                document.body.appendChild(input);
                input.focus();
                input.blur();
                document.body.removeChild(input);
            }
        }
    }
    /**
     * Focuses element.
     *
     * @ignore
     */
    function focus(el) {
        if (el) {
            el.focus();
        }
    }
    /**
     * @ignore
     */
    function getRendererEvent(key) {
        if (supports("pointerevents")) {
            return key;
        }
        else if (supports("touchevents")) {
            switch (key) {
                case "pointerover": return "touchstart";
                case "pointerout": return "touchend";
                case "pointerdown": return "touchstart";
                case "pointermove": return "touchmove";
                case "pointerup": return "touchend";
                case "click": return "click";
                case "dblclick": return "dblclick";
            }
        }
        else if (supports("mouseevents")) {
            switch (key) {
                case "pointerover": return "mouseover";
                case "pointerout": return "mouseout";
                case "pointerdown": return "mousedown";
                case "pointermove": return "mousemove";
                case "pointerup": return "mouseup";
                case "click": return "click";
                case "dblclick": return "dblclick";
            }
        }
        return key;
    }
    /**
     * Determines if pointer event originated from a touch pointer or mouse.
     *
     * @param ev  Original event
     * @return Touch pointer?
     */
    function isTouchEvent(ev) {
        if (typeof Touch !== "undefined" && ev instanceof Touch) {
            return true;
        }
        else if (typeof PointerEvent !== "undefined" && ev instanceof PointerEvent && ev.pointerType != null) {
            switch (ev.pointerType) {
                case "touch":
                case "pen":
                case 2:
                    return true;
                case "mouse":
                case 4:
                    return false;
                default:
                    return !(ev instanceof MouseEvent);
            }
        }
        else if (ev.type != null) {
            if (ev.type.match(/^mouse/)) {
                return false;
            }
        }
        return true;
    }
    /**
     * Sets style property on DOM element.
     *
     * @ignore Exclude from docs
     */
    function setStyle(dom, property, value) {
        dom.style[property] = value;
    }
    function getStyle(dom, property) {
        return dom.style[property];
    }
    /**
     * Checks of element `a` contains element `b`.
     *
     * @param a  Aleged ascendant
     * @param b  Aleged descendant
     * @return Contains?
     */
    function contains(a, b) {
        var cursor = b;
        while (true) {
            if (a === cursor) {
                return true;
            }
            else if (cursor.parentNode === null) {
                // TODO better ShadowRoot detection
                if (cursor.host == null) {
                    return false;
                }
                else {
                    cursor = cursor.host;
                }
            }
            else {
                cursor = cursor.parentNode;
            }
        }
    }
    /**
     * Returns `true` if pointer event originated on an element within Root.
     *
     * @since 5.2.8
     * @param  event   Event
     * @param  target  Target element
     */
    function isLocalEvent(event, target) {
        return event.target && contains(target.root.dom, event.target);
    }
    /**
     * Disables or enables interactivity of a DOM element.
     *
     * @param  target       Target element
     * @param  interactive  Interactive?
     */
    function setInteractive(target, interactive) {
        if (interactive) {
            target.style.pointerEvents = "";
        }
        else {
            target.style.pointerEvents = "none";
        }
    }
    /**
     * Returns the shadow root of the element or null
     *
     * @param a  Node
     * @return Root
     */
    function getShadowRoot(a) {
        var cursor = a;
        while (true) {
            if (cursor.parentNode === null) {
                // TODO better ShadowRoot detection
                if (cursor.host != null) {
                    return cursor;
                }
                else {
                    return null;
                }
            }
            else {
                cursor = cursor.parentNode;
            }
        }
    }
    /**
     * [rootStylesheet description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    var rootStylesheet;
    /**
     * @ignore Exclude from docs
     */
    function createStylesheet(element, text, nonce) {
        if (nonce === void 0) { nonce = ""; }
        // TODO use createElementNS ?
        var e = document.createElement("style");
        e.type = "text/css";
        if (nonce != "") {
            e.setAttribute("nonce", nonce);
        }
        e.textContent = text;
        if (element === null) {
            document.head.appendChild(e);
        }
        else {
            element.appendChild(e);
        }
        return e;
    }
    /**
     * [getStylesheet description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @return [description]
     */
    function getStylesheet(element, nonce) {
        if (nonce === void 0) { nonce = ""; }
        if (element === null) {
            if (rootStylesheet == null) {
                // TODO use createElementNS ?
                var e = document.createElement("style");
                e.type = "text/css";
                if (nonce != "") {
                    e.setAttribute("nonce", nonce);
                }
                document.head.appendChild(e);
                rootStylesheet = e.sheet;
            }
            return rootStylesheet;
        }
        else {
            // TODO use createElementNS ?
            var e = document.createElement("style");
            e.type = "text/css";
            if (nonce != "") {
                e.setAttribute("nonce", nonce);
            }
            element.appendChild(e);
            return e.sheet;
        }
    }
    /**
     * [makeStylesheet description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param selector  [description]
     * @return [description]
     */
    function appendStylesheet(root, selector) {
        var index = root.cssRules.length;
        root.insertRule(selector + "{}", index);
        return root.cssRules[index];
    }
    /**
     * Defines a class for a CSS rule.
     *
     * Can be used to dynamically add CSS to the document.
     */
    var StyleRule = /** @class */ (function (_super) {
        __extends(StyleRule, _super);
        /**
         * Constructor.
         *
         * @param selector  CSS selector
         * @param styles    An object of style attribute - value pairs
         */
        function StyleRule(element, selector, styles, nonce) {
            if (nonce === void 0) { nonce = ""; }
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "_root", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * CSS rule.
             */
            Object.defineProperty(_this, "_rule", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this._root = getStylesheet(element, nonce);
            _this._rule = appendStylesheet(_this._root, selector);
            each(styles, function (key, value) {
                _this.setStyle(key, value);
            });
            return _this;
        }
        Object.defineProperty(StyleRule.prototype, "selector", {
            /**
             * @return CSS selector
             */
            get: function () {
                return this._rule.selectorText;
            },
            /**
             * A CSS selector text.
             *
             * E.g.: `.myClass p`
             *
             * @param selector  CSS selector
             */
            set: function (selector) {
                this._rule.selectorText = selector;
            },
            enumerable: false,
            configurable: true
        });
        // TODO test this
        Object.defineProperty(StyleRule.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                // TODO a bit hacky
                var index = indexOf(this._root.cssRules, this._rule);
                if (index === -1) {
                    throw new Error("Could not dispose StyleRule");
                }
                else {
                    // TODO if it's empty remove it from the DOM ?
                    this._root.deleteRule(index);
                }
            }
        });
        /**
         * Sets the same style properties with browser-specific prefixes.
         *
         * @param name   Attribute name
         * @param value  Attribute value
         */
        Object.defineProperty(StyleRule.prototype, "_setVendorPrefixName", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name, value) {
                var style = this._rule.style;
                style.setProperty("-webkit-" + name, value, "");
                style.setProperty("-moz-" + name, value, "");
                style.setProperty("-ms-" + name, value, "");
                style.setProperty("-o-" + name, value, "");
                style.setProperty(name, value, "");
            }
        });
        /**
         * Sets a value for specific style attribute.
         *
         * @param name   Attribute
         * @param value  Value
         */
        Object.defineProperty(StyleRule.prototype, "setStyle", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name, value) {
                if (name === "transition") {
                    this._setVendorPrefixName(name, value);
                }
                else {
                    this._rule.style.setProperty(name, value, "");
                }
            }
        });
        return StyleRule;
    }(DisposerClass));
    /**
     * Defines a class for an entire CSS style sheet.
     *
     * Can be used to dynamically add CSS to the document.
     */
    var StyleSheet = /** @class */ (function (_super) {
        __extends(StyleSheet, _super);
        /**
         * Constructor.
         *
         * @param text  CSS stylesheet
         */
        function StyleSheet(element, text, nonce) {
            if (nonce === void 0) { nonce = ""; }
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "_element", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this._element = createStylesheet(element, text, nonce);
            return _this;
        }
        Object.defineProperty(StyleSheet.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._element.parentNode) {
                    this._element.parentNode.removeChild(this._element);
                }
            }
        });
        return StyleSheet;
    }(DisposerClass));
    /**
     * Adds a class name to an HTML or SVG element.
     *
     * @ignore Exclude from docs
     * @param element    Element
     * @param className  Class name to add
     */
    function addClass(element, className) {
        if (!element) {
            return;
        }
        if (element.classList) {
            var classes = className.split(" ");
            each$1(classes, function (name) {
                element.classList.add(name);
            });
        }
        else {
            var currentClassName = element.getAttribute("class");
            if (currentClassName) {
                element.setAttribute("class", currentClassName.split(" ").filter(function (item) {
                    return item !== className;
                }).join(" ") + " " + className);
            }
            else {
                element.setAttribute("class", className);
            }
        }
    }
    /**
     * Removes a class name from an HTML or SVG element.
     *
     * @ignore Exclude from docs
     * @param element    Element
     * @param className  Class name to add
     */
    function removeClass(element, className) {
        if (!element) {
            return;
        }
        if (element.classList) {
            element.classList.remove(className);
        }
        else {
            var currentClassName = element.getAttribute("class");
            if (currentClassName) {
                element.setAttribute("class", currentClassName.split(" ").filter(function (item) {
                    return item !== className;
                }).join(" "));
            }
        }
    }
    // /**
    //  * Applies a set of styles to an element. Stores the original styles so they
    //  * can be restored later.
    //  *
    //  * @ignore
    //  * @param io      Element
    //   */
    // export function prepElementForDrag(dom: HTMLElement): void {
    // 	// @todo: save current values
    // 	// Define possible props
    // 	let props = [
    // 		"touchAction", "webkitTouchAction", "MozTouchAction", "MSTouchAction", "msTouchAction", "oTouchAction",
    // 		"userSelect", "webkitUserSelect", "MozUserSelect", "MSUserSelect", "msUserSelect", "oUserSelect",
    // 		"touchSelect", "webkitTouchSelect", "MozTouchSelect", "MSTouchSelect", "msTouchSelect", "oTouchSelect",
    // 		"touchCallout", "webkitTouchCallout", "MozTouchCallout", "MSTouchCallout", "msTouchCallout", "oTouchCallout",
    // 		"contentZooming", "webkitContentZooming", "MozContentZooming", "MSContentZooming", "msContentZooming", "oContentZooming",
    // 		"userDrag", "webkitUserDrag", "MozUserDrag", "MSUserDrag", "msUserDrag", "oUserDrag"
    // 	];
    // 	for (let i = 0; i < props.length; i++) {
    // 		if (props[i] in dom.style) {
    // 			setStyle(dom, props[i], "none");
    // 		}
    // 	}
    // 	// Remove iOS-specific selection;
    // 	setStyle(dom, "tapHighlightColor", "rgba(0, 0, 0, 0)");
    // }
    // /**
    //  * Restores replaced styles
    //  *
    //  * @ignore
    //  * @param  io  Element
    //  */
    // export function unprepElementForDrag(dom: HTMLElement): void {
    // 	// Define possible props
    // 	let props = [
    // 		"touchAction", "webkitTouchAction", "MozTouchAction", "MSTouchAction", "msTouchAction", "oTouchAction",
    // 		"userSelect", "webkitUserSelect", "MozUserSelect", "MSUserSelect", "msUserSelect", "oUserSelect",
    // 		"touchSelect", "webkitTouchSelect", "MozTouchSelect", "MSTouchSelect", "msTouchSelect", "oTouchSelect",
    // 		"touchCallout", "webkitTouchCallout", "MozTouchCallout", "MSTouchCallout", "msTouchCallout", "oTouchCallout",
    // 		"contentZooming", "webkitContentZooming", "MozContentZooming", "MSContentZooming", "msContentZooming", "oContentZooming",
    // 		"userDrag", "webkitUserDrag", "MozUserDrag", "MSUserDrag", "msUserDrag", "oUserDrag"
    // 	];
    // 	for (let i = 0; i < props.length; i++) {
    // 		if (props[i] in dom.style) {
    // 			setStyle(dom, props[i], "");
    // 		}
    // 	}
    // 	// Remove iOS-specific selection;
    // 	setStyle(dom, "tapHighlightColor", "");
    // }
    function iOS() {
        return /apple/i.test(navigator.vendor) && "ontouchend" in document;
    }
    function getSafeResolution() {
        return iOS() ? 1 : undefined;
    }
    function relativeToValue(percent, full) {
        if (isNumber(percent)) {
            return percent;
        }
        else if (percent != null && isNumber(percent.value) && isNumber(full)) {
            return full * percent.value;
        }
        else {
            return 0;
        }
    }
    /**
     * Returns number of decimals
     *
     * @ignore Exclude from docs
     * @param number  Input number
     * @return Number of decimals
     */
    function decimalPlaces(number) {
        var match = ('' + number).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
        if (!match) {
            return 0;
        }
        return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));
    }
    /**
     * ============================================================================
     * STRING FORMATTING FUNCTIONS
     * ============================================================================
     * @hidden
     */
    /**
     * Pads a string with additional characters to certain length.
     *
     * @param value  A numeric value
     * @param len    Result string length in characters
     * @param char   A character to use for padding
     * @return Padded value as string
     */
    function padString(value, len, char) {
        if (len === void 0) { len = 0; }
        if (char === void 0) { char = "0"; }
        if (typeof value !== "string") {
            value = value.toString();
        }
        return len > value.length ? Array(len - value.length + 1).join(char) + value : value;
    }
    function trimLeft(text) {
        return text.replace(/^[\s]*/, "");
    }
    function trimRight(text) {
        return text.replace(/[\s]*$/, "");
    }
    function trim(text) {
        return trimLeft(trimRight(text));
    }
    /**
     * Tries to determine format type.
     *
     * @ignore Exclude from docs
     * @param format  Format string
     * @return Format type ("string" | "number" | "date" | "duration")
     */
    function getFormat(format) {
        // Undefined?
        if (typeof format === "undefined") {
            return "string";
        }
        // Cleanup and lowercase format
        format = format.toLowerCase().replace(/^\[[^\]]*\]/, "");
        // Remove style tags
        format = format.replace(/\[[^\]]+\]/, "");
        // Trim
        format = format.trim();
        // Check for any explicit format hints (i.e. /Date)
        var hints = format.match(/\/(date|number|duration)$/);
        if (hints) {
            return hints[1];
        }
        // Check for explicit hints
        if (format === "number") {
            return "number";
        }
        if (format === "date") {
            return "date";
        }
        if (format === "duration") {
            return "duration";
        }
        // Detect number formatting symbols
        if (format.match(/[#0]/)) {
            return "number";
        }
        // Detect date formatting symbols
        if (format.match(/[ymwdhnsqaxkzgtei]/)) {
            return "date";
        }
        // Nothing? Let's display as string
        return "string";
    }
    /**
     * Cleans up format:
     * * Strips out formatter hints
     *
     * @ignore Exclude from docs
     * @param format  Format
     * @return Cleaned format
     */
    function cleanFormat(format) {
        return format.replace(/\/(date|number|duration)$/i, "");
    }
    /**
     * Strips all tags from the string.
     *
     * @param text  Source string
     * @return String without tags
     */
    function stripTags(text) {
        return text ? text.replace(/<[^>]*>/g, "") : text;
    }
    /**
     * Removes new lines and tags from a string.
     *
     * @param text  String to conver
     * @return Converted string
     */
    function plainText(text) {
        return text ? stripTags(("" + text).replace(/[\n\r]+/g, ". ")) : text;
    }
    /**
     * Escapes string so it can safely be used in a Regex.
     *
     * @param value  Unsescaped string
     * @return Escaped string
     */
    function escapeForRgex(value) {
        return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
    }
    /**
     * ============================================================================
     * DATE-RELATED FUNCTIONS
     * ============================================================================
     * @hidden
     */
    /**
     * Returns a year day.
     *
     * @param date  Date
     * @param utc   Assume UTC dates?
     * @return Year day
     * @todo Account for UTC
     */
    function getYearDay(date, utc) {
        var start = new Date(date.getFullYear(), 0, 0);
        var diff = (date.getTime() - start.getTime()) + ((start.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000);
        var oneDay = 1000 * 60 * 60 * 24;
        return Math.floor(diff / oneDay);
    }
    /**
     * Returns week number for a given date.
     *
     * @param date  Date
     * @param utc   Assume UTC dates?
     * @return Week number
     * @todo Account for UTC
     */
    function getWeek(date, _utc) {
        var d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
        var day = d.getUTCDay() || 7;
        d.setUTCDate(d.getUTCDate() + 4 - day);
        var firstDay = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
        return Math.ceil((((d.getTime() - firstDay.getTime()) / 86400000) + 1) / 7);
    }
    /**
     * Returns a week number in the month.
     *
     * @param date  Source Date
     * @param utc   Assume UTC dates?
     * @return Week number in month
     */
    function getMonthWeek(date, utc) {
        var firstWeek = getWeek(new Date(date.getFullYear(), date.getMonth(), 1));
        var currentWeek = getWeek(date);
        if (currentWeek == 1) {
            currentWeek = 53;
        }
        return currentWeek - firstWeek + 1;
    }
    /**
     * Returns a year day out of the given week number.
     *
     * @param week     Week
     * @param year     Year
     * @param weekday  Weekday
     * @param utc      Assume UTC dates
     * @return Day in a year
     */
    function getDayFromWeek(week, year, weekday, utc) {
        if (weekday === void 0) { weekday = 1; }
        if (utc === void 0) { utc = false; }
        var date = new Date(year, 0, 4, 0, 0, 0, 0);
        if (utc) {
            date.setUTCFullYear(year);
        }
        var day = week * 7 + weekday - ((date.getDay() || 7) + 3);
        return day;
    }
    /**
     * Returns 12-hour representation out of the 24-hour hours.
     *
     * @param hours  24-hour number
     * @return 12-hour number
     */
    function get12Hours(hours, base) {
        if (hours > 12) {
            hours -= 12;
        }
        else if (hours === 0) {
            hours = 12;
        }
        return base != null ? hours + (base - 1) : hours;
    }
    /**
     * Returns a string name of the time zone.
     *
     * @param date     Date object
     * @param long     Should return long ("Pacific Standard Time") or short abbreviation ("PST")
     * @param savings  Include information if it's in daylight savings mode
     * @param utc      Assume UTC dates
     * @return Time zone name
     */
    function getTimeZone(date, long, savings, utc) {
        if (long === void 0) { long = false; }
        if (savings === void 0) { savings = false; }
        if (utc === void 0) { utc = false; }
        if (utc) {
            return long ? "Coordinated Universal Time" : "UTC";
        }
        var wotz = date.toLocaleString("UTC");
        var wtz = date.toLocaleString("UTC", { timeZoneName: long ? "long" : "short" }).substr(wotz.length);
        //wtz = wtz.replace(/[+-]+[0-9]+$/, "");
        if (savings === false) {
            wtz = wtz.replace(/ (standard|daylight|summer|winter) /i, " ");
        }
        return wtz;
    }
    function capitalizeFirst(text) {
        return text.charAt(0).toUpperCase() + text.slice(1);
    }
    /**
     * The functions below are taken and adapted from Garry Tan's blog post:
     * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
     *
     * The further attributions go mjijackson.com, which now seems to be defunct.
     */
    /**
     * Converts an HSL color value to RGB. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
     * Assumes h, s, and l are contained in the set [0, 1] and
     * returns r, g, and b in the set [0, 255].
     *
     * Function adapted from:
     * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
     *
     * @ignore Exclude from docs
     * @param h       The hue
     * @param s       The saturation
     * @param l       The lightness
     * @return The RGB representation
     */
    function hslToRgb(color) {
        var r, g, b;
        var h = color.h;
        var s = color.s;
        var l = color.l;
        if (s == 0) {
            r = g = b = l; // achromatic
        }
        else {
            var hue2rgb = function hue2rgb(p, q, t) {
                if (t < 0) {
                    t += 1;
                }
                if (t > 1) {
                    t -= 1;
                }
                if (t < 1 / 6) {
                    return p + (q - p) * 6 * t;
                }
                if (t < 1 / 2) {
                    return q;
                }
                if (t < 2 / 3) {
                    return p + (q - p) * (2 / 3 - t) * 6;
                }
                return p;
            };
            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
        }
        return {
            r: Math.round(r * 255),
            g: Math.round(g * 255),
            b: Math.round(b * 255)
        };
    }
    /**
     * Converts an RGB color value to HSL. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
     * Assumes r, g, and b are contained in the set [0, 255] and
     * returns h, s, and l in the set [0, 1].
     *
     * Function adapted from:
     * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
     *
     * @ignore Exclude from docs
     * @param r       The red color value
     * @param g       The green color value
     * @param b       The blue color value
     * @return The HSL representation
     */
    function rgbToHsl(color) {
        var r = color.r / 255;
        var g = color.g / 255;
        var b = color.b / 255;
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var h = 0;
        var s = 0;
        var l = (max + min) / 2;
        if (max === min) {
            h = s = 0; // achromatic
        }
        else {
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
                case r:
                    h = (g - b) / d + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / d + 2;
                    break;
                case b:
                    h = (r - g) / d + 4;
                    break;
            }
            h /= 6;
        }
        return {
            h: h,
            s: s,
            l: l
        };
    }
    /**
     * Returns a color that is `percent` brighter than the reference color.
     *
     * @ignore Exclude from docs
     * @param color    Reference color
     * @param percent  Brightness percent
     * @return Hex code of the new color
     */
    function lighten(rgb, percent) {
        if (rgb) {
            return {
                r: Math.max(0, Math.min(255, rgb.r + getLightnessStep(rgb.r, percent))),
                g: Math.max(0, Math.min(255, rgb.g + getLightnessStep(rgb.g, percent))),
                b: Math.max(0, Math.min(255, rgb.b + getLightnessStep(rgb.b, percent))),
                a: rgb.a
            };
        }
        else {
            // TODO is this correct ?
            return rgb;
        }
    }
    /**
     * Gets lightness step.
     *
     * @ignore Exclude from docs
     * @param value    Value
     * @param percent  Percent
     * @return Step
     */
    function getLightnessStep(value, percent) {
        var base = percent > 0 ? 255 - value : value;
        return Math.round(base * percent);
    }
    /**
     * Returns a color that is `percent` brighter than the source `color`.
     *
     * @ignore Exclude from docs
     * @param color    Source color
     * @param percent  Brightness percent
     * @return New color
     */
    function brighten(rgb, percent) {
        if (rgb) {
            var base = Math.min(Math.max(rgb.r, rgb.g, rgb.b), 230);
            //let base = Math.max(rgb.r, rgb.g, rgb.b);
            var step = getLightnessStep(base, percent);
            return {
                r: Math.max(0, Math.min(255, Math.round(rgb.r + step))),
                g: Math.max(0, Math.min(255, Math.round(rgb.g + step))),
                b: Math.max(0, Math.min(255, Math.round(rgb.b + step))),
                a: rgb.a
            };
        }
        else {
            // TODO is this correct ?
            return rgb;
        }
    }
    /**
     * Returns brightness step.
     *
     * @ignore Exclude from docs
     * @param value    Value
     * @param percent  Percent
     * @return Step
     */
    function getBrightnessStep(_value, percent) {
        var base = 255; //percent > 0 ? 255 - value : value;
        return Math.round(base * percent);
    }
    /**
     * Returns `true` if color is "light". Useful indetermining which contrasting
     * color to use for elements over this color. E.g.: you would want to use
     * black text over light background, and vice versa.
     *
     * @ignore Exclude from docs
     * @param color  Source color
     * @return Light?
     */
    function isLight(color) {
        return ((color.r * 299) + (color.g * 587) + (color.b * 114)) / 1000 >= 128;
    }
    /**
     * Returns a new [[iRGB]] object based on `rgb` parameter with specific
     * saturation applied.
     *
     * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully
     * saturated).
     *
     * @ignore Exclude from docs
     * @param color       Base color
     * @param saturation  Saturation (0-1)
     * @return New color
     */
    function saturate(rgb, saturation) {
        if (rgb === undefined || saturation == 1) {
            return rgb;
        }
        var hsl = rgbToHsl(rgb);
        hsl.s = saturation;
        return hslToRgb(hsl);
    }
    function alternativeColor(color, lightAlternative, darkAlternative) {
        if (lightAlternative === void 0) { lightAlternative = { r: 255, g: 255, b: 255 }; }
        if (darkAlternative === void 0) { darkAlternative = { r: 255, g: 255, b: 255 }; }
        var light = lightAlternative;
        var dark = darkAlternative;
        if (isLight(darkAlternative)) {
            light = darkAlternative;
            dark = lightAlternative;
        }
        return isLight(color) ? dark : light;
    }
    /**
     * @ignore
     * @deprecated
     */
    // export function unshiftThemeClass(settings: any, themeClass: string) {
    // 	let themeClasses = settings.themeClasses;
    // 	if (!themeClasses) {
    // 		themeClasses = [];
    // 	}
    // 	themeClasses.unshift(themeClass);
    // 	settings.themeClasses = themeClasses;
    // }
    /**
     * @ignore
     * @deprecated
     */
    // export function pushThemeClass(settings: any, themeClass: string) {
    // 	let themeClasses = settings.themeClasses;
    // 	if (!themeClasses) {
    // 		themeClasses = [];
    // 	}
    // 	themeClasses.push(themeClass);
    // 	settings.themeClasses = themeClasses;
    // }
    /**
     * @ignore
     */
    function mergeTags(tags1, tags2) {
        if (!tags1) {
            tags1 = [];
        }
        return __spreadArray(__spreadArray([], __read(tags1), false), __read(tags2), false).filter(function (value, index, self) {
            return self.indexOf(value) === index;
        });
    }
    /**
     * @ignore
     */
    function sameBounds(a, b) {
        if (!b) {
            return false;
        }
        if (a.left != b.left) {
            return false;
        }
        if (a.right != b.right) {
            return false;
        }
        if (a.top != b.top) {
            return false;
        }
        if (a.bottom != b.bottom) {
            return false;
        }
        return true;
    }

    var Utils = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ready: ready,
        removeElement: removeElement,
        addEventListener: addEventListener,
        supports: supports,
        getPointerId: getPointerId,
        blur: blur,
        focus: focus,
        getRendererEvent: getRendererEvent,
        isTouchEvent: isTouchEvent,
        setStyle: setStyle,
        getStyle: getStyle,
        contains: contains,
        isLocalEvent: isLocalEvent,
        setInteractive: setInteractive,
        getShadowRoot: getShadowRoot,
        StyleRule: StyleRule,
        StyleSheet: StyleSheet,
        addClass: addClass,
        removeClass: removeClass,
        iOS: iOS,
        getSafeResolution: getSafeResolution,
        relativeToValue: relativeToValue,
        decimalPlaces: decimalPlaces,
        padString: padString,
        trimLeft: trimLeft,
        trimRight: trimRight,
        trim: trim,
        getFormat: getFormat,
        cleanFormat: cleanFormat,
        stripTags: stripTags,
        plainText: plainText,
        escapeForRgex: escapeForRgex,
        getYearDay: getYearDay,
        getWeek: getWeek,
        getMonthWeek: getMonthWeek,
        getDayFromWeek: getDayFromWeek,
        get12Hours: get12Hours,
        getTimeZone: getTimeZone,
        capitalizeFirst: capitalizeFirst,
        hslToRgb: hslToRgb,
        rgbToHsl: rgbToHsl,
        lighten: lighten,
        getLightnessStep: getLightnessStep,
        brighten: brighten,
        getBrightnessStep: getBrightnessStep,
        isLight: isLight,
        saturate: saturate,
        alternativeColor: alternativeColor,
        mergeTags: mergeTags,
        sameBounds: sameBounds
    });

    /**
     * @ignore
     */
    function string2hex(string) {
        //string = cssColorNames[string.toLowerCase()] || string;
        if (string[0] === "#") {
            string = string.substr(1);
        }
        if (string.length == 3) {
            string = string[0].repeat(2) + string[1].repeat(2) + string[2].repeat(2);
        }
        return parseInt(string, 16);
    }
    /**
     * @ignore
     */
    function rgba2hex(color) {
        color = color.replace(/[ ]/g, "");
        // Init
        var matches = color.match(/^rgb\(([0-9]*),([0-9]*),([0-9]*)\)/i);
        // Try rgb() format
        if (matches) {
            matches.push("1");
        }
        else {
            matches = color.match(/^rgba\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\)/i);
            if (!matches) {
                return 0x000000;
            }
        }
        var hex = "";
        for (var i = 1; i <= 3; i++) {
            var val = parseInt(matches[i]).toString(16);
            if (val.length == 1) {
                val = "0" + val;
            }
            hex += val;
        }
        return string2hex(hex);
    }
    /**
     * Returns a new [[Color]] object base on input.
     *
     * Accepts parameters in CSS hex or rgb/rtba strings, or hex numbers.
     *
     * * `"#f00"`
     * * `"#ff0000"`
     * * `"rgb(255, 0, 0)"`
     * * `"rgba(255, 0, 0, 1)"`
     * * `0xff0000`
     *
     * @param   input  Input color
     * @return         Color
     */
    function color(input) {
        return Color.fromAny(input);
    }
    /**
     * Wherever color needs to be specified in amCharts 5, `Color` object needs to
     * be used.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/} for more info
     * @important
     */
    var Color = /** @class */ (function () {
        function Color(hex) {
            Object.defineProperty(this, "_hex", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this._hex = hex | 0;
        }
        Object.defineProperty(Color.prototype, "hex", {
            /**
             * Color numeric value.
             */
            get: function () {
                return this._hex;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Color.prototype, "r", {
            /**
             * Value of color's R channel.
             * @return R value
             */
            get: function () {
                return this._hex >>> 16;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Color.prototype, "g", {
            /**
             * Value of color's G channel.
             * @return G value
             */
            get: function () {
                return (this._hex >> 8) & 0xFF;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Color.prototype, "b", {
            /**
             * Value of color's B channel.
             * @return B value
             */
            get: function () {
                return this._hex & 0xFF;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns color CSS representation in form of `rgba(r, g, b, a)` string.
         *
         * @param   alpha  Opacity
         * @return         CSS string
         */
        Object.defineProperty(Color.prototype, "toCSS", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (alpha) {
                if (alpha === void 0) { alpha = 1; }
                return "rgba(" + this.r + ", " + this.g + ", " + this.b + ", " + alpha + ")";
            }
        });
        /**
         * Returns color CSS representation in form of `#rgb` string.
         *
         * @return         CSS string
         */
        Object.defineProperty(Color.prototype, "toCSSHex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return "#" + padString(this.r.toString(16), 2) + padString(this.g.toString(16), 2) + padString(this.b.toString(16), 2);
            }
        });
        /**
         * Returns color's HSL info.
         * @param   alpha Opacity
         * @return        HSL info
         */
        Object.defineProperty(Color.prototype, "toHSL", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (alpha) {
                if (alpha === void 0) { alpha = 1; }
                return rgbToHsl({
                    r: this.r,
                    g: this.g,
                    b: this.b,
                    a: alpha
                });
            }
        });
        /**
         * Converts HSL values into a new [[Color]] object.
         *
         * @param   h H value
         * @param   s S value
         * @param   l L value
         * @return    Color object
         */
        Object.defineProperty(Color, "fromHSL", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (h, s, l) {
                var rgb = hslToRgb({
                    h: h,
                    s: s,
                    l: l
                });
                return this.fromRGB(rgb.r, rgb.g, rgb.b);
            }
        });
        Object.defineProperty(Color.prototype, "toString", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.toCSSHex();
            }
        });
        /**
         * Converts hex number into a new [[Color]] object.
         *
         * ```TypeScript
         * Color.fromHex(0xff0000) // red
         * ```
         * ```JavaScript
         * Color.fromHex(0xff0000) // red
         * ```
         *
         * @param   hex  Hex color
         * @return       Color
         */
        Object.defineProperty(Color, "fromHex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (hex) {
                return new Color(hex);
            }
        });
        /**
         * Converts RGB values to a new [[Color]] object.
         *
         * @param   r  R value
         * @param   g  G value
         * @param   b  B value
         * @return     Color
         */
        Object.defineProperty(Color, "fromRGB", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (r, g, b) {
                return new Color((b | 0) + (g << 8) + (r << 16));
            }
        });
        /**
         * Converts RGB string to a new [[Color]] object.
         *
         * ```TypeScript
         * Color.fromString("#ff0000") // red
         * ```
         * ```JavaScript
         * Color.fromString("#ff0000") // red
         * ```
         *
         * @param   s  RGB string
         * @return     Color
         */
        Object.defineProperty(Color, "fromString", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (s) {
                return new Color(string2hex(s));
            }
        });
        /**
         * Converts CSS rgba() syntax to a new [[Color]] object.
         *
         * ```TypeScript
         * Color.fromCSS("rgba(255, 0, 0, 1)") // red
         * ```
         * ```JavaScript
         * Color.fromCSS("rgba(255, 0, 0, 1)") // red
         * ```
         *
         * @param  {string} s [description]
         * @return {Color}    [description]
         */
        Object.defineProperty(Color, "fromCSS", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (s) {
                return new Color(rgba2hex(s));
            }
        });
        /**
         * Convert to color from virtually anything.
         *
         * Will throw an exception if unable to resolve the color.
         *
         * @param   s  Source
         * @return     Color
         */
        Object.defineProperty(Color, "fromAny", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (s) {
                if (isString(s)) {
                    if (s[0] == "#") {
                        return Color.fromString(s);
                    }
                    else if (s.substr(0, 3) == "rgb") {
                        return Color.fromCSS(s);
                    }
                }
                else if (isNumber(s)) {
                    return Color.fromHex(s);
                }
                else if (s instanceof Color) {
                    return Color.fromHex(s.hex);
                }
                throw new Error("Unknown color syntax: " + s);
            }
        });
        /**
         * Returns a new [[Color]] object based on either `lightAlternative` or
         * `darkAlternative` depending on which one is more contrasting with
         * the `color`.
         *
         * @param   color             Reference color
         * @param   lightAlternative  Light color
         * @param   darkAlternative   Dark color
         * @return                    Alternative color
         */
        Object.defineProperty(Color, "alternative", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (color, lightAlternative, darkAlternative) {
                var rgb = alternativeColor({ r: color.r, g: color.g, b: color.b }, lightAlternative ? { r: lightAlternative.r, g: lightAlternative.g, b: lightAlternative.b } : undefined, darkAlternative ? { r: darkAlternative.r, g: darkAlternative.g, b: darkAlternative.b } : undefined);
                return this.fromRGB(rgb.r, rgb.g, rgb.b);
            }
        });
        /**
         * Returns an intermediate Color between two reference colors depending on
         * the progress (`diff`) between the two.
         *
         * @param   diff  Progress
         * @param   from  Source color
         * @param   to    Target color
         * @param   mode  Interpolation mode
         * @return        Color
         */
        Object.defineProperty(Color, "interpolate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (diff, from, to, mode) {
                if (mode === void 0) { mode = "rgb"; }
                if (mode == "hsl") {
                    var fromHSL = from.toHSL();
                    var toHSL = to.toHSL();
                    return Color.fromHSL(range(diff, fromHSL.h, toHSL.h), range(diff, fromHSL.s, toHSL.s), range(diff, fromHSL.l, toHSL.l));
                }
                else {
                    return Color.fromRGB(range(diff, from.r, to.r), range(diff, from.g, to.g), range(diff, from.b, to.b));
                }
            }
        });
        /**
         * Returns a new [[Color]] lightened by `percent` value.
         *
         * Use negative value to darken the color.
         *
         * @param   color    Source color
         * @param   percent  Percent
         * @return           New color
         */
        Object.defineProperty(Color, "lighten", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (color, percent) {
                var rgb = lighten({ r: color.r, g: color.g, b: color.b }, percent);
                return Color.fromRGB(rgb.r, rgb.g, rgb.b);
            }
        });
        /**
         * Returns a new [[Color]] brightened by `percent` value.
         *
         * Use negative value to dim the color.
         *
         * @param   color    Source color
         * @param   percent  Percent
         * @return           New color
         */
        Object.defineProperty(Color, "brighten", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (color, percent) {
                var rgb = brighten({ r: color.r, g: color.g, b: color.b }, percent);
                return Color.fromRGB(rgb.r, rgb.g, rgb.b);
            }
        });
        /**
         * Returns a new [[Color]] saturated by `percent` value.
         *
         * Use negative value to desaturate the color.
         *
         * @param   color    Source color
         * @param   percent  Percent
         * @return           New color
         */
        Object.defineProperty(Color, "saturate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (color, percent) {
                var rgb = saturate({ r: color.r, g: color.g, b: color.b }, percent);
                return Color.fromRGB(rgb.r, rgb.g, rgb.b);
            }
        });
        return Color;
    }());

    /**
     * @ignore
     */
    function waitForAnimations(animations) {
        return __awaiter(this, void 0, void 0, function () {
            var promises_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(animations !== undefined)) return [3 /*break*/, 2];
                        promises_1 = [];
                        each(animations, function (_, animation) {
                            promises_1.push(animation.waitForStop());
                        });
                        return [4 /*yield*/, Promise.all(promises_1)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * @ignore
     */
    function range(diff, from, to) {
        return from + (diff * (to - from));
    }
    /**
     * @ignore
     */
    function defaultInterpolate(diff, from, to) {
        if (diff >= 1) {
            return to;
        }
        else {
            return from;
        }
    }
    /**
     * @ignore
     */
    function percentInterpolate(diff, from, to) {
        return new Percent(range(diff, from.percent, to.percent));
    }
    /**
     * @ignore
     */
    function colorInterpolate(diff, from, to) {
        return Color.interpolate(diff, from, to);
    }
    /**
     * @ignore
     */
    function getInterpolate(from, to) {
        if (typeof from === "number" && typeof to === "number") {
            return range;
        }
        if (from instanceof Percent && to instanceof Percent) {
            return percentInterpolate;
        }
        if (from instanceof Color && to instanceof Color) {
            return colorInterpolate;
        }
        return defaultInterpolate;
    }
    /*export class AnimationValue extends AnimationTime {
        public _min: number;
        public _max: number;

        constructor(entity: Entity, duration: number, min: number, max: number) {
            super(entity, duration);
            this._min = min;
            this._max = max;
        }

        public get min(): number {
            return this._min;
        }

        public set min(value: number) {
            if (this._min !== value) {
                this._min = value;
                this._entity.markDirty();
            }
        }

        public get max(): number {
            return this._max;
        }

        public set max(value: number) {
            if (this._max !== value) {
                this._max = value;
                this._entity.markDirty();
            }
        }

        public currentValue(): number {
            return range(super.currentTime(), this._min, this._max);
        }

        public jumpToValue(value: number) {
            super.jumpToTime(normalize(value, this._min, this._max));
        }

        public tweenToValue(value: number) {
            super.tweenToTime(normalize(value, this._min, this._max));
        }
    }
    */

    /**
     * ============================================================================
     * CONSTANTS
     * ============================================================================
     * @hidden
     */
    var PI = Math.PI;
    var HALFPI = PI / 2;
    var RADIANS = PI / 180;
    var DEGREES = 180 / PI;
    /**
     * Rounds the numeric value to whole number or specific precision of set.
     *
     * @param value      Value
     * @param precision  Precision (number of decimal points)
     * @param floor  In case value ends with 0.5 and precision is 0, we might need to floor the value instead of ceiling it.
     * @return Rounded value
     */
    function round$1(value, precision, floor) {
        if (!isNumber(precision) || precision <= 0) {
            var rounded = Math.round(value);
            if (floor) {
                if (rounded - value == 0.5) {
                    rounded--;
                }
            }
            return rounded;
        }
        else {
            var d = Math.pow(10, precision);
            return Math.round(value * d) / d;
        }
    }
    /**
     * Ceils the numeric value to whole number or specific precision of set.
     *
     * @param value      Value
     * @param precision  Precision (number of decimal points)
     * @return Rounded value
     */
    function ceil(value, precision) {
        if (!isNumber(precision) || precision <= 0) {
            return Math.ceil(value);
        }
        else {
            var d = Math.pow(10, precision);
            return Math.ceil(value * d) / d;
        }
    }
    /**
     * [getCubicControlPointA description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param p0        [description]
     * @param p1        [description]
     * @param p2        [description]
     * @param p3        [description]
     * @param tensionX  [description]
     * @param tensionY  [description]
     * @return [description]
     */
    function getCubicControlPointA(p0, p1, p2, tensionX, tensionY) {
        return { x: ((-p0.x + p1.x / tensionX + p2.x) * tensionX), y: ((-p0.y + p1.y / tensionY + p2.y) * tensionY) };
    }
    /**
     * [getCubicControlPointB description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param p0        [description]
     * @param p1        [description]
     * @param p2        [description]
     * @param p3        [description]
     * @param tensionX  [description]
     * @param tensionY  [description]
     * @return [description]
     */
    function getCubicControlPointB(p1, p2, p3, tensionX, tensionY) {
        return { x: ((p1.x + p2.x / tensionX - p3.x) * tensionX), y: ((p1.y + p2.y / tensionY - p3.y) * tensionY) };
    }
    function fitToRange(value, min, max) {
        return Math.min(Math.max(value, min), max);
    }
    /**
     * Returns sine of an angle specified in degrees.
     *
     * @param value  Value
     * @return Sine
     */
    function sin$1(angle) {
        return Math.sin(RADIANS * angle);
    }
    /**
     * Returns tan of an angle specified in degrees.
     *
     * @param value  Value
     * @return Sine
     */
    function tan(angle) {
        return Math.tan(RADIANS * angle);
    }
    /**
     * Returns cosine of an angle specified in degrees.
     *
     * @param value  Value
     * @return Cosine
     */
    function cos$1(angle) {
        return Math.cos(RADIANS * angle);
    }
    // 0 to 360
    function normalizeAngle(value) {
        value = value % 360;
        if (value < 0) {
            value += 360;
        }
        return value;
    }
    // TODO this doesn't work properly for skewing, and it's probably broken for rotation too
    function getArcBounds(cx, cy, startAngle, endAngle, radius) {
        var minX = Number.MAX_VALUE;
        var minY = Number.MAX_VALUE;
        var maxX = -Number.MAX_VALUE;
        var maxY = -Number.MAX_VALUE;
        var bpoints = [];
        bpoints.push(getArcPoint(radius, startAngle));
        bpoints.push(getArcPoint(radius, endAngle));
        var fromAngle = Math.min(Math.floor(startAngle / 90) * 90, Math.floor(endAngle / 90) * 90);
        var toAngle = Math.max(Math.ceil(startAngle / 90) * 90, Math.ceil(endAngle / 90) * 90);
        for (var angle = fromAngle; angle <= toAngle; angle += 90) {
            if (angle >= startAngle && angle <= endAngle) {
                bpoints.push(getArcPoint(radius, angle));
            }
        }
        for (var i = 0; i < bpoints.length; i++) {
            var pt = bpoints[i];
            if (pt.x < minX) {
                minX = pt.x;
            }
            if (pt.y < minY) {
                minY = pt.y;
            }
            if (pt.x > maxX) {
                maxX = pt.x;
            }
            if (pt.y > maxY) {
                maxY = pt.y;
            }
        }
        return ({ left: cx + minX, top: cy + minY, right: cx + maxX, bottom: cy + maxY });
    }
    /**
     * Returns point on arc
     *
     * @param center point
     * @param radius
     * @param arc
     * @return {boolean}
     */
    function getArcPoint(radius, arc) {
        return ({ x: radius * cos$1(arc), y: radius * sin$1(arc) });
    }
    function mergeBounds(bounds) {
        var len = bounds.length;
        if (len > 0) {
            var bound = bounds[0];
            var left = bound.left;
            var top_1 = bound.top;
            var right = bound.right;
            var bottom = bound.bottom;
            if (len > 1) {
                for (var i = 1; i < len; i++) {
                    bound = bounds[i];
                    left = Math.min(bound.left, left);
                    right = Math.max(bound.right, right);
                    top_1 = Math.min(bound.top, top_1);
                    bottom = Math.max(bound.bottom, bottom);
                }
            }
            return { left: left, right: right, top: top_1, bottom: bottom };
        }
        return { left: 0, right: 0, top: 0, bottom: 0 };
    }
    function fitAngleToRange(value, startAngle, endAngle) {
        if (startAngle > endAngle) {
            var temp = startAngle;
            startAngle = endAngle;
            endAngle = temp;
        }
        value = normalizeAngle(value);
        var count = (startAngle - normalizeAngle(startAngle)) / 360;
        if (value < startAngle) {
            value += 360 * (count + 1);
        }
        var maxEnd = startAngle + (endAngle - startAngle) / 2 + 180;
        var maxStart = startAngle + (endAngle - startAngle) / 2 - 180;
        if (value > endAngle) {
            if (value - 360 > startAngle) {
                value -= 360;
            }
            else {
                if (value < maxEnd) {
                    value = endAngle;
                }
                else {
                    value = startAngle;
                }
            }
        }
        if (value < startAngle) {
            if (value > maxStart) {
                value = startAngle;
            }
            else {
                value = endAngle;
            }
        }
        return value;
    }
    function inBounds(point, bounds) {
        if (point.x >= bounds.left && point.y >= bounds.top && point.x <= bounds.right && point.y <= bounds.bottom) {
            return true;
        }
        return false;
    }
    function getAngle(point1, point2) {
        if (!point2) {
            point2 = { x: point1.x * 2, y: point1.y * 2 };
        }
        var diffX = point2.x - point1.x;
        var diffY = point2.y - point1.y;
        var angle = Math.atan2(diffY, diffX) * DEGREES;
        if (angle < 0) {
            angle += 360;
        }
        return normalizeAngle(angle);
    }
    /**
     * [getPointOnQuadraticCurve description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param pointA        [description]
     * @param pointB        [description]
     * @param controlPoint  [description]
     * @param position      [description]
     * @return [description]
     */
    function getPointOnQuadraticCurve(pointA, pointB, controlPoint, position) {
        var x = (1 - position) * (1 - position) * pointA.x + 2 * (1 - position) * position * controlPoint.x + position * position * pointB.x;
        var y = (1 - position) * (1 - position) * pointA.y + 2 * (1 - position) * position * controlPoint.y + position * position * pointB.y;
        return { x: x, y: y };
    }
    function getPointOnLine(pointA, pointB, position) {
        return { x: pointA.x + (pointB.x - pointA.x) * position, y: pointA.y + (pointB.y - pointA.y) * position };
    }
    /**
     * Returns the closest value from the array of values to the reference value.
     *
     * @param values  Array of values
     * @param value   Reference value
     * @return Closes value from the array
     */
    function closest(values, referenceValue) {
        return values.reduce(function (prev, curr) {
            return (Math.abs(curr - referenceValue) < Math.abs(prev - referenceValue) ? curr : prev);
        });
    }
    function boundsOverlap(bounds1, bounds2) {
        return !(bounds1.bottom < bounds2.top || bounds2.bottom < bounds1.top || bounds1.right < bounds2.left || bounds2.right < bounds1.left);
    }

    var Math$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        PI: PI,
        HALFPI: HALFPI,
        RADIANS: RADIANS,
        DEGREES: DEGREES,
        round: round$1,
        ceil: ceil,
        getCubicControlPointA: getCubicControlPointA,
        getCubicControlPointB: getCubicControlPointB,
        fitToRange: fitToRange,
        sin: sin$1,
        tan: tan,
        cos: cos$1,
        normalizeAngle: normalizeAngle,
        getArcBounds: getArcBounds,
        getArcPoint: getArcPoint,
        mergeBounds: mergeBounds,
        fitAngleToRange: fitAngleToRange,
        inBounds: inBounds,
        getAngle: getAngle,
        getPointOnQuadraticCurve: getPointOnQuadraticCurve,
        getPointOnLine: getPointOnLine,
        closest: closest,
        boundsOverlap: boundsOverlap
    });

    /**
     * A collection of easing functions
     *
     * Parts of this collection are taken from D3.js library (https://d3js.org/)
     */
    /**
     * The functions below are from D3.js library (https://d3js.org/)
     *
     * ----------------------------------------------------------------------------
     * Copyright 2017 Mike Bostock
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are met:
     *
     * 1. Redistributions of source code must retain the above copyright notice,
     *	this list of conditions and the following disclaimer.
     *
     * 2. Redistributions in binary form must reproduce the above copyright notice,
     *	this list of conditions and the following disclaimer in the documentation
     *	and/or other materials provided with the distribution.
     *
     * 3. Neither the name of the copyright holder nor the names of its
     *	contributors may be used to endorse or promote products derived from this
     *	software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
     * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
     * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     * ----------------------------------------------------------------------------
     * @hidden
     */
    /**
     */
    function linear(t) {
        return t;
    }
    function quad(t) {
        return t * t;
    }
    function cubic(t) {
        return t * t * t;
    }
    function pow(t, e) {
        return Math.pow(t, e);
    }
    function exp(t) {
        return Math.pow(2, 10 * t - 10);
    }
    function sine(t) {
        return 1 - Math.cos(t * HALFPI);
    }
    function circle(t) {
        return 1 - Math.sqrt(1 - t * t);
    }
    /**
     * ============================================================================
     * TRANSFORMERS
     * ============================================================================
     * @hidden
     */
    /**
     */
    function yoyo(ease) {
        return function (t) {
            if (t < 0.5) {
                return ease(t * 2.0);
            }
            else {
                return ease((1.0 - t) * 2.0);
            }
        };
    }
    function out(ease) {
        return function (t) {
            return 1.0 - ease(1.0 - t);
        };
    }
    function inOut(ease) {
        return function (t) {
            if (t <= 0.5) {
                return ease(t * 2.0) / 2.0;
            }
            else {
                return 1.0 - (ease((1.0 - t) * 2.0) / 2.0);
            }
        };
    }
    /**
     * ============================================================================
     * BOUNCE
     * ============================================================================
     * @hidden
     */
    var b1 = 4 / 11, b2 = 6 / 11, b3 = 8 / 11, b4 = 3 / 4, b5 = 9 / 11, b6 = 10 / 11, b7 = 15 / 16, b8 = 21 / 22, b9 = 63 / 64, b0 = 1 / b1 / b1;
    function bounce(t) {
        return 1 - bounceOut(1 - t);
    }
    /**
     * @ignore
     */
    function bounceOut(t) {
        t = t;
        if (t < b1) {
            return b0 * t * t;
        }
        else if (t < b3) {
            return b0 * (t -= b2) * t + b4;
        }
        else if (t < b6) {
            return b0 * (t -= b5) * t + b7;
        }
        else {
            return b0 * (t -= b8) * t + b9;
        }
    }
    /**
     * ============================================================================
     * ELASTIC
     * ============================================================================
     * @hidden
     */
    /**
     * @ignore
     */
    var tau$2 = 2 * Math.PI;
    /**
     * @ignore
     */
    var amplitude = 1;
    /**
     * @ignore
     */
    var period = 0.3 / tau$2;
    /**
     * @ignore
     */
    var s = Math.asin(1 / amplitude) * period;
    function elastic(t) {
        var v = t;
        return amplitude * Math.pow(2, 10 * --v) * Math.sin((s - v) / period);
    }

    var Ease = /*#__PURE__*/Object.freeze({
        __proto__: null,
        linear: linear,
        quad: quad,
        cubic: cubic,
        pow: pow,
        exp: exp,
        sine: sine,
        circle: circle,
        yoyo: yoyo,
        out: out,
        inOut: inOut,
        bounce: bounce,
        elastic: elastic
    });

    /**
     * An object representing a collection of setting values to apply as required.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/states/} for more info
     */
    var State = /** @class */ (function () {
        function State(entity, settings) {
            Object.defineProperty(this, "_entity", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_settings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_userSettings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            this._entity = entity;
            this._settings = settings;
        }
        Object.defineProperty(State.prototype, "get", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, fallback) {
                var value = this._settings[key];
                if (value !== undefined) {
                    return value;
                }
                else {
                    return fallback;
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(State.prototype, "setRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._settings[key] = value;
            }
        });
        /**
         * Sets a setting `value` for the specified `key` to be set when the state
         * is applied.
         *
         * @param   key       Setting key
         * @param   value     Setting value
         * @return            Setting value
         */
        Object.defineProperty(State.prototype, "set", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._userSettings[key] = true;
                this.setRaw(key, value);
            }
        });
        /**
         * Removes a setting value for the specified `key`.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
         * @param   key       Setting key
         */
        Object.defineProperty(State.prototype, "remove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                delete this._userSettings[key];
                delete this._settings[key];
            }
        });
        /**
         * Sets multiple settings at once.
         *
         * `settings` must be an object with key: value pairs.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
         * @param settings Settings
         */
        Object.defineProperty(State.prototype, "setAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (settings) {
                var _this = this;
                keys(settings).forEach(function (key) {
                    _this.set(key, settings[key]);
                });
            }
        });
        Object.defineProperty(State.prototype, "_eachSetting", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                each(this._settings, f);
            }
        });
        /**
         * Applies the state to the target element.
         *
         * All setting values are set immediately.
         */
        Object.defineProperty(State.prototype, "apply", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var seen = {};
                seen["stateAnimationEasing"] = true;
                seen["stateAnimationDuration"] = true;
                var defaultState = this._entity.states.lookup("default");
                this._eachSetting(function (key, value) {
                    if (!seen[key]) {
                        seen[key] = true;
                        // save values to default state
                        if (_this !== defaultState) {
                            if (!(key in defaultState._settings)) {
                                defaultState._settings[key] = _this._entity.get(key);
                            }
                        }
                        _this._entity.set(key, value);
                    }
                });
            }
        });
        /**
         * Applies the state to the target element.
         *
         * Returns an object representing all [[Animation]] objects created for
         * each setting key transition.
         *
         * @return           Animations
         */
        Object.defineProperty(State.prototype, "applyAnimate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (duration) {
                var _this = this;
                if (duration == null) {
                    duration = this._settings.stateAnimationDuration;
                }
                if (duration == null) {
                    duration = this.get("stateAnimationDuration", this._entity.get("stateAnimationDuration", 0));
                }
                var easing = this._settings.stateAnimationEasing;
                if (easing == null) {
                    easing = this.get("stateAnimationEasing", this._entity.get("stateAnimationEasing", cubic));
                }
                var defaultState = this._entity.states.lookup("default");
                var seen = {};
                seen["stateAnimationEasing"] = true;
                seen["stateAnimationDuration"] = true;
                var animations = {};
                this._eachSetting(function (key, value) {
                    if (!seen[key]) {
                        seen[key] = true;
                        // save values to default state
                        if (_this != defaultState) {
                            if (!(key in defaultState._settings)) {
                                defaultState._settings[key] = _this._entity.get(key);
                            }
                        }
                        var animation = _this._entity.animate({
                            key: key,
                            to: value,
                            duration: duration,
                            easing: easing
                        });
                        if (animation) {
                            animations[key] = animation;
                        }
                    }
                });
                return animations;
            }
        });
        return State;
    }());
    /**
     * Collection of [[State]] objects for an element.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/states/} for more info
     */
    var States = /** @class */ (function () {
        function States(entity) {
            Object.defineProperty(this, "_states", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_entity", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this._entity = entity;
        }
        /**
         * Checks if a state by `name` exists. Returns it there is one.
         *
         * @param  name  State name
         * @return       State
         */
        Object.defineProperty(States.prototype, "lookup", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name) {
                return this._states[name];
            }
        });
        /**
         * Sets supplied `settings` on a state by the `name`.
         *
         * If such state does not yet exists, it is created.
         *
         * @param   name      State name
         * @param   settings  Settings
         * @return            New State
         */
        Object.defineProperty(States.prototype, "create", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name, settings) {
                var state = this._states[name];
                if (state) {
                    state.setAll(settings);
                    return state;
                }
                else {
                    var state_1 = new State(this._entity, settings);
                    this._states[name] = state_1;
                    return state_1;
                }
            }
        });
        /**
         * Removes the state called `name`.
         *
         * @param   name      State name
         */
        Object.defineProperty(States.prototype, "remove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name) {
                delete this._states[name];
            }
        });
        /**
         * Applies a named state to the target element.
         *
         * @param  newState  State name
         */
        Object.defineProperty(States.prototype, "apply", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (newState) {
                var state = this._states[newState];
                if (state) {
                    state.apply();
                }
                this._entity._applyState(newState);
            }
        });
        /**
         * Applies a named state to the element.
         *
         * Returns an object representing all [[Animation]] objects created for
         * each setting key transition.
         *
         * @param   newState  State name
         * @return            Animations
         */
        Object.defineProperty(States.prototype, "applyAnimate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (newState, duration) {
                var animations;
                var state = this._states[newState];
                if (state) {
                    animations = state.applyAnimate(duration);
                }
                this._entity._applyStateAnimated(newState, duration);
                return animations;
            }
        });
        return States;
    }());

    /**
     * @ignore
     */
    var Registry = /** @class */ (function () {
        function Registry() {
            /**
             * List of applied licenses.
             * @ignore
             */
            Object.defineProperty(this, "licenses", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            /**
             * Entities that have their `id` setting set.
             */
            Object.defineProperty(this, "entitiesById", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            /**
             * All created [[Root]] elements.
             */
            Object.defineProperty(this, "rootElements", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
        }
        return Registry;
    }());
    /**
        * @ignore
     */
    var registry = new Registry();
    /**
     * Adds a license, e.g.:
     *
     * ```TypeScript
     * am5.addLicense("xxxxxxxx");
     * ```
     * ```JavaScript
     * am5.addLicense("xxxxxxxx");
     * ```
     *
     * Multiple licenses can be added to cover for multiple products.
     *
     * @param  license  License key
     */
    function addLicense(license) {
        registry.licenses.push(license);
    }
    /**
     * Disposes all [[Root]] elements.
     */
    function disposeAllRootElements() {
        var root;
        while (root = registry.rootElements.pop()) {
            root.dispose();
        }
    }

    /**
     * @ignore
     */
    function compare(left, right) {
        if (left === right) {
            return 0;
        }
        else if (left < right) {
            return -1;
        }
        else {
            return 1;
        }
    }
    /**
     * @ignore
     */
    function compareArray(left, right, f) {
        var leftLength = left.length;
        var rightLength = right.length;
        var length = Math.min(leftLength, rightLength);
        for (var i = 0; i < length; ++i) {
            var order = f(left[i], right[i]);
            if (order !== 0) {
                return order;
            }
        }
        return compare(leftLength, rightLength);
    }
    /**
     * @ignore
     */
    function compareNumber(a, b) {
        if (a === b) {
            return 0;
        }
        else if (a < b) {
            return -1;
        }
        else {
            return 1;
        }
    }

    /**
     * Allows to dynamically modify setting value of its target element.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/adapters/} for more info
     */
    var Adapters = /** @class */ (function () {
        function Adapters(entity) {
            Object.defineProperty(this, "_entity", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_callbacks", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_disabled", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            this._entity = entity;
        }
        /**
         * Add a function (`callback`) that will modify value for setting `key`.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/adapters/} for more info
         */
        Object.defineProperty(Adapters.prototype, "add", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, callback) {
                var _this = this;
                var callbacks = this._callbacks[key];
                if (callbacks === undefined) {
                    callbacks = this._callbacks[key] = [];
                }
                callbacks.push(callback);
                this._entity._markDirtyKey(key);
                return new Disposer(function () {
                    if (removeFirst(callbacks, callback)) {
                        _this._entity._markDirtyKey(key);
                    }
                });
            }
        });
        /**
         * Removes all adapters for the specific key.
         *
         * @since 5.1.0
         */
        Object.defineProperty(Adapters.prototype, "remove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                var callbacks = this._callbacks[key];
                if (callbacks !== undefined) {
                    delete this._callbacks[key];
                    if (callbacks.length !== 0) {
                        this._entity._markDirtyKey(key);
                    }
                }
            }
        });
        /**
         * Enables (previously disabled) adapters for specific key.
         *
         * @since 5.1.0
         */
        Object.defineProperty(Adapters.prototype, "enable", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                if (this._disabled[key]) {
                    delete this._disabled[key];
                    this._entity._markDirtyKey(key);
                }
            }
        });
        /**
         * Disables all adapters for specific key.
         *
         * @since 5.1.0
         */
        Object.defineProperty(Adapters.prototype, "disable", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                if (!this._disabled[key]) {
                    this._disabled[key] = true;
                    this._entity._markDirtyKey(key);
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Adapters.prototype, "fold", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                if (!this._disabled[key]) {
                    var callbacks = this._callbacks[key];
                    if (callbacks !== undefined) {
                        for (var i = 0, len = callbacks.length; i < len; ++i) {
                            value = callbacks[i](value, this._entity, key);
                        }
                    }
                }
                return value;
            }
        });
        return Adapters;
    }());
    /**
     * Animation object.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/} for more info
     */
    var Animation = /** @class */ (function () {
        function Animation(from, to, duration, easing, loops, startingTime) {
            Object.defineProperty(this, "_from", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_to", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_duration", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_easing", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_loops", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_interpolate", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_oldTime", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_time", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_stopped", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(this, "_playing", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(this, "events", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new EventDispatcher()
            });
            this._from = from;
            this._to = to;
            this._duration = duration;
            this._easing = easing;
            this._loops = loops;
            this._interpolate = getInterpolate(from, to);
            this._oldTime = startingTime;
        }
        Object.defineProperty(Animation.prototype, "to", {
            get: function () {
                return this._to;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Animation.prototype, "from", {
            get: function () {
                return this._from;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Animation.prototype, "playing", {
            get: function () {
                return this._playing;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Animation.prototype, "stopped", {
            get: function () {
                return this._stopped;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Animation.prototype, "stop", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._stopped) {
                    this._stopped = true;
                    this._playing = false;
                    if (this.events.isEnabled("stopped")) {
                        this.events.dispatch("stopped", {
                            type: "stopped",
                            target: this,
                        });
                    }
                }
            }
        });
        Object.defineProperty(Animation.prototype, "pause", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._playing = false;
                this._oldTime = null;
            }
        });
        Object.defineProperty(Animation.prototype, "play", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._stopped) {
                    this._playing = true;
                }
            }
        });
        Object.defineProperty(Animation.prototype, "percentage", {
            get: function () {
                return this._time / this._duration;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Animation.prototype, "waitForStop", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                return new Promise(function (resolve, _reject) {
                    if (_this._stopped) {
                        resolve();
                    }
                    else {
                        var listener = function () {
                            stopped_1.dispose();
                            resolve();
                        };
                        var stopped_1 = _this.events.on("stopped", listener);
                    }
                });
            }
        });
        Object.defineProperty(Animation.prototype, "_checkEnded", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._loops > 1) {
                    --this._loops;
                    return false;
                }
                else {
                    return true;
                }
            }
        });
        Object.defineProperty(Animation.prototype, "_run", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (currentTime) {
                if (this._oldTime !== null) {
                    this._time += currentTime - this._oldTime;
                    if (this._time > this._duration) {
                        this._time = this._duration;
                    }
                }
                this._oldTime = currentTime;
            }
        });
        Object.defineProperty(Animation.prototype, "_reset", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (currentTime) {
                this._oldTime = currentTime;
                this._time = 0;
            }
        });
        Object.defineProperty(Animation.prototype, "_value", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (diff) {
                return this._interpolate(this._easing(diff), this._from, this._to);
            }
        });
        return Animation;
    }());
    /**
     * @ignore
     */
    var counter = 0;
    /**
     * Base class for [[Entity]] objects that support Settings.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     */
    var Settings = /** @class */ (function () {
        function Settings(settings) {
            /**
             * Unique ID.
             */
            Object.defineProperty(this, "uid", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: ++counter
            });
            Object.defineProperty(this, "_settings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_privateSettings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_settingEvents", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_privateSettingEvents", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_prevSettings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_prevPrivateSettings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_animatingSettings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_animatingPrivateSettings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_animatingCount", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_disposed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            // TODO move this into Entity
            Object.defineProperty(this, "_userProperties", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            this._settings = settings;
        }
        Object.defineProperty(Settings.prototype, "_checkDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                keys(this._settings).forEach(function (key) {
                    _this._userProperties[key] = true;
                    _this._markDirtyKey(key);
                });
            }
        });
        Object.defineProperty(Settings.prototype, "_runAnimation", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (currentTime) {
                var _this = this;
                if (!this.isDisposed()) {
                    each(this._animatingSettings, function (key, animation) {
                        if (animation._stopped) {
                            _this._stopAnimation(key);
                        }
                        else if (animation._playing) {
                            animation._run(currentTime);
                            var diff = animation.percentage;
                            if (diff >= 1) {
                                if (animation._checkEnded()) {
                                    _this.set(key, animation._value(1));
                                }
                                else {
                                    animation._reset(currentTime);
                                    _this._set(key, animation._value(1));
                                }
                            }
                            else {
                                _this._set(key, animation._value(diff));
                            }
                        }
                    });
                    each(this._animatingPrivateSettings, function (key, animation) {
                        if (animation._stopped) {
                            _this._stopAnimationPrivate(key);
                        }
                        else if (animation._playing) {
                            animation._run(currentTime);
                            var diff = animation.percentage;
                            if (diff >= 1) {
                                if (animation._checkEnded()) {
                                    _this.setPrivate(key, animation._value(1));
                                }
                                else {
                                    animation._reset(currentTime);
                                    _this._setPrivate(key, animation._value(1));
                                }
                            }
                            else {
                                _this._setPrivate(key, animation._value(diff));
                            }
                        }
                    });
                    if (this._animatingCount < 0) {
                        throw new Error("Invalid animation count");
                    }
                    return this._animatingCount === 0;
                }
                else {
                    return true;
                }
            }
        });
        Object.defineProperty(Settings.prototype, "_markDirtyKey", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_key) {
                this.markDirty();
            }
        });
        Object.defineProperty(Settings.prototype, "_markDirtyPrivateKey", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_key) {
                this.markDirty();
            }
        });
        /**
         * Sets a callback function to invoke when specific key of settings changes
         * or is set.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info
         * @param   key       Settings key
         * @param   callback  Callback
         * @return            Disposer for event
         */
        Object.defineProperty(Settings.prototype, "on", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, callback) {
                var _this = this;
                var events = this._settingEvents[key];
                if (events === undefined) {
                    events = this._settingEvents[key] = [];
                }
                events.push(callback);
                return new Disposer(function () {
                    removeFirst(events, callback);
                    if (events.length === 0) {
                        delete _this._settingEvents[key];
                    }
                });
            }
        });
        /**
         * Sets a callback function to invoke when specific key of private settings
         * changes or is set.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info
         * @ignore
         * @param   key       Private settings key
         * @param   callback  Callback
         * @return            Disposer for event
         */
        Object.defineProperty(Settings.prototype, "onPrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, callback) {
                var _this = this;
                var events = this._privateSettingEvents[key];
                if (events === undefined) {
                    events = this._privateSettingEvents[key] = [];
                }
                events.push(callback);
                return new Disposer(function () {
                    removeFirst(events, callback);
                    if (events.length === 0) {
                        delete _this._privateSettingEvents[key];
                    }
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "getRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, fallback) {
                var value = this._settings[key];
                if (value !== undefined) {
                    return value;
                }
                else {
                    return fallback;
                }
            }
        });
        Object.defineProperty(Settings.prototype, "get", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, fallback) {
                return this.getRaw(key, fallback);
            }
        });
        Object.defineProperty(Settings.prototype, "_sendKeyEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var _this = this;
                var events = this._settingEvents[key];
                if (events !== undefined) {
                    each$1(events, function (callback) {
                        callback(value, _this, key);
                    });
                }
            }
        });
        Object.defineProperty(Settings.prototype, "_sendPrivateKeyEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var _this = this;
                var events = this._privateSettingEvents[key];
                if (events !== undefined) {
                    each$1(events, function (callback) {
                        callback(value, _this, key);
                    });
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "_setRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, old, value) {
                this._prevSettings[key] = old;
                this._sendKeyEvent(key, value);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "setRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var old = this._settings[key];
                this._settings[key] = value;
                if (old !== value) {
                    this._setRaw(key, old, value);
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "_set", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var old = this._settings[key];
                this._settings[key] = value;
                if (old !== value) {
                    this._setRaw(key, old, value);
                    this._markDirtyKey(key);
                }
            }
        });
        Object.defineProperty(Settings.prototype, "_stopAnimation", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                var animation = this._animatingSettings[key];
                if (animation) {
                    delete this._animatingSettings[key];
                    --this._animatingCount;
                    animation.stop();
                }
            }
        });
        /**
         * Sets a setting `value` for the specified `key`, and returns the same `value`.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
         * @param   key       Setting key
         * @param   value     Setting value
         * @return            Setting value
         */
        Object.defineProperty(Settings.prototype, "set", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._set(key, value);
                this._stopAnimation(key);
                return value;
            }
        });
        /**
         * Removes a setting value for the specified `key`;
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
         * @param   key       Setting key
         */
        Object.defineProperty(Settings.prototype, "remove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                if (key in this._settings) {
                    this._prevSettings[key] = this._settings[key];
                    delete this._settings[key];
                    this._sendKeyEvent(key, undefined);
                    this._markDirtyKey(key);
                }
                this._stopAnimation(key);
            }
        });
        /**
         * Removes all keys;
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
         */
        Object.defineProperty(Settings.prototype, "removeAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                each$1(keys(this._settings), function (key) {
                    _this.remove(key);
                });
            }
        });
        /**
         * Returns a value of a private setting.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/#Private_settings} for more info
         */
        Object.defineProperty(Settings.prototype, "getPrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, fallback) {
                var value = this._privateSettings[key];
                if (value !== undefined) {
                    return value;
                }
                else {
                    return fallback;
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "_setPrivateRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, old, value) {
                this._prevPrivateSettings[key] = old;
                this._sendPrivateKeyEvent(key, value);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "setPrivateRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var old = this._privateSettings[key];
                this._privateSettings[key] = value;
                if (old !== value) {
                    this._setPrivateRaw(key, old, value);
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "_setPrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var old = this._privateSettings[key];
                this._privateSettings[key] = value;
                if (old !== value) {
                    this._setPrivateRaw(key, old, value);
                    this._markDirtyPrivateKey(key);
                }
            }
        });
        Object.defineProperty(Settings.prototype, "_stopAnimationPrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                var animation = this._animatingPrivateSettings[key];
                if (animation) {
                    animation.stop();
                    delete this._animatingPrivateSettings[key];
                    --this._animatingCount;
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "setPrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._setPrivate(key, value);
                this._stopAnimationPrivate(key);
                return value;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "removePrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                if (key in this._privateSettings) {
                    this._prevPrivateSettings[key] = this._privateSettings[key];
                    delete this._privateSettings[key];
                    this._markDirtyPrivateKey(key);
                }
                this._stopAnimationPrivate(key);
            }
        });
        /**
         * Sets multiple settings at once.
         *
         * `settings` must be an object with key: value pairs.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
         * @param settings Settings
         */
        Object.defineProperty(Settings.prototype, "setAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (settings) {
                var _this = this;
                each(settings, function (key, value) {
                    _this.set(key, value);
                });
            }
        });
        /**
         * Animates setting values from current/start values to new ones.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Animating_settings} for more info
         * @param   options  Animation options
         * @return           Animation object
         */
        Object.defineProperty(Settings.prototype, "animate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (options) {
                var key = options.key;
                var to = options.to;
                var duration = options.duration || 0;
                var loops = options.loops || 1;
                var from = (options.from === undefined ? this.get(key) : options.from);
                var easing = (options.easing === undefined ? linear : options.easing);
                if (duration === 0) {
                    this.set(key, to);
                }
                else {
                    if (from === undefined || from === to) {
                        this.set(key, to);
                    }
                    else {
                        ++this._animatingCount;
                        this.set(key, from);
                        var animation_1 = this._animatingSettings[key] = new Animation(from, to, duration, easing, loops, this._animationTime());
                        this._startAnimation();
                        return animation_1;
                    }
                }
                var animation = new Animation(from, to, duration, easing, loops, null);
                animation.stop();
                return animation;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "animatePrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (options) {
                var key = options.key;
                var to = options.to;
                var duration = options.duration || 0;
                var loops = options.loops || 1;
                var from = (options.from === undefined ? this.getPrivate(key) : options.from);
                var easing = (options.easing === undefined ? linear : options.easing);
                if (duration === 0) {
                    this.setPrivate(key, to);
                }
                else {
                    if (from === undefined || from === to) {
                        this.setPrivate(key, to);
                    }
                    else {
                        ++this._animatingCount;
                        this.setPrivate(key, from);
                        var animation_2 = this._animatingPrivateSettings[key] = new Animation(from, to, duration, easing, loops, this._animationTime());
                        this._startAnimation();
                        return animation_2;
                    }
                }
                var animation = new Animation(from, to, duration, easing, loops, null);
                animation.stop();
                return animation;
            }
        });
        Object.defineProperty(Settings.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        /**
         * Returns `true` if this element is disposed.
         *
         * @return Disposed
         */
        Object.defineProperty(Settings.prototype, "isDisposed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._disposed;
            }
        });
        /**
         * Disposes this object.
         */
        Object.defineProperty(Settings.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._disposed) {
                    this._disposed = true;
                    this._dispose();
                }
            }
        });
        return Settings;
    }());
    /**
     * Base class.
     *
     * @important
     */
    var Entity = /** @class */ (function (_super) {
        __extends(Entity, _super);
        /**
         * IMPORTANT! Do not instantiate this class via `new Class()` syntax.
         *
         * Use static method `Class.new()` instead.
         *
         * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info
         * @ignore
         */
        function Entity(root, settings, isReal, templates) {
            if (templates === void 0) { templates = []; }
            var _this = _super.call(this, settings) || this;
            Object.defineProperty(_this, "_root", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_user_id", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            }); // for testing purposes
            Object.defineProperty(_this, "states", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new States(_this)
            });
            Object.defineProperty(_this, "adapters", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new Adapters(_this)
            });
            Object.defineProperty(_this, "events", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._createEvents()
            });
            Object.defineProperty(_this, "_userPrivateProperties", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_dirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_dirtyPrivate", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_template", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // Templates for the themes
            Object.defineProperty(_this, "_templates", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            // Internal templates which can be overridden by the user's templates
            Object.defineProperty(_this, "_internalTemplates", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // Default themes which can be overridden by the user's themes
            Object.defineProperty(_this, "_defaultThemes", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            // Disposers for all of the templates
            Object.defineProperty(_this, "_templateDisposers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "_disposers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            // Whether the template setup function should be run
            Object.defineProperty(_this, "_runSetup", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(_this, "_disposerProperties", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            if (!isReal) {
                throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
            }
            _this._root = root;
            _this._internalTemplates = templates;
            return _this;
        }
        /**
         * Use this method to create an instance of this class.
         *
         * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info
         * @param   root      Root element
         * @param   settings  Settings
         * @param   template  Template
         * @return            Instantiated object
         */
        Object.defineProperty(Entity, "new", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (root, settings, template) {
                var x = (new this(root, settings, true));
                x._template = template;
                x._afterNew();
                return x;
            }
        });
        Object.defineProperty(Entity, "_new", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (root, settings, templates) {
                if (templates === void 0) { templates = []; }
                var x = (new this(root, settings, true, templates));
                x._afterNew();
                return x;
            }
        });
        Object.defineProperty(Entity.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this._checkDirty();
                var shouldApply = false;
                var template = this._template;
                if (template) {
                    shouldApply = true;
                    template._setObjectTemplate(this);
                }
                each$1(this._internalTemplates, function (template) {
                    shouldApply = true;
                    template._setObjectTemplate(_this);
                });
                if (shouldApply) {
                    this._applyTemplates(false);
                }
                this.states.create("default", {});
                this._setDefaults();
            }
        });
        // This is the same as _afterNew, except it also applies the themes.
        // This should only be used for classes which don't have a parent (because they extend from Entity and not Sprite).
        Object.defineProperty(Entity.prototype, "_afterNewApplyThemes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this._checkDirty();
                var template = this._template;
                if (template) {
                    template._setObjectTemplate(this);
                }
                each$1(this._internalTemplates, function (template) {
                    template._setObjectTemplate(_this);
                });
                this.states.create("default", {});
                this._setDefaults();
                this._applyThemes();
            }
        });
        Object.defineProperty(Entity.prototype, "_createEvents", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return new EventDispatcher();
            }
        });
        Object.defineProperty(Entity.prototype, "classNames", {
            /**
             * @ignore
             */
            get: function () {
                return this.constructor.classNames;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "className", {
            /**
             * @ignore
             */
            get: function () {
                return this.constructor.className;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "_setDefaults", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        Object.defineProperty(Entity.prototype, "_setDefault", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                if (!(key in this._settings)) {
                    _super.prototype.set.call(this, key, value);
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_setRawDefault", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                if (!(key in this._settings)) {
                    _super.prototype.setRaw.call(this, key, value);
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_clearDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                keys(this._dirty).forEach(function (key) {
                    _this._dirty[key] = false;
                });
                keys(this._dirtyPrivate).forEach(function (key) {
                    _this._dirtyPrivate[key] = false;
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "isDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                return !!this._dirty[key];
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "isPrivateDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                return !!this._dirtyPrivate[key];
            }
        });
        Object.defineProperty(Entity.prototype, "_markDirtyKey", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                this._dirty[key] = true;
                _super.prototype._markDirtyKey.call(this, key);
            }
        });
        Object.defineProperty(Entity.prototype, "_markDirtyPrivateKey", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                this._dirtyPrivate[key] = true;
                _super.prototype._markDirtyKey.call(this, key);
            }
        });
        /**
         * Checks if element is of certain class (or inherits one).
         *
         * @param   type  Class name to check
         * @return {boolean} Is of class?
         */
        Object.defineProperty(Entity.prototype, "isType", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type) {
                return this.classNames.indexOf(type) !== -1;
            }
        });
        Object.defineProperty(Entity.prototype, "_pushPropertyDisposer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, disposer) {
                var disposers = this._disposerProperties[key];
                if (disposers === undefined) {
                    disposers = this._disposerProperties[key] = [];
                }
                disposers.push(disposer);
                return disposer;
            }
        });
        Object.defineProperty(Entity.prototype, "_disposeProperty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                var disposers = this._disposerProperties[key];
                if (disposers !== undefined) {
                    each$1(disposers, function (disposer) {
                        disposer.dispose();
                    });
                    delete this._disposerProperties[key];
                }
            }
        });
        Object.defineProperty(Entity.prototype, "template", {
            get: function () {
                return this._template;
            },
            /**
             * @todo needs description
             * @param  value  Template
             */
            set: function (value) {
                var template = this._template;
                if (template !== value) {
                    this._template = value;
                    if (template) {
                        template._removeObjectTemplate(this);
                    }
                    if (value) {
                        value._setObjectTemplate(this);
                    }
                    this._applyTemplates();
                }
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "markDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._root._addDirtyEntity(this);
            }
        });
        Object.defineProperty(Entity.prototype, "_startAnimation", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._root._addAnimation(this);
            }
        });
        Object.defineProperty(Entity.prototype, "_animationTime", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._root.animationTime;
            }
        });
        Object.defineProperty(Entity.prototype, "_applyState", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_name) { }
        });
        Object.defineProperty(Entity.prototype, "_applyStateAnimated", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_name, _duration) { }
        });
        Object.defineProperty(Entity.prototype, "get", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, fallback) {
                var value = this.adapters.fold(key, this._settings[key]);
                if (value !== undefined) {
                    return value;
                }
                else {
                    return fallback;
                }
            }
        });
        /**
         * Sets a setting `value` for the specified `key`, and returns the same `value`.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
         * @param   key       Setting key
         * @param   value     Setting value
         * @return            Setting value
         */
        Object.defineProperty(Entity.prototype, "set", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._userProperties[key] = true;
                return _super.prototype.set.call(this, key, value);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "setRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._userProperties[key] = true;
                _super.prototype.setRaw.call(this, key, value);
            }
        });
        /**
         * Sets a setting `value` for the specified `key` only if the value for this key was not set previously using set method, and returns the same `value`.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
         * @param   key       Setting key
         * @param   value     Setting value
         * @return            Setting value
         */
        Object.defineProperty(Entity.prototype, "_setSoft", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                if (!this._userProperties[key]) {
                    return _super.prototype.set.call(this, key, value);
                }
                return value;
            }
        });
        /**
         * Removes a setting value for the specified `key`.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
         * @param   key       Setting key
         */
        Object.defineProperty(Entity.prototype, "remove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                delete this._userProperties[key];
                this._removeTemplateProperty(key);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "setPrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._userPrivateProperties[key] = true;
                return _super.prototype.setPrivate.call(this, key, value);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "setPrivateRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._userPrivateProperties[key] = true;
                _super.prototype.setPrivateRaw.call(this, key, value);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "removePrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                delete this._userPrivateProperties[key];
                this._removeTemplatePrivateProperty(key);
            }
        });
        Object.defineProperty(Entity.prototype, "_setTemplateProperty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (template, key, value) {
                if (!this._userProperties[key]) {
                    var match = this._findTemplateByKey(key);
                    if (template === match) {
                        _super.prototype.set.call(this, key, value);
                    }
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_setTemplatePrivateProperty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (template, key, value) {
                if (!this._userPrivateProperties[key]) {
                    var match = this._findTemplateByPrivateKey(key);
                    if (template === match) {
                        _super.prototype.setPrivate.call(this, key, value);
                    }
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_removeTemplateProperty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                if (!this._userProperties[key]) {
                    var match = this._findTemplateByKey(key);
                    if (match) {
                        // TODO don't stop the animation if the property didn't change
                        _super.prototype.set.call(this, key, match._settings[key]);
                    }
                    else {
                        _super.prototype.remove.call(this, key);
                    }
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_removeTemplatePrivateProperty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                if (!this._userPrivateProperties[key]) {
                    var match = this._findTemplateByPrivateKey(key);
                    if (match) {
                        // TODO don't stop the animation if the property didn't change
                        _super.prototype.setPrivate.call(this, key, match._privateSettings[key]);
                    }
                    else {
                        _super.prototype.removePrivate.call(this, key);
                    }
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_walkParents", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                f(this._root._rootContainer);
                f(this);
            }
        });
        // TODO faster version of this method which is specialized to just 1 key
        Object.defineProperty(Entity.prototype, "_applyStateByKey", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name) {
                var other = this.states.create(name, {});
                var seen = {};
                this._eachTemplate(function (template) {
                    var state = template.states.lookup(name);
                    if (state) {
                        state._apply(other, seen);
                    }
                });
                each(other._settings, function (key) {
                    if (!seen[key] && !other._userSettings[key]) {
                        other.remove(key);
                    }
                });
            }
        });
        Object.defineProperty(Entity.prototype, "_applyTemplate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (template, state) {
                var _this = this;
                this._templateDisposers.push(template._apply(this, state));
                each(template._settings, function (key, value) {
                    if (!state.settings[key] && !_this._userProperties[key]) {
                        state.settings[key] = true;
                        _super.prototype.set.call(_this, key, value);
                    }
                });
                each(template._privateSettings, function (key, value) {
                    if (!state.privateSettings[key] && !_this._userPrivateProperties[key]) {
                        state.privateSettings[key] = true;
                        _super.prototype.setPrivate.call(_this, key, value);
                    }
                });
                if (this._runSetup && template.setup) {
                    this._runSetup = false;
                    template.setup(this);
                }
            }
        });
        /**
         * Calls the closure with each template and returns the first template which is true
         */
        Object.defineProperty(Entity.prototype, "_findStaticTemplate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                if (this._template) {
                    if (f(this._template)) {
                        return this._template;
                    }
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_eachTemplate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                this._findStaticTemplate(function (template) {
                    f(template);
                    return false;
                });
                // _internalTemplates is sorted with most specific to the right
                eachReverse(this._internalTemplates, f);
                // _templates is sorted with most specific to the left
                each$1(this._templates, f);
            }
        });
        Object.defineProperty(Entity.prototype, "_applyTemplates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (remove) {
                var _this = this;
                if (remove === void 0) { remove = true; }
                if (remove) {
                    this._disposeTemplates();
                }
                var state = {
                    settings: {},
                    privateSettings: {},
                    states: {},
                };
                this._eachTemplate(function (template) {
                    _this._applyTemplate(template, state);
                });
                if (remove) {
                    each(this._settings, function (key) {
                        if (!_this._userProperties[key] && !state.settings[key]) {
                            _super.prototype.remove.call(_this, key);
                        }
                    });
                    each(this._privateSettings, function (key) {
                        if (!_this._userPrivateProperties[key] && !state.privateSettings[key]) {
                            _super.prototype.removePrivate.call(_this, key);
                        }
                    });
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_findTemplate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                var value = this._findStaticTemplate(f);
                if (value === undefined) {
                    // _internalTemplates is sorted with most specific to the right
                    var value_1 = findReverse(this._internalTemplates, f);
                    if (value_1 === undefined) {
                        // _templates is sorted with most specific to the left
                        return find(this._templates, f);
                    }
                    else {
                        return value_1;
                    }
                }
                else {
                    return value;
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_findTemplateByKey", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                return this._findTemplate(function (template) {
                    return key in template._settings;
                });
            }
        });
        Object.defineProperty(Entity.prototype, "_findTemplateByPrivateKey", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                return this._findTemplate(function (template) {
                    return key in template._privateSettings;
                });
            }
        });
        Object.defineProperty(Entity.prototype, "_disposeTemplates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                each$1(this._templateDisposers, function (disposer) {
                    disposer.dispose();
                });
                this._templateDisposers.length = 0;
            }
        });
        Object.defineProperty(Entity.prototype, "_removeTemplates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                each$1(this._templates, function (template) {
                    template._removeObjectTemplate(_this);
                });
                this._templates.length = 0;
            }
        });
        Object.defineProperty(Entity.prototype, "_applyThemes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var isConnected = false;
                var defaults = [];
                var themes = [];
                var themeTags = new Set();
                var tags = this.get("themeTagsSelf");
                if (tags) {
                    each$1(tags, function (tag) {
                        themeTags.add(tag);
                    });
                }
                this._walkParents(function (entity) {
                    if (entity === _this._root._rootContainer) {
                        isConnected = true;
                    }
                    if (entity._defaultThemes.length > 0) {
                        defaults.push(entity._defaultThemes);
                    }
                    var theme = entity.get("themes");
                    if (theme) {
                        themes.push(theme);
                    }
                    var tags = entity.get("themeTags");
                    if (tags) {
                        each$1(tags, function (tag) {
                            themeTags.add(tag);
                        });
                    }
                });
                themes = defaults.concat(themes);
                this._removeTemplates();
                if (isConnected) {
                    eachReverse(this.classNames, function (name) {
                        var allRules = [];
                        each$1(themes, function (themes) {
                            each$1(themes, function (theme) {
                                var rules = theme._lookupRules(name);
                                if (rules) {
                                    eachReverse(rules, function (rule) {
                                        var matches = rule.tags.every(function (tag) {
                                            return themeTags.has(tag);
                                        });
                                        if (matches) {
                                            var result = getFirstSortedIndex(allRules, function (x) {
                                                var order = compare(rule.tags.length, x.tags.length);
                                                if (order === 0) {
                                                    return compareArray(rule.tags, x.tags, compare);
                                                }
                                                else {
                                                    return order;
                                                }
                                            });
                                            allRules.splice(result.index, 0, rule);
                                        }
                                    });
                                }
                            });
                        });
                        each$1(allRules, function (rule) {
                            _this._templates.push(rule.template);
                            rule.template._setObjectTemplate(_this);
                        });
                    });
                }
                this._applyTemplates();
                if (isConnected) {
                    // This causes it to only run the setup function the first time that the themes are applied
                    this._runSetup = false;
                }
                return isConnected;
            }
        });
        Object.defineProperty(Entity.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        Object.defineProperty(Entity.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.isDirty("id")) {
                    var id = this.get("id");
                    if (id) {
                        if (registry.entitiesById[id]) {
                            throw new Error("An entity with id \"" + id + "\" already exists.");
                        }
                        registry.entitiesById[id] = this;
                    }
                    var prevId = this._prevSettings.id;
                    if (prevId) {
                        delete registry.entitiesById[prevId];
                    }
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_afterChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "addDisposer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (disposer) {
                this._disposers.push(disposer);
                return disposer;
            }
        });
        Object.defineProperty(Entity.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._dispose.call(this);
                var template = this._template;
                if (template) {
                    template._removeObjectTemplate(this);
                }
                each$1(this._internalTemplates, function (template) {
                    template._removeObjectTemplate(_this);
                });
                this._removeTemplates();
                this._disposeTemplates();
                this.events.dispose();
                this._disposers.forEach(function (x) {
                    x.dispose();
                });
                each(this._disposerProperties, function (_, disposers) {
                    each$1(disposers, function (disposer) {
                        disposer.dispose();
                    });
                });
                var id = this.get("id");
                if (id) {
                    delete registry.entitiesById[id];
                }
            }
        });
        /**
         * Creates and returns a "disposable" timeout.
         *
         * @param   fn     Callback
         * @param   delay  Delay in milliseconds
         * @return         Timeout disposer
         */
        Object.defineProperty(Entity.prototype, "setTimeout", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (fn, delay) {
                var _this = this;
                var id = setTimeout(function () {
                    _this.removeDispose(disposer);
                    fn();
                }, delay);
                var disposer = new Disposer(function () {
                    clearTimeout(id);
                });
                this._disposers.push(disposer);
                return disposer;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "removeDispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                if (!this.isDisposed()) {
                    var index = indexOf(this._disposers, target);
                    if (index > -1) {
                        this._disposers.splice(index, 1);
                    }
                }
                target.dispose();
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "hasTag", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tag) {
                return indexOf(this.get("themeTags", []), tag) !== -1;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "addTag", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tag) {
                if (!this.hasTag(tag)) {
                    var tags = this.get("themeTags", []);
                    tags.push(tag);
                    this.set("themeTags", tags);
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "removeTag", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tag) {
                if (this.hasTag(tag)) {
                    var tags = this.get("themeTags", []);
                    remove(tags, tag);
                    this.set("themeTags", tags);
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_t", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text, locale) {
                var _a;
                var rest = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    rest[_i - 2] = arguments[_i];
                }
                return (_a = this._root.language).translate.apply(_a, __spreadArray([text, locale], __read(rest), false));
            }
        });
        Object.defineProperty(Entity.prototype, "root", {
            /**
             * An instance of [[Root]] object.
             *
             * @readonly
             * @since 5.0.6
             * @return Root object
             */
            get: function () {
                return this._root;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Entity, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Entity"
        });
        Object.defineProperty(Entity, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ["Entity"]
        });
        return Entity;
    }(Settings));

    var TemplateState = /** @class */ (function () {
        function TemplateState(name, template, settings) {
            Object.defineProperty(this, "_settings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_name", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_template", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this._name = name;
            this._template = template;
            this._settings = settings;
        }
        Object.defineProperty(TemplateState.prototype, "get", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, fallback) {
                var value = this._settings[key];
                if (value !== undefined) {
                    return value;
                }
                else {
                    return fallback;
                }
            }
        });
        Object.defineProperty(TemplateState.prototype, "set", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._settings[key] = value;
                // TODO maybe only do this if the value changed ?
                this._template._stateChanged(this._name);
            }
        });
        Object.defineProperty(TemplateState.prototype, "remove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                delete this._settings[key];
                // TODO maybe only do this if the value changed ?
                this._template._stateChanged(this._name);
            }
        });
        Object.defineProperty(TemplateState.prototype, "setAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (settings) {
                var _this = this;
                keys(settings).forEach(function (key) {
                    _this._settings[key] = settings[key];
                });
                this._template._stateChanged(this._name);
            }
        });
        Object.defineProperty(TemplateState.prototype, "_apply", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (other, seen) {
                each(this._settings, function (key, value) {
                    if (!seen[key] && !other._userSettings[key]) {
                        seen[key] = true;
                        other.setRaw(key, value);
                    }
                });
            }
        });
        return TemplateState;
    }());
    var TemplateStates = /** @class */ (function () {
        function TemplateStates(template) {
            Object.defineProperty(this, "_template", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_states", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            this._template = template;
        }
        Object.defineProperty(TemplateStates.prototype, "lookup", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name) {
                return this._states[name];
            }
        });
        Object.defineProperty(TemplateStates.prototype, "create", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name, settings) {
                var state = this._states[name];
                if (state) {
                    state.setAll(settings);
                    return state;
                }
                else {
                    var state_1 = new TemplateState(name, this._template, settings);
                    this._states[name] = state_1;
                    this._template._stateChanged(name);
                    return state_1;
                }
            }
        });
        Object.defineProperty(TemplateStates.prototype, "remove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name) {
                delete this._states[name];
                this._template._stateChanged(name);
            }
        });
        Object.defineProperty(TemplateStates.prototype, "_apply", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (entity, state) {
                each(this._states, function (key, value) {
                    var seen = state.states[key];
                    if (seen == null) {
                        seen = state.states[key] = {};
                    }
                    var other = entity.states.create(key, {});
                    value._apply(other, seen);
                });
            }
        });
        return TemplateStates;
    }());
    var TemplateAdapters = /** @class */ (function () {
        function TemplateAdapters() {
            Object.defineProperty(this, "_callbacks", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
        }
        Object.defineProperty(TemplateAdapters.prototype, "add", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, callback) {
                var _this = this;
                var callbacks = this._callbacks[key];
                if (callbacks === undefined) {
                    callbacks = this._callbacks[key] = [];
                }
                callbacks.push(callback);
                return new Disposer(function () {
                    removeFirst(callbacks, callback);
                    if (callbacks.length === 0) {
                        delete _this._callbacks[key];
                    }
                });
            }
        });
        Object.defineProperty(TemplateAdapters.prototype, "remove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                var callbacks = this._callbacks[key];
                if (callbacks !== undefined) {
                    delete this._callbacks[key];
                }
            }
        });
        Object.defineProperty(TemplateAdapters.prototype, "_apply", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (entity) {
                var disposers = [];
                each(this._callbacks, function (key, callbacks) {
                    each$1(callbacks, function (callback) {
                        disposers.push(entity.adapters.add(key, callback));
                    });
                });
                return new MultiDisposer(disposers);
            }
        });
        return TemplateAdapters;
    }());
    // TODO maybe extend from Properties ?
    var Template = /** @class */ (function () {
        function Template(settings, isReal) {
            Object.defineProperty(this, "_settings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_privateSettings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            // TODO code duplication with Properties
            Object.defineProperty(this, "_settingEvents", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_privateSettingEvents", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_entities", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(this, "states", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new TemplateStates(this)
            });
            Object.defineProperty(this, "adapters", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new TemplateAdapters()
            });
            Object.defineProperty(this, "events", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new EventDispatcher()
            });
            Object.defineProperty(this, "setup", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            if (!isReal) {
                throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
            }
            this._settings = settings;
        }
        /**
         * Use this method to create an instance of this class.
         *
         * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info
         * @param   root      Root element
         * @param   settings  Settings
         * @param   template  Template
         * @return            Instantiated object
         */
        Object.defineProperty(Template, "new", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (settings) {
                return new Template(settings, true);
            }
        });
        Object.defineProperty(Template.prototype, "get", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, fallback) {
                var value = this._settings[key];
                if (value !== undefined) {
                    return value;
                }
                else {
                    return fallback;
                }
            }
        });
        Object.defineProperty(Template.prototype, "setRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._settings[key] = value;
            }
        });
        Object.defineProperty(Template.prototype, "set", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var _this = this;
                if (this._settings[key] !== value) {
                    this.setRaw(key, value);
                    this._entities.forEach(function (entity) {
                        entity._setTemplateProperty(_this, key, value);
                    });
                }
            }
        });
        Object.defineProperty(Template.prototype, "remove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                if (key in this._settings) {
                    delete this._settings[key];
                    this._entities.forEach(function (entity) {
                        entity._removeTemplateProperty(key);
                    });
                }
            }
        });
        Object.defineProperty(Template.prototype, "removeAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                each(this._settings, function (key, _value) {
                    _this.remove(key);
                });
            }
        });
        Object.defineProperty(Template.prototype, "getPrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, fallback) {
                var value = this._privateSettings[key];
                if (value !== undefined) {
                    return value;
                }
                else {
                    return fallback;
                }
            }
        });
        Object.defineProperty(Template.prototype, "setPrivateRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._privateSettings[key] = value;
                return value;
            }
        });
        Object.defineProperty(Template.prototype, "setPrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var _this = this;
                if (this._privateSettings[key] !== value) {
                    this.setPrivateRaw(key, value);
                    this._entities.forEach(function (entity) {
                        entity._setTemplatePrivateProperty(_this, key, value);
                    });
                }
                return value;
            }
        });
        Object.defineProperty(Template.prototype, "removePrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                if (key in this._privateSettings) {
                    delete this._privateSettings[key];
                    this._entities.forEach(function (entity) {
                        entity._removeTemplatePrivateProperty(key);
                    });
                }
            }
        });
        Object.defineProperty(Template.prototype, "setAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var _this = this;
                each(value, function (key, value) {
                    _this.set(key, value);
                });
            }
        });
        // TODO code duplication with Properties
        Object.defineProperty(Template.prototype, "on", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, callback) {
                var _this = this;
                var events = this._settingEvents[key];
                if (events === undefined) {
                    events = this._settingEvents[key] = [];
                }
                events.push(callback);
                return new Disposer(function () {
                    removeFirst(events, callback);
                    if (events.length === 0) {
                        delete _this._settingEvents[key];
                    }
                });
            }
        });
        // TODO code duplication with Properties
        Object.defineProperty(Template.prototype, "onPrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, callback) {
                var _this = this;
                var events = this._privateSettingEvents[key];
                if (events === undefined) {
                    events = this._privateSettingEvents[key] = [];
                }
                events.push(callback);
                return new Disposer(function () {
                    removeFirst(events, callback);
                    if (events.length === 0) {
                        delete _this._privateSettingEvents[key];
                    }
                });
            }
        });
        Object.defineProperty(Template.prototype, "_apply", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (entity, state) {
                var disposers = [];
                each(this._settingEvents, function (key, events) {
                    each$1(events, function (event) {
                        disposers.push(entity.on(key, event));
                    });
                });
                each(this._privateSettingEvents, function (key, events) {
                    each$1(events, function (event) {
                        disposers.push(entity.onPrivate(key, event));
                    });
                });
                this.states._apply(entity, state);
                disposers.push(this.adapters._apply(entity));
                disposers.push(entity.events.copyFrom(this.events));
                return new MultiDisposer(disposers);
            }
        });
        Object.defineProperty(Template.prototype, "_setObjectTemplate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (entity) {
                this._entities.push(entity);
            }
        });
        Object.defineProperty(Template.prototype, "_removeObjectTemplate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (entity) {
                remove(this._entities, entity);
            }
        });
        Object.defineProperty(Template.prototype, "_stateChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name) {
                this._entities.forEach(function (entity) {
                    entity._applyStateByKey(name);
                });
            }
        });
        return Template;
    }());

    //import { populateString } from "../util/PopulateString";
    /**
     * An [[EventDispatcher]] for [[Sprite]].
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/events/} for more info
     */
    var SpriteEventDispatcher = /** @class */ (function (_super) {
        __extends(SpriteEventDispatcher, _super);
        function SpriteEventDispatcher(sprite) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "_sprite", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_rendererDisposers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_dispatchParents", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            _this._sprite = sprite;
            return _this;
        }
        Object.defineProperty(SpriteEventDispatcher.prototype, "_makePointerEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, event) {
                return {
                    type: key,
                    originalEvent: event.event,
                    point: event.point,
                    simulated: event.simulated,
                    native: event.native,
                    target: this._sprite
                };
            }
        });
        Object.defineProperty(SpriteEventDispatcher.prototype, "_onRenderer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, dispatch) {
                var _this = this;
                // TODO: is this OK? it'd be good not to require to set this on each individual element
                this._sprite.set("interactive", true);
                this._sprite._display.interactive = true;
                var events = this._rendererDisposers[key];
                if (events === undefined) {
                    var disposer_1 = this._sprite._display.on(key, function (e) {
                        dispatch.call(_this, e);
                    });
                    events = this._rendererDisposers[key] = new CounterDisposer(function () {
                        delete _this._rendererDisposers[key];
                        disposer_1.dispose();
                    });
                }
                return events.increment();
            }
        });
        Object.defineProperty(SpriteEventDispatcher.prototype, "_on", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (once, type, callback, context, shouldClone, dispatch) {
                var info = _super.prototype._on.call(this, once, type, callback, context, shouldClone, dispatch);
                var rendererEvent = SpriteEventDispatcher.RENDERER_EVENTS[type];
                if (rendererEvent !== undefined) {
                    info.disposer = new MultiDisposer([
                        info.disposer,
                        this._onRenderer(type, rendererEvent),
                    ]);
                }
                return info;
            }
        });
        /**
         * Will stop any bubbling up of the event to element's parents.
         *
         * Should be called in an event handler, e.g.:
         *
         * ```TypeScript
         * element.events.on("pointerdown", function(ev) {
         *   // Do something here and prevent from "pointerdown" bubbling up
         *   // ...
         *   ev.target.events.stopParentDispatch();
         * });
         * ```
         * ```JavaScript
         * element.events.on("pointerdown", function(ev) {
         *   // Do something here and prevent from "pointerdown" bubbling up
         *   // ...
         *   ev.target.events.stopParentDispatch();
         * });
         * ```
         */
        Object.defineProperty(SpriteEventDispatcher.prototype, "stopParentDispatch", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._dispatchParents = false;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(SpriteEventDispatcher.prototype, "dispatchParents", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type, event) {
                var old = this._dispatchParents;
                this._dispatchParents = true;
                try {
                    this.dispatch(type, event);
                    if (this._dispatchParents && this._sprite.parent) {
                        this._sprite.parent.events.dispatchParents(type, event);
                    }
                }
                finally {
                    this._dispatchParents = old;
                }
            }
        });
        Object.defineProperty(SpriteEventDispatcher, "RENDERER_EVENTS", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                "click": function (event) {
                    if (this.isEnabled("click") && !this._sprite.isDragging() && this._sprite._hasDown() && !this._sprite._hasMoved(this._makePointerEvent("click", event))) {
                        this.dispatch("click", this._makePointerEvent("click", event));
                    }
                },
                "rightclick": function (event) {
                    if (this.isEnabled("rightclick")) {
                        this.dispatch("rightclick", this._makePointerEvent("rightclick", event));
                    }
                },
                "middleclick": function (event) {
                    if (this.isEnabled("middleclick")) {
                        this.dispatch("middleclick", this._makePointerEvent("middleclick", event));
                    }
                },
                "dblclick": function (event) {
                    this.dispatchParents("dblclick", this._makePointerEvent("dblclick", event));
                },
                "pointerover": function (event) {
                    if (this.isEnabled("pointerover")) {
                        this.dispatch("pointerover", this._makePointerEvent("pointerover", event));
                    }
                },
                "pointerout": function (event) {
                    if (this.isEnabled("pointerout")) {
                        this.dispatch("pointerout", this._makePointerEvent("pointerout", event));
                    }
                },
                "pointerdown": function (event) {
                    this.dispatchParents("pointerdown", this._makePointerEvent("pointerdown", event));
                },
                "pointerup": function (event) {
                    if (this.isEnabled("pointerup")) {
                        this.dispatch("pointerup", this._makePointerEvent("pointerup", event));
                    }
                },
                "globalpointerup": function (event) {
                    if (this.isEnabled("globalpointerup")) {
                        this.dispatch("globalpointerup", this._makePointerEvent("globalpointerup", event));
                    }
                },
                "globalpointermove": function (event) {
                    if (this.isEnabled("globalpointermove")) {
                        this.dispatch("globalpointermove", this._makePointerEvent("globalpointermove", event));
                    }
                },
                "wheel": function (event) {
                    this.dispatchParents("wheel", {
                        type: "wheel",
                        target: this._sprite,
                        originalEvent: event.event,
                        point: event.point,
                    });
                },
            }
        });
        return SpriteEventDispatcher;
    }(EventDispatcher));
    /**
     * A base class for all visual elements.
     *
     * @important
     */
    var Sprite = /** @class */ (function (_super) {
        __extends(Sprite, _super);
        function Sprite() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_adjustedLocalBounds", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: { left: 0, right: 0, top: 0, bottom: 0 }
            });
            Object.defineProperty(_this, "_localBounds", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: { left: 0, right: 0, top: 0, bottom: 0 }
            });
            Object.defineProperty(_this, "_parent", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_dataItem", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_templateField", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_sizeDirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            // Will be true only when dragging
            Object.defineProperty(_this, "_isDragging", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            // The event when the dragging starts
            Object.defineProperty(_this, "_dragEvent", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // The position when dragging starts
            Object.defineProperty(_this, "_dragPoint", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_isHidden", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_isShowing", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_isHiding", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_isDown", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_downPoint", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_downPoints", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_toggleDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_dragDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_tooltipDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_hoverDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_focusDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_tooltipMoveDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_tooltipPointerDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_statesHandled", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            return _this;
        }
        Object.defineProperty(Sprite.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setPrivateRaw("visible", true);
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(Sprite.prototype, "_markDirtyKey", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                _super.prototype._markDirtyKey.call(this, key);
                if (key == "x" || key == "y" || key == "dx" || key == "dy") {
                    this.markDirtyBounds();
                    this._addPercentagePositionChildren();
                    this.markDirtyPosition();
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_markDirtyPrivateKey", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                _super.prototype._markDirtyPrivateKey.call(this, key);
                if (key == "x" || key == "y") {
                    this.markDirtyPosition();
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_removeTemplateField", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._templateField) {
                    this._templateField._removeObjectTemplate(this);
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_createEvents", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return new SpriteEventDispatcher(this);
            }
        });
        Object.defineProperty(Sprite.prototype, "_processTemplateField", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var template;
                var field = this.get("templateField");
                if (field) {
                    var dataItem = this.dataItem;
                    if (dataItem) {
                        var context = dataItem.dataContext;
                        if (context) {
                            template = context[field];
                            if (!(template instanceof Template) && template) {
                                template = Template.new(template);
                            }
                        }
                    }
                }
                if (this._templateField !== template) {
                    this._removeTemplateField();
                    this._templateField = template;
                    if (template) {
                        template._setObjectTemplate(this);
                    }
                    this._applyTemplates();
                }
            }
        });
        // TODO change this to run before the element is added to the parent, so that way
        //      it doesn't need to apply the themes twice
        Object.defineProperty(Sprite.prototype, "_setDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var oldDataItem = this._dataItem;
                this._dataItem = dataItem;
                this._processTemplateField();
                var eventType = "dataitemchanged";
                if (this.events.isEnabled(eventType)) {
                    this.events.dispatch(eventType, {
                        type: eventType,
                        target: this,
                        oldDataItem: oldDataItem,
                        newDataItem: dataItem
                    });
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "dataItem", {
            /**
             * @return DataItem
             */
            get: function () {
                if (this._dataItem) {
                    return this._dataItem;
                }
                else {
                    var parent_1 = this._parent;
                    while (parent_1) {
                        if (parent_1._dataItem) {
                            return parent_1._dataItem;
                        }
                        else {
                            parent_1 = parent_1._parent;
                        }
                    }
                }
            },
            /**
             * A [[DataItem]] used for this element.
             *
             * NOTE: data item is being assigned automatically in most cases where it
             * matters. Use this accessor to set data item only if you know what you're
             * doing.
             *
             * @param  value  Data item
             */
            set: function (value) {
                this._setDataItem(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Sprite.prototype, "_addPercentageSizeChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var parent = this.parent;
                if (parent) {
                    if (this.get("width") instanceof Percent || this.get("height") instanceof Percent) {
                        pushOne(parent._percentageSizeChildren, this);
                    }
                    else {
                        removeFirst(parent._percentageSizeChildren, this);
                    }
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_addPercentagePositionChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var parent = this.parent;
                if (parent) {
                    if (this.get("x") instanceof Percent || this.get("y") instanceof Percent) {
                        pushOne(parent._percentagePositionChildren, this);
                    }
                    else {
                        removeFirst(parent._percentagePositionChildren, this);
                    }
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Sprite.prototype, "markDirtyPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._root._addDirtyPosition(this);
            }
        });
        Object.defineProperty(Sprite.prototype, "updatePivotPoint", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var bounds = this._localBounds;
                if (bounds) {
                    var centerX = this.get("centerX");
                    if (centerX != null) {
                        this._display.pivot.x = bounds.left + relativeToValue(centerX, bounds.right - bounds.left);
                    }
                    var centerY = this.get("centerY");
                    if (centerY != null) {
                        this._display.pivot.y = bounds.top + relativeToValue(centerY, bounds.bottom - bounds.top);
                    }
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._beforeChanged.call(this);
                // handling states in beforeChanged, otherwise states is not applied without animated theme
                this._handleStates();
                if (this.isDirty("tooltip")) {
                    var previous = this._prevSettings.tooltip;
                    if (previous) {
                        previous.dispose();
                    }
                }
                if (this.isDirty("layer")) {
                    this._display.setLayer(this.get("layer"));
                    this.markDirtyLayer();
                }
                if (this.isDirty("tooltipPosition")) {
                    var tooltipMoveDp = this._tooltipMoveDp;
                    if (tooltipMoveDp) {
                        tooltipMoveDp.dispose();
                        this._tooltipMoveDp = undefined;
                    }
                    var tooltipPointerDp = this._tooltipPointerDp;
                    if (tooltipPointerDp) {
                        tooltipPointerDp.dispose();
                        this._tooltipPointerDp = undefined;
                    }
                    if (this.get("tooltipPosition") == "pointer") {
                        this._tooltipPointerDp = new MultiDisposer([
                            this.events.on("pointerover", function () {
                                _this._tooltipMoveDp = _this.events.on("globalpointermove", function (e) {
                                    _this.showTooltip(e.point);
                                });
                            }),
                            this.events.on("pointerout", function () {
                                var tooltipMoveDp = _this._tooltipMoveDp;
                                if (tooltipMoveDp) {
                                    tooltipMoveDp.dispose();
                                    _this._tooltipMoveDp = undefined;
                                }
                            })
                        ]);
                    }
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_handleStates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._statesHandled) {
                    if (this.isDirty("active")) {
                        if (this.get("active")) {
                            this.states.applyAnimate("active");
                            this.set("ariaChecked", true);
                        }
                        else {
                            if (!this.isHidden()) {
                                this.states.applyAnimate("default");
                            }
                            this.set("ariaChecked", false);
                        }
                        this.markDirtyAccessibility();
                    }
                    if (this.isDirty("disabled")) {
                        if (this.get("disabled")) {
                            this.states.applyAnimate("disabled");
                            this.set("ariaChecked", false);
                        }
                        else {
                            if (!this.isHidden()) {
                                this.states.applyAnimate("default");
                            }
                            this.set("ariaChecked", true);
                        }
                        this.markDirtyAccessibility();
                    }
                    this._statesHandled = true;
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._changed.call(this);
                var display = this._display;
                var events = this.events;
                if (this.isDirty("draggable")) {
                    var draggable = this.get("draggable");
                    if (draggable) {
                        this.set("interactive", true);
                        this._dragDp = new MultiDisposer([
                            events.on("pointerdown", function (ev) {
                                _this.dragStart(ev);
                            }),
                            events.on("globalpointermove", function (ev) {
                                _this.dragMove(ev);
                            }),
                            events.on("globalpointerup", function (ev) {
                                _this.dragStop(ev);
                            })
                        ]);
                    }
                    else {
                        if (this._dragDp) {
                            this._dragDp.dispose();
                            this._dragDp = undefined;
                        }
                    }
                    display.cancelTouch = draggable ? true : false;
                }
                if (this.isDirty("tooltipText")) {
                    var tooltipText = this.get("tooltipText");
                    if (tooltipText) {
                        this._tooltipDp = new MultiDisposer([
                            events.on("pointerover", function () {
                                _this.showTooltip();
                            }),
                            events.on("pointerout", function () {
                                if (_this.get("showTooltipOn") != "always") {
                                    _this.hideTooltip();
                                }
                            })
                        ]);
                    }
                    else {
                        if (this._tooltipDp) {
                            this._tooltipDp.dispose();
                            this._tooltipDp = undefined;
                        }
                    }
                }
                if (this.isDirty("toggleKey")) {
                    var toggleKey_1 = this.get("toggleKey");
                    if (toggleKey_1 && toggleKey_1 != "none") {
                        this._toggleDp = events.on("click", function () {
                            if (!_this._isDragging) {
                                _this.set(toggleKey_1, !_this.get(toggleKey_1));
                            }
                        });
                    }
                    else {
                        if (this._toggleDp) {
                            this._toggleDp.dispose();
                            this._toggleDp = undefined;
                        }
                    }
                }
                if (this.isDirty("opacity")) {
                    display.alpha = Math.max(0, this.get("opacity", 1));
                }
                if (this.isDirty("rotation")) {
                    this.markDirtyBounds();
                    display.angle = this.get("rotation", 0);
                }
                if (this.isDirty("scale")) {
                    this.markDirtyBounds();
                    display.scale = this.get("scale", 0);
                }
                if (this.isDirty("centerX") || this.isDirty("centerY")) {
                    this.markDirtyBounds();
                    this.updatePivotPoint();
                }
                if (this.isDirty("visible") || this.isPrivateDirty("visible") || this.isDirty("forceHidden")) {
                    if (!this.get("visible") || !this.getPrivate("visible") || this.get("forceHidden")) {
                        display.visible = false;
                        this.hideTooltip();
                    }
                    else {
                        display.visible = true;
                    }
                    this.markDirtyBounds();
                    if (this.get("focusable")) {
                        this.markDirtyAccessibility();
                    }
                }
                if (this.isDirty("width") || this.isDirty("height")) {
                    this.markDirtyBounds();
                    this._addPercentageSizeChildren();
                    var parent_2 = this.parent;
                    if (parent_2) {
                        if ((this.isDirty("width") && this.get("width") instanceof Percent) || (this.isDirty("height") && this.get("height") instanceof Percent)) {
                            parent_2.markDirty();
                            parent_2._prevWidth = 0;
                        }
                    }
                    this._sizeDirty = true;
                }
                if (this.isDirty("maxWidth") || this.isDirty("maxHeight") || this.isPrivateDirty("width") || this.isPrivateDirty("height") || this.isDirty("minWidth") || this.isDirty("minHeight") || this.isPrivateDirty("maxWidth") || this.isPrivateDirty("maxHeight")) {
                    this.markDirtyBounds();
                    this._sizeDirty = true;
                }
                if (this._sizeDirty) {
                    this._updateSize();
                }
                if (this.isDirty("wheelable")) {
                    var wheelable = this.get("wheelable");
                    if (wheelable) {
                        this.set("interactive", true);
                    }
                    display.wheelable = wheelable ? true : false;
                }
                // Accessibility
                if (this.isDirty("tabindexOrder") || this.isDirty("focusableGroup")) {
                    if (this.get("focusable")) {
                        this._root._registerTabindexOrder(this);
                    }
                    else {
                        this._root._unregisterTabindexOrder(this);
                    }
                }
                if (this.isDirty("filter")) {
                    //this.markDirtyBounds();
                    display.filter = this.get("filter");
                }
                if (this.isDirty("cursorOverStyle")) {
                    display.cursorOverStyle = this.get("cursorOverStyle");
                }
                if (this.isDirty("hoverOnFocus")) {
                    if (this.get("hoverOnFocus")) {
                        this._focusDp = new MultiDisposer([
                            events.on("focus", function () {
                                // TODO: proper hover, not just tooltip
                                _this.showTooltip();
                            }),
                            events.on("blur", function () {
                                // TODO: proper hover, not just tooltip
                                _this.hideTooltip();
                            })
                        ]);
                    }
                    else {
                        if (this._focusDp) {
                            this._focusDp.dispose();
                            this._focusDp = undefined;
                        }
                    }
                }
                if (this.isDirty("focusable")) {
                    if (this.get("focusable")) {
                        this._root._registerTabindexOrder(this);
                    }
                    else {
                        this._root._unregisterTabindexOrder(this);
                    }
                    this.markDirtyAccessibility();
                }
                if (this.isDirty("role") || this.isDirty("ariaLive") || this.isDirty("ariaChecked") || this.isDirty("ariaHidden") || this.isDirty("ariaOrientation") || this.isDirty("ariaValueNow") || this.isDirty("ariaValueMin") || this.isDirty("ariaValueMax") || this.isDirty("ariaValueText") || this.isDirty("ariaLabel") || this.isDirty("ariaControls")) {
                    // display.accessibility.ariaLabel = populateString(this, this.get("ariaLabel", ""));
                    // @todo make sure ariaLabel gets populated in Root
                    this.markDirtyAccessibility();
                }
                if (this.isDirty("exportable")) {
                    display.exportable = this.get("exportable");
                }
                if (this.isDirty("interactive")) {
                    var events_1 = this.events;
                    if (this.get("interactive")) {
                        this._hoverDp = new MultiDisposer([
                            events_1.on("click", function (ev) {
                                if (isTouchEvent(ev.originalEvent)) {
                                    if (!_this.getPrivate("touchHovering")) {
                                        _this.setTimeout(function () {
                                            _this._handleOver();
                                            if (_this.get("tooltipText")) {
                                                _this.showTooltip();
                                            }
                                            _this.setPrivateRaw("touchHovering", true);
                                            _this.events.dispatch("pointerover", {
                                                type: "pointerover",
                                                target: ev.target,
                                                originalEvent: ev.originalEvent,
                                                point: ev.point,
                                                simulated: ev.simulated
                                            });
                                        }, 10);
                                    }
                                }
                            }),
                            events_1.on("globalpointerup", function (ev) {
                                if (isTouchEvent(ev.originalEvent)) {
                                    if (_this.getPrivate("touchHovering")) {
                                        _this._handleOut();
                                        if (_this.get("tooltipText")) {
                                            _this.hideTooltip();
                                        }
                                    }
                                    _this.setPrivateRaw("touchHovering", false);
                                    _this.events.dispatch("pointerout", {
                                        type: "pointerout",
                                        target: ev.target,
                                        originalEvent: ev.originalEvent,
                                        point: ev.point,
                                        simulated: ev.simulated
                                    });
                                }
                                if (_this._isDown) {
                                    _this._handleUp(ev);
                                }
                                //this._isDown = false;
                            }),
                            events_1.on("pointerover", function () {
                                _this._handleOver();
                            }),
                            events_1.on("pointerout", function () {
                                _this._handleOut();
                            }),
                            events_1.on("pointerdown", function (e) {
                                _this._handleDown(e);
                            })
                        ]);
                    }
                    else {
                        this._display.interactive = false;
                        if (this._hoverDp) {
                            this._hoverDp.dispose();
                            this._hoverDp = undefined;
                        }
                    }
                }
                if (this.isDirty("forceInactive")) {
                    this._display.inactive = this.get("forceInactive", false);
                }
                if (this.get("showTooltipOn") == "always" && this._display.visible) {
                    this.showTooltip();
                }
            }
        });
        /**
         * @ignore
         * @todo should this be user-accessible?
         */
        Object.defineProperty(Sprite.prototype, "dragStart", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (e) {
                this._dragEvent = e;
                this.events.stopParentDispatch();
            }
        });
        /**
         * @ignore
         * @todo should this be user-accessible?
         */
        Object.defineProperty(Sprite.prototype, "dragStop", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (e) {
                this._dragEvent = undefined;
                this._dragPoint = undefined;
                this.events.stopParentDispatch();
                if (this._isDragging) {
                    this._isDragging = false;
                    var type = "dragstop";
                    if (this.events.isEnabled(type)) {
                        this.events.dispatch(type, {
                            type: type,
                            target: this,
                            originalEvent: e.originalEvent,
                            point: e.point,
                            simulated: e.simulated,
                        });
                    }
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_handleOver", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this.isHidden()) {
                    if (this.get("active") && this.states.lookup("hoverActive")) {
                        this.states.applyAnimate("hoverActive");
                    }
                    else if (this.get("disabled") && this.states.lookup("hoverDisabled")) {
                        this.states.applyAnimate("hoverDisabled");
                    }
                    else {
                        this.states.applyAnimate("hover");
                    }
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_handleOut", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this.isHidden()) {
                    if (this.get("active") && this.states.lookup("active")) {
                        this.states.applyAnimate("active");
                    }
                    else if (this.get("disabled") && this.states.lookup("disabled")) {
                        this.states.applyAnimate("disabled");
                    }
                    else {
                        if (this.states.lookup("hover") || this.states.lookup("hoverActive")) {
                            this.states.applyAnimate("default");
                        }
                    }
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_handleUp", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (e) {
                if (!this.isHidden()) {
                    if (this.get("active") && this.states.lookup("active")) {
                        this.states.applyAnimate("active");
                    }
                    else if (this.get("disabled") && this.states.lookup("disabled")) {
                        this.states.applyAnimate("disabled");
                    }
                    else if (this.states.lookup("down")) {
                        if (this.isHover()) {
                            this.states.applyAnimate("hover");
                        }
                        else {
                            this.states.applyAnimate("default");
                        }
                    }
                    // @todo remove this once migrated to _downPoints
                    this._downPoint = undefined;
                    var pointerId = getPointerId(e.originalEvent);
                    delete this._downPoints[pointerId];
                    if (keys(this._downPoints).length == 0) {
                        this._isDown = false;
                    }
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_hasMoved", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (e) {
                // @todo remove this once migrated to _downPoints
                // if (this._downPoint) {
                // 	const x = Math.abs(this._downPoint.x - e.point.x);
                // 	const y = Math.abs(this._downPoint.y - e.point.y);
                // 	return (x > 5) || (y > 5);
                // }
                var pointerId = getPointerId(e.originalEvent);
                var downPoint = this._downPoints[pointerId];
                if (downPoint) {
                    var x = Math.abs(downPoint.x - e.point.x);
                    var y = Math.abs(downPoint.y - e.point.y);
                    return (x > 5) || (y > 5);
                }
                return false;
            }
        });
        Object.defineProperty(Sprite.prototype, "_hasDown", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return keys(this._downPoints).length > 0;
            }
        });
        Object.defineProperty(Sprite.prototype, "_handleDown", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (e) {
                var parent = this.parent;
                if (parent && !this.get("draggable")) {
                    parent._handleDown(e);
                }
                if (this.get("interactive") && !this.isHidden()) {
                    if (this.states.lookup("down")) {
                        this.states.applyAnimate("down");
                    }
                    this._downPoint = {
                        x: e.point.x,
                        y: e.point.y
                    };
                    // @todo remove this once migrated to _downPoints
                    this._isDown = true;
                    var pointerId = getPointerId(e.originalEvent);
                    this._downPoints[pointerId] = {
                        x: e.point.x,
                        y: e.point.y
                    };
                }
            }
        });
        /**
         * @ignore
         * @todo should this be user-accessible?
         */
        Object.defineProperty(Sprite.prototype, "dragMove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (e) {
                var dragEvent = this._dragEvent;
                if (dragEvent) {
                    var angle = 0;
                    var parent_3 = this.parent;
                    while (parent_3 != null) {
                        angle += parent_3.get("rotation", 0);
                        parent_3 = parent_3.parent;
                    }
                    var x = e.point.x - dragEvent.point.x;
                    var y = e.point.y - dragEvent.point.y;
                    var events = this.events;
                    if (dragEvent.simulated && !this._isDragging) {
                        this._isDragging = true;
                        this._dragEvent = e;
                        this._dragPoint = {
                            x: this.x(),
                            y: this.y()
                        };
                        var type = "dragstart";
                        if (events.isEnabled(type)) {
                            events.dispatch(type, {
                                type: type,
                                target: this,
                                originalEvent: e.originalEvent,
                                point: e.point,
                                simulated: e.simulated,
                            });
                        }
                    }
                    if (this._isDragging) {
                        var dragPoint = this._dragPoint;
                        this.set("x", dragPoint.x + x * cos$1(angle) + y * sin$1(angle));
                        this.set("y", dragPoint.y + y * cos$1(angle) - x * sin$1(angle));
                        var type = "dragged";
                        if (events.isEnabled(type)) {
                            events.dispatch(type, {
                                type: type,
                                target: this,
                                originalEvent: e.originalEvent,
                                point: e.point,
                                simulated: e.simulated,
                            });
                        }
                    }
                    else {
                        if (Math.hypot(x, y) > 5) {
                            this._isDragging = true;
                            this._dragEvent = e;
                            this._dragPoint = {
                                x: this.x(),
                                y: this.y()
                            };
                            var type = "dragstart";
                            if (events.isEnabled(type)) {
                                events.dispatch(type, {
                                    type: type,
                                    target: this,
                                    originalEvent: e.originalEvent,
                                    point: e.point,
                                    simulated: e.simulated
                                });
                            }
                        }
                    }
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_updateSize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        Object.defineProperty(Sprite.prototype, "_getBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._localBounds = this._display.getLocalBounds();
            }
        });
        /**
         * Returns depth (how deep in the hierachy of the content tree) of this
         * element.
         *
         * @return Depth
         */
        Object.defineProperty(Sprite.prototype, "depth", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var self = this.parent;
                var depth = 0;
                while (true) {
                    if (self) {
                        ++depth;
                        self = self.parent;
                    }
                    else {
                        return depth;
                    }
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Sprite.prototype, "markDirtySize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._sizeDirty = true;
                this.markDirty();
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Sprite.prototype, "markDirtyBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var display = this._display;
                if (this.get("isMeasured")) {
                    this._root._addDirtyBounds(this);
                    display.isMeasured = true;
                    display.invalidateBounds();
                    var parent_4 = this.parent;
                    if (parent_4 && this.get("position") != "absolute") {
                        if (parent_4.get("width") == null || parent_4.get("height") == null || parent_4.get("layout")) {
                            parent_4.markDirtyBounds();
                        }
                    }
                    if (this.get("focusable") && this.isFocus()) {
                        this.markDirtyAccessibility();
                    }
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Sprite.prototype, "markDirtyAccessibility", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                //if (this._root.focused(this)) {
                this._root._invalidateAccessibility(this);
                //}
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Sprite.prototype, "markDirtyLayer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                //this._display.markDirtyLayer(this.isDirty("opacity") || this.isDirty("visible")); https://codepen.io/team/amcharts/pen/gOWZPmP <- problems
                this._display.markDirtyLayer(true);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Sprite.prototype, "markDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.markDirty.call(this);
                this.markDirtyLayer();
            }
        });
        Object.defineProperty(Sprite.prototype, "_updateBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var oldBounds = this._adjustedLocalBounds;
                var newBounds;
                // if display.visible == false, it still returns bounds
                if (!this.get("visible") || !this.getPrivate("visible") || this.get("forceHidden")) {
                    newBounds = {
                        left: 0,
                        right: 0,
                        top: 0,
                        bottom: 0
                    };
                    this._localBounds = newBounds;
                    this._adjustedLocalBounds = newBounds;
                }
                else {
                    this._getBounds();
                    this._fixMinBounds(this._localBounds);
                    this.updatePivotPoint();
                    this._adjustedLocalBounds = this._display.getAdjustedBounds(this._localBounds);
                    newBounds = this._adjustedLocalBounds;
                }
                if (!oldBounds || (oldBounds.left !== newBounds.left || oldBounds.top !== newBounds.top || oldBounds.right !== newBounds.right || oldBounds.bottom !== newBounds.bottom)) {
                    var eventType = "boundschanged";
                    if (this.events.isEnabled(eventType)) {
                        this.events.dispatch(eventType, { type: eventType, target: this });
                    }
                    if (this.parent) {
                        this.parent.markDirty();
                        this.parent.markDirtyBounds();
                    }
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_fixMinBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                var minWidth = this.get("minWidth");
                var minHeight = this.get("minHeight");
                if (isNumber(minWidth)) {
                    if (bounds.right - bounds.left < minWidth) {
                        bounds.right = bounds.left + minWidth;
                    }
                }
                if (isNumber(minHeight)) {
                    if (bounds.bottom - bounds.top < minHeight) {
                        bounds.bottom = bounds.top + minHeight;
                    }
                }
                var privateWidth = this.getPrivate("width");
                var privateHeight = this.getPrivate("height");
                if (isNumber(privateWidth)) {
                    bounds.right = bounds.left + privateWidth;
                }
                if (isNumber(privateHeight)) {
                    bounds.bottom = bounds.top + privateHeight;
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_removeParent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parent) {
                if (parent) {
                    parent.children.removeValue(this);
                    removeFirst(parent._percentageSizeChildren, this);
                    removeFirst(parent._percentagePositionChildren, this);
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_clearDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._clearDirty.call(this);
                this._sizeDirty = false;
                this._statesHandled = false;
            }
        });
        /**
         * Simulate hover over element.
         */
        Object.defineProperty(Sprite.prototype, "hover", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.showTooltip();
                this._handleOver();
            }
        });
        /**
         * Simulate unhover over element.
         */
        Object.defineProperty(Sprite.prototype, "unhover", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.hideTooltip();
                this._handleOut();
            }
        });
        /**
         * Shows element's [[Tooltip]].
         */
        Object.defineProperty(Sprite.prototype, "showTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                var tooltip = this.getTooltip();
                var tooltipText = this.get("tooltipText");
                if (tooltipText && tooltip) {
                    var tooltipPosition = this.get("tooltipPosition");
                    var tooltipTarget = this.getPrivate("tooltipTarget", this);
                    if (tooltipPosition == "fixed" || !point) {
                        this._display._setMatrix();
                        point = this.toGlobal(tooltipTarget._getTooltipPoint());
                    }
                    tooltip.set("pointTo", point);
                    tooltip.set("tooltipTarget", tooltipTarget);
                    if (!tooltip.get("x")) {
                        tooltip.set("x", point.x);
                    }
                    if (!tooltip.get("y")) {
                        tooltip.set("y", point.y);
                    }
                    tooltip.label.set("text", tooltipText);
                    var dataItem = this.dataItem;
                    if (dataItem) {
                        tooltip.label._setDataItem(dataItem);
                    }
                    if (this.get("showTooltipOn") == "always" && (point.x < 0 || point.x > this._root.width() || point.y < 0 || point.y > this._root.height())) {
                        this.hideTooltip();
                        return;
                    }
                    tooltip.label.text.markDirtyText();
                    var promise = tooltip.show();
                    this.setPrivateRaw("showingTooltip", true);
                    return promise;
                }
            }
        });
        /**
         * Hides element's [[Tooltip]].
         */
        Object.defineProperty(Sprite.prototype, "hideTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var tooltip = this.getTooltip();
                if (tooltip) {
                    var promise = tooltip.hide();
                    this.setPrivateRaw("showingTooltip", false);
                    return promise;
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_getTooltipPoint", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var bounds = this._localBounds;
                if (bounds) {
                    var x = 0;
                    var y = 0;
                    if (!this.get("isMeasured")) {
                        x = relativeToValue(this.get("tooltipX", 0), this.width());
                        y = relativeToValue(this.get("tooltipY", 0), this.height());
                    }
                    else {
                        x = bounds.left + relativeToValue(this.get("tooltipX", 0), bounds.right - bounds.left);
                        y = bounds.top + relativeToValue(this.get("tooltipY", 0), bounds.bottom - bounds.top);
                    }
                    return { x: x, y: y };
                }
                return { x: 0, y: 0 };
            }
        });
        /**
         * Returns [[Tooltip]] used for this element.
         *
         * @return Tooltip
         */
        Object.defineProperty(Sprite.prototype, "getTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var tooltip = this.get("tooltip");
                if (!tooltip) {
                    var parent_5 = this.parent;
                    if (parent_5) {
                        return parent_5.getTooltip();
                    }
                }
                else {
                    return tooltip;
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_updatePosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var parent = this.parent;
                var dx = this.get("dx", 0);
                var dy = this.get("dy", 0);
                var x = this.get("x");
                var _x = this.getPrivate("x");
                var xx = 0;
                var yy = 0;
                var position = this.get("position");
                if (x instanceof Percent) {
                    if (parent) {
                        x = parent.innerWidth() * x.value + parent.get("paddingLeft", 0);
                    }
                    else {
                        x = 0;
                    }
                }
                if (isNumber(x)) {
                    xx = x + dx;
                }
                else {
                    if (_x != null) {
                        xx = _x;
                    }
                    else if (parent) {
                        if (position == "relative") {
                            xx = parent.get("paddingLeft", 0) + dx;
                        }
                    }
                }
                var y = this.get("y");
                var _y = this.getPrivate("y");
                if (y instanceof Percent) {
                    if (parent) {
                        y = parent.innerHeight() * y.value + parent.get("paddingTop", 0);
                    }
                    else {
                        y = 0;
                    }
                }
                if (isNumber(y)) {
                    yy = y + dy;
                }
                else {
                    if (_y != null) {
                        yy = _y;
                    }
                    else if (parent) {
                        if (position == "relative") {
                            yy = parent.get("paddingTop", 0) + dy;
                        }
                    }
                }
                var display = this._display;
                if (display.x != xx || display.y != yy) {
                    display.invalidateBounds();
                    display.x = xx;
                    display.y = yy;
                    var eventType = "positionchanged";
                    if (this.events.isEnabled(eventType)) {
                        this.events.dispatch(eventType, { type: eventType, target: this });
                    }
                }
                // Update tooltip position together with the Sprite
                if (this.getPrivate("showingTooltip")) {
                    this.showTooltip();
                }
            }
        });
        /**
         * Returns element's actual X position in pixels.
         *
         * @return X (px)
         */
        Object.defineProperty(Sprite.prototype, "x", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var x = this.get("x");
                var _x = this.getPrivate("x");
                var parent = this.parent;
                if (parent) {
                    if (x instanceof Percent) {
                        return relativeToValue(x, parent.innerWidth()) + parent.get("paddingLeft", 0);
                    }
                    else {
                        if (!isNumber(x)) {
                            if (_x != null) {
                                return _x;
                            }
                            else {
                                return parent.get("paddingLeft", this._display.x);
                            }
                        }
                        else {
                            return x;
                        }
                    }
                }
                return this._display.x;
            }
        });
        /**
         * Returns element's actual Y position in pixels.
         *
         * @return Y (px)
         */
        Object.defineProperty(Sprite.prototype, "y", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _y = this.getPrivate("y");
                if (_y != null) {
                    return _y;
                }
                var y = this.get("y");
                var parent = this.parent;
                if (parent) {
                    if (y instanceof Percent) {
                        return relativeToValue(y, parent.innerHeight()) + parent.get("paddingTop", 0);
                    }
                    else {
                        if (!isNumber(y)) {
                            if (_y != null) {
                                return _y;
                            }
                            else {
                                return parent.get("paddingTop", this._display.y);
                            }
                        }
                        else {
                            return y;
                        }
                    }
                }
                return this._display.y;
            }
        });
        Object.defineProperty(Sprite.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._dispose.call(this);
                this._display.dispose();
                this._removeTemplateField();
                this._removeParent(this.parent);
                this._root._removeFocusElement(this);
                var tooltip = this.get("tooltip");
                if (tooltip) {
                    tooltip.dispose();
                }
                this.markDirty();
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Sprite.prototype, "adjustedLocalBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._fixMinBounds(this._adjustedLocalBounds);
                return this._adjustedLocalBounds;
            }
        });
        /**
         * Returns local coordinates of the element's bounds.
         *
         * @ignore
         * @return Global bounds
         */
        Object.defineProperty(Sprite.prototype, "localBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._localBounds;
            }
        });
        /**
         * Returns adjusted local coordinates of the element's bounds.
         *
         * @ignore
         * @return Global bounds
         */
        Object.defineProperty(Sprite.prototype, "bounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var bounds = this._adjustedLocalBounds;
                var x = this.x();
                var y = this.y();
                return { left: bounds.left + x, right: bounds.right + x, top: bounds.top + y, bottom: bounds.bottom + y };
            }
        });
        /**
         * Returns global coordinates of the element's bounds.
         *
         * @ignore
         * @return Global bounds
         */
        Object.defineProperty(Sprite.prototype, "globalBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var bounds = this.localBounds();
                var p0 = this.toGlobal({ x: bounds.left, y: bounds.top });
                var p1 = this.toGlobal({ x: bounds.right, y: bounds.top });
                var p2 = this.toGlobal({ x: bounds.right, y: bounds.bottom });
                var p3 = this.toGlobal({ x: bounds.left, y: bounds.bottom });
                return {
                    left: Math.min(p0.x, p1.x, p2.x, p3.x),
                    top: Math.min(p0.y, p1.y, p2.y, p3.y),
                    right: Math.max(p0.x, p1.x, p2.x, p3.x),
                    bottom: Math.max(p0.y, p1.y, p2.y, p3.y)
                };
            }
        });
        Object.defineProperty(Sprite.prototype, "_onShow", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_duration) {
            }
        });
        Object.defineProperty(Sprite.prototype, "_onHide", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_duration) {
            }
        });
        /**
         * Plays initial reveal animation regardless if element is currently hidden
         * or visible.
         *
         * @param   duration  Duration of the animation in milliseconds
         * @param   delay     Delay showing of the element by X milliseconds
         * @return            Promise
         */
        Object.defineProperty(Sprite.prototype, "appear", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (duration, delay) {
                return __awaiter(this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.hide(0)];
                            case 1:
                                _a.sent();
                                if (delay) {
                                    return [2 /*return*/, new Promise(function (success, _error) {
                                            _this.setTimeout(function () {
                                                success(_this.show(duration));
                                            }, delay);
                                        })];
                                }
                                else {
                                    return [2 /*return*/, this.show(duration)];
                                }
                        }
                    });
                });
            }
        });
        /**
         * Shows currently hidden element and returns a `Promise` which completes
         * when all showing animations are finished.
         *
         * ```TypeScript
         * series.show().then(function(ev) {
         *   console.log("Series is now fully visible");
         * })
         * ```
         * ```JavaScript
         * series.show().then(function(ev) {
         *   console.log("Series is now fully visible");
         * })
         * ```
         *
         * @return Promise
         */
        Object.defineProperty(Sprite.prototype, "show", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var animations;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!!this._isShowing) return [3 /*break*/, 2];
                                this._isHidden = false;
                                this._isShowing = true;
                                this._isHiding = false;
                                if (this.states.lookup("default").get("visible")) {
                                    this.set("visible", true);
                                }
                                this._onShow(duration);
                                animations = this.states.applyAnimate("default", duration);
                                return [4 /*yield*/, waitForAnimations(animations)];
                            case 1:
                                _a.sent();
                                this._isShowing = false;
                                _a.label = 2;
                            case 2: return [2 /*return*/];
                        }
                    });
                });
            }
        });
        /**
         * Hides the element and returns a `Promise` which completes when all hiding
         * animations are finished.
         *
         * ```TypeScript
         * series.hide().then(function(ev) {
         *   console.log("Series finished hiding");
         * })
         * ```
         * ```JavaScript
         * series.hide().then(function(ev) {
         *   console.log("Series finished hiding");
         * })
         * ```
         *
         * @return Promise
         */
        Object.defineProperty(Sprite.prototype, "hide", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var state, animations;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!(!this._isHiding && !this._isHidden)) return [3 /*break*/, 2];
                                this._isHiding = true;
                                this._isShowing = false;
                                state = this.states.lookup("hidden");
                                if (!state) {
                                    state = this.states.create("hidden", {
                                        "opacity": 0,
                                        "visible": false
                                    });
                                }
                                this._isHidden = true;
                                this._onHide(duration);
                                animations = this.states.applyAnimate("hidden", duration);
                                return [4 /*yield*/, waitForAnimations(animations)];
                            case 1:
                                _a.sent();
                                this._isHiding = false;
                                _a.label = 2;
                            case 2: return [2 /*return*/];
                        }
                    });
                });
            }
        });
        /**
         * Returns `true` if this element is currently hidden.
         *
         * @return Is hidden?
         */
        Object.defineProperty(Sprite.prototype, "isHidden", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._isHidden;
            }
        });
        /**
         * Returns `true` if this element is currently animating to a default state.
         *
         * @return Is showing?
         */
        Object.defineProperty(Sprite.prototype, "isShowing", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._isShowing;
            }
        });
        /**
         * Returns `true` if this element is currently animating to a hidden state.
         *
         * @return Is hiding?
         */
        Object.defineProperty(Sprite.prototype, "isHiding", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._isHiding;
            }
        });
        /**
         * Returns `true` if this element is currently hovered by a pointer.
         *
         * @return Is hovered?
         */
        Object.defineProperty(Sprite.prototype, "isHover", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._display.hovering();
            }
        });
        /**
         * Returns `true` if this element does currently have focus.
         *
         * @return Is focused?
         */
        Object.defineProperty(Sprite.prototype, "isFocus", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._root.focused(this);
            }
        });
        /**
         * Returns `true` if this element is currently being dragged.
         *
         * @return Is dragged?
         */
        Object.defineProperty(Sprite.prototype, "isDragging", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._isDragging;
            }
        });
        /**
         * Returns `false` if if either public or private setting `visible` is set
         * to `false`, or `forceHidden` is set to `true`.
         *
         * @return Visible?
         */
        Object.defineProperty(Sprite.prototype, "isVisible", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.get("visible") && this.getPrivate("visible") && !this.get("forceHidden")) {
                    return true;
                }
                return false;
            }
        });
        /**
         * Same as `isVisible()`, except it checks all ascendants, too.
         *
         * @since 5.2.7
         * @return Visible?
         */
        Object.defineProperty(Sprite.prototype, "isVisibleDeep", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._parent ? (this._parent.isVisibleDeep() && this.isVisible()) : this.isVisible();
            }
        });
        /**
         * Returns width of this element in pixels.
         *
         * @return Width (px)
         */
        Object.defineProperty(Sprite.prototype, "width", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var width = this.get("width");
                var maxWidth = this.get("maxWidth", this.getPrivate("maxWidth"));
                var minWidth = this.get("minWidth");
                var privateWidth = this.getPrivate("width");
                var w = 0;
                if (isNumber(privateWidth)) {
                    w = privateWidth;
                }
                else {
                    if (width == null) {
                        if (this._adjustedLocalBounds) {
                            w = this._adjustedLocalBounds.right - this._adjustedLocalBounds.left;
                        }
                    }
                    else {
                        if (width instanceof Percent) {
                            var parent_6 = this.parent;
                            if (parent_6) {
                                w = parent_6.innerWidth() * width.value;
                            }
                            else {
                                w = this._root.width() * width.value;
                            }
                        }
                        else if (isNumber(width)) {
                            w = width;
                        }
                    }
                }
                if (isNumber(minWidth)) {
                    w = Math.max(minWidth, w);
                }
                if (isNumber(maxWidth)) {
                    w = Math.min(maxWidth, w);
                }
                return w;
            }
        });
        /**
         * Returns maximum allowed width of this element in pixels.
         *
         * @return Maximum width (px)
         */
        Object.defineProperty(Sprite.prototype, "maxWidth", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var maxWidth = this.get("maxWidth", this.getPrivate("maxWidth"));
                if (isNumber(maxWidth)) {
                    return maxWidth;
                }
                else {
                    var width = this.get("width");
                    if (isNumber(width)) {
                        return width;
                    }
                }
                var parent = this.parent;
                if (parent) {
                    return parent.innerWidth();
                }
                return this._root.width();
            }
        });
        /**
         * Returns maximum allowed height of this element in pixels.
         *
         * @return Maximum height (px)
         */
        Object.defineProperty(Sprite.prototype, "maxHeight", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var maxHeight = this.get("maxHeight", this.getPrivate("maxHeight"));
                if (isNumber(maxHeight)) {
                    return maxHeight;
                }
                else {
                    var height = this.get("height");
                    if (isNumber(height)) {
                        return height;
                    }
                }
                var parent = this.parent;
                if (parent) {
                    return parent.innerHeight();
                }
                return this._root.height();
            }
        });
        /**
         * Returns height of this element in pixels.
         *
         * @return Height (px)
         */
        Object.defineProperty(Sprite.prototype, "height", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var height = this.get("height");
                var maxHeight = this.get("maxHeight", this.getPrivate("maxHeight"));
                var minHeight = this.get("minHeight");
                var privateHeight = this.getPrivate("height");
                var h = 0;
                if (isNumber(privateHeight)) {
                    h = privateHeight;
                }
                else {
                    if (height == null) {
                        if (this._adjustedLocalBounds) {
                            h = this._adjustedLocalBounds.bottom - this._adjustedLocalBounds.top;
                        }
                    }
                    else {
                        if (height instanceof Percent) {
                            var parent_7 = this.parent;
                            if (parent_7) {
                                h = parent_7.innerHeight() * height.value;
                            }
                            else {
                                h = this._root.height() * height.value;
                            }
                        }
                        else if (isNumber(height)) {
                            h = height;
                        }
                    }
                }
                if (isNumber(minHeight)) {
                    h = Math.max(minHeight, h);
                }
                if (isNumber(maxHeight)) {
                    h = Math.min(maxHeight, h);
                }
                return h;
            }
        });
        Object.defineProperty(Sprite.prototype, "_findStaticTemplate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                // templateField overrides template
                if (this._templateField && f(this._templateField)) {
                    return this._templateField;
                }
                return _super.prototype._findStaticTemplate.call(this, f);
            }
        });
        Object.defineProperty(Sprite.prototype, "_walkParents", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                if (this._parent) {
                    this._walkParent(f);
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_walkParent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                if (this._parent) {
                    this._parent._walkParent(f);
                }
                f(this);
            }
        });
        Object.defineProperty(Sprite.prototype, "parent", {
            /**
             * Parent [[Container]] of this element.
             *
             * @return Parent container
             */
            get: function () {
                return this._parent;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Sprite.prototype, "_setParent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parent, updateChildren) {
                if (updateChildren === void 0) { updateChildren = false; }
                var prevParent = this._parent;
                if (parent !== prevParent) {
                    this.markDirtyBounds();
                    parent.markDirty();
                    this._parent = parent;
                    if (updateChildren) {
                        this._removeParent(prevParent);
                        if (parent) {
                            this._addPercentageSizeChildren();
                            this._addPercentagePositionChildren();
                        }
                    }
                    this.markDirtyPosition();
                    this._applyThemes();
                }
            }
        });
        /**
         * Returns an instance of [[NumberFormatter]] used in this element.
         *
         * If this element does not have it set, global one form [[Root]] is used.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/using-formatters/} for more info
         * @return NumberFormatter instace
         */
        Object.defineProperty(Sprite.prototype, "getNumberFormatter", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.get("numberFormatter", this._root.numberFormatter);
            }
        });
        /**
         * Returns an instance of [[DateFormatter]] used in this element.
         *
         * If this element does not have it set, global one form [[Root]] is used.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/using-formatters/} for more info
         * @return DateFormatter instace
         */
        Object.defineProperty(Sprite.prototype, "getDateFormatter", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.get("dateFormatter", this._root.dateFormatter);
            }
        });
        /**
         * Returns an instance of [[DurationFormatter]] used in this element.
         *
         * If this element does not have it set, global one form [[Root]] is used.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/using-formatters/} for more info
         * @return DurationFormatter instace
         */
        Object.defineProperty(Sprite.prototype, "getDurationFormatter", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.get("durationFormatter", this._root.durationFormatter);
            }
        });
        /**
         * Converts X/Y coordinate within this element to a global coordinate.
         *
         * @param  point  Local coordinate
         * @return        Global coordinate
         */
        Object.defineProperty(Sprite.prototype, "toGlobal", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                return this._display.toGlobal(point);
            }
        });
        /**
         * Converts global X/Y coordinate to a coordinate within this element.
         *
         * @param  point  Global coordinate
         * @return        Local coordinate
         */
        Object.defineProperty(Sprite.prototype, "toLocal", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                return this._display.toLocal(point);
            }
        });
        Object.defineProperty(Sprite.prototype, "_getDownPoint", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var id = this._getDownPointId();
                if (id) {
                    return this._downPoints[id];
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_getDownPointId", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._downPoints) {
                    return keysOrdered(this._downPoints, function (a, b) {
                        if (a > b) {
                            return 1;
                        }
                        if (a < b) {
                            return -1;
                        }
                        return 0;
                    })[0];
                }
            }
        });
        /**
         * Moves sprite to the end of the parent's children array.
         *
         * Depending on `layout` setting of the parten container, it may effect the
         * positioning or overlapping order of the elements.
         */
        Object.defineProperty(Sprite.prototype, "toFront", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var parent = this.parent;
                if (parent) {
                    parent.children.moveValue(this, parent.children.length - 1);
                }
            }
        });
        /**
         * Moves sprite to the beginning of the parent's children array.
         *
         * Depending on `layout` setting of the parten container, it may effect the
         * positioning or overlapping order of the elements.
         */
        Object.defineProperty(Sprite.prototype, "toBack", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var parent = this.parent;
                if (parent) {
                    parent.children.moveValue(this, 0);
                }
            }
        });
        Object.defineProperty(Sprite, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Sprite"
        });
        Object.defineProperty(Sprite, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Entity.classNames.concat([Sprite.className])
        });
        return Sprite;
    }(Entity));

    /**
     * From https://github.com/pixijs/pixi.js/blob/3dd0ff9a935f0bc13a09aefff9eb2872f02c51b9/packages/canvas/canvas-renderer/src/utils/mapCanvasBlendModesToPixi.ts#L13
     */
    var BlendMode;
    (function (BlendMode) {
        BlendMode["ADD"] = "lighter";
        BlendMode["COLOR"] = "color";
        BlendMode["COLOR_BURN"] = "color-burn";
        BlendMode["COLOR_DODGE"] = "color-dodge";
        BlendMode["DARKEN"] = "darken";
        BlendMode["DIFFERENCE"] = "difference";
        BlendMode["DST_OVER"] = "destination-over";
        BlendMode["EXCLUSION"] = "exclusion";
        BlendMode["HARD_LIGHT"] = "hard-light";
        BlendMode["HUE"] = "hue";
        BlendMode["LIGHTEN"] = "lighten";
        BlendMode["LUMINOSITY"] = "luminosity";
        BlendMode["MULTIPLY"] = "multiply";
        BlendMode["NORMAL"] = "source-over";
        BlendMode["OVERLAY"] = "overlay";
        BlendMode["SATURATION"] = "saturation";
        BlendMode["SCREEN"] = "screen";
        BlendMode["SOFT_LIGHT"] = "soft-light";
        BlendMode["SRC_ATOP"] = "source-atop";
        BlendMode["XOR"] = "xor";
    })(BlendMode || (BlendMode = {}));

    var visualSettings = ["fill", "fillOpacity", "stroke", "strokeWidth", "strokeOpacity", "fillPattern", "strokePattern", "fillGradient", "strokeGradient", "strokeDasharray", "strokeDashoffset"];
    /**
     * Base class used for drawing shapes.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     * @important
     */
    var Graphics = /** @class */ (function (_super) {
        __extends(Graphics, _super);
        function Graphics() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_display", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._root._renderer.makeGraphics()
            });
            Object.defineProperty(_this, "_clear", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            return _this;
        }
        Object.defineProperty(Graphics.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("draw") || this.isDirty("svgPath")) {
                    this.markDirtyBounds();
                }
                if (this.isDirty("fill") || this.isDirty("stroke") || this.isDirty("visible") || this.isDirty("forceHidden") || this.isDirty("fillGradient") || this.isDirty("strokeGradient") || this.isDirty("fillPattern") || this.isDirty("strokePattern") || this.isDirty("fillOpacity") || this.isDirty("strokeOpacity") || this.isDirty("strokeWidth") || this.isDirty("draw") || this.isDirty("blendMode") || this.isDirty("strokeDasharray") || this.isDirty("strokeDashoffset") || this.isDirty("svgPath") || this.isDirty("lineJoin") || this.isDirty("shadowColor") || this.isDirty("shadowBlur") || this.isDirty("shadowOffsetX") || this.isDirty("shadowOffsetY")) {
                    this._clear = true;
                }
                if (this.isDirty("fillGradient")) {
                    var gradient = this.get("fillGradient");
                    if (gradient) {
                        this._display.isMeasured = true;
                        var gradientTarget = gradient.get("target");
                        if (gradientTarget) {
                            this._disposers.push(gradientTarget.events.on("boundschanged", function () {
                                _this._markDirtyKey("fill");
                            }));
                            this._disposers.push(gradientTarget.events.on("positionchanged", function () {
                                _this._markDirtyKey("fill");
                            }));
                        }
                    }
                }
                if (this.isDirty("strokeGradient")) {
                    var gradient = this.get("strokeGradient");
                    if (gradient) {
                        this._display.isMeasured = true;
                        var gradientTarget = gradient.get("target");
                        if (gradientTarget) {
                            this._disposers.push(gradientTarget.events.on("boundschanged", function () {
                                _this._markDirtyKey("stroke");
                            }));
                            this._disposers.push(gradientTarget.events.on("positionchanged", function () {
                                _this._markDirtyKey("stroke");
                            }));
                        }
                    }
                }
            }
        });
        Object.defineProperty(Graphics.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear) {
                    this.markDirtyLayer();
                    this._display.clear();
                    var strokeDasharray = this.get("strokeDasharray");
                    if (isNumber(strokeDasharray)) {
                        if (strokeDasharray < 0.5) {
                            strokeDasharray = [0];
                        }
                        else {
                            strokeDasharray = [strokeDasharray];
                        }
                    }
                    this._display.setLineDash(strokeDasharray);
                    var strokeDashoffset = this.get("strokeDashoffset");
                    if (strokeDashoffset) {
                        this._display.setLineDashOffset(strokeDashoffset);
                    }
                    var blendMode = this.get("blendMode", BlendMode.NORMAL);
                    this._display.blendMode = blendMode;
                    var draw = this.get("draw");
                    if (draw) {
                        draw(this._display, this);
                    }
                    var svgPath = this.get("svgPath");
                    if (svgPath != null) {
                        this._display.svgPath(svgPath);
                    }
                }
            }
        });
        Object.defineProperty(Graphics.prototype, "_afterChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._afterChanged.call(this);
                if (this._clear) {
                    var fill_1 = this.get("fill");
                    var fillGradient = this.get("fillGradient");
                    var fillPattern = this.get("fillPattern");
                    var fillOpacity_1 = this.get("fillOpacity");
                    var stroke_1 = this.get("stroke");
                    var strokeGradient = this.get("strokeGradient");
                    var strokePattern = this.get("strokePattern");
                    var shadowColor = this.get("shadowColor");
                    var shadowBlur = this.get("shadowBlur");
                    var shadowOffsetX = this.get("shadowOffsetX");
                    var shadowOffsetY = this.get("shadowOffsetY");
                    var shadowOpacity = this.get("shadowOpacity");
                    //const bounds = this._display.getLocalBounds();
                    if (shadowColor && (shadowBlur || shadowOffsetX || shadowOffsetY)) {
                        this._display.shadow(shadowColor, shadowBlur, shadowOffsetX, shadowOffsetY, shadowOpacity);
                    }
                    if (fillPattern) {
                        var changed = false;
                        if (fill_1 && (!fillPattern.get("fill") || fillPattern.get("fillInherited"))) {
                            fillPattern.set("fill", fill_1);
                            fillPattern.set("fillInherited", true);
                            changed = true;
                        }
                        if (stroke_1 && (!fillPattern.get("color") || fillPattern.get("colorInherited"))) {
                            fillPattern.set("color", stroke_1);
                            fillPattern.set("colorInherited", true);
                            changed = true;
                        }
                        if (changed) {
                            // @todo: is this OK?
                            fillPattern._changed();
                        }
                        var pattern = fillPattern.pattern;
                        if (pattern) {
                            this._display.beginFill(pattern, fillOpacity_1);
                            this._display.endFill();
                        }
                    }
                    else if (fillGradient) {
                        if (fill_1) {
                            var stops = fillGradient.get("stops", []);
                            if (stops.length) {
                                each$1(stops, function (stop) {
                                    if ((!stop.color || stop.colorInherited) && fill_1) {
                                        stop.color = fill_1;
                                        stop.colorInherited = true;
                                    }
                                    if (stop.opacity == null || stop.opacityInherited) {
                                        stop.opacity = fillOpacity_1;
                                        stop.opacityInherited = true;
                                    }
                                });
                            }
                        }
                        var gradient = fillGradient.getFill(this);
                        if (gradient) {
                            this._display.beginFill(gradient, fillOpacity_1);
                            this._display.endFill();
                        }
                    }
                    else if (fill_1) {
                        this._display.beginFill(fill_1, fillOpacity_1);
                        this._display.endFill();
                    }
                    if (stroke_1 || strokeGradient || strokePattern) {
                        var strokeOpacity_1 = this.get("strokeOpacity");
                        var strokeWidth = this.get("strokeWidth", 1);
                        var lineJoin = this.get("lineJoin");
                        if (strokePattern) {
                            var changed = false;
                            if (stroke_1 && (!strokePattern.get("color") || strokePattern.get("colorInherited"))) {
                                strokePattern.set("color", stroke_1);
                                strokePattern.set("colorInherited", true);
                                changed = true;
                            }
                            if (changed) {
                                // @todo: is this OK?
                                strokePattern._changed();
                            }
                            var pattern = strokePattern.pattern;
                            if (pattern) {
                                this._display.lineStyle(strokeWidth, pattern, strokeOpacity_1, lineJoin);
                                this._display.endStroke();
                            }
                        }
                        else if (strokeGradient) {
                            var stops = strokeGradient.get("stops", []);
                            if (stops.length) {
                                each$1(stops, function (stop) {
                                    if ((!stop.color || stop.colorInherited) && stroke_1) {
                                        stop.color = stroke_1;
                                        stop.colorInherited = true;
                                    }
                                    if (stop.opacity == null || stop.opacityInherited) {
                                        stop.opacity = strokeOpacity_1;
                                        stop.opacityInherited = true;
                                    }
                                });
                            }
                            var gradient = strokeGradient.getFill(this);
                            if (gradient) {
                                this._display.lineStyle(strokeWidth, gradient, strokeOpacity_1, lineJoin);
                                this._display.endStroke();
                            }
                        }
                        else if (stroke_1) {
                            this._display.lineStyle(strokeWidth, stroke_1, strokeOpacity_1, lineJoin);
                            this._display.endStroke();
                        }
                    }
                }
                this._clear = false;
            }
        });
        Object.defineProperty(Graphics, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Graphics"
        });
        Object.defineProperty(Graphics, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Sprite.classNames.concat([Graphics.className])
        });
        return Graphics;
    }(Sprite));

    /**
     * Draws a rectangle.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     * @important
     */
    var Rectangle = /** @class */ (function (_super) {
        __extends(Rectangle, _super);
        function Rectangle() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Rectangle.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("width") || this.isDirty("height") || this.isPrivateDirty("width") || this.isPrivateDirty("height")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Rectangle.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear && !this.get("draw")) {
                    this._draw();
                }
            }
        });
        Object.defineProperty(Rectangle.prototype, "_draw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._display.drawRect(0, 0, this.width(), this.height());
            }
        });
        Object.defineProperty(Rectangle.prototype, "_updateSize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.markDirty();
                this._clear = true;
            }
        });
        Object.defineProperty(Rectangle, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Rectangle"
        });
        Object.defineProperty(Rectangle, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([Rectangle.className])
        });
        return Rectangle;
    }(Graphics));

    function eachChildren(container, f) {
        if (container.get("reverseChildren", false)) {
            container.children.eachReverse(f);
        }
        else {
            container.children.each(f);
        }
    }
    /**
     * Base class for [[Container]] layouts.
     */
    var Layout = /** @class */ (function (_super) {
        __extends(Layout, _super);
        function Layout() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Layout, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Layout"
        });
        Object.defineProperty(Layout, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Entity.classNames.concat([Layout.className])
        });
        return Layout;
    }(Entity));

    /**
     * A horizontal children layout for [[Container]].
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info
     */
    var HorizontalLayout = /** @class */ (function (_super) {
        __extends(HorizontalLayout, _super);
        function HorizontalLayout() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(HorizontalLayout.prototype, "updateContainer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (container) {
                var paddingLeft = container.get("paddingLeft", 0);
                var availableWidth = container.innerWidth();
                var totalPercent = 0;
                eachChildren(container, function (child) {
                    if (child.isVisible()) {
                        if (child.get("position") == "relative") {
                            var childWidth = child.get("width");
                            if (childWidth instanceof Percent) {
                                totalPercent += childWidth.value;
                                var w = availableWidth * childWidth.value;
                                var minWidth = child.get("minWidth", -Infinity);
                                if (minWidth > w) {
                                    availableWidth -= minWidth;
                                    totalPercent -= childWidth.value;
                                }
                                var maxWidth = child.get("maxWidth", child.getPrivate("maxWidth", Infinity));
                                if (w > maxWidth) {
                                    availableWidth -= maxWidth;
                                    totalPercent -= childWidth.value;
                                }
                            }
                            else {
                                if (!isNumber(childWidth)) {
                                    childWidth = child.width();
                                }
                                availableWidth -= childWidth + child.get("marginLeft", 0) + child.get("marginRight", 0);
                            }
                        }
                    }
                });
                if (availableWidth > 0) {
                    eachChildren(container, function (child) {
                        if (child.isVisible()) {
                            if (child.get("position") == "relative") {
                                var childWidth = child.get("width");
                                if (childWidth instanceof Percent) {
                                    var privateWidth = availableWidth * childWidth.value / totalPercent - child.get("marginLeft", 0) - child.get("marginRight", 0);
                                    var minWidth = child.get("minWidth", -Infinity);
                                    var maxWidth = child.get("maxWidth", child.getPrivate("maxWidth", Infinity));
                                    privateWidth = Math.min(Math.max(minWidth, privateWidth), maxWidth);
                                    child.setPrivate("width", privateWidth);
                                }
                            }
                        }
                    });
                }
                var prevX = paddingLeft;
                eachChildren(container, function (child) {
                    if (child.get("position") == "relative") {
                        if (child.isVisible()) {
                            var bounds = child.adjustedLocalBounds();
                            var marginLeft = child.get("marginLeft", 0);
                            var marginRight = child.get("marginRight", 0);
                            var x = prevX + marginLeft - bounds.left;
                            child.setPrivate("x", x);
                            prevX = x + bounds.right + marginRight;
                        }
                        else {
                            child.setPrivate("x", undefined);
                        }
                    }
                });
            }
        });
        Object.defineProperty(HorizontalLayout, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "HorizontalLayout"
        });
        Object.defineProperty(HorizontalLayout, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Layout.classNames.concat([HorizontalLayout.className])
        });
        return HorizontalLayout;
    }(Layout));

    /**
     * A vertical children layout for [[Container]].
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info
     */
    var VerticalLayout = /** @class */ (function (_super) {
        __extends(VerticalLayout, _super);
        function VerticalLayout() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(VerticalLayout.prototype, "updateContainer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (container) {
                var paddingTop = container.get("paddingTop", 0);
                var availableHeight = container.innerHeight();
                var totalPercent = 0;
                eachChildren(container, function (child) {
                    if (child.isVisible()) {
                        if (child.get("position") == "relative") {
                            var childHeight = child.get("height");
                            if (childHeight instanceof Percent) {
                                totalPercent += childHeight.value;
                                var h = availableHeight * childHeight.value;
                                var minHeight = child.get("minHeight", -Infinity);
                                if (minHeight > h) {
                                    availableHeight -= minHeight;
                                    totalPercent -= childHeight.value;
                                }
                                var maxHeight = child.get("maxHeight", child.getPrivate("maxHeight", Infinity));
                                if (h > maxHeight) {
                                    availableHeight -= maxHeight;
                                    totalPercent -= childHeight.value;
                                }
                            }
                            else {
                                if (!isNumber(childHeight)) {
                                    childHeight = child.height();
                                }
                                availableHeight -= childHeight + child.get("marginTop", 0) + child.get("marginBottom", 0);
                            }
                        }
                    }
                });
                if (availableHeight > 0) {
                    eachChildren(container, function (child) {
                        if (child.isVisible()) {
                            if (child.get("position") == "relative") {
                                var childHeight = child.get("height");
                                if (childHeight instanceof Percent) {
                                    var privateHeight = availableHeight * childHeight.value / totalPercent - child.get("marginTop", 0) - child.get("marginBottom", 0);
                                    var minHeight = child.get("minHeight", -Infinity);
                                    var maxHeight = child.get("maxHeight", child.getPrivate("maxHeight", Infinity));
                                    privateHeight = Math.min(Math.max(minHeight, privateHeight), maxHeight);
                                    child.setPrivate("height", privateHeight);
                                }
                            }
                        }
                    });
                }
                var prevY = paddingTop;
                eachChildren(container, function (child) {
                    if (child.get("position") == "relative") {
                        if (child.isVisible()) {
                            var bounds = child.adjustedLocalBounds();
                            var marginTop = child.get("marginTop", 0);
                            var marginBottom = child.get("marginBottom", 0);
                            var y = prevY + marginTop - bounds.top;
                            child.setPrivate("y", y);
                            prevY = y + bounds.bottom + marginBottom;
                        }
                        else {
                            child.setPrivate("y", undefined);
                        }
                    }
                });
            }
        });
        Object.defineProperty(VerticalLayout, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "VerticalLayout"
        });
        Object.defineProperty(VerticalLayout, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Layout.classNames.concat([VerticalLayout.className])
        });
        return VerticalLayout;
    }(Layout));

    /**
     * A grid children layout for [[Container]].
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info
     */
    var GridLayout = /** @class */ (function (_super) {
        __extends(GridLayout, _super);
        function GridLayout() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(GridLayout.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._setRawDefault("maxColumns", Number.MAX_VALUE);
                _super.prototype._afterNew.call(this);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(GridLayout.prototype, "updateContainer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (container) {
                var paddingLeft = container.get("paddingLeft", 0);
                var paddingRight = container.get("paddingRight", 0);
                var paddingTop = container.get("paddingTop", 0);
                var availableWidth = container.maxWidth() - paddingLeft - paddingRight;
                var minCellWidth = availableWidth;
                var maxCellWidth = 1;
                eachChildren(container, function (child) {
                    if (child.get("visible") && child.getPrivate("visible") && !child.get("forceHidden")) {
                        if (child.get("position") != "absolute") {
                            var childWidth = child.width();
                            if (childWidth < minCellWidth) {
                                minCellWidth = childWidth;
                            }
                            if (childWidth > maxCellWidth) {
                                maxCellWidth = childWidth;
                            }
                        }
                    }
                });
                minCellWidth = fitToRange(minCellWidth, 1, availableWidth);
                maxCellWidth = fitToRange(maxCellWidth, 1, availableWidth);
                var columnCount = 1;
                if (this.get("fixedWidthGrid")) {
                    columnCount = availableWidth / maxCellWidth;
                }
                else {
                    columnCount = availableWidth / minCellWidth;
                }
                columnCount = Math.max(1, Math.floor(columnCount));
                columnCount = Math.min(this.get("maxColumns", Number.MAX_VALUE), columnCount);
                var columnWidths = this.getColumnWidths(container, columnCount, maxCellWidth, availableWidth);
                var prevY = paddingTop;
                var column = 0;
                var maxColumnHeight = 0;
                columnCount = columnWidths.length;
                var prevX = paddingLeft;
                eachChildren(container, function (child) {
                    if (child.get("position") == "relative" && child.isVisible()) {
                        var marginTop = child.get("marginTop", 0);
                        var marginBottom = child.get("marginBottom", 0);
                        var bounds = child.adjustedLocalBounds();
                        var marginLeft = child.get("marginLeft", 0);
                        var marginRight = child.get("marginRight", 0);
                        var x = prevX + marginLeft - bounds.left;
                        var y = prevY + marginTop - bounds.top;
                        child.setPrivate("x", x);
                        child.setPrivate("y", y);
                        prevX += columnWidths[column] + marginRight;
                        maxColumnHeight = Math.max(maxColumnHeight, child.height() + marginTop + marginBottom);
                        column++;
                        if (column >= columnCount) {
                            column = 0;
                            prevX = paddingLeft;
                            prevY += maxColumnHeight;
                        }
                    }
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(GridLayout.prototype, "getColumnWidths", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (container, columnCount, maxCellWidth, availableWidth) {
                var _this = this;
                var totalWidth = 0;
                var columnWidths = [];
                var column = 0;
                eachChildren(container, function (child) {
                    var bounds = child.adjustedLocalBounds();
                    if (child.get("position") != "absolute" && child.isVisible()) {
                        if (_this.get("fixedWidthGrid")) {
                            columnWidths[column] = maxCellWidth;
                        }
                        else {
                            columnWidths[column] = Math.max(columnWidths[column] | 0, bounds.right - bounds.left + child.get("marginLeft", 0) + child.get("marginRight", 0));
                        }
                        if (column < container.children.length - 1) {
                            column++;
                            if (column == columnCount) {
                                column = 0;
                            }
                        }
                    }
                });
                each$1(columnWidths, function (w) {
                    totalWidth += w;
                });
                if (totalWidth > availableWidth) {
                    if (columnCount > 2) {
                        columnCount -= 1;
                        return this.getColumnWidths(container, columnCount, maxCellWidth, availableWidth);
                    }
                    else {
                        return [availableWidth];
                    }
                }
                return columnWidths;
            }
        });
        Object.defineProperty(GridLayout, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "GridLayout"
        });
        Object.defineProperty(GridLayout, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Layout.classNames.concat([GridLayout.className])
        });
        return GridLayout;
    }(Layout));

    /**
     * A basic element that can have child elements, maintain their layout, and
     * have a background.
     *
     * It can have any [[Sprite]] element as a child, from very basic shapes, to
     * full-fledged charts.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/} for more info
     * @important
     */
    var Container = /** @class */ (function (_super) {
        __extends(Container, _super);
        function Container() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_display", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._root._renderer.makeContainer()
            });
            Object.defineProperty(_this, "_childrenDisplay", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._root._renderer.makeContainer()
            });
            /**
             * List of Container's child elements.
             */
            Object.defineProperty(_this, "children", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new Children(_this)
            });
            Object.defineProperty(_this, "_percentageSizeChildren", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "_percentagePositionChildren", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "_prevWidth", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_prevHeight", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_contentWidth", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_contentHeight", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_contentMask", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(Container.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._afterNew.call(this);
                this._display.addChild(this._childrenDisplay);
            }
        });
        Object.defineProperty(Container.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                eachReverse(this.allChildren(), function (child) {
                    child.dispose();
                });
                _super.prototype._dispose.call(this);
            }
        });
        Object.defineProperty(Container.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this.isDirty("interactiveChildren")) {
                    this._display.interactiveChildren = this.get("interactiveChildren", false);
                }
                if (this.isDirty("layout")) {
                    this._prevWidth = 0;
                    this._prevHeight = 0;
                    this.markDirtyBounds();
                    if (this._prevSettings.layout) {
                        this.children.each(function (child) {
                            child.removePrivate("x");
                            child.removePrivate("y");
                        });
                    }
                }
                if (this.isDirty("paddingTop") || this.isDirty("paddingBottom") || this.isDirty("paddingLeft") || this.isDirty("paddingRight")) {
                    this.children.each(function (child) {
                        child.markDirtyPosition();
                    });
                }
                if (this.isDirty("maskContent")) {
                    var childrenDisplay = this._childrenDisplay;
                    var contentMask = this._contentMask;
                    if (this.get("maskContent")) {
                        if (!contentMask) {
                            contentMask = Rectangle.new(this._root, {
                                width: this.width(),
                                height: this.height()
                            });
                            this._contentMask = contentMask;
                            childrenDisplay.addChildAt(contentMask._display, 0);
                            childrenDisplay.mask = contentMask._display;
                        }
                    }
                    else {
                        if (contentMask) {
                            childrenDisplay.removeChild(contentMask._display);
                            childrenDisplay.mask = null;
                            contentMask.dispose();
                        }
                    }
                }
            }
        });
        Object.defineProperty(Container.prototype, "_updateSize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._updateSize.call(this);
                each$1(this._percentageSizeChildren, function (child) {
                    child._updateSize();
                });
                each$1(this._percentagePositionChildren, function (child) {
                    child.markDirtyPosition();
                    child._updateSize();
                });
                this.updateBackground();
            }
        });
        Object.defineProperty(Container.prototype, "updateBackground", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var background = this.get("background");
                var bounds = this._localBounds;
                if (bounds && !this.isHidden()) {
                    var x = bounds.left;
                    var y = bounds.top;
                    var w = bounds.right - x;
                    var h = bounds.bottom - y;
                    var width = this.width();
                    var height = this.height();
                    if (background) {
                        background.setAll({ width: w, height: h, x: x, y: y });
                        if (this._display.interactive) {
                            background._display.interactive = true;
                        }
                    }
                    var contentMask = this._contentMask;
                    if (contentMask) {
                        contentMask.setAll({ width: width, height: height });
                    }
                    var verticalScrollbar = this.get("verticalScrollbar");
                    if (verticalScrollbar) {
                        verticalScrollbar.set("height", height);
                        verticalScrollbar.set("x", width - verticalScrollbar.width() - verticalScrollbar.get("marginRight", 0));
                        verticalScrollbar.set("end", verticalScrollbar.get("start", 0) + height / this._contentHeight);
                        var bg = verticalScrollbar.get("background");
                        if (bg) {
                            bg.setAll({ width: verticalScrollbar.width(), height: height });
                        }
                        var visible = true;
                        if (this._contentHeight <= height) {
                            visible = false;
                        }
                        verticalScrollbar.setPrivate("visible", visible);
                    }
                }
            }
        });
        Object.defineProperty(Container.prototype, "_applyThemes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (_super.prototype._applyThemes.call(this)) {
                    this.eachChildren(function (child) {
                        child._applyThemes();
                    });
                    return true;
                }
                else {
                    return false;
                }
            }
        });
        Object.defineProperty(Container.prototype, "_applyState", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name) {
                _super.prototype._applyState.call(this, name);
                if (this.get("setStateOnChildren")) {
                    this.eachChildren(function (child) {
                        child.states.apply(name);
                    });
                }
            }
        });
        Object.defineProperty(Container.prototype, "_applyStateAnimated", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name, duration) {
                _super.prototype._applyStateAnimated.call(this, name, duration);
                if (this.get("setStateOnChildren")) {
                    this.eachChildren(function (child) {
                        child.states.applyAnimate(name, duration);
                    });
                }
            }
        });
        /**
         * Returns container's inner width (width without padding) in pixels.
         *
         * @return Inner width (px)
         */
        Object.defineProperty(Container.prototype, "innerWidth", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.width() - this.get("paddingRight", 0) - this.get("paddingLeft", 0);
            }
        });
        /**
         * Returns container's inner height (height without padding) in pixels.
         *
         * @return Inner height (px)
         */
        Object.defineProperty(Container.prototype, "innerHeight", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.height() - this.get("paddingTop", 0) - this.get("paddingBottom", 0);
            }
        });
        Object.defineProperty(Container.prototype, "_getBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var width = this.get("width");
                var height = this.get("height");
                var pWidth = this.getPrivate("width");
                var pHeight = this.getPrivate("height");
                var bounds = {
                    left: 0,
                    top: 0,
                    right: this.width(),
                    bottom: this.height(),
                };
                var layout = this.get("layout");
                var horizontal = false;
                var vertical = false;
                if (layout instanceof HorizontalLayout || layout instanceof GridLayout) {
                    horizontal = true;
                }
                if (layout instanceof VerticalLayout) {
                    vertical = true;
                }
                if ((width != null || pWidth != null) && (height != null || pHeight != null) && !this.get("verticalScrollbar")) ;
                else {
                    var m = Number.MAX_VALUE;
                    var l_1 = m;
                    var r_1 = -m;
                    var t_1 = m;
                    var b_1 = -m;
                    var paddingLeft = this.get("paddingLeft", 0);
                    var paddingTop = this.get("paddingTop", 0);
                    var paddingRight = this.get("paddingRight", 0);
                    var paddingBottom = this.get("paddingBottom", 0);
                    this.children.each(function (child) {
                        if (child.get("position") != "absolute" && child.get("isMeasured")) {
                            var childBounds = child.adjustedLocalBounds();
                            var childX = child.x();
                            var childY = child.y();
                            var cl = childX + childBounds.left;
                            var cr = childX + childBounds.right;
                            var ct = childY + childBounds.top;
                            var cb = childY + childBounds.bottom;
                            if (horizontal) {
                                cl -= child.get("marginLeft", 0);
                                cr += child.get("marginRight", 0);
                            }
                            if (vertical) {
                                ct -= child.get("marginTop", 0);
                                cb += child.get("marginBottom", 0);
                            }
                            if (cl < l_1) {
                                l_1 = cl;
                            }
                            if (cr > r_1) {
                                r_1 = cr;
                            }
                            if (ct < t_1) {
                                t_1 = ct;
                            }
                            if (cb > b_1) {
                                b_1 = cb;
                            }
                        }
                    });
                    if (l_1 == m) {
                        l_1 = 0;
                    }
                    if (r_1 == -m) {
                        r_1 = 0;
                    }
                    if (t_1 == m) {
                        t_1 = 0;
                    }
                    if (b_1 == -m) {
                        b_1 = 0;
                    }
                    bounds.left = l_1 - paddingLeft;
                    bounds.top = t_1 - paddingTop;
                    bounds.right = r_1 + paddingRight;
                    bounds.bottom = b_1 + paddingBottom;
                }
                this._contentWidth = bounds.right - bounds.left;
                this._contentHeight = bounds.bottom - bounds.top;
                if (isNumber(width)) {
                    bounds.left = 0;
                    bounds.right = width;
                }
                if (isNumber(pWidth)) {
                    bounds.left = 0;
                    bounds.right = pWidth;
                }
                if (isNumber(height)) {
                    bounds.top = 0;
                    bounds.bottom = height;
                }
                if (isNumber(pHeight)) {
                    bounds.top = 0;
                    bounds.bottom = pHeight;
                }
                this._localBounds = bounds;
            }
        });
        Object.defineProperty(Container.prototype, "_updateBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var layout = this.get("layout");
                if (layout) {
                    layout.updateContainer(this);
                }
                _super.prototype._updateBounds.call(this);
                this.updateBackground();
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Container.prototype, "markDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.markDirty.call(this);
                this._root._addDirtyParent(this);
            }
        });
        Object.defineProperty(Container.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var innerWidth = this.innerWidth();
                var innerHeight = this.innerHeight();
                if (innerWidth != this._prevWidth || innerHeight != this._prevHeight) {
                    var layout = this.get("layout");
                    var horizontal_1 = false;
                    var vertical_1 = false;
                    if (layout) {
                        if (layout instanceof HorizontalLayout || layout instanceof GridLayout) {
                            horizontal_1 = true;
                        }
                        if (layout instanceof VerticalLayout) {
                            vertical_1 = true;
                        }
                    }
                    each$1(this._percentageSizeChildren, function (child) {
                        if (!horizontal_1) {
                            var width = child.get("width");
                            if (width instanceof Percent) {
                                child.setPrivate("width", width.value * innerWidth);
                            }
                        }
                        if (!vertical_1) {
                            var height = child.get("height");
                            if (height instanceof Percent) {
                                child.setPrivate("height", height.value * innerHeight);
                            }
                        }
                    });
                    each$1(this._percentagePositionChildren, function (child) {
                        child.markDirtyPosition();
                        child.markDirtyBounds();
                    });
                    this._prevWidth = innerWidth;
                    this._prevHeight = innerHeight;
                    this._sizeDirty = true;
                    this.updateBackground();
                }
                this._handleStates();
            }
        });
        Object.defineProperty(Container.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                if (this.isDirty("verticalScrollbar")) {
                    var verticalScrollbar_1 = this.get("verticalScrollbar");
                    if (verticalScrollbar_1) {
                        verticalScrollbar_1._setParent(this);
                        verticalScrollbar_1.children.removeValue(verticalScrollbar_1.startGrip);
                        verticalScrollbar_1.children.removeValue(verticalScrollbar_1.endGrip);
                        this.set("maskContent", true);
                        this.set("paddingRight", verticalScrollbar_1.width() + verticalScrollbar_1.get("marginRight", 0) + verticalScrollbar_1.get("marginLeft", 0));
                        var background = this.get("background");
                        if (!background) {
                            background = this.set("background", Rectangle.new(this._root, {
                                themeTags: ["background"],
                                fillOpacity: 0,
                                fill: this._root.interfaceColors.get("alternativeBackground")
                            }));
                        }
                        this._disposers.push(this.events.on("wheel", function (event) {
                            var wheelEvent = event.originalEvent;
                            // Ignore wheel event if it is happening on a non-chart element, e.g. if
                            // some page element is over the chart.
                            if (isLocalEvent(wheelEvent, _this)) {
                                wheelEvent.preventDefault();
                            }
                            else {
                                return;
                            }
                            var shiftY = wheelEvent.deltaY / 5000;
                            var start = verticalScrollbar_1.get("start", 0);
                            var end = verticalScrollbar_1.get("end", 1);
                            if (start + shiftY > 0 && end + shiftY < 1) {
                                verticalScrollbar_1.set("start", start + shiftY);
                                verticalScrollbar_1.set("end", end + shiftY);
                            }
                        }));
                        this._disposers.push(verticalScrollbar_1.events.on("rangechanged", function () {
                            var h = _this._contentHeight;
                            var childrenDisplay = _this._childrenDisplay;
                            var contentMask = _this._contentMask;
                            childrenDisplay.y = -verticalScrollbar_1.get("start") * h;
                            childrenDisplay.markDirtyLayer();
                            if (contentMask) {
                                contentMask._display.y = -childrenDisplay.y;
                                childrenDisplay.mask = contentMask._display;
                            }
                        }));
                        this._display.addChild(verticalScrollbar_1._display);
                    }
                }
                if (this.isDirty("background")) {
                    // TODO maybe this should dispose ?
                    var previous = this._prevSettings["background"];
                    if (previous) {
                        this._display.removeChild(previous._display);
                    }
                    var background = this.get("background");
                    if (background instanceof Sprite) {
                        background.set("isMeasured", false);
                        background._setParent(this);
                        this._display.addChildAt(background._display, 0);
                    }
                }
                if (this.isDirty("mask")) {
                    var mask = this.get("mask");
                    var previous = this._prevSettings["mask"];
                    if (previous) {
                        this._display.removeChild(previous._display);
                        if (previous != mask) {
                            previous.dispose();
                        }
                    }
                    if (mask) {
                        var parent = mask.parent;
                        if (parent) {
                            parent.children.removeValue(mask);
                        }
                        mask._setParent(this);
                        this._display.addChildAt(mask._display, 0);
                        this._childrenDisplay.mask = mask._display;
                    }
                }
            }
        });
        Object.defineProperty(Container.prototype, "_processTemplateField", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._processTemplateField.call(this);
                this.children.each(function (child) {
                    child._processTemplateField();
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Container.prototype, "walkChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                this.children.each(function (child) {
                    if (child instanceof Container) {
                        child.walkChildren(f);
                    }
                    f(child);
                });
            }
        });
        Object.defineProperty(Container.prototype, "eachChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                var background = this.get("background");
                if (background) {
                    f(background);
                }
                var verticalScrollbar = this.get("verticalScrollbar");
                if (verticalScrollbar) {
                    f(verticalScrollbar);
                }
                var mask = this.get("mask");
                if (mask) {
                    f(mask);
                }
                this.children.values.forEach(function (child) {
                    f(child);
                });
            }
        });
        Object.defineProperty(Container.prototype, "allChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var output = [];
                this.eachChildren(function (x) {
                    output.push(x);
                });
                return output;
            }
        });
        Object.defineProperty(Container, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Container"
        });
        Object.defineProperty(Container, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Sprite.classNames.concat([Container.className])
        });
        return Container;
    }(Sprite));

    var TextFormatter = /** @class */ (function () {
        function TextFormatter() {
        }
        /**
         * Replaces brackets with temporary placeholders.
         *
         * @ignore Exclude from docs
         * @param text  Input text
         * @return Escaped text
         */
        Object.defineProperty(TextFormatter, "escape", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text) {
                return text.
                    replace(/\[\[/g, this.prefix + "1").
                    replace(/([^\/\]]{1})\]\]/g, "$1" + this.prefix + "2").
                    replace(/\]\]/g, this.prefix + "2").
                    replace(/\{\{/g, this.prefix + "3").
                    replace(/\}\}/g, this.prefix + "4").
                    replace(/\'\'/g, this.prefix + "5");
            }
        });
        /**
         * Replaces placeholders back to brackets.
         *
         * @ignore Exclude from docs
         * @param text  Escaped text
         * @return Unescaped text
         */
        Object.defineProperty(TextFormatter, "unescape", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text) {
                return text.
                    replace(new RegExp(this.prefix + "1", "g"), "[[").
                    replace(new RegExp(this.prefix + "2", "g"), "]]").
                    replace(new RegExp(this.prefix + "3", "g"), "{{").
                    replace(new RegExp(this.prefix + "4", "g"), "}}").
                    replace(new RegExp(this.prefix + "5", "g"), "''");
            }
        });
        /**
         * Cleans up the text text for leftover double square brackets.
         *
         * @ignore Exclude from docs
         * @param text  Input text
         * @return Cleaned up text
         */
        Object.defineProperty(TextFormatter, "cleanUp", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text) {
                return text.
                    replace(/\[\[/g, "[").
                    replace(/\]\]/g, "]").
                    replace(/\{\{/g, "{").
                    replace(/\}\}/g, "}").
                    replace(/\'\'/g, "'");
            }
        });
        /**
         * Splits string into chunks. (style blocks, quoted blocks, regular blocks)
         *
         * If the second parameter `quotedBlocks` is set to `true` this method will
         * also single out text blocks enclosed within single quotes that no
         * formatting should be applied to, and they should be displayed as is.
         *
         * Default for the above is `false`, so that you can use single quote in text
         * without escaping it.
         *
         * If enabled, single quotes can be escaped by doubling it - adding two
         * single quotes, which will be replaced by a one single quote in the final
         * output.
         *
         * @ignore Exclude from docs
         * @param text          Text to chunk
         * @param quotedBlocks  Use quoted blocks
         * @param noFormatting  Formatting blocks will be treated as regular text
         * @return Array of string chunks
         */
        Object.defineProperty(TextFormatter, "chunk", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text, quotedBlocks, noFormatting) {
                if (quotedBlocks === void 0) { quotedBlocks = false; }
                if (noFormatting === void 0) { noFormatting = false; }
                // Init result
                var res = [];
                // Replace double (escaped) square spaces and quotes with temporary codes
                text = this.escape(text);
                // Deal with style blocks
                var chunks = quotedBlocks ? text.split("'") : [text];
                for (var i = 0; i < chunks.length; i++) {
                    var chunk = chunks[i];
                    // Empty?
                    if (chunk === "") {
                        continue;
                    }
                    if ((i % 2) === 0) {
                        // Text outside quotes
                        // Parse for style blocks which are "text" chunks, the rest chunks are
                        // "value"
                        chunk = chunk.replace(/\]\[/g, "]" + PLACEHOLDER + "[");
                        chunk = chunk.replace(/\[\]/g, "[ ]");
                        var chunks2 = chunk.split(/[\[\]]+/);
                        for (var i2 = 0; i2 < chunks2.length; i2++) {
                            var chunk2 = this.cleanUp(this.unescape(chunks2[i2]));
                            // Placeholder?
                            if (chunk2 === PLACEHOLDER) {
                                continue;
                            }
                            // Empty?
                            if (chunk2 === "") {
                                continue;
                            }
                            // Block or value
                            if ((i2 % 2) === 0) {
                                res.push({
                                    "type": "value",
                                    "text": chunk2
                                });
                            }
                            else {
                                res.push({
                                    "type": noFormatting ? "value" : "format",
                                    "text": "[" + chunk2 + "]"
                                });
                            }
                        }
                    }
                    else {
                        // A text within doublequotes
                        // All chunks are "text"
                        var chunks2 = chunk.split(/[\[\]]+/);
                        for (var i2 = 0; i2 < chunks2.length; i2++) {
                            var chunk2 = this.cleanUp(this.unescape(chunks2[i2]));
                            // Empty?
                            if (chunk2 === "") {
                                continue;
                            }
                            // Block or text
                            if ((i2 % 2) === 0) {
                                res.push({
                                    "type": "text",
                                    "text": chunk2
                                });
                            }
                            else if (this.isImage(chunk2)) {
                                res.push({
                                    "type": "image",
                                    "text": "[" + chunk2 + "]"
                                });
                            }
                            else {
                                res.push({
                                    "type": "format",
                                    "text": "[" + chunk2 + "]"
                                });
                            }
                        }
                    }
                }
                return res;
            }
        });
        /**
         * Checks if supplied format contains image information and should be
         * formatted as such.
         * I.e.: `[img: myImage.png]`
         *
         * @ignore
         * @param  text  Format
         * @return true if it is an image
         */
        Object.defineProperty(TextFormatter, "isImage", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text) {
                return text.match(/img[ ]?:/) ? true : false;
            }
        });
        Object.defineProperty(TextFormatter, "getTextStyle", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (style) {
                // let textStyle: string[] = [];
                // let textFill: string | undefined;
                var format = {};
                if (style == "" || style == "[ ]") {
                    return {};
                }
                // Pre-process quoted text
                var q = style.match(/('[^']*')|("[^"]*")/gi);
                if (q) {
                    for (var i = 0; i < q.length; i++) {
                        style = style.replace(q[i], q[i].replace(/['"]*/g, "").replace(/[ ]+/g, "+"));
                    }
                }
                // Get style parts
                var b = style.match(/([\w\-]*:[\s]?[^;\s\]]*)|(\#[\w]{1,6})|([\w\-]+)|(\/)/gi);
                // Empty?
                if (!b) {
                    return {};
                }
                // Check each part
                for (var i = 0; i < b.length; i++) {
                    if (b[i].match(/^(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)$/i)) {
                        format.fontWeight = b[i];
                    }
                    else if (b[i].match(/^(underline|line-through)$/i)) {
                        format.textDecoration = b[i];
                    }
                    else if (b[i] == "/") ;
                    else if (!b[i].match(/:/)) {
                        // Color
                        format.fill = Color.fromString(b[i]);
                    }
                    else {
                        var p = b[i].replace("+", " ").split(/:[ ]*/);
                        format[p[0]] = p[1];
                        //textStyle.push(b[i].replace(/^[a-zA-Z]:[ ]*/, ""));
                        //b[i] = b[i].replace(/\+/g, " ");
                    }
                }
                return format;
            }
        });
        Object.defineProperty(TextFormatter, "prefix", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "__amcharts__"
        });
        return TextFormatter;
    }());

    /** @ignore */ /** */
    /**
     * @ignore
     */
    function populateString(target, string) {
        if (string != null) {
            string = "" + string;
            string = TextFormatter.escape(string);
            var tags = string.match(/\{([^}]+)\}/g);
            var i = void 0;
            if (tags) {
                for (i = 0; i < tags.length; i++) {
                    var tag = tags[i].replace(/\{([^}]+)\}/, "$1");
                    var value = getTagValue(target, tag);
                    if (value == null) {
                        value = "";
                    }
                    string = string.split(tags[i]).join(value);
                }
            }
            string = TextFormatter.unescape(string);
        }
        else {
            string = "";
        }
        // TODO: apply adapter?
        return string;
    }
    /**
     * @ignore
     */
    function getTagValue(target, tagName, format) {
        var value;
        var dataItem = target.dataItem;
        // Parse parts
        var parts = [];
        var reg = /([^.]+)\(([^)]*)\)|([^.]+)/g;
        var matches;
        while (true) {
            matches = reg.exec(tagName);
            if (matches === null) {
                break;
            }
            if (matches[3]) {
                // Simple property
                parts.push({
                    prop: matches[3]
                });
                // Check if maybe we should force a formatter on this value
                var dateFields = target.getDateFormatter().get("dateFields", []);
                var numericFields = target.getNumberFormatter().get("numericFields", []);
                var durationFields = target.getDurationFormatter().get("durationFields", []);
                if (dateFields.indexOf(matches[3]) !== -1) {
                    parts.push({
                        method: "formatDate",
                        params: []
                    });
                }
                else if (numericFields.indexOf(matches[3]) !== -1) {
                    parts.push({
                        method: "formatNumber",
                        params: []
                    });
                }
                else if (durationFields.indexOf(matches[3]) !== -1) {
                    parts.push({
                        method: "formatDuration",
                        params: []
                    });
                }
            }
            else {
                // Method
                // Parse parameters
                var params = [];
                if (trim(matches[2]) != "") {
                    var reg2 = /'([^']*)'|"([^"]*)"|([0-9\-]+)/g;
                    var matches2 = void 0;
                    while (true) {
                        matches2 = reg2.exec(matches[2]);
                        if (matches2 === null) {
                            break;
                        }
                        params.push(matches2[1] || matches2[2] || matches2[3]);
                    }
                }
                parts.push({
                    method: matches[1],
                    params: params
                });
            }
        }
        // Check if we can retrieve the value from data item
        if (dataItem) {
            // Check values
            value = getTagValueFromObject(target, parts, dataItem._settings);
            // Check properties
            if (value == null || isObject(value)) { // isObject helps to solve problem with date axis, as for example dateX will get dateX from values object and won't get to the dateX date.
                value = getTagValueFromObject(target, parts, dataItem);
            }
            // Check data context
            var dataContext = dataItem.dataContext;
            if (value == null && dataContext) {
                value = getTagValueFromObject(target, parts, dataContext);
                // Maybe it's a literal dot-separated name of the key in dataContext?
                if (value == null) {
                    value = getTagValueFromObject(target, [{
                            prop: tagName
                        }], dataContext);
                }
                // scond data context level sometimes exist (tree map)
                if (value == null && dataContext.dataContext) {
                    value = getTagValueFromObject(target, parts, dataContext.dataContext);
                }
            }
            // Check component's data item
            if (value == null && dataItem.component && dataItem.component.dataItem !== dataItem) {
                value = getTagValue(dataItem.component, tagName);
            }
        }
        // Check sprite's properties
        if (value == null) {
            value = getTagValueFromObject(target, parts, target);
        }
        // Finally, check the parent
        if (value == null && target.parent) {
            value = getTagValue(target.parent, tagName);
        }
        return value;
    }
    /**
     * @ignore
     */
    function getCustomDataValue(target, prop) {
        var customData = target.getPrivate("customData");
        if (isObject(customData)) {
            return customData[prop];
        }
    }
    /**
     * @ignore
     */
    function getTagValueFromObject(target, parts, object, format) {
        var current = object;
        var formatApplied = false;
        for (var i = 0, len = parts.length; i < len; i++) {
            var part = parts[i];
            if (part.prop) {
                // Regular property
                if (current instanceof Sprite) {
                    var tmp = current.get(part.prop);
                    if (tmp == null)
                        tmp = current.getPrivate(part.prop);
                    if (tmp == null)
                        tmp = current[part.prop];
                    if (tmp == null)
                        tmp = getCustomDataValue(current, part.prop);
                    current = tmp;
                }
                else if (current.get) {
                    var tmp = current.get(part.prop);
                    if (tmp == null)
                        tmp = current[part.prop];
                    current = tmp;
                }
                else {
                    current = current[part.prop];
                }
                if (current == null) {
                    // Not set, return undefined
                    return;
                }
            }
            else {
                // Method
                switch (part.method) {
                    case "formatNumber":
                        var numberValue = toNumber(current);
                        if (numberValue != null) {
                            current = target.getNumberFormatter().format(numberValue, format || part.params[0] || undefined);
                            formatApplied = true;
                        }
                        break;
                    case "formatDate":
                        var dateValue = toDate(current);
                        if (!isDate(dateValue) || isNaN$1(dateValue.getTime())) {
                            // Was not able to get date out of value, quitting and letting
                            // calling method try another value
                            return;
                        }
                        if (dateValue != null) {
                            current = target.getDateFormatter().format(dateValue, format || part.params[0] || undefined);
                            formatApplied = true;
                        }
                        break;
                    case "formatDuration":
                        var durationValue = toNumber(current);
                        if (durationValue != null) {
                            current = target.getDurationFormatter().format(durationValue, format || part.params[0] || undefined, part.params[1] || undefined);
                            formatApplied = true;
                        }
                        break;
                    case "urlEncode":
                    case "encodeURIComponent":
                        current = encodeURIComponent(current);
                        break;
                    default:
                        if (current[part.method]) {
                            current[part.method].apply(object, part.params);
                        }
                        break;
                }
            }
        }
        // Apply default format if it wasn't applied explicitly
        if (!formatApplied) {
            var formatParts = [{
                    method: "",
                    params: format
                }];
            if (format == null) {
                // Format is not set
                // Determine from the type of the value
                if (isNumber(current)) {
                    formatParts[0].method = "formatNumber";
                    formatParts[0].params = "";
                }
                else if (isDate(current)) {
                    formatParts[0].method = "formatDate";
                    formatParts[0].params = "";
                }
            }
            else {
                // Format set
                // Try to determine formatter based on the format
                var formatterType = getFormat(format);
                // format
                if (formatterType === "number") {
                    formatParts[0].method = "formatNumber";
                }
                else if (formatterType === "date") {
                    formatParts[0].method = "formatDate";
                }
                else if (formatterType === "duration") {
                    formatParts[0].method = "formatDuration";
                }
            }
            // Apply format
            if (formatParts[0].method) {
                current = getTagValueFromObject(target, formatParts, current);
            }
        }
        return current;
    }

    /**
     * @ignore Text is an internal class. Use Label instead.
     */
    var Text = /** @class */ (function (_super) {
        __extends(Text, _super);
        function Text() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "textStyle", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._root._renderer.makeTextStyle()
            });
            Object.defineProperty(_this, "_display", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._root._renderer.makeText("", _this.textStyle)
            });
            Object.defineProperty(_this, "_textStyles", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: [
                    "textAlign",
                    "fontFamily",
                    "fontSize",
                    "fontStyle",
                    "fontWeight",
                    "fontStyle",
                    "fontVariant",
                    "textDecoration",
                    "shadowColor",
                    "shadowBlur",
                    "shadowOffsetX",
                    "shadowOffsetY",
                    "shadowOpacity",
                    // "leading",
                    // "letterSpacing",
                    "lineHeight",
                    "baselineRatio",
                    //"padding",
                    // "stroke",
                    // "strokeThickness",
                    // "trim",
                    // "wordWrap",
                    "direction",
                    "textBaseline",
                    "oversizedBehavior",
                    "breakWords",
                    "ellipsis",
                    "minScale"
                ]
            });
            Object.defineProperty(_this, "_originalScale", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(Text.prototype, "_updateBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this.get("text")) {
                    var newBounds = {
                        left: 0,
                        right: 0,
                        top: 0,
                        bottom: 0,
                    };
                    this._adjustedLocalBounds = newBounds;
                }
                else {
                    _super.prototype._updateBounds.call(this);
                }
            }
        });
        Object.defineProperty(Text.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._changed.call(this);
                this._display.clear();
                var textStyle = this.textStyle;
                if (this.isDirty("opacity")) {
                    var opacity = this.get("opacity", 1);
                    this._display.alpha = opacity;
                }
                if (this.isDirty("text") || this.isDirty("populateText")) {
                    this._display.text = this._getText();
                    this.markDirtyBounds();
                    if (this.get("role") == "tooltip") {
                        this._root.updateTooltip(this);
                    }
                }
                if (this.isDirty("width")) {
                    textStyle.wordWrapWidth = this.width();
                    this.markDirtyBounds();
                }
                if (this.isDirty("oversizedBehavior")) {
                    textStyle.oversizedBehavior = this.get("oversizedBehavior", "none");
                    this.markDirtyBounds();
                }
                if (this.isDirty("breakWords")) {
                    textStyle.breakWords = this.get("breakWords", false);
                    this.markDirtyBounds();
                }
                if (this.isDirty("ellipsis")) {
                    textStyle.ellipsis = this.get("ellipsis");
                    this.markDirtyBounds();
                }
                if (this.isDirty("ignoreFormatting")) {
                    textStyle.ignoreFormatting = this.get("ignoreFormatting", false);
                    this.markDirtyBounds();
                }
                if (this.isDirty("minScale")) {
                    textStyle.minScale = this.get("minScale", 0);
                    this.markDirtyBounds();
                }
                if (this.isDirty("fill")) {
                    var fill = this.get("fill");
                    if (fill) {
                        textStyle.fill = fill;
                    }
                }
                if (this.isDirty("maxWidth") || this.isPrivateDirty("maxWidth")) {
                    textStyle.maxWidth = this.get("maxWidth", this.getPrivate("maxWidth"));
                    this.markDirtyBounds();
                }
                if (this.isDirty("maxHeight") || this.isPrivateDirty("maxHeight")) {
                    textStyle.maxHeight = this.get("maxHeight", this.getPrivate("maxHeight"));
                    this.markDirtyBounds();
                }
                each$1(this._textStyles, function (styleName) {
                    if (_this._dirty[styleName]) {
                        textStyle[styleName] = _this.get(styleName);
                        _this.markDirtyBounds();
                    }
                });
                textStyle["fontSize"] = this.get("fontSize");
                textStyle["fontFamily"] = this.get("fontFamily");
                this._display.style = textStyle;
                if (this.isDirty("role") && this.get("role") == "tooltip") {
                    this._root.updateTooltip(this);
                }
            }
        });
        Object.defineProperty(Text.prototype, "_getText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var text = this.get("text", "");
                return this.get("populateText") ? populateString(this, text) : text;
            }
        });
        Object.defineProperty(Text.prototype, "markDirtyText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._display.text = this._getText();
                if (this.get("role") == "tooltip") {
                    this._root.updateTooltip(this);
                }
                this.markDirtyBounds();
                this.markDirty();
            }
        });
        Object.defineProperty(Text.prototype, "_setDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                _super.prototype._setDataItem.call(this, dataItem);
                if (this.get("populateText")) {
                    this.markDirtyText();
                }
            }
        });
        Object.defineProperty(Text, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Text"
        });
        Object.defineProperty(Text, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Sprite.classNames.concat([Text.className])
        });
        return Text;
    }(Sprite));

    /** @ignore */ /** */
    /**
     * @ignore
     */
    var Native = /** @class */ (function () {
        function Native() {
            var _this = this;
            Object.defineProperty(this, "_observer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_targets", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            this._observer = new ResizeObserver(function (entries) {
                each$1(entries, function (entry) {
                    each$1(_this._targets, function (x) {
                        if (x.target === entry.target) {
                            x.callback();
                        }
                    });
                });
            });
        }
        Object.defineProperty(Native.prototype, "addTarget", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target, callback) {
                this._observer.observe(target, { box: "border-box" });
                this._targets.push({ target: target, callback: callback });
            }
        });
        Object.defineProperty(Native.prototype, "removeTarget", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                this._observer.unobserve(target);
                keepIf(this._targets, function (x) {
                    return x.target !== target;
                });
            }
        });
        return Native;
    }());
    /**
     * @ignore
     */
    var Raf = /** @class */ (function () {
        function Raf() {
            Object.defineProperty(this, "_timer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: null
            });
            Object.defineProperty(this, "_targets", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
        }
        Object.defineProperty(Raf.prototype, "addTarget", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target, callback) {
                var _this = this;
                if (this._timer === null) {
                    var lastTime_1 = null;
                    var loop_1 = function () {
                        var currentTime = Date.now();
                        if (lastTime_1 === null || currentTime > (lastTime_1 + Raf.delay)) {
                            lastTime_1 = currentTime;
                            each$1(_this._targets, function (x) {
                                var newSize = x.target.getBoundingClientRect();
                                if (newSize.width !== x.size.width || newSize.height !== x.size.height) {
                                    x.size = newSize;
                                    x.callback();
                                }
                            });
                        }
                        if (_this._targets.length === 0) {
                            _this._timer = null;
                        }
                        else {
                            _this._timer = requestAnimationFrame(loop_1);
                        }
                    };
                    this._timer = requestAnimationFrame(loop_1);
                }
                // We start off with fake bounds so that sensor always kicks in
                var size = { width: 0, height: 0, left: 0, right: 0, top: 0, bottom: 0, x: 0, y: 0 };
                this._targets.push({ target: target, callback: callback, size: size });
            }
        });
        Object.defineProperty(Raf.prototype, "removeTarget", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                keepIf(this._targets, function (x) {
                    return x.target !== target;
                });
                if (this._targets.length === 0) {
                    if (this._timer !== null) {
                        cancelAnimationFrame(this._timer);
                        this._timer = null;
                    }
                }
            }
        });
        Object.defineProperty(Raf, "delay", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 200
        });
        return Raf;
    }());
    /**
     * @ignore
     */
    var observer = null;
    /**
     * @ignore
     */
    function makeSensor() {
        if (observer === null) {
            if (typeof ResizeObserver !== "undefined") {
                observer = new Native();
            }
            else {
                observer = new Raf();
            }
        }
        return observer;
    }
    /**
     * @ignore
     */
    var ResizeSensor = /** @class */ (function () {
        function ResizeSensor(element, callback) {
            Object.defineProperty(this, "_sensor", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_element", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_disposed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            this._sensor = makeSensor();
            this._element = element;
            this._sensor.addTarget(element, callback);
        }
        Object.defineProperty(ResizeSensor.prototype, "isDisposed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._disposed;
            }
        });
        Object.defineProperty(ResizeSensor.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._disposed) {
                    this._disposed = true;
                    this._sensor.removeTarget(this._element);
                }
            }
        });
        Object.defineProperty(ResizeSensor.prototype, "sensor", {
            get: function () {
                return this._sensor;
            },
            enumerable: false,
            configurable: true
        });
        return ResizeSensor;
    }());

    /**
     * Presets for common UI elements.
     */
    var InterfaceColors = /** @class */ (function (_super) {
        __extends(InterfaceColors, _super);
        function InterfaceColors() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(InterfaceColors, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InterfaceColors"
        });
        Object.defineProperty(InterfaceColors, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Entity.classNames.concat([InterfaceColors.className])
        });
        return InterfaceColors;
    }(Entity));

    /**
     * Creates a label with support for in-line styling and data bindings.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/labels/} for more info
     */
    var Label = /** @class */ (function (_super) {
        __extends(Label, _super);
        function Label() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_text", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_textKeys", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: [
                    "text",
                    "fill",
                    "textAlign",
                    "fontFamily",
                    "fontSize",
                    "fontStyle",
                    "fontWeight",
                    "fontStyle",
                    "fontVariant",
                    "textDecoration",
                    "shadowColor",
                    "shadowBlur",
                    "shadowOffsetX",
                    "shadowOffsetY",
                    "shadowOpacity",
                    // "leading",
                    // "letterSpacing",
                    "lineHeight",
                    "baselineRatio",
                    //"padding",
                    // "stroke",
                    // "strokeThickness",
                    // "trim",
                    // "wordWrap",
                    "direction",
                    "textBaseline",
                    "oversizedBehavior",
                    "breakWords",
                    "ellipsis",
                    "minScale",
                    "populateText",
                    "role",
                    "ignoreFormatting"
                ]
            });
            return _this;
        }
        Object.defineProperty(Label.prototype, "text", {
            /**
             * @ignore Text is not to be used directly
             */
            get: function () {
                return this._text;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._afterNew.call(this);
                this._makeText();
                each$1(this._textKeys, function (property) {
                    var propValue = _this.get(property);
                    if (propValue != undefined) {
                        _this._text.set(property, propValue);
                    }
                });
            }
        });
        Object.defineProperty(Label.prototype, "_makeText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._text = this.children.push(Text.new(this._root, {}));
            }
        });
        Object.defineProperty(Label.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._updateChildren.call(this);
                each$1(this._textKeys, function (property) {
                    _this._text.set(property, _this.get(property));
                });
                if (this.isDirty("maxWidth") || this.isPrivateDirty("maxWidth")) {
                    this._setMaxDimentions();
                }
                if (this.isDirty("maxHeight") || this.isPrivateDirty("maxHeight")) {
                    this._setMaxDimentions();
                }
                if (this.isDirty("rotation")) {
                    this._setMaxDimentions();
                }
                if (this.isDirty("textAlign") || this.isDirty("width")) {
                    var textAlign = this.get("textAlign");
                    var x = void 0;
                    if (this.get("width") != null) {
                        if (textAlign == "right") {
                            x = p100;
                        }
                        else if (textAlign == "center") {
                            x = p50;
                        }
                        else {
                            x = 0;
                        }
                    }
                    else {
                        if (textAlign == "left" || textAlign == "start") {
                            x = this.get("paddingLeft");
                        }
                        else if (textAlign == "right" || textAlign == "end") {
                            x = -this.get("paddingRight");
                        }
                    }
                    this.text.set("x", x);
                }
            }
        });
        Object.defineProperty(Label.prototype, "_setMaxDimentions", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var rotation = this.get("rotation");
                var vertical = rotation == 90 || rotation == 270;
                var maxWidth = this.get("maxWidth", this.getPrivate("maxWidth", Infinity));
                if (isNumber(maxWidth)) {
                    this.text.set(vertical ? "maxHeight" : "maxWidth", maxWidth - this.get("paddingLeft", 0) - this.get("paddingRight", 0));
                }
                else {
                    this.text.set(vertical ? "maxHeight" : "maxWidth", undefined);
                }
                var maxHeight = this.get("maxHeight", this.getPrivate("maxHeight", Infinity));
                if (isNumber(maxHeight)) {
                    this.text.set(vertical ? "maxWidth" : "maxHeight", maxHeight - this.get("paddingTop", 0) - this.get("paddingBottom", 0));
                }
                else {
                    this.text.set(vertical ? "maxWidth" : "maxHeight", undefined);
                }
            }
        });
        Object.defineProperty(Label.prototype, "_setDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                _super.prototype._setDataItem.call(this, dataItem);
                this._markDirtyKey("text");
                if (this.text.get("populateText")) {
                    this.text.markDirtyText();
                }
            }
        });
        /**
         * Returns text with populated placeholders and formatting if `populateText` is
         * set to `true`.
         *
         * @return Populated text
         */
        Object.defineProperty(Label.prototype, "getText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._text._getText();
            }
        });
        Object.defineProperty(Label, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Label"
        });
        Object.defineProperty(Label, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Container.classNames.concat([Label.className])
        });
        return Label;
    }(Container));

    /**
     * Draws a rectangle with a pointer.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     * @important
     */
    var PointedRectangle = /** @class */ (function (_super) {
        __extends(PointedRectangle, _super);
        function PointedRectangle() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PointedRectangle.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("pointerBaseWidth") || this.isDirty("cornerRadius") || this.isDirty("pointerLength") || this.isDirty("pointerX") || this.isDirty("pointerY") || this.isDirty("width") || this.isDirty("height")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(PointedRectangle.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear) {
                    this.markDirtyBounds();
                    var w = this.width();
                    var h = this.height();
                    if (w > 0 && h > 0) {
                        var cr = this.get("cornerRadius", 8);
                        cr = fitToRange(cr, 0, Math.min(w / 2, h / 2));
                        var x = this.get("pointerX", 0);
                        var y = this.get("pointerY", 0);
                        var bwh = this.get("pointerBaseWidth", 15) / 2;
                        // corner coordinates
                        // top left
                        var xtl = 0;
                        var ytl = 0;
                        // top right
                        var xtr = w;
                        var ytr = 0;
                        // bottom right
                        var xbr = w;
                        var ybr = h;
                        // bottom left
                        var xbl = 0;
                        var ybl = h;
                        // find stem base side: http://$math.stackexchange.com/questions/274712/calculate-on-which-side-of-straign-line-is-dot-located
                        // d=(x−x1)(y2−y1)−(y−y1)(x2−x1)
                        var d1 = (x - xtl) * (ybr - ytl) - (y - ytl) * (xbr - xtl);
                        var d2 = (x - xbl) * (ytr - ybl) - (y - ybl) * (xtr - xbl);
                        var display = this._display;
                        // top
                        display.moveTo(cr, 0);
                        if (d1 > 0 && d2 > 0) {
                            var stemX = Math.round(fitToRange(x, cr + bwh, w - bwh - cr));
                            y = fitToRange(y, -Infinity, 0);
                            display.lineTo(stemX - bwh, 0);
                            display.lineTo(x, y);
                            display.lineTo(stemX + bwh, 0);
                        }
                        display.lineTo(w - cr, 0);
                        display.arcTo(w, 0, w, cr, cr);
                        // right
                        if (d1 > 0 && d2 < 0) {
                            var stemY = Math.round(fitToRange(y, cr + bwh, h - bwh - cr));
                            x = fitToRange(x, w, Infinity);
                            display.lineTo(w, cr);
                            display.lineTo(w, stemY - bwh);
                            display.lineTo(x, y);
                            display.lineTo(w, stemY + bwh);
                        }
                        display.lineTo(w, h - cr);
                        display.arcTo(w, h, w - cr, h, cr);
                        // bottom
                        if (d1 < 0 && d2 < 0) {
                            var stemX = Math.round(fitToRange(x, cr + bwh, w - bwh - cr));
                            y = fitToRange(y, h, Infinity);
                            display.lineTo(w - cr, h);
                            display.lineTo(stemX + bwh, h);
                            display.lineTo(x, y);
                            display.lineTo(stemX - bwh, h);
                        }
                        display.lineTo(cr, h);
                        display.arcTo(0, h, 0, h - cr, cr);
                        // left
                        if (d1 < 0 && d2 > 0) {
                            var stemY = Math.round(fitToRange(y, cr + bwh, h - cr - bwh));
                            x = fitToRange(x, -Infinity, 0);
                            display.lineTo(0, h - cr);
                            display.lineTo(0, stemY + bwh);
                            display.lineTo(x, y);
                            display.lineTo(0, stemY - bwh);
                        }
                        display.lineTo(0, cr);
                        display.arcTo(0, 0, cr, 0, cr);
                    }
                }
            }
        });
        Object.defineProperty(PointedRectangle, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "PointedRectangle"
        });
        Object.defineProperty(PointedRectangle, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([PointedRectangle.className])
        });
        return PointedRectangle;
    }(Graphics));

    /**
     * Creates a tooltip.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/tooltips/} for more info
     * @important
     */
    var Tooltip = /** @class */ (function (_super) {
        __extends(Tooltip, _super);
        function Tooltip() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_arrangeDisposer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_fx", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_fy", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_label", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_fillDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_strokeDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_labelDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_w", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_h", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            return _this;
        }
        Object.defineProperty(Tooltip.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["tooltip"]);
                _super.prototype._afterNew.call(this);
                this.set("background", PointedRectangle.new(this._root, {
                    themeTags: ["tooltip", "background"]
                }));
                this._label = this.children.push(Label.new(this._root, {}));
                this._disposers.push(this._label.events.on("boundschanged", function () {
                    _this._updateBackground();
                }));
                this.on("bounds", function () {
                    _this._updateBackground();
                });
                this._updateTextColor();
                this._root.tooltipContainer.children.push(this);
                this.hide(0);
                this._root._tooltips.push(this);
            }
        });
        Object.defineProperty(Tooltip.prototype, "label", {
            /**
             * A [[Label]] element for the tooltip.
             *
             * @readonly
             * @return Label
             */
            get: function () {
                return this._label;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Permanently disposes the tooltip.
         */
        Object.defineProperty(Tooltip.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.dispose.call(this);
                remove(this._root._tooltips, this);
            }
        });
        Object.defineProperty(Tooltip.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._updateChildren.call(this);
                var labelText = this.get("labelText");
                if (labelText != null) {
                    this.label.set("text", this.get("labelText"));
                }
            }
        });
        Object.defineProperty(Tooltip.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this.isDirty("pointTo")) {
                    // can't compare to previous, as sometimes pointTo is set twice (when pointer moves, so the position won't be udpated)
                    this._updateBackground();
                }
                if (this.isDirty("tooltipTarget")) {
                    this.updateBackgroundColor();
                }
            }
        });
        Object.defineProperty(Tooltip.prototype, "_onShow", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._onShow.call(this);
                this.updateBackgroundColor();
            }
        });
        Object.defineProperty(Tooltip.prototype, "updateBackgroundColor", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var tooltipTarget = this.get("tooltipTarget");
                var background = this.get("background");
                var fill;
                var stroke;
                if (tooltipTarget && background) {
                    fill = tooltipTarget.get("fill");
                    stroke = tooltipTarget.get("stroke");
                    if (fill == null) {
                        fill = stroke;
                    }
                    if (this.get("getFillFromSprite")) {
                        if (this._fillDp) {
                            this._fillDp.dispose();
                        }
                        if (fill != null) {
                            background.set("fill", fill);
                        }
                        this._fillDp = tooltipTarget.on("fill", function (fill) {
                            if (fill != null) {
                                background.set("fill", fill);
                                _this._updateTextColor(fill);
                            }
                        });
                    }
                    if (this.get("getStrokeFromSprite")) {
                        if (this._strokeDp) {
                            this._strokeDp.dispose();
                        }
                        if (fill != null) {
                            background.set("stroke", fill);
                        }
                        this._strokeDp = tooltipTarget.on("fill", function (fill) {
                            if (fill != null) {
                                background.set("stroke", fill);
                            }
                        });
                    }
                    if (this.get("getLabelFillFromSprite")) {
                        if (this._labelDp) {
                            this._labelDp.dispose();
                        }
                        if (fill != null) {
                            this.label.set("fill", fill);
                        }
                        this._labelDp = tooltipTarget.on("fill", function (fill) {
                            if (fill != null) {
                                _this.label.set("fill", fill);
                            }
                        });
                    }
                }
                this._updateTextColor(fill);
            }
        });
        Object.defineProperty(Tooltip.prototype, "_updateTextColor", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (fill) {
                if (this.get("autoTextColor")) {
                    if (fill == null) {
                        fill = this.get("background").get("fill");
                    }
                    if (fill == null) {
                        fill = this._root.interfaceColors.get("background");
                    }
                    if (fill instanceof Color) {
                        this.label.set("fill", Color.alternative(fill, this._root.interfaceColors.get("alternativeText"), this._root.interfaceColors.get("text")));
                    }
                }
            }
        });
        Object.defineProperty(Tooltip.prototype, "_setDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                _super.prototype._setDataItem.call(this, dataItem);
                this.label._setDataItem(dataItem);
            }
        });
        Object.defineProperty(Tooltip.prototype, "_updateBackground", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.updateBackground.call(this);
                var parent = this._root.container;
                if (parent) {
                    var cw = 0.5;
                    var ch = 0.5;
                    var centerX = this.get("centerX");
                    if (centerX instanceof Percent) {
                        cw = centerX.value;
                    }
                    var centerY = this.get("centerY");
                    if (centerY instanceof Percent) {
                        ch = centerY.value;
                    }
                    var parentW = parent.width();
                    var parentH = parent.height();
                    var bounds = this.get("bounds", { left: 0, top: 0, right: parentW, bottom: parentH });
                    this._updateBounds();
                    var w = this.width();
                    var h = this.height();
                    // use old w and h,as when tooltip is hidden, these are 0 and unneeded animation happens
                    if (w === 0) {
                        w = this._w;
                    }
                    if (h === 0) {
                        h = this._h;
                    }
                    var pointTo = this.get("pointTo", { x: parentW / 2, y: parentH / 2 });
                    var x = pointTo.x;
                    var y = pointTo.y;
                    var pointerOrientation = this.get("pointerOrientation");
                    var background = this.get("background");
                    var pointerLength = 0;
                    var bgStrokeSizeY = 0;
                    var bgStrokeSizeX = 0;
                    if (background instanceof PointedRectangle) {
                        pointerLength = background.get("pointerLength", 0);
                        bgStrokeSizeY = background.get("strokeWidth", 0) / 2;
                        bgStrokeSizeX = bgStrokeSizeY;
                    }
                    var pointerX = 0;
                    var pointerY = 0;
                    var boundsW = bounds.right - bounds.left;
                    var boundsH = bounds.bottom - bounds.top;
                    // horizontal
                    if (pointerOrientation == "horizontal" || pointerOrientation == "left" || pointerOrientation == "right") {
                        bgStrokeSizeY = 0;
                        if (pointerOrientation == "horizontal") {
                            if (x > bounds.left + boundsW / 2) {
                                x -= (w * (1 - cw) + pointerLength);
                                bgStrokeSizeX *= -1;
                            }
                            else {
                                x += (w * cw + pointerLength);
                            }
                        }
                        else if (pointerOrientation == "left") {
                            x += (w * (1 - cw) + pointerLength);
                        }
                        else {
                            x -= (w * cw + pointerLength);
                            bgStrokeSizeX *= -1;
                        }
                    }
                    // vertical pointer
                    else {
                        bgStrokeSizeX = 0;
                        if (pointerOrientation == "vertical") {
                            if (y > bounds.top + h / 2 + pointerLength) {
                                y -= (h * (1 - ch) + pointerLength);
                            }
                            else {
                                y += (h * ch + pointerLength);
                                bgStrokeSizeY *= -1;
                            }
                        }
                        else if (pointerOrientation == "down") {
                            y -= (h * (1 - ch) + pointerLength);
                        }
                        else {
                            y += (h * ch + pointerLength);
                            bgStrokeSizeY *= -1;
                        }
                    }
                    x = fitToRange(x, bounds.left + w * cw, bounds.left + boundsW - w * (1 - cw)) + bgStrokeSizeX;
                    y = fitToRange(y, bounds.top + h * ch, bounds.top + boundsH - h * (1 - ch)) - bgStrokeSizeY;
                    pointerX = pointTo.x - x + w * cw + bgStrokeSizeX;
                    pointerY = pointTo.y - y + h * ch - bgStrokeSizeY;
                    this._fx = x;
                    this._fy = y;
                    var animationDuration = this.get("animationDuration", 0);
                    if (animationDuration > 0 && this.get("visible") && this.get("opacity") > 0.1) {
                        var animationEasing = this.get("animationEasing");
                        this.animate({ key: "x", to: x, duration: animationDuration, easing: animationEasing });
                        this.animate({ key: "y", to: y, duration: animationDuration, easing: animationEasing });
                    }
                    else {
                        this.set("x", x);
                        this.set("y", y);
                    }
                    if (background instanceof PointedRectangle) {
                        background.set("pointerX", pointerX);
                        background.set("pointerY", pointerY);
                    }
                    if (w > 0) {
                        this._w = w;
                    }
                    if (h > 0) {
                        this._h = h;
                    }
                }
            }
        });
        Object.defineProperty(Tooltip, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Tooltip"
        });
        Object.defineProperty(Tooltip, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Container.classNames.concat([Tooltip.className])
        });
        return Tooltip;
    }(Container));

    /**
     * Number formatter
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-numbers/} for more info
     * @important
     */
    var NumberFormatter = /** @class */ (function (_super) {
        __extends(NumberFormatter, _super);
        function NumberFormatter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(NumberFormatter.prototype, "_setDefaults", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                // Defaults
                this._setDefault("negativeBase", 0);
                this._setDefault("numberFormat", "#,###.#####");
                this._setDefault("smallNumberThreshold", 1.00);
                var bns = "_big_number_suffix_";
                var sns = "_small_number_suffix_";
                var bs = "_byte_suffix_";
                this._setDefault("bigNumberPrefixes", [
                    { "number": 1e+3, "suffix": this._t(bns + "3") },
                    { "number": 1e+6, "suffix": this._t(bns + "6") },
                    { "number": 1e+9, "suffix": this._t(bns + "9") },
                    { "number": 1e+12, "suffix": this._t(bns + "12") },
                    { "number": 1e+15, "suffix": this._t(bns + "15") },
                    { "number": 1e+18, "suffix": this._t(bns + "18") },
                    { "number": 1e+21, "suffix": this._t(bns + "21") },
                    { "number": 1e+24, "suffix": this._t(bns + "24") }
                ]);
                this._setDefault("smallNumberPrefixes", [
                    { "number": 1e-24, "suffix": this._t(sns + "24") },
                    { "number": 1e-21, "suffix": this._t(sns + "21") },
                    { "number": 1e-18, "suffix": this._t(sns + "18") },
                    { "number": 1e-15, "suffix": this._t(sns + "15") },
                    { "number": 1e-12, "suffix": this._t(sns + "12") },
                    { "number": 1e-9, "suffix": this._t(sns + "9") },
                    { "number": 1e-6, "suffix": this._t(sns + "6") },
                    { "number": 1e-3, "suffix": this._t(sns + "3") }
                ]);
                this._setDefault("bytePrefixes", [
                    { "number": 1, suffix: this._t(bs + "B") },
                    { "number": 1024, suffix: this._t(bs + "KB") },
                    { "number": 1048576, suffix: this._t(bs + "MB") },
                    { "number": 1073741824, suffix: this._t(bs + "GB") },
                    { "number": 1099511627776, suffix: this._t(bs + "TB") },
                    { "number": 1125899906842624, suffix: this._t(bs + "PB") }
                ]);
                _super.prototype._setDefaults.call(this);
            }
        });
        Object.defineProperty(NumberFormatter.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
            }
        });
        /**
         * Formats the number according to specific format.
         *
         * @param value   Value to format
         * @param format  Format to apply
         * @return Formatted number
         */
        Object.defineProperty(NumberFormatter.prototype, "format", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, format, precision) {
                // no format passed in or "Number"
                if (format == null || (isString(format) && format.toLowerCase() === "number")) {
                    format = this.get("numberFormat", "");
                }
                // Init return value
                var formatted;
                // Cast to number just in case
                // TODO: maybe use better casting
                var source = Number(value);
                // Is it a built-in format or Intl.NumberFormatOptions
                if (isObject(format)) {
                    try {
                        if (this.get("intlLocales")) {
                            return new Intl.NumberFormat(this.get("intlLocales"), format).format(source);
                        }
                        else {
                            return new Intl.NumberFormat(undefined, format).format(source);
                        }
                    }
                    catch (e) {
                        return "Invalid";
                    }
                }
                else {
                    // Clean format
                    format = cleanFormat(format);
                    // Get format info (it will also deal with parser caching)
                    var info = this.parseFormat(format, this._root.language);
                    // format and replace the number
                    var details = void 0;
                    if (source > this.get("negativeBase")) {
                        details = info.positive;
                    }
                    else if (source < this.get("negativeBase")) {
                        details = info.negative;
                    }
                    else {
                        details = info.zero;
                    }
                    // Adjust precision
                    if (precision != null && !details.mod) {
                        details = copy$1(details);
                        details.decimals.active = source == 0 ? 0 : precision;
                    }
                    // Format
                    formatted = details.template.split(PLACEHOLDER).join(this.applyFormat(source, details));
                }
                return formatted;
            }
        });
        /**
         * Parses supplied format into structured object which can be used to format
         * the number.
         *
         * @param format Format string, i.e. "#,###.00"
         * @param language Language
         * @ignore
         */
        Object.defineProperty(NumberFormatter.prototype, "parseFormat", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (format, language) {
                // Check cache
                // TODO
                // let cached = this.getCache(format);
                // if (cached != null) {
                // 	return cached;
                // }
                var _this = this;
                var thousandSeparator = language.translateEmpty("_thousandSeparator");
                var decimalSeparator = language.translateEmpty("_decimalSeparator");
                // init format parse info holder
                var info = {
                    "positive": {
                        "thousands": {
                            "active": -1,
                            "passive": -1,
                            "interval": -1,
                            "separator": thousandSeparator
                        },
                        "decimals": {
                            "active": -1,
                            "passive": -1,
                            "separator": decimalSeparator
                        },
                        "template": "",
                        "source": "",
                        "parsed": false
                    },
                    "negative": {
                        "thousands": {
                            "active": -1,
                            "passive": -1,
                            "interval": -1,
                            "separator": thousandSeparator
                        },
                        "decimals": {
                            "active": -1,
                            "passive": -1,
                            "separator": decimalSeparator
                        },
                        "template": "",
                        "source": "",
                        "parsed": false
                    },
                    "zero": {
                        "thousands": {
                            "active": -1,
                            "passive": -1,
                            "interval": -1,
                            "separator": thousandSeparator
                        },
                        "decimals": {
                            "active": -1,
                            "passive": -1,
                            "separator": decimalSeparator
                        },
                        "template": "",
                        "source": "",
                        "parsed": false
                    }
                };
                // Escape double vertical bars (that mean display one vertical bar)
                format = format.replace("||", PLACEHOLDER2);
                // Split it up and deal with different formats
                var parts = format.split("|");
                info.positive.source = parts[0];
                if (typeof parts[2] === "undefined") {
                    info.zero = info.positive;
                }
                else {
                    info.zero.source = parts[2];
                }
                if (typeof parts[1] === "undefined") {
                    info.negative = info.positive;
                }
                else {
                    info.negative.source = parts[1];
                }
                // Parse each
                each(info, function (_part, item) {
                    // Already parsed
                    if (item.parsed) {
                        return;
                    }
                    // Check cached
                    // TODO
                    // if (typeof this.getCache(item.source) !== "undefined") {
                    // 	info[part] = this.getCache(item.source);
                    // 	return;
                    // }
                    // Begin parsing
                    var partFormat = item.source;
                    // Just "Number"?
                    if (partFormat.toLowerCase() === "number") {
                        partFormat = _this.get("numberFormat", "#,###.#####");
                    }
                    // Let TextFormatter split into chunks
                    var chunks = TextFormatter.chunk(partFormat, true);
                    for (var i = 0; i < chunks.length; i++) {
                        var chunk = chunks[i];
                        // replace back double vertical bar
                        chunk.text = chunk.text.replace(PLACEHOLDER2, "|");
                        if (chunk.type === "value") {
                            // Parse format
                            // Look for codes
                            var matches = chunk.text.match(/[#0.,]+[ ]?[abesABES%!]?[abesABES‰!]?/);
                            if (matches) {
                                if (matches === null || matches[0] === "") {
                                    // no codes here - assume string
                                    // nothing to do here
                                    item.template += chunk.text;
                                }
                                else {
                                    // look for the format modifiers at the end
                                    var mods = matches[0].match(/[abesABES%‰!]{2}|[abesABES%‰]{1}$/);
                                    if (mods) {
                                        item.mod = mods[0].toLowerCase();
                                        item.modSpacing = matches[0].match(/[ ]{1}[abesABES%‰!]{1}$/) ? true : false;
                                    }
                                    // break the format up
                                    var a = matches[0].split(".");
                                    // Deal with thousands
                                    if (a[0] === "") ;
                                    else {
                                        // Counts
                                        item.thousands.active = (a[0].match(/0/g) || []).length;
                                        item.thousands.passive = (a[0].match(/\#/g) || []).length + item.thousands.active;
                                        // Separator interval
                                        var b = a[0].split(",");
                                        if (b.length === 1) ;
                                        else {
                                            // Use length fo the last chunk as thousands length
                                            item.thousands.interval = (b.pop() || "").length;
                                            if (item.thousands.interval === 0) {
                                                item.thousands.interval = -1;
                                            }
                                        }
                                    }
                                    // Deal with decimals
                                    if (typeof (a[1]) === "undefined") ;
                                    else {
                                        // Counts
                                        item.decimals.active = (a[1].match(/0/g) || []).length;
                                        item.decimals.passive = (a[1].match(/\#/g) || []).length + item.decimals.active;
                                    }
                                    // Add special code to template
                                    item.template += chunk.text.split(matches[0]).join(PLACEHOLDER);
                                }
                            }
                        }
                        else {
                            // Quoted string - take it as it is
                            item.template += chunk.text;
                        }
                    }
                    // Apply style formatting
                    //item.template = getTextFormatter().format(item.template, this.outputFormat);
                    // Save cache
                    // TODO
                    //this.setCache(item.source, item);
                    // Mark this as parsed
                    item.parsed = true;
                });
                // Save cache (the whole thing)
                // TODO
                //this.setCache(format, info);
                return info;
            }
        });
        /**
         * Applies parsed format to a numeric value.
         *
         * @param value    Value
         * @param details  Parsed format as returned by parseFormat()
         * @return Formatted number
         * @ignore
         */
        Object.defineProperty(NumberFormatter.prototype, "applyFormat", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, details) {
                // Use absolute values
                var negative = value < 0;
                value = Math.abs(value);
                // Recalculate according to modifier
                var prefix = "", suffix = "";
                var mods = details.mod ? details.mod.split("") : [];
                if (mods.indexOf("b") !== -1) {
                    var a_1 = this.applyPrefix(value, this.get("bytePrefixes"), mods.indexOf("!") !== -1);
                    value = a_1[0];
                    prefix = a_1[1];
                    suffix = a_1[2];
                    if (details.modSpacing) {
                        suffix = " " + suffix;
                    }
                }
                else if (mods.indexOf("a") !== -1) {
                    var a_2 = this.applyPrefix(value, value < this.get("smallNumberThreshold") ? this.get("smallNumberPrefixes") : this.get("bigNumberPrefixes"), mods.indexOf("!") !== -1);
                    value = a_2[0];
                    prefix = a_2[1];
                    suffix = a_2[2];
                    if (details.modSpacing) {
                        suffix = " " + suffix;
                    }
                }
                else if (mods.indexOf("%") !== -1) {
                    var ol = Math.min(value.toString().length + 2, 21);
                    value *= 100;
                    value = parseFloat(value.toPrecision(ol));
                    suffix = "%";
                }
                else if (mods.indexOf("‰") !== -1) {
                    var ol = Math.min(value.toString().length + 3, 21);
                    value *= 1000;
                    value = parseFloat(value.toPrecision(ol));
                    suffix = "‰";
                }
                // Round to passive
                if (mods.indexOf("e") !== -1) {
                    // convert the value to exponential
                    var exp = void 0;
                    if (details.decimals.passive >= 0) {
                        exp = value.toExponential(details.decimals.passive).split("e");
                    }
                    else {
                        exp = value.toExponential().split("e");
                    }
                    value = Number(exp[0]);
                    suffix = "e" + exp[1];
                    if (details.modSpacing) {
                        suffix = " " + suffix;
                    }
                }
                else if (details.decimals.passive === 0) {
                    value = Math.round(value);
                }
                else if (details.decimals.passive > 0) {
                    var d = Math.pow(10, details.decimals.passive);
                    value = Math.round(value * d) / d;
                }
                // Init return value
                var res = "";
                // Calc integer and decimal parts
                var a = numberToString(value).split(".");
                // Format integers
                var ints = a[0];
                // Pad integers to active length
                if (ints.length < details.thousands.active) {
                    ints = Array(details.thousands.active - ints.length + 1).join("0") + ints;
                }
                // Insert thousands separators
                if (details.thousands.interval > 0) {
                    var ip = [];
                    var intsr = ints.split("").reverse().join("");
                    for (var i = 0, len = ints.length; i <= len; i += details.thousands.interval) {
                        var c = intsr.substr(i, details.thousands.interval).split("").reverse().join("");
                        if (c !== "") {
                            ip.unshift(c);
                        }
                    }
                    ints = ip.join(details.thousands.separator);
                }
                // Add integers
                res += ints;
                // Add decimals
                if (a.length === 1) {
                    a.push("");
                }
                var decs = a[1];
                // Fill zeros?
                if (decs.length < details.decimals.active) {
                    decs += Array(details.decimals.active - decs.length + 1).join("0");
                }
                if (decs !== "") {
                    res += details.decimals.separator + decs;
                }
                // Can't have empty return value
                if (res === "") {
                    res = "0";
                }
                // Add minus sign back
                if (value !== 0 && negative && (mods.indexOf("s") === -1)) {
                    res = "-" + res;
                }
                // Add suffixes/prefixes
                if (prefix) {
                    res = prefix + res;
                }
                if (suffix) {
                    res += suffix;
                }
                return res;
            }
        });
        Object.defineProperty(NumberFormatter.prototype, "applyPrefix", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, prefixes, force) {
                if (force === void 0) { force = false; }
                var newvalue = value;
                var prefix = "";
                var suffix = "";
                var applied = false;
                var k = 1;
                for (var i = 0, len = prefixes.length; i < len; i++) {
                    if (prefixes[i].number <= value) {
                        if (prefixes[i].number === 0) {
                            newvalue = 0;
                        }
                        else {
                            newvalue = value / prefixes[i].number;
                            k = prefixes[i].number;
                        }
                        prefix = prefixes[i].prefix;
                        suffix = prefixes[i].suffix;
                        applied = true;
                    }
                }
                if (!applied && force && prefixes.length && value != 0) {
                    // Prefix was not applied. Use the first prefix.
                    newvalue = value / prefixes[0].number;
                    prefix = prefixes[0].prefix;
                    suffix = prefixes[0].suffix;
                    applied = true;
                }
                if (applied) {
                    newvalue = parseFloat(newvalue.toPrecision(Math.min(k.toString().length + Math.floor(newvalue).toString().replace(/[^0-9]*/g, "").length, 21)));
                }
                return [newvalue, prefix, suffix];
            }
        });
        /**
         * Replaces brackets with temporary placeholders.
         *
         * @ignore Exclude from docs
         * @param text  Input text
         * @return Escaped text
         */
        Object.defineProperty(NumberFormatter.prototype, "escape", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text) {
                return text.replace("||", PLACEHOLDER2);
            }
        });
        /**
         * Replaces placeholders back to brackets.
         *
         * @ignore Exclude from docs
         * @param text  Escaped text
         * @return Unescaped text
         */
        Object.defineProperty(NumberFormatter.prototype, "unescape", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text) {
                return text.replace(PLACEHOLDER2, "|");
            }
        });
        return NumberFormatter;
    }(Entity));

    var DateFormatter = /** @class */ (function (_super) {
        __extends(DateFormatter, _super);
        function DateFormatter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(DateFormatter.prototype, "_setDefaults", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                // Defaults
                this._setDefault("capitalize", true);
                this._setDefault("dateFormat", "yyyy-MM-dd");
                _super.prototype._setDefaults.call(this);
            }
        });
        Object.defineProperty(DateFormatter.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
            }
        });
        Object.defineProperty(DateFormatter.prototype, "format", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (source, format) {
                // Locale?
                // TODO
                // No format passed in or it's empty
                if (typeof format === "undefined" || format === "") {
                    format = this.get("dateFormat", "yyyy-MM-dd");
                }
                // Init return value
                var formatted;
                // Cast?
                // TODO: decide if we need to cast
                var date = source;
                // Is it a built-in format or Intl.DateTimeFormat
                if (isObject(format)) {
                    try {
                        var locales = this.get("intlLocales");
                        if (locales) {
                            return new Intl.DateTimeFormat(locales, format).format(date);
                        }
                        else {
                            return new Intl.DateTimeFormat(undefined, format).format(date);
                        }
                    }
                    catch (e) {
                        return "Invalid";
                    }
                }
                // get format info (it will also deal with parser caching)
                var info = this.parseFormat(format);
                // Should we apply custom time zone?
                var timezone = this._root.timezone;
                if (timezone && !this._root.utc) {
                    date = timezone.convertLocal(date);
                }
                // Check if it's a valid date
                if (!isNumber(date.getTime())) {
                    // TODO translation
                    //return this._t("Invalid date");
                    return "Invalid date";
                }
                // Apply format
                formatted = this.applyFormat(date, info);
                // Capitalize
                if (this.get("capitalize")) {
                    formatted = formatted.replace(/^.{1}/, formatted.substr(0, 1).toUpperCase());
                }
                // We're done
                return formatted;
            }
        });
        /**
         * Applies format to Date.
         *
         * @param date      Date object
         * @param info      Parsed format information
         * @return Formatted date string
         */
        Object.defineProperty(DateFormatter.prototype, "applyFormat", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (date, info) {
                // Init return value
                var res = info.template;
                // Get values
                var fullYear, month, weekday, day, hours, minutes, seconds, milliseconds, offset = date.getTimezoneOffset(), timestamp = date.getTime();
                if (this._root.utc) {
                    fullYear = date.getUTCFullYear();
                    month = date.getUTCMonth();
                    weekday = date.getUTCDay();
                    day = date.getUTCDate();
                    hours = date.getUTCHours();
                    minutes = date.getUTCMinutes();
                    seconds = date.getUTCSeconds();
                    milliseconds = date.getUTCMilliseconds();
                }
                else {
                    fullYear = date.getFullYear();
                    month = date.getMonth();
                    weekday = date.getDay();
                    day = date.getDate();
                    hours = date.getHours();
                    minutes = date.getMinutes();
                    seconds = date.getSeconds();
                    milliseconds = date.getMilliseconds();
                }
                // Go through each part and format/replace it in template
                for (var i = 0, len = info.parts.length; i < len; i++) {
                    var value = "";
                    switch (info.parts[i]) {
                        case "G":
                            value = this._t(fullYear < 0
                                ? "_era_bc"
                                : "_era_ad");
                            break;
                        case "yyyy":
                            value = Math.abs(fullYear).toString();
                            if (fullYear < 0) {
                                value += this._t("_era_bc");
                            }
                            break;
                        case "yyy":
                        case "yy":
                        case "y":
                            value = Math.abs(fullYear).toString().substr(-info.parts[i].length);
                            if (fullYear < 0) {
                                value += this._t("_era_bc");
                            }
                            break;
                        case "YYYY":
                        case "YYY":
                        case "YY":
                        case "Y":
                            var week = getWeek(date);
                            var year = fullYear;
                            if (week == 1 && (weekday > 4)) {
                                year--;
                            }
                            if (info.parts[i] == "YYYY") {
                                value = Math.abs(year).toString();
                            }
                            else {
                                value = Math.abs(year).toString().substr(-info.parts[i].length);
                            }
                            if (year < 0) {
                                value += this._t("_era_bc");
                            }
                            break;
                        case "u":
                            // @todo
                            break;
                        case "q":
                            value = "" + Math.ceil((date.getMonth() + 1) / 3);
                            break;
                        case "MMMMM":
                            value = this._t(this._getMonth(month)).substr(0, 1);
                            break;
                        case "MMMM":
                            value = this._t(this._getMonth(month));
                            break;
                        case "MMM":
                            value = this._t(this._getShortMonth(month));
                            break;
                        case "MM":
                            value = padString(month + 1, 2, "0");
                            break;
                        case "M":
                            value = (month + 1).toString();
                            break;
                        case "ww":
                            value = padString(getWeek(date, this._root.utc), 2, "0");
                            break;
                        case "w":
                            value = getWeek(date, this._root.utc).toString();
                            break;
                        case "W":
                            value = getMonthWeek(date, this._root.utc).toString();
                            break;
                        case "dd":
                            value = padString(day, 2, "0");
                            break;
                        case "d":
                            value = day.toString();
                            break;
                        case "DD":
                        case "DDD":
                            value = padString(getYearDay(date, this._root.utc).toString(), info.parts[i].length, "0");
                            break;
                        case "D":
                            value = getYearDay(date, this._root.utc).toString();
                            break;
                        case "F":
                            // @todo
                            break;
                        case "g":
                            // @todo
                            break;
                        case "t":
                            value = this._root.language.translateFunc("_dateOrd").call(this, day);
                            break;
                        case "E":
                            value = (weekday || 7).toString();
                            break;
                        case "EE":
                            value = padString((weekday || 7).toString(), 2, "0");
                            break;
                        case "EEE":
                        case "eee":
                            value = this._t(this._getShortWeekday(weekday));
                            break;
                        case "EEEE":
                        case "eeee":
                            value = this._t(this._getShortWeekday(weekday));
                            break;
                        case "EEEEE":
                        case "eeeee":
                            value = this._t(this._getShortWeekday(weekday)).substr(0, 1);
                            break;
                        case "e":
                        case "ee":
                            value = (weekday - (this._root.locale.firstDayOfWeek || 1) + 1).toString();
                            if (info.parts[i] == "ee") {
                                value = padString(value, 2, "0");
                            }
                            break;
                        case "a":
                            if (hours >= 12) {
                                value = this._t("PM");
                            }
                            else {
                                value = this._t("AM");
                            }
                            break;
                        case "aa":
                            if (hours >= 12) {
                                value = this._t("P.M.");
                            }
                            else {
                                value = this._t("A.M.");
                            }
                            break;
                        case "aaa":
                            if (hours >= 12) {
                                value = this._t("P");
                            }
                            else {
                                value = this._t("A");
                            }
                            break;
                        case "h":
                            value = get12Hours(hours).toString();
                            break;
                        case "hh":
                            value = padString(get12Hours(hours), 2, "0");
                            break;
                        case "H":
                            value = hours.toString();
                            break;
                        case "HH":
                            value = padString(hours, 2, "0");
                            break;
                        case "K":
                            value = get12Hours(hours, 0).toString();
                            break;
                        case "KK":
                            value = padString(get12Hours(hours, 0), 2, "0");
                            break;
                        case "k":
                            value = (hours + 1).toString();
                            break;
                        case "kk":
                            value = padString(hours + 1, 2, "0");
                            break;
                        case "m":
                            value = minutes.toString();
                            break;
                        case "mm":
                            value = padString(minutes, 2, "0");
                            break;
                        case "s":
                            value = seconds.toString();
                            break;
                        case "ss":
                            value = padString(seconds, 2, "0");
                            break;
                        case "S":
                        case "SS":
                        case "SSS":
                            value = Math.round((milliseconds / 1000) * Math.pow(10, info.parts[i].length)).toString();
                            break;
                        case "x":
                            value = timestamp.toString();
                            break;
                        case "n":
                        case "nn":
                        case "nnn":
                            value = padString(milliseconds, info.parts[i].length, "0");
                            break;
                        case "z":
                            value = getTimeZone(date, false, false, this._root.utc);
                            break;
                        case "zz":
                            value = getTimeZone(date, true, false, this._root.utc);
                            break;
                        case "zzz":
                            value = getTimeZone(date, false, true, this._root.utc);
                            break;
                        case "zzzz":
                            value = getTimeZone(date, true, true, this._root.utc);
                            break;
                        case "Z":
                        case "ZZ":
                            var tz = Math.abs(offset) / 60;
                            var tzh = Math.floor(tz);
                            var tzm = tz * 60 - tzh * 60;
                            if (this._root.utc) {
                                tzh = 0;
                                tzm = 0;
                            }
                            if (info.parts[i] == "Z") {
                                value = "GMT";
                                value += offset > 0 ? "-" : "+";
                                value += padString(tzh, 2) + ":" + padString(tzm, 2);
                            }
                            else {
                                value = offset > 0 ? "-" : "+";
                                value += padString(tzh, 2) + padString(tzm, 2);
                            }
                            break;
                        case "i":
                            value = date.toISOString();
                            break;
                        case "I":
                            value = date.toUTCString();
                            break;
                    }
                    res = res.replace(PLACEHOLDER, value);
                }
                return res;
            }
        });
        /**
         * Parses format into structured infromation.
         *
         * @param format Format template
         */
        Object.defineProperty(DateFormatter.prototype, "parseFormat", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (format) {
                // Check cache
                // TODO: implement caching of the parsed format
                // Init format parse info holder
                var info = {
                    "template": "",
                    "parts": []
                };
                // Let TextFormatter split into chunks
                var chunks = TextFormatter.chunk(format, true);
                for (var i = 0; i < chunks.length; i++) {
                    var chunk = chunks[i];
                    if (chunk.type === "value") {
                        // Just "Date"?
                        if (chunk.text.match(/^date$/i)) {
                            var dateFormat = this.get("dateFormat", "yyyy-MM-dd");
                            if (!isString(dateFormat)) {
                                dateFormat = "yyyy-MM-dd";
                            }
                            chunk.text = dateFormat;
                        }
                        // Find all possible parts
                        var matches = chunk.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|q|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g);
                        // Found?
                        if (matches) {
                            // Populate template
                            for (var x = 0; x < matches.length; x++) {
                                info.parts.push(matches[x]);
                                chunk.text = chunk.text.replace(matches[x], PLACEHOLDER);
                            }
                        }
                    }
                    // Apply to template
                    info.template += chunk.text;
                }
                // Save cache
                // TODO
                return info;
            }
        });
        Object.defineProperty(DateFormatter.prototype, "_months", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
            }
        });
        Object.defineProperty(DateFormatter.prototype, "_getMonth", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index) {
                return this._months()[index];
            }
        });
        Object.defineProperty(DateFormatter.prototype, "_shortMonths", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return ["Jan", "Feb", "Mar", "Apr", "May(short)", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            }
        });
        Object.defineProperty(DateFormatter.prototype, "_getShortMonth", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index) {
                return this._shortMonths()[index];
            }
        });
        Object.defineProperty(DateFormatter.prototype, "_weekdays", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
            }
        });
        Object.defineProperty(DateFormatter.prototype, "_getWeekday", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index) {
                return this._weekdays()[index];
            }
        });
        Object.defineProperty(DateFormatter.prototype, "_shortWeekdays", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
            }
        });
        Object.defineProperty(DateFormatter.prototype, "_getShortWeekday", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index) {
                return this._shortWeekdays()[index];
            }
        });
        Object.defineProperty(DateFormatter.prototype, "parse", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (source, format) {
                // Is it already a Date
                if (source instanceof Date) {
                    return source;
                }
                // Is it a numeric timestamp
                if (isNumber(source)) {
                    return new Date(source);
                }
                // No? Let's check if it's string, and try converting to it if nec
                if (!isString(source)) {
                    source = source.toString();
                }
                // Init return value
                var res;
                // Init RegEx for parsing
                var reg = "";
                // Clean format
                format = cleanFormat(format);
                // Clip format to length of the source string
                format = format.substr(0, source.length);
                // Parse format
                var info = this.parseFormat(format);
                // Init parsed items holder
                var parsedIndexes = {
                    "year": -1,
                    "year3": -1,
                    "year2": -1,
                    "year1": -1,
                    "month": -1,
                    "monthShort": -1,
                    "monthLong": -1,
                    "weekdayShort": -1,
                    "weekdayLong": -1,
                    "day": -1,
                    "yearDay": -1,
                    "week": -1,
                    "hourBase0": -1,
                    "hour12Base0": -1,
                    "hourBase1": -1,
                    "hour12Base1": -1,
                    "minute": -1,
                    "second": -1,
                    "millisecond": -1,
                    "millisecondDigits": -1,
                    "am": -1,
                    "zone": -1,
                    "timestamp": -1,
                    "iso": -1
                };
                // Init values
                var resValues = {
                    "year": 1970,
                    "month": 0,
                    "day": 1,
                    "hour": 0,
                    "minute": 0,
                    "second": 0,
                    "millisecond": 0,
                    "timestamp": null,
                    "offset": 0,
                    "utc": this._root.utc
                };
                // Index adjuster
                var indexAdjust = 0;
                var index = 0;
                // Iterate through all of the parts
                for (var i = 0; i < info.parts.length; i++) {
                    // Set current match index
                    index = i + indexAdjust + 1;
                    switch (info.parts[i]) {
                        case "yyyy":
                        case "YYYY":
                            reg += "([0-9]{4})";
                            parsedIndexes.year = index;
                            break;
                        case "yyy":
                        case "YYY":
                            reg += "([0-9]{3})";
                            parsedIndexes.year3 = index;
                            break;
                        case "yy":
                        case "YY":
                            reg += "([0-9]{2})";
                            parsedIndexes.year2 = index;
                            break;
                        case "y":
                        case "Y":
                            reg += "([0-9]{1})";
                            parsedIndexes.year1 = index;
                            break;
                        case "MMMM":
                            reg += "(" + this.getStringList(this._months()).join("|") + ")";
                            parsedIndexes.monthLong = index;
                            break;
                        case "MMM":
                            reg += "(" + this.getStringList(this._shortMonths()).join("|") + ")";
                            parsedIndexes.monthShort = index;
                            break;
                        case "MM":
                        case "M":
                            reg += "([0-9]{2}|[0-9]{1})";
                            parsedIndexes.month = index;
                            break;
                        case "ww":
                        case "w":
                            reg += "([0-9]{2}|[0-9]{1})";
                            parsedIndexes.week = index;
                            break;
                        case "dd":
                        case "d":
                            reg += "([0-9]{2}|[0-9]{1})";
                            parsedIndexes.day = index;
                            break;
                        case "DDD":
                        case "DD":
                        case "D":
                            reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
                            parsedIndexes.yearDay = index;
                            break;
                        case "dddd":
                            reg += "(" + this.getStringList(this._weekdays()).join("|") + ")";
                            parsedIndexes.weekdayLong = index;
                            break;
                        case "ddd":
                            reg += "(" + this.getStringList(this._shortWeekdays()).join("|") + ")";
                            parsedIndexes.weekdayShort = index;
                            break;
                        case "aaa":
                        case "aa":
                        case "a":
                            // TODO: fix (escape regex)
                            reg += "(" + this.getStringList(["AM", "PM", "A\.M\.", "P\.M\.", "A", "P"]).join("|") + ")";
                            parsedIndexes.am = index;
                            break;
                        case "hh":
                        case "h":
                            reg += "([0-9]{2}|[0-9]{1})";
                            parsedIndexes.hour12Base1 = index;
                            break;
                        case "HH":
                        case "H":
                            reg += "([0-9]{2}|[0-9]{1})";
                            parsedIndexes.hourBase0 = index;
                            break;
                        case "KK":
                        case "K":
                            reg += "([0-9]{2}|[0-9]{1})";
                            parsedIndexes.hour12Base0 = index;
                            break;
                        case "kk":
                        case "k":
                            reg += "([0-9]{2}|[0-9]{1})";
                            parsedIndexes.hourBase1 = index;
                            break;
                        case "mm":
                        case "m":
                            reg += "([0-9]{2}|[0-9]{1})";
                            parsedIndexes.minute = index;
                            break;
                        case "ss":
                        case "s":
                            reg += "([0-9]{2}|[0-9]{1})";
                            parsedIndexes.second = index;
                            break;
                        case "SSS":
                        case "SS":
                        case "S":
                            reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
                            parsedIndexes.millisecond = index;
                            parsedIndexes.millisecondDigits = info.parts[i].length;
                            break;
                        case "nnn":
                        case "nn":
                        case "n":
                            reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
                            parsedIndexes.millisecond = index;
                            break;
                        case "x":
                            reg += "([0-9]{1,})";
                            parsedIndexes.timestamp = index;
                            break;
                        case "Z":
                            reg += "GMT([-+]+[0-9]{2}:[0-9]{2})";
                            parsedIndexes.zone = index;
                            break;
                        case "ZZ":
                            reg += "([\\-+]+[0-9]{2}[0-9]{2})";
                            parsedIndexes.zone = index;
                            break;
                        case "i":
                            reg += "([0-9]{4})-?([0-9]{2})-?([0-9]{2})T?([0-9]{2}):?([0-9]{2}):?([0-9]{2})\\.?([0-9]{0,3})([zZ]|[+\\-][0-9]{2}:?[0-9]{2}|$)";
                            parsedIndexes.iso = index;
                            indexAdjust += 7;
                            break;
                        case "G":
                        case "YYYY":
                        case "YYY":
                        case "YY":
                        case "Y":
                        case "MMMMM":
                        case "W":
                        case "EEEEE":
                        case "EEEE":
                        case "EEE":
                        case "EE":
                        case "E":
                        case "eeeee":
                        case "eeee":
                        case "eee":
                        case "ee":
                        case "e":
                        case "zzzz":
                        case "zzz":
                        case "zz":
                        case "z":
                        case "t":
                            // Ignore
                            indexAdjust--;
                            break;
                    }
                    reg += "[^0-9]*";
                }
                // Try matching
                var regex = new RegExp(reg);
                var matches = source.match(regex);
                if (matches) {
                    // Populate the date object
                    // Full year
                    if (parsedIndexes.year > -1) {
                        resValues.year = parseInt(matches[parsedIndexes.year]);
                    }
                    // 3-digit year
                    if (parsedIndexes.year3 > -1) {
                        var val = parseInt(matches[parsedIndexes.year3]);
                        val += 1000;
                        resValues.year = val;
                    }
                    // 2-digit year
                    if (parsedIndexes.year2 > -1) {
                        var val = parseInt(matches[parsedIndexes.year2]);
                        if (val > 50) {
                            val += 1000;
                        }
                        else {
                            val += 2000;
                        }
                        resValues.year = val;
                    }
                    // 1-digit year
                    if (parsedIndexes.year1 > -1) {
                        var val = parseInt(matches[parsedIndexes.year1]);
                        val = Math.floor((new Date().getFullYear()) / 10) * 10 + val;
                        resValues.year = val;
                    }
                    // Full month
                    if (parsedIndexes.monthLong > -1) {
                        resValues.month = this.resolveMonth(matches[parsedIndexes.monthLong]);
                    }
                    // Short month
                    if (parsedIndexes.monthShort > -1) {
                        resValues.month = this.resolveShortMonth(matches[parsedIndexes.monthShort]);
                    }
                    // Numeric month
                    if (parsedIndexes.month > -1) {
                        resValues.month = parseInt(matches[parsedIndexes.month]) - 1;
                    }
                    // Weekday
                    // @todo
                    // Week
                    if ((parsedIndexes.week > -1) && (parsedIndexes.day === -1)) {
                        // We parse weeks ONLY if day is not explicitly set
                        // TODO: this needs work
                        // (but maybe later - I can hardly imagine anyone passing their dates in weeks)
                        resValues.month = 0;
                        resValues.day = getDayFromWeek(parseInt(matches[parsedIndexes.week]), resValues.year, 1, this._root.utc);
                    }
                    // Day
                    if (parsedIndexes.day > -1) {
                        resValues.day = parseInt(matches[parsedIndexes.day]);
                    }
                    // Year day
                    if (parsedIndexes.yearDay > -1) {
                        resValues.month = 0;
                        resValues.day = parseInt(matches[parsedIndexes.yearDay]);
                    }
                    // 24 Hour (0-23)
                    if (parsedIndexes.hourBase0 > -1) {
                        resValues.hour = parseInt(matches[parsedIndexes.hourBase0]);
                    }
                    // 24 Hour (1-24)
                    if (parsedIndexes.hourBase1 > -1) {
                        resValues.hour = parseInt(matches[parsedIndexes.hourBase1]) - 1;
                    }
                    // 12 Hour (0-11)
                    if (parsedIndexes.hour12Base0 > -1) {
                        var val = parseInt(matches[parsedIndexes.hour12Base0]);
                        if (val == 11) {
                            val = 0;
                        }
                        if ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {
                            val += 12;
                        }
                        resValues.hour = val;
                    }
                    // 12 Hour (1-12)
                    if (parsedIndexes.hour12Base1 > -1) {
                        var val = parseInt(matches[parsedIndexes.hour12Base1]);
                        if (val == 12) {
                            val = 0;
                        }
                        if ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {
                            val += 12;
                        }
                        resValues.hour = val;
                    }
                    // Minute
                    if (parsedIndexes.minute > -1) {
                        resValues.minute = parseInt(matches[parsedIndexes.minute]);
                    }
                    // Second
                    if (parsedIndexes.second > -1) {
                        resValues.second = parseInt(matches[parsedIndexes.second]);
                    }
                    // Millisecond
                    if (parsedIndexes.millisecond > -1) {
                        var val = parseInt(matches[parsedIndexes.millisecond]);
                        if (parsedIndexes.millisecondDigits == 2) {
                            val *= 10;
                        }
                        else if (parsedIndexes.millisecondDigits == 1) {
                            val *= 100;
                        }
                        resValues.millisecond = val;
                    }
                    // Timestamp
                    if (parsedIndexes.timestamp > -1) {
                        resValues.timestamp = parseInt(matches[parsedIndexes.timestamp]);
                        var ts = new Date(resValues.timestamp);
                        resValues.year = ts.getUTCFullYear();
                        resValues.month = ts.getUTCMonth();
                        resValues.day = ts.getUTCDate();
                        resValues.hour = ts.getUTCHours();
                        resValues.minute = ts.getUTCMinutes();
                        resValues.second = ts.getUTCSeconds();
                        resValues.millisecond = ts.getUTCMilliseconds();
                    }
                    // Adjust time zone
                    if (parsedIndexes.zone > -1) {
                        resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.zone]);
                    }
                    // ISO
                    if (parsedIndexes.iso > -1) {
                        resValues.year = toNumber(matches[parsedIndexes.iso + 0]);
                        resValues.month = toNumber(matches[parsedIndexes.iso + 1]) - 1;
                        resValues.day = toNumber(matches[parsedIndexes.iso + 2]);
                        resValues.hour = toNumber(matches[parsedIndexes.iso + 3]);
                        resValues.minute = toNumber(matches[parsedIndexes.iso + 4]);
                        resValues.second = toNumber(matches[parsedIndexes.iso + 5]);
                        resValues.millisecond = toNumber(matches[parsedIndexes.iso + 6]);
                        if (matches[parsedIndexes.iso + 7] == "Z" || matches[parsedIndexes.iso + 7] == "z") {
                            resValues.utc = true;
                        }
                        else if (matches[parsedIndexes.iso + 7] != "") {
                            resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.iso + 7]);
                        }
                    }
                    // Create Date object
                    if (resValues.utc) {
                        res = new Date(Date.UTC(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute, resValues.second, resValues.millisecond));
                    }
                    else {
                        res = new Date(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute + resValues.offset, resValues.second, resValues.millisecond);
                    }
                }
                else {
                    // Didn't match anything
                    // Let's try dropping it into Date constructor and hope for the best
                    res = new Date(source);
                }
                return res;
            }
        });
        Object.defineProperty(DateFormatter.prototype, "resolveTimezoneOffset", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (date, zone) {
                var value = zone.match(/([+\-]?)([0-9]{2}):?([0-9]{2})/);
                if (value) {
                    var match = zone.match(/([+\-]?)([0-9]{2}):?([0-9]{2})/);
                    var dir = match[1];
                    var hour = match[2];
                    var minute = match[3];
                    var offset = parseInt(hour) * 60 + parseInt(minute);
                    // Adjust offset
                    // Making it negative does not seem to make sense, but it's right
                    // because of how JavaScript calculates GMT offsets
                    if (dir == "+") {
                        offset *= -1;
                    }
                    // Check the difference in offset
                    var originalOffset = (date || new Date()).getTimezoneOffset();
                    var diff = offset - originalOffset;
                    return diff;
                }
                return 0;
            }
        });
        /**
         * Resolves month name (i.e. "December") into a month number (11).
         *
         * @param value  Month name
         * @return Month number
         */
        Object.defineProperty(DateFormatter.prototype, "resolveMonth", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                // Let's try English first
                var month = this._months().indexOf(value);
                if (month > -1) {
                    return month;
                }
                // Try the translation
                if (!this._root.language.isDefault()) {
                    month = this._root.language.translateAll(this._months()).indexOf(value);
                    if (month > -1) {
                        return month;
                    }
                }
                return 0;
            }
        });
        /**
         * Resolves short month name (i.e. "Dec") into a month number.
         *
         * @param value  Short month name
         * @return Month number
         */
        Object.defineProperty(DateFormatter.prototype, "resolveShortMonth", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                // Let's try English first
                var month = this._shortMonths().indexOf(value);
                if (month > -1) {
                    return month;
                }
                // Maybe long month (workaround for May)
                month = this._months().indexOf(value);
                if (month > -1) {
                    return month;
                }
                // Try the translation
                if (this._root.language && !this._root.language.isDefault()) {
                    month = this._root.language.translateAll(this._shortMonths()).indexOf(value);
                    if (month > -1) {
                        return month;
                    }
                }
                return 0;
            }
        });
        /**
         * Checks if passed in string represents AM/PM notation in many of its
         * versions.
         *
         * @param value  Source string
         * @return Is it AM/PM?
         */
        Object.defineProperty(DateFormatter.prototype, "isAm", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var list = this.getStringList(["AM", "A.M.", "A"]);
                return list.indexOf(value.toUpperCase()) > -1;
            }
        });
        /**
         * Translates list of strings.
         *
         * @param list  Source strings
         * @return Translated strings
         */
        Object.defineProperty(DateFormatter.prototype, "getStringList", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (list) {
                var res = [];
                for (var i = 0; i < list.length; i++) {
                    // translate?
                    if (this._root.language) {
                        res.push(escapeForRgex(this._t(list[i])));
                    }
                    else {
                        res.push(escapeForRgex(list[i]));
                    }
                }
                return res;
            }
        });
        return DateFormatter;
    }(Entity));

    /**
     * A class used to format numberic values as time duration.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-durations/} for more info
     */
    var DurationFormatter = /** @class */ (function (_super) {
        __extends(DurationFormatter, _super);
        function DurationFormatter() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * Collection of aliases for units.
             */
            Object.defineProperty(_this, "_unitAliases", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {
                    "Y": "y",
                    "D": "d",
                    "H": "h",
                    "K": "h",
                    "k": "h",
                    "n": "S"
                }
            });
            return _this;
        }
        Object.defineProperty(DurationFormatter.prototype, "_setDefaults", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var dmillisecond = "_duration_millisecond";
                var dsecond = "_duration_second";
                var dminute = "_duration_minute";
                var dhour = "_duration_hour";
                var dday = "_duration_day";
                var dweek = "_duration_week";
                var dmonth = "_duration_month";
                var dyear = "_duration_year";
                var asecond = "_second";
                var aminute = "_minute";
                var ahour = "_hour";
                var aday = "_day";
                var aweek = "_week";
                var amonth = "_week";
                var ayear = "_year";
                // Defaults
                this._setDefault("negativeBase", 0);
                this._setDefault("baseUnit", "second");
                this._setDefault("durationFormats", {
                    "millisecond": {
                        "millisecond": this._t(dmillisecond),
                        "second": this._t((dmillisecond + asecond)),
                        "minute": this._t((dmillisecond + aminute)),
                        "hour": this._t((dmillisecond + ahour)),
                        "day": this._t((dmillisecond + aday)),
                        "week": this._t((dmillisecond + aweek)),
                        "month": this._t((dmillisecond + amonth)),
                        "year": this._t((dmillisecond + ayear))
                    },
                    "second": {
                        "second": this._t((dsecond)),
                        "minute": this._t((dsecond + aminute)),
                        "hour": this._t((dsecond + ahour)),
                        "day": this._t((dsecond + aday)),
                        "week": this._t((dsecond + aweek)),
                        "month": this._t((dsecond + amonth)),
                        "year": this._t((dsecond + ayear))
                    },
                    "minute": {
                        "minute": this._t((dminute)),
                        "hour": this._t((dminute + ahour)),
                        "day": this._t((dminute + aday)),
                        "week": this._t((dminute + aweek)),
                        "month": this._t((dminute + amonth)),
                        "year": this._t((dminute + ayear))
                    },
                    "hour": {
                        "hour": this._t((dhour)),
                        "day": this._t((dhour + aday)),
                        "week": this._t((dhour + aweek)),
                        "month": this._t((dhour + amonth)),
                        "year": this._t((dhour + ayear))
                    },
                    "day": {
                        "day": this._t((dday)),
                        "week": this._t((dday + aweek)),
                        "month": this._t((dday + amonth)),
                        "year": this._t((dday + ayear))
                    },
                    "week": {
                        "week": this._t((dweek)),
                        "month": this._t((dweek + amonth)),
                        "year": this._t((dweek + ayear))
                    },
                    "month": {
                        "month": this._t((dmonth)),
                        "year": this._t((dmonth + ayear))
                    },
                    "year": {
                        "year": this._t(dyear)
                    }
                });
                _super.prototype._setDefaults.call(this);
            }
        });
        Object.defineProperty(DurationFormatter.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
            }
        });
        /**
         * Formats the number as duration.
         *
         * For example `1000` (base unit seconds) would be converted to `16:40` as in
         * 16 minutes and 40 seconds.
         *
         * @param value   Value to format
         * @param format  Format to apply
         * @param base    Override base unit
         * @return Formatted number
         */
        Object.defineProperty(DurationFormatter.prototype, "format", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, format, base) {
                // no base unit?
                var baseUnit = base || this.get("baseUnit");
                // no format passed in or empty
                if (typeof format === "undefined" || format === "") {
                    if (this.get("durationFormat") != null) {
                        format = this.get("durationFormat");
                    }
                    else {
                        format = this.getFormat(toNumber(value), undefined, baseUnit);
                    }
                }
                // Clean format
                format = cleanFormat(format);
                // get format info (it will also deal with parser caching)
                var info = this.parseFormat(format, baseUnit);
                // cast to number just in case
                // TODO: maybe use better casting
                var source = Number(value);
                // format and replace the number
                var details;
                if (source > this.get("negativeBase")) {
                    details = info.positive;
                }
                else if (source < this.get("negativeBase")) {
                    details = info.negative;
                }
                else {
                    details = info.zero;
                }
                // Format
                var formatted = this.applyFormat(source, details);
                // Apply color?
                if (details.color !== "") {
                    formatted = "[" + details.color + "]" + formatted + "[/]";
                }
                return formatted;
            }
        });
        /**
         * Parses supplied format into structured object which can be used to format
         * the number.
         *
         * @param format  Format string, i.e. "#,###.00"
         * @param base    Override base unit
         * @return Parsed information
         */
        Object.defineProperty(DurationFormatter.prototype, "parseFormat", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (format, base) {
                // Check cache
                // TODO
                // let cached = this.getCache(format);
                // if (cached != null) {
                // 	return cached;
                // }
                var _this = this;
                // no base unit?
                var baseUnit = base || this.get("baseUnit");
                // Initialize duration parsing info
                var info = {
                    "positive": {
                        "color": "",
                        "template": "",
                        "parts": [],
                        "source": "",
                        "baseUnit": baseUnit,
                        "parsed": false,
                        "absolute": false
                    },
                    "negative": {
                        "color": "",
                        "template": "",
                        "parts": [],
                        "source": "",
                        "baseUnit": baseUnit,
                        "parsed": false,
                        "absolute": false
                    },
                    "zero": {
                        "color": "",
                        "template": "",
                        "parts": [],
                        "source": "",
                        "baseUnit": baseUnit,
                        "parsed": false,
                        "absolute": false
                    }
                };
                // Escape double vertical bars (that mean display one vertical bar)
                format = format.replace("||", PLACEHOLDER2);
                // Split it up and deal with different formats
                var parts = format.split("|");
                info.positive.source = parts[0];
                if (typeof parts[2] === "undefined") {
                    info.zero = info.positive;
                }
                else {
                    info.zero.source = parts[2];
                }
                if (typeof parts[1] === "undefined") {
                    info.negative = info.positive;
                }
                else {
                    info.negative.source = parts[1];
                }
                // Parse each
                each(info, function (_part, item) {
                    // Already parsed
                    if (item.parsed) {
                        return;
                    }
                    // Check cached
                    // TODO
                    // if (typeof this.getCache(item.source) !== "undefined") {
                    // 	info[part] = this.getCache(item.source);
                    // 	return;
                    // }
                    // Begin parsing
                    var partFormat = item.source;
                    // Check for [] directives
                    var dirs = [];
                    dirs = item.source.match(/^\[([^\]]*)\]/);
                    if (dirs && dirs.length && dirs[0] !== "") {
                        partFormat = item.source.substr(dirs[0].length);
                        item.color = dirs[1];
                    }
                    // Let TextFormatter split into chunks
                    var chunks = TextFormatter.chunk(partFormat, true);
                    for (var i = 0; i < chunks.length; i++) {
                        var chunk = chunks[i];
                        // replace back double vertical bar
                        chunk.text = chunk.text.replace(PLACEHOLDER2, "|");
                        if (chunk.type === "value") {
                            // Just "Duration"?
                            // if (chunk.text.toLowerCase() === "duration") {
                            // 	chunk.text = durationFormat;
                            // }
                            // Check for "a" (absolute) modifier
                            if (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {
                                item.absolute = true;
                                chunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, "$1");
                            }
                            // Find all possible parts
                            var matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);
                            if (matches) {
                                // Populate template
                                for (var x = 0; x < matches.length; x++) {
                                    // Is it an alias?
                                    if (matches[x] == null) {
                                        matches[x] = _this._unitAliases[matches[x]];
                                    }
                                    item.parts.push(matches[x]);
                                    chunk.text = chunk.text.replace(matches[x], PLACEHOLDER);
                                }
                            }
                        }
                        // Apply to template
                        item.template += chunk.text;
                    }
                    // Apply style formatting
                    //item.template = TextFormatter.format(item.template, this.outputFormat);
                    // Save cache
                    // TODO
                    //this.setCache(item.source, item);
                    // Mark this as parsed
                    item.parsed = true;
                });
                // Save cache (the whole thing)
                // TODO
                //this.setCache(format, info);
                return info;
            }
        });
        /**
         * Applies parsed format to a numeric value.
         *
         * @param value    Value
         * @param details  Parsed format as returned by {parseFormat}
         * @return Formatted duration
         */
        Object.defineProperty(DurationFormatter.prototype, "applyFormat", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, details) {
                // Use absolute values
                var negative = !details.absolute && (value < this.get("negativeBase"));
                value = Math.abs(value);
                // Recalculate to milliseconds
                var tstamp = this.toTimeStamp(value, details.baseUnit);
                // Init return value
                var res = details.template;
                // Iterate through duration parts
                for (var i = 0, len = details.parts.length; i < len; i++) {
                    // Gather the part
                    var part = details.parts[i];
                    var unit = this._toTimeUnit(part.substr(0, 1));
                    var digits = part.length;
                    // Calculate current unit value
                    var ints = Math.floor(tstamp / this._getUnitValue(unit));
                    res = res.replace(PLACEHOLDER, padString(ints, digits, "0"));
                    // Reduce timestamp
                    tstamp -= ints * this._getUnitValue(unit);
                }
                // Reapply negative sign
                if (negative) {
                    res = "-" + res;
                }
                return res;
            }
        });
        /**
         * Converts numeric value to timestamp in milliseconds.
         *
         * @param value     A source value
         * @param baseUnit  Base unit the source value is in: "q", "s", "i", "h", "d", "w", "m", "y"
         * @return Value representation as a timestamp in milliseconds
         */
        Object.defineProperty(DurationFormatter.prototype, "toTimeStamp", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, baseUnit) {
                return value * this._getUnitValue(baseUnit);
            }
        });
        Object.defineProperty(DurationFormatter.prototype, "_toTimeUnit", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (code) {
                switch (code) {
                    case "S":
                        return "millisecond";
                    case "s":
                        return "second";
                    case "m":
                        return "minute";
                    case "h":
                        return "hour";
                    case "d":
                        return "day";
                    case "w":
                        return "week";
                    case "M":
                        return "month";
                    case "y":
                        return "year";
                }
            }
        });
        /**
         * Returns appropriate default format for the value.
         *
         * If `maxValue` is sepcified, it will use that value to determine the time
         * unit for the format.
         *
         * For example if your `baseUnit` is `"second"` and you pass in `10`, you
         * will get `"10"`.
         *
         * However, you might want it to be formatted in the context of bigger scale,
         * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all
         * values, including small ones will use format with minutes, e.g.:
         * `00:10`, `00:50`, `12: 30`, etc.
         *
         * @param value     Value to format
         * @param maxValue  Maximum value to be used to determine format
         * @param baseUnit  Base unit of the value
         * @return Format
         */
        Object.defineProperty(DurationFormatter.prototype, "getFormat", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, maxValue, baseUnit) {
                // Is format override set?
                if (this.get("durationFormat") != null) {
                    return this.get("durationFormat");
                }
                // Get base unit
                if (!baseUnit) {
                    baseUnit = this.get("baseUnit");
                }
                if (maxValue != null && value != maxValue) {
                    value = Math.abs(value);
                    maxValue = Math.abs(maxValue);
                    var maxUnit = this.getValueUnit(Math.max(value, maxValue), baseUnit);
                    //let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);
                    //console.log(maxUnit, diffUnit);
                    return this.get("durationFormats")[baseUnit][maxUnit];
                }
                else {
                    var unit = this.getValueUnit(value, baseUnit);
                    return this.get("durationFormats")[baseUnit][unit];
                }
            }
        });
        /**
         * Returns value's closest denominator time unit, e.g 100 seconds is
         * `"minute"`, while 59 seconds would still be `second`.
         *
         * @param value     Source duration value
         * @param baseUnit  Base unit
         * @return Denominator
         */
        Object.defineProperty(DurationFormatter.prototype, "getValueUnit", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, baseUnit) {
                // Get base unit
                if (!baseUnit) {
                    baseUnit = this.get("baseUnit");
                }
                // Convert to milliseconds
                var currentUnit;
                var ms = this.getMilliseconds(value, baseUnit);
                eachContinue(this._getUnitValues(), function (key, val) {
                    if (key == baseUnit || currentUnit) {
                        var num = ms / val;
                        if (num <= 1) {
                            if (!currentUnit) {
                                currentUnit = key;
                            }
                            return false;
                        }
                        currentUnit = key;
                    }
                    return true;
                });
                return currentUnit;
            }
        });
        /**
         * Converts value to milliseconds according to `baseUnit`.
         *
         * @param value     Source duration value
         * @param baseUnit  Base unit
         * @return Value in milliseconds
         */
        Object.defineProperty(DurationFormatter.prototype, "getMilliseconds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, baseUnit) {
                // Get base unit
                if (!baseUnit) {
                    baseUnit = this.get("baseUnit");
                }
                return value * this._getUnitValue(baseUnit);
            }
        });
        Object.defineProperty(DurationFormatter.prototype, "_getUnitValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (timeUnit) {
                return this._getUnitValues()[timeUnit];
            }
        });
        Object.defineProperty(DurationFormatter.prototype, "_getUnitValues", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return {
                    "millisecond": 1,
                    "second": 1000,
                    "minute": 60000,
                    "hour": 3600000,
                    "day": 86400000,
                    "week": 604800000,
                    "month": 2592000000,
                    "year": 31536000000,
                };
            }
        });
        return DurationFormatter;
    }(Entity));

    /**
     * amCharts 5 locale
     *
     * Locale: en
     * Language: International English
     * Author: Martynas Majeris
     *
     * Follow instructions in [on this page](https://www.amcharts.com/docs/v5/tutorials/creating-translations/) to make corrections or add new translations.
     *
     * ---
     * Edit but leave the header section above this line. You can remove any
     * subsequent comment sections.
     * ---
     *
     * Use this file as a template to create translations. Leave the key part in
     * English intact. Fill the value with a translation.
     *
     * Empty string means no translation, so default "International English"
     * will be used.
     *
     * If you need the translation to literally be an empty string, use `null`
     * instead.
     *
     * IMPORTANT:
     * When translating make good effort to keep the translation length
     * at least the same chartcount as the English, especially for short prompts.
     *
     * Having significantly longer prompts may distort the actual charts.
     *
     * NOTE:
     * Some prompts - like months or weekdays - come in two versions: full and
     * shortened.
     *
     * If there's no official shortened version of these in your language, and it
     * would not be possible to invent such short versions that don't seem weird
     * to native speakers of that language, fill those with the same as full
     * version.
     *
     * PLACEHOLDERS:
     * Some prompts have placeholders like "%1". Those will be replaced by actual
     * values during translation and should be retained in the translated prompts.
     *
     * Placeholder positions may be changed to better suit structure of the
     * sentence.
     *
     * For example "From %1 to %2", when actually used will replace "%1" with an
     * actual value representing range start, and "%2" will be replaced by end
     * value.
     *
     * E.g. in a Scrollbar for Value axis "From %1 to %2" will become
     * "From 100 to 200". You may translate "From" and "to", as well as re-arrange
     * the order of the prompt itself, but make sure the "%1" and "%2" remain, in
     * places where they will make sense.
     *
     * Save the file as language_LOCALE, i.e. `en_GB.ts`, `fr_FR.ts`, etc.
     */
    var en = {
        "firstDayOfWeek": 1,
        // Number formatting options.
        // 
        // Please check with the local standards which separator is accepted to be
        // used for separating decimals, and which for thousands.
        "_decimalSeparator": ".",
        "_thousandSeparator": ",",
        // Suffixes for numbers
        // When formatting numbers, big or small numers might be reformatted to
        // shorter version, by applying a suffix.
        // 
        // For example, 1000000 might become "1m".
        // Or 1024 might become "1KB" if we're formatting byte numbers.
        // 
        // This section defines such suffixes for all such cases.
        "_big_number_suffix_3": "k",
        "_big_number_suffix_6": "M",
        "_big_number_suffix_9": "G",
        "_big_number_suffix_12": "T",
        "_big_number_suffix_15": "P",
        "_big_number_suffix_18": "E",
        "_big_number_suffix_21": "Z",
        "_big_number_suffix_24": "Y",
        "_small_number_suffix_3": "m",
        "_small_number_suffix_6": "μ",
        "_small_number_suffix_9": "n",
        "_small_number_suffix_12": "p",
        "_small_number_suffix_15": "f",
        "_small_number_suffix_18": "a",
        "_small_number_suffix_21": "z",
        "_small_number_suffix_24": "y",
        "_byte_suffix_B": "B",
        "_byte_suffix_KB": "KB",
        "_byte_suffix_MB": "MB",
        "_byte_suffix_GB": "GB",
        "_byte_suffix_TB": "TB",
        "_byte_suffix_PB": "PB",
        // Default date formats for various periods.
        // 
        // This should reflect official or de facto formatting universally accepted
        // in the country translation is being made for
        // Available format codes here:
        // https://www.amcharts.com/docs/v5/concepts/formatters/formatting-dates/#Format_codes
        // 
        // This will be used when formatting date/time for particular granularity,
        // e.g. "_date_hour" will be shown whenever we need to show time as hours.
        // 
        // "date" is used as in default date format when showing standalone dates.
        "_date": "yyyy-MM-dd",
        "_date_millisecond": "mm:ss SSS",
        "_date_millisecond_full": "HH:mm:ss SSS",
        "_date_second": "HH:mm:ss",
        "_date_second_full": "HH:mm:ss",
        "_date_minute": "HH:mm",
        "_date_minute_full": "HH:mm - MMM dd, yyyy",
        "_date_hour": "HH:mm",
        "_date_hour_full": "HH:mm - MMM dd, yyyy",
        "_date_day": "MMM dd",
        "_date_day_full": "MMM dd, yyyy",
        "_date_week": "ww",
        "_date_week_full": "MMM dd, yyyy",
        "_date_month": "MMM",
        "_date_month_full": "MMM, yyyy",
        "_date_year": "yyyy",
        // Default duration formats for various base units.
        // 
        // This will be used by DurationFormatter to format numeric values into
        // duration.
        // 
        // Notice how each duration unit comes in several versions. This is to ensure
        // that each base unit is shown correctly.
        // 
        // For example, if we have baseUnit set to "second", meaning our duration is
        // in seconds.
        // 
        // If we pass in `50` to formatter, it will know that we have just 50 seconds
        // (less than a minute) so it will use format in `"_duration_second"` ("ss"),
        // and the formatted result will be in like `"50"`.
        // 
        // If we pass in `70`, which is more than a minute, the formatter will switch
        // to `"_duration_second_minute"` ("mm:ss"), resulting in "01:10" formatted
        // text.
        // 
        // Available codes here:
        // https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/#Available_Codes
        "_duration_millisecond": "SSS",
        "_duration_millisecond_second": "ss.SSS",
        "_duration_millisecond_minute": "mm:ss SSS",
        "_duration_millisecond_hour": "hh:mm:ss SSS",
        "_duration_millisecond_day": "d'd' mm:ss SSS",
        "_duration_millisecond_week": "d'd' mm:ss SSS",
        "_duration_millisecond_month": "M'm' dd'd' mm:ss SSS",
        "_duration_millisecond_year": "y'y' MM'm' dd'd' mm:ss SSS",
        "_duration_second": "ss",
        "_duration_second_minute": "mm:ss",
        "_duration_second_hour": "hh:mm:ss",
        "_duration_second_day": "d'd' hh:mm:ss",
        "_duration_second_week": "d'd' hh:mm:ss",
        "_duration_second_month": "M'm' dd'd' hh:mm:ss",
        "_duration_second_year": "y'y' MM'm' dd'd' hh:mm:ss",
        "_duration_minute": "mm",
        "_duration_minute_hour": "hh:mm",
        "_duration_minute_day": "d'd' hh:mm",
        "_duration_minute_week": "d'd' hh:mm",
        "_duration_minute_month": "M'm' dd'd' hh:mm",
        "_duration_minute_year": "y'y' MM'm' dd'd' hh:mm",
        "_duration_hour": "hh'h'",
        "_duration_hour_day": "d'd' hh'h'",
        "_duration_hour_week": "d'd' hh'h'",
        "_duration_hour_month": "M'm' dd'd' hh'h'",
        "_duration_hour_year": "y'y' MM'm' dd'd' hh'h'",
        "_duration_day": "d'd'",
        "_duration_day_week": "d'd'",
        "_duration_day_month": "M'm' dd'd'",
        "_duration_day_year": "y'y' MM'm' dd'd'",
        "_duration_week": "w'w'",
        "_duration_week_month": "w'w'",
        "_duration_week_year": "w'w'",
        "_duration_month": "M'm'",
        "_duration_month_year": "y'y' MM'm'",
        "_duration_year": "y'y'",
        // Era translations
        "_era_ad": "AD",
        "_era_bc": "BC",
        // Day part, used in 12-hour formats, e.g. 5 P.M.
        // Please note that these come in 3 variants:
        // * one letter (e.g. "A")
        // * two letters (e.g. "AM")
        // * two letters with dots (e.g. "A.M.")
        // 
        // All three need to to be translated even if they are all the same. Some
        // users might use one, some the other.
        "A": "",
        "P": "",
        "AM": "",
        "PM": "",
        "A.M.": "",
        "P.M.": "",
        // Date-related stuff.
        // 
        // When translating months, if there's a difference, use the form which is
        // best for a full date, e.g. as you would use it in "2018 January 1".
        // 
        // Note that May is listed twice. This is because in English May is the same
        // in both long and short forms, while in other languages it may not be the
        // case. Translate "May" to full word, while "May(short)" to shortened
        // version.
        // 
        // Should month names and weekdays be capitalized or not?
        // 
        // Rule of thumb is this: if the names should always be capitalized,
        // regardless of name position within date ("January", "21st January 2018",
        // etc.) use capitalized names. Otherwise enter all lowercase.
        // 
        // The date formatter will automatically capitalize names if they are the
        // first (or only) word in resulting date.
        "January": "",
        "February": "",
        "March": "",
        "April": "",
        "May": "",
        "June": "",
        "July": "",
        "August": "",
        "September": "",
        "October": "",
        "November": "",
        "December": "",
        "Jan": "",
        "Feb": "",
        "Mar": "",
        "Apr": "",
        "May(short)": "May",
        "Jun": "",
        "Jul": "",
        "Aug": "",
        "Sep": "",
        "Oct": "",
        "Nov": "",
        "Dec": "",
        // Weekdays.
        "Sunday": "",
        "Monday": "",
        "Tuesday": "",
        "Wednesday": "",
        "Thursday": "",
        "Friday": "",
        "Saturday": "",
        "Sun": "",
        "Mon": "",
        "Tue": "",
        "Wed": "",
        "Thu": "",
        "Fri": "",
        "Sat": "",
        // Date ordinal function.
        // 
        // This is used when adding number ordinal when formatting days in dates.
        // 
        // E.g. "January 1st", "February 2nd".
        // 
        // The function accepts day number, and returns a string to be added to the
        // day, like in default English translation, if we pass in 2, we will receive
        // "nd" back.
        "_dateOrd": function (day) {
            var res = "th";
            if ((day < 11) || (day > 13)) {
                switch (day % 10) {
                    case 1:
                        res = "st";
                        break;
                    case 2:
                        res = "nd";
                        break;
                    case 3:
                        res = "rd";
                        break;
                }
            }
            return res;
        },
        // Various chart controls.
        // Shown as a tooltip on zoom out button.
        "Zoom Out": "",
        // Timeline buttons
        "Play": "",
        "Stop": "",
        // Chart's Legend screen reader title.
        "Legend": "",
        // Legend's item screen reader indicator.
        "Press ENTER to toggle": "",
        // Shown when the chart is busy loading something.
        "Loading": "",
        // Shown as the first button in the breadcrumb navigation, e.g.:
        // Home > First level > ...
        "Home": "",
        // Chart types.
        // Those are used as default screen reader titles for the main chart element
        // unless developer has set some more descriptive title.
        "Chart": "",
        "Serial chart": "",
        "X/Y chart": "",
        "Pie chart": "",
        "Gauge chart": "",
        "Radar chart": "",
        "Sankey diagram": "",
        "Flow diagram": "",
        "Chord diagram": "",
        "TreeMap chart": "",
        "Force directed tree": "",
        "Sliced chart": "",
        // Series types.
        // Used to name series by type for screen readers if they do not have their
        // name set.
        "Series": "",
        "Candlestick Series": "",
        "OHLC Series": "",
        "Column Series": "",
        "Line Series": "",
        "Pie Slice Series": "",
        "Funnel Series": "",
        "Pyramid Series": "",
        "X/Y Series": "",
        // Map-related stuff.
        "Map": "",
        "Press ENTER to zoom in": "",
        "Press ENTER to zoom out": "",
        "Use arrow keys to zoom in and out": "",
        "Use plus and minus keys on your keyboard to zoom in and out": "",
        // Export-related stuff.
        // These prompts are used in Export menu labels.
        // 
        // "Export" is the top-level menu item.
        // 
        // "Image", "Data", "Print" as second-level indicating type of export
        // operation.
        // 
        // Leave actual format untranslated, unless you absolutely know that they
        // would convey more meaning in some other way.
        "Export": "",
        "Image": "",
        "Data": "",
        "Print": "",
        "Press ENTER or use arrow keys to navigate": "",
        "Press ENTER to open": "",
        "Press ENTER to print.": "",
        "Press ENTER to export as %1.": "",
        "(Press ESC to close this message)": "",
        "Image Export Complete": "",
        "Export operation took longer than expected. Something might have gone wrong.": "",
        "Saved from": "",
        "PNG": "",
        "JPG": "",
        "GIF": "",
        "SVG": "",
        "PDF": "",
        "JSON": "",
        "CSV": "",
        "XLSX": "",
        "HTML": "",
        // Scrollbar-related stuff.
        // 
        // Scrollbar is a control which can zoom and pan the axes on the chart.
        // 
        // Each scrollbar has two grips: left or right (for horizontal scrollbar) or
        // upper and lower (for vertical one).
        // 
        // Prompts change in relation to whether Scrollbar is vertical or horizontal.
        // 
        // The final section is used to indicate the current range of selection.
        "Use TAB to select grip buttons or left and right arrows to change selection": "",
        "Use left and right arrows to move selection": "",
        "Use left and right arrows to move left selection": "",
        "Use left and right arrows to move right selection": "",
        "Use TAB select grip buttons or up and down arrows to change selection": "",
        "Use up and down arrows to move selection": "",
        "Use up and down arrows to move lower selection": "",
        "Use up and down arrows to move upper selection": "",
        "From %1 to %2": "",
        "From %1": "",
        "To %1": "",
        // Data loader-related.
        "No parser available for file: %1": "",
        "Error parsing file: %1": "",
        "Unable to load file: %1": "",
        "Invalid date": "",
        // Common actions
        "Close": "",
        "Minimize": ""
    };

    var Language = /** @class */ (function (_super) {
        __extends(Language, _super);
        function Language() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Language.prototype, "_setDefaults", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setPrivate("defaultLocale", en);
                _super.prototype._setDefaults.call(this);
            }
        });
        Object.defineProperty(Language.prototype, "translate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (prompt, locale) {
                var rest = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    rest[_i - 2] = arguments[_i];
                }
                // Get langauge
                if (!locale) {
                    locale = this._root.locale || this.getPrivate("defaultLocale");
                }
                // Init translation
                var translation = prompt;
                var value = locale[prompt];
                // Try to look for the translation
                if (value === null) {
                    translation = "";
                }
                else if (value != null) {
                    // It might be an empty string
                    if (value) {
                        translation = value;
                    }
                }
                else if (locale !== this.getPrivate("defaultLocale")) {
                    // Try to look in default language
                    return this.translate.apply(this, __spreadArray([prompt, this.getPrivate("defaultLocale")], __read(rest), false));
                }
                // Replace %1, %2, etc params
                if (rest.length) {
                    for (var len = rest.length, i = 0; i < len; ++i) {
                        translation = translation.split("%" + (i + 1)).join(rest[i]);
                    }
                }
                // Return the translation
                return translation;
            }
        });
        Object.defineProperty(Language.prototype, "translateAny", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (prompt, locale) {
                var rest = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    rest[_i - 2] = arguments[_i];
                }
                return this.translate.apply(this, __spreadArray([prompt, locale], __read(rest), false));
            }
        });
        Object.defineProperty(Language.prototype, "setTranslationAny", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (prompt, translation, locale) {
                var localeTarget = locale || this._root.locale;
                localeTarget[prompt] = translation;
            }
        });
        Object.defineProperty(Language.prototype, "translateEmpty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (prompt, locale) {
                var rest = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    rest[_i - 2] = arguments[_i];
                }
                var translation = this.translate.apply(this, __spreadArray([prompt, locale], __read(rest), false));
                return translation == prompt ? "" : translation;
            }
        });
        Object.defineProperty(Language.prototype, "translateFunc", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (prompt, locale) {
                if (this._root.locale[prompt]) {
                    return this._root.locale[prompt];
                }
                // Try to look in default language
                if (locale !== this.getPrivate("defaultLocale")) {
                    return this.translateFunc(prompt, this.getPrivate("defaultLocale"));
                }
                // Fail - return empty function
                return function () {
                    return "";
                };
            }
        });
        Object.defineProperty(Language.prototype, "translateAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (list, locale) {
                var _this = this;
                // Translate all items in the list
                if (!this.isDefault()) {
                    return map(list, function (x) { return _this.translate(x, locale); });
                }
                else {
                    return list;
                }
            }
        });
        /**
         * Returns `true` if the currently selected locale is a default locale.
         *
         * @return `true` if locale is default; `false` if it is not.
         */
        Object.defineProperty(Language.prototype, "isDefault", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.getPrivate("defaultLocale") === this._root.locale;
            }
        });
        return Language;
    }(Entity));

    /**
     * A base class for an amCharts theme.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/themes/} for more info
     * @important
     */
    var Theme = /** @class */ (function () {
        function Theme(root, isReal) {
            Object.defineProperty(this, "_root", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_rules", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            this._root = root;
            if (!isReal) {
                throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
            }
        }
        /**
         * Use this method to create an instance of this class.
         *
         * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info
         * @param   root      Root element
         * @param   settings  Settings
         * @param   template  Template
         * @return            Instantiated object
         */
        Object.defineProperty(Theme, "new", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (root) {
                var x = (new this(root, true));
                x.setupDefaultRules();
                return x;
            }
        });
        Object.defineProperty(Theme.prototype, "setupDefaultRules", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        /**
         * Looks up the rules for a specific theme class.
         *
         * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info
         * @param   themeClass Theme class
         * @return             Array<IRule<A>>
         */
        Object.defineProperty(Theme.prototype, "_lookupRules", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (themeClass) {
                return this._rules[themeClass];
            }
        });
        /**
         * Creates a [[Template]] for specific theme class and tags.
         *
         * NOTE: the difference from `rule()` is that `ruleRaw()` does not do any
         * type checks.
         *
         * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info
         * @param   themeClass Theme class
         * @param   themeTags  Theme tags
         * @return             Template
         */
        Object.defineProperty(Theme.prototype, "ruleRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (themeClass, themeTags) {
                if (themeTags === void 0) { themeTags = []; }
                var rules = this._rules[themeClass];
                if (!rules) {
                    rules = this._rules[themeClass] = [];
                }
                themeTags.sort(compare);
                var _a = getSortedIndex(rules, function (x) {
                    var order = compare(x.tags.length, themeTags.length);
                    if (order === 0) {
                        return compareArray(x.tags, themeTags, compare);
                    }
                    else {
                        return order;
                    }
                }), index = _a.index, found = _a.found;
                if (found) {
                    return rules[index].template;
                }
                else {
                    var template = Template.new({});
                    rules.splice(index, 0, {
                        tags: themeTags,
                        template: template,
                    });
                    return template;
                }
            }
        });
        /**
         * Creates a [[Template]] for specific theme class and tags.
         *
         * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info
         * @param   themeClass Theme class
         * @param   themeTags  Theme tags
         * @return             Template
         */
        Object.defineProperty(Theme.prototype, "rule", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (themeClass, themeTags) {
                if (themeTags === void 0) { themeTags = []; }
                return this.ruleRaw(themeClass, themeTags);
            }
        });
        return Theme;
    }());

    /**
     * @ignore
     */
    function setColor(rule, key, ic, name) {
        // TODO this shouldn't use get, figure out a better way
        rule.set(key, ic.get(name));
        ic.on(name, function (value) {
            rule.set(key, value);
        });
    }
    /**
     * @ignore
     */
    var DefaultTheme = /** @class */ (function (_super) {
        __extends(DefaultTheme, _super);
        function DefaultTheme() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(DefaultTheme.prototype, "setupDefaultRules", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.setupDefaultRules.call(this);
                var language = this._root.language;
                var ic = this._root.interfaceColors;
                var horizontalLayout = this._root.horizontalLayout;
                var verticalLayout = this._root.verticalLayout;
                var r = this.rule.bind(this);
                /**
                 * ========================================================================
                 * core
                 * ========================================================================
                 */
                r("InterfaceColors").setAll({
                    stroke: Color.fromHex(0xe5e5e5),
                    fill: Color.fromHex(0xf3f3f3),
                    primaryButton: Color.fromHex(0x6794dc),
                    primaryButtonHover: Color.fromHex(0x6771dc),
                    primaryButtonDown: Color.fromHex(0x68dc76),
                    primaryButtonActive: Color.fromHex(0x68dc76),
                    primaryButtonText: Color.fromHex(0xffffff),
                    primaryButtonStroke: Color.fromHex(0xffffff),
                    secondaryButton: Color.fromHex(0xd9d9d9),
                    secondaryButtonHover: Color.fromHex(0xa3a3a3),
                    secondaryButtonDown: Color.fromHex(0x8d8d8d),
                    secondaryButtonActive: Color.fromHex(0xe6e6e6),
                    secondaryButtonText: Color.fromHex(0x000000),
                    secondaryButtonStroke: Color.fromHex(0xffffff),
                    grid: Color.fromHex(0x000000),
                    background: Color.fromHex(0xffffff),
                    alternativeBackground: Color.fromHex(0x000000),
                    text: Color.fromHex(0x000000),
                    alternativeText: Color.fromHex(0xffffff),
                    disabled: Color.fromHex(0xadadad),
                    positive: Color.fromHex(0x50b300),
                    negative: Color.fromHex(0xb30000)
                });
                {
                    var rule = r("ColorSet");
                    rule.setAll({
                        passOptions: {
                            hue: 0.05,
                            saturation: 0,
                            lightness: 0
                        },
                        colors: [
                            Color.fromHex(0x67b7dc)
                        ],
                        step: 1,
                        //baseColor: Color.fromRGB(103, 183, 220),
                        //count: 20,
                        reuse: false,
                        startIndex: 0
                    });
                    rule.setPrivate("currentStep", 0);
                    rule.setPrivate("currentPass", 0);
                }
                r("Entity").setAll({
                    stateAnimationDuration: 0,
                    stateAnimationEasing: out(cubic)
                });
                r("Component").setAll({
                    interpolationDuration: 0,
                    interpolationEasing: out(cubic)
                });
                r("Sprite").setAll({
                    visible: true,
                    scale: 1,
                    opacity: 1,
                    rotation: 0,
                    position: "relative",
                    tooltipX: p50,
                    tooltipY: p50,
                    tooltipPosition: "fixed",
                    isMeasured: true
                });
                r("Sprite").states.create("default", { "visible": true, opacity: 1 });
                r("Container").setAll({
                    interactiveChildren: true,
                    setStateOnChildren: false
                });
                r("Graphics").setAll({
                    strokeWidth: 1
                });
                r("Chart").setAll({
                    width: p100,
                    height: p100,
                    interactiveChildren: false
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: alignment
                 * ------------------------------------------------------------------------
                 */
                r("Sprite", ["horizontal", "center"]).setAll({
                    centerX: p50,
                    x: p50
                });
                r("Sprite", ["vertical", "center"]).setAll({
                    centerY: p50,
                    y: p50
                });
                r("Container", ["horizontal", "layout"]).setAll({
                    layout: horizontalLayout
                });
                r("Container", ["vertical", "layout"]).setAll({
                    layout: verticalLayout
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: patterns
                 * ------------------------------------------------------------------------
                 */
                r("Pattern").setAll({
                    repetition: "repeat",
                    width: 50,
                    height: 50,
                    rotation: 0,
                    fillOpacity: 1
                });
                r("LinePattern").setAll({
                    gap: 6,
                    colorOpacity: 1,
                    width: 49,
                    height: 49
                });
                r("RectanglePattern").setAll({
                    gap: 6,
                    checkered: false,
                    centered: true,
                    maxWidth: 5,
                    maxHeight: 5,
                    width: 48,
                    height: 48,
                    strokeWidth: 0
                });
                r("CirclePattern").setAll({
                    gap: 5,
                    checkered: false,
                    centered: false,
                    radius: 3,
                    strokeWidth: 0,
                    width: 45,
                    height: 45
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: gradients
                 * ------------------------------------------------------------------------
                 */
                r("LinearGradient").setAll({
                    rotation: 90
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: Legend
                 * ------------------------------------------------------------------------
                 */
                r("Legend").setAll({
                    fillField: "fill",
                    strokeField: "stroke",
                    nameField: "name",
                    layout: GridLayout.new(this._root, {}),
                    layer: 30,
                    clickTarget: "itemContainer"
                });
                // Class: Container
                r("Container", ["legend", "item", "itemcontainer"]).setAll({
                    paddingLeft: 5,
                    paddingRight: 5,
                    paddingBottom: 5,
                    paddingTop: 5,
                    layout: horizontalLayout,
                    setStateOnChildren: true,
                    interactiveChildren: false,
                    ariaChecked: true,
                    focusable: true,
                    ariaLabel: language.translate("Press ENTER to toggle")
                });
                {
                    var rule = r("Rectangle", ["legend", "item", "background"]);
                    rule.setAll({
                        fillOpacity: 0,
                    });
                    setColor(rule, "fill", ic, "background");
                }
                r("Container", ["legend", "marker"]).setAll({
                    setStateOnChildren: true,
                    centerY: p50,
                    paddingLeft: 0,
                    paddingRight: 0,
                    paddingBottom: 0,
                    paddingTop: 0,
                    width: 18,
                    height: 18
                });
                r("RoundedRectangle", ["legend", "marker", "rectangle"]).setAll({
                    width: p100,
                    height: p100,
                    cornerRadiusBL: 3,
                    cornerRadiusTL: 3,
                    cornerRadiusBR: 3,
                    cornerRadiusTR: 3
                });
                {
                    var rule = r("RoundedRectangle", ["legend", "marker", "rectangle"]).states.create("disabled", {});
                    setColor(rule, "fill", ic, "disabled");
                    setColor(rule, "stroke", ic, "disabled");
                }
                r("Label", ["legend", "label"]).setAll({
                    centerY: p50,
                    marginLeft: 5,
                    paddingRight: 0,
                    paddingLeft: 0,
                    paddingTop: 0,
                    paddingBottom: 0,
                    populateText: true
                });
                {
                    var rule = r("Label", ["legend", "label"]).states.create("disabled", {});
                    setColor(rule, "fill", ic, "disabled");
                }
                r("Label", ["legend", "value", "label"]).setAll({
                    centerY: p50,
                    marginLeft: 5,
                    paddingRight: 0,
                    paddingLeft: 0,
                    paddingTop: 0,
                    paddingBottom: 0,
                    width: 50,
                    centerX: p100,
                    populateText: true
                });
                {
                    var rule = r("Label", ["legend", "value", "label"]).states.create("disabled", {});
                    setColor(rule, "fill", ic, "disabled");
                }
                /**
                 * ------------------------------------------------------------------------
                 * core: HeatLegend
                 * ------------------------------------------------------------------------
                 */
                r("HeatLegend").setAll({
                    stepCount: 1
                });
                r("RoundedRectangle", ["heatlegend", "marker"]).setAll({
                    cornerRadiusTR: 0,
                    cornerRadiusBR: 0,
                    cornerRadiusTL: 0,
                    cornerRadiusBL: 0
                });
                r("RoundedRectangle", ["vertical", "heatlegend", "marker"]).setAll({
                    height: p100,
                    width: 15
                });
                r("RoundedRectangle", ["horizontal", "heatlegend", "marker"]).setAll({
                    width: p100,
                    height: 15
                });
                r("HeatLegend", ["vertical"]).setAll({
                    height: p100
                });
                r("HeatLegend", ["horizontal"]).setAll({
                    width: p100
                });
                r("Label", ["heatlegend", "start"]).setAll({
                    paddingLeft: 5,
                    paddingRight: 5,
                    paddingTop: 5,
                    paddingBottom: 5
                });
                r("Label", ["heatlegend", "end"]).setAll({
                    paddingLeft: 5,
                    paddingRight: 5,
                    paddingTop: 5,
                    paddingBottom: 5
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: Labels
                 * ------------------------------------------------------------------------
                 */
                {
                    var rule = r("Label");
                    rule.setAll({
                        paddingTop: 8,
                        paddingBottom: 8,
                        paddingLeft: 10,
                        paddingRight: 10,
                        fontFamily: "-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"",
                        fontSize: "1em",
                        populateText: false
                    });
                    setColor(rule, "fill", ic, "text");
                }
                r("RadialLabel").setAll({
                    textType: "regular",
                    centerY: p50,
                    centerX: p50,
                    inside: false,
                    radius: 0,
                    baseRadius: p100,
                    orientation: "auto",
                    textAlign: "center"
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: Elements and shapes
                 * ------------------------------------------------------------------------
                 */
                r("RoundedRectangle").setAll({
                    cornerRadiusTL: 8,
                    cornerRadiusBL: 8,
                    cornerRadiusTR: 8,
                    cornerRadiusBR: 8
                });
                r("PointedRectangle").setAll({
                    pointerBaseWidth: 15,
                    pointerLength: 10,
                    cornerRadius: 8
                });
                r("Slice").setAll({
                    shiftRadius: 0,
                    dRadius: 0,
                    dInnerRadius: 0
                });
                {
                    var rule = r("Tick");
                    rule.setAll({
                        strokeOpacity: .15,
                        isMeasured: false,
                        length: 5,
                        position: "absolute"
                    });
                    setColor(rule, "stroke", ic, "grid");
                }
                r("Bullet").setAll({
                    locationX: 0.5,
                    locationY: 0.5
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: Tooltip
                 * ------------------------------------------------------------------------
                 */
                r("Tooltip").setAll({
                    position: "absolute",
                    getFillFromSprite: true,
                    getStrokeFromSprite: false,
                    autoTextColor: true,
                    paddingTop: 9,
                    paddingBottom: 8,
                    paddingLeft: 10,
                    paddingRight: 10,
                    marginBottom: 5,
                    pointerOrientation: "vertical",
                    centerX: p50,
                    centerY: p50,
                    animationEasing: out(cubic),
                    exportable: false
                    //layer: 100
                });
                {
                    var rule = r("PointedRectangle", ["tooltip", "background"]);
                    rule.setAll({
                        strokeOpacity: 0.9,
                        cornerRadius: 4,
                        pointerLength: 4,
                        pointerBaseWidth: 8,
                        fillOpacity: 0.9,
                        stroke: Color.fromHex(0xffffff)
                    });
                }
                {
                    var rule = r("Label", ["tooltip"]);
                    rule.setAll({
                        role: "tooltip",
                        populateText: true,
                        paddingRight: 0,
                        paddingTop: 0,
                        paddingLeft: 0,
                        paddingBottom: 0
                    });
                    setColor(rule, "fill", ic, "alternativeText");
                }
                /**
                 * ------------------------------------------------------------------------
                 * core: Button
                 * ------------------------------------------------------------------------
                 */
                r("Button").setAll({
                    paddingTop: 8,
                    paddingBottom: 8,
                    paddingLeft: 10,
                    paddingRight: 10,
                    interactive: true,
                    layout: horizontalLayout,
                    interactiveChildren: false,
                    setStateOnChildren: true,
                    focusable: true
                });
                r("Button").states.create("hover", {});
                r("Button").states.create("down", { stateAnimationDuration: 0 });
                r("Button").states.create("active", {});
                {
                    var rule = r("RoundedRectangle", ["button", "background"]);
                    setColor(rule, "fill", ic, "primaryButton");
                    setColor(rule, "stroke", ic, "primaryButtonStroke");
                }
                {
                    var rule = r("RoundedRectangle", ["button", "background"]).states.create("hover", {});
                    setColor(rule, "fill", ic, "primaryButtonHover");
                }
                {
                    var rule = r("RoundedRectangle", ["button", "background"]).states.create("down", { stateAnimationDuration: 0 });
                    setColor(rule, "fill", ic, "primaryButtonDown");
                }
                {
                    var rule = r("RoundedRectangle", ["button", "background"]).states.create("active", {});
                    setColor(rule, "fill", ic, "primaryButtonActive");
                }
                {
                    var rule = r("Graphics", ["button", "icon"]);
                    setColor(rule, "stroke", ic, "primaryButtonText");
                }
                {
                    var rule = r("Label", ["button"]);
                    setColor(rule, "fill", ic, "primaryButtonText");
                }
                /**
                 * ------------------------------------------------------------------------
                 * charts/xy: ZoomOutButton
                 * ------------------------------------------------------------------------
                 */
                r("Button", ["zoom"]).setAll({
                    paddingTop: 18,
                    paddingBottom: 18,
                    paddingLeft: 12,
                    paddingRight: 12,
                    centerX: 46,
                    centerY: -10,
                    y: 0,
                    x: p100,
                    role: "button",
                    ariaLabel: language.translate("Zoom Out"),
                    layer: 30
                });
                {
                    var rule = r("RoundedRectangle", ["background", "button", "zoom"]);
                    rule.setAll({
                        cornerRadiusBL: 40,
                        cornerRadiusBR: 40,
                        cornerRadiusTL: 40,
                        cornerRadiusTR: 40
                    });
                    setColor(rule, "fill", ic, "primaryButton");
                }
                {
                    var rule = r("RoundedRectangle", ["background", "button", "zoom"]).states.create("hover", {});
                    setColor(rule, "fill", ic, "primaryButtonHover");
                }
                {
                    var rule = r("RoundedRectangle", ["background", "button", "zoom"]).states.create("down", { stateAnimationDuration: 0 });
                    setColor(rule, "fill", ic, "primaryButtonDown");
                }
                {
                    var rule = r("Graphics", ["icon", "button", "zoom"]);
                    rule.setAll({
                        strokeOpacity: 0.7,
                        draw: function (display) {
                            display.moveTo(0, 0);
                            display.lineTo(12, 0);
                        }
                    });
                    setColor(rule, "stroke", ic, "primaryButtonText");
                }
                /**
                 * ------------------------------------------------------------------------
                 * core: ResizeButton
                 * ------------------------------------------------------------------------
                 */
                r("Button", ["resize"]).setAll({
                    paddingTop: 9,
                    paddingBottom: 9,
                    paddingLeft: 13,
                    paddingRight: 13,
                    draggable: true,
                    centerX: p50,
                    centerY: p50,
                    position: "absolute",
                    role: "slider",
                    ariaValueMin: "0",
                    ariaValueMax: "100",
                    ariaLabel: language.translate("Use up and down arrows to move selection")
                });
                {
                    var rule = r("RoundedRectangle", ["background", "resize", "button"]);
                    rule.setAll({
                        cornerRadiusBL: 40,
                        cornerRadiusBR: 40,
                        cornerRadiusTL: 40,
                        cornerRadiusTR: 40
                    });
                    setColor(rule, "fill", ic, "secondaryButton");
                    setColor(rule, "stroke", ic, "secondaryButtonStroke");
                }
                {
                    var rule = r("RoundedRectangle", ["background", "resize", "button"]).states.create("hover", {});
                    setColor(rule, "fill", ic, "secondaryButtonHover");
                }
                {
                    var rule = r("RoundedRectangle", ["background", "resize", "button"]).states.create("down", { stateAnimationDuration: 0 });
                    setColor(rule, "fill", ic, "secondaryButtonDown");
                }
                {
                    var rule = r("Graphics", ["resize", "button", "icon"]);
                    rule.setAll({
                        strokeOpacity: 0.7,
                        draw: function (display) {
                            display.moveTo(0, 0);
                            display.lineTo(0, 12);
                            display.moveTo(4, 0);
                            display.lineTo(4, 12);
                        }
                    });
                    setColor(rule, "stroke", ic, "secondaryButtonText");
                }
                r("Button", ["resize", "vertical"]).setAll({
                    rotation: 90,
                    cursorOverStyle: "ns-resize"
                });
                r("Button", ["resize", "horizontal"]).setAll({
                    cursorOverStyle: "ew-resize"
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: PlayButton
                 * ------------------------------------------------------------------------
                 */
                r("Button", ["play"]).setAll({
                    paddingTop: 13,
                    paddingBottom: 13,
                    paddingLeft: 14,
                    paddingRight: 14,
                    ariaLabel: language.translate("Play"),
                    toggleKey: "active"
                });
                {
                    var rule = r("RoundedRectangle", ["play", "background"]);
                    rule.setAll({
                        strokeOpacity: 0.5,
                        cornerRadiusBL: 100,
                        cornerRadiusBR: 100,
                        cornerRadiusTL: 100,
                        cornerRadiusTR: 100
                    });
                    setColor(rule, "fill", ic, "primaryButton");
                }
                {
                    var rule = r("Graphics", ["play", "icon"]);
                    rule.setAll({
                        stateAnimationDuration: 0,
                        dx: 1,
                        draw: function (display) {
                            display.moveTo(0, -5);
                            display.lineTo(8, 0);
                            display.lineTo(0, 5);
                            display.lineTo(0, -5);
                        }
                    });
                    setColor(rule, "fill", ic, "primaryButtonText");
                }
                r("Graphics", ["play", "icon"]).states.create("default", {
                    stateAnimationDuration: 0
                });
                r("Graphics", ["play", "icon"]).states.create("active", {
                    stateAnimationDuration: 0,
                    draw: function (display) {
                        display.moveTo(-4, -5);
                        display.lineTo(-1, -5);
                        display.lineTo(-1, 5);
                        display.lineTo(-4, 5);
                        display.lineTo(-4, -5);
                        display.moveTo(4, -5);
                        display.lineTo(1, -5);
                        display.lineTo(1, 5);
                        display.lineTo(4, 5);
                        display.lineTo(4, -5);
                    }
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: SwitchButton
                 * ------------------------------------------------------------------------
                 */
                r("Button", ["switch"]).setAll({
                    paddingTop: 4,
                    paddingBottom: 4,
                    paddingLeft: 4,
                    paddingRight: 4,
                    ariaLabel: language.translate("Press ENTER to toggle"),
                    toggleKey: "active",
                    width: 40,
                    height: 24,
                    layout: null
                });
                {
                    var rule = r("RoundedRectangle", ["switch", "background"]);
                    rule.setAll({
                        strokeOpacity: 0.5,
                        cornerRadiusBL: 100,
                        cornerRadiusBR: 100,
                        cornerRadiusTL: 100,
                        cornerRadiusTR: 100
                    });
                    setColor(rule, "fill", ic, "primaryButton");
                }
                {
                    var rule = r("Circle", ["switch", "icon"]);
                    rule.setAll({
                        radius: 8,
                        centerY: 0,
                        centerX: 0,
                        dx: 0
                    });
                    setColor(rule, "fill", ic, "primaryButtonText");
                }
                r("Graphics", ["switch", "icon"]).states.create("active", {
                    dx: 16
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: Scrollbar
                 * ------------------------------------------------------------------------
                 */
                r("Scrollbar").setAll({
                    start: 0,
                    end: 1,
                    layer: 30,
                    animationEasing: out(cubic)
                });
                r("Scrollbar", ["vertical"]).setAll({
                    marginRight: 13,
                    marginLeft: 13,
                    minWidth: 12,
                    height: p100
                });
                r("Scrollbar", ["horizontal"]).setAll({
                    marginTop: 13,
                    marginBottom: 13,
                    minHeight: 12,
                    width: p100
                });
                this.rule("Button", ["scrollbar"]).setAll({
                    exportable: false
                });
                {
                    var rule = r("RoundedRectangle", ["scrollbar", "main", "background"]);
                    rule.setAll({
                        cornerRadiusTL: 8,
                        cornerRadiusBL: 8,
                        cornerRadiusTR: 8,
                        cornerRadiusBR: 8,
                        fillOpacity: 0.8,
                    });
                    setColor(rule, "fill", ic, "fill");
                }
                {
                    var rule = r("RoundedRectangle", ["scrollbar", "thumb"]);
                    rule.setAll({
                        role: "slider",
                        ariaLive: "polite",
                        position: "absolute",
                        draggable: true
                    });
                    setColor(rule, "fill", ic, "secondaryButton");
                }
                {
                    var rule = r("RoundedRectangle", ["scrollbar", "thumb"]).states.create("hover", {});
                    setColor(rule, "fill", ic, "secondaryButtonHover");
                }
                {
                    var rule = r("RoundedRectangle", ["scrollbar", "thumb"]).states.create("down", { stateAnimationDuration: 0 });
                    setColor(rule, "fill", ic, "secondaryButtonDown");
                }
                r("RoundedRectangle", ["scrollbar", "thumb", "vertical"]).setAll({
                    x: p50,
                    width: p100,
                    centerX: p50,
                    ariaLabel: language.translate("Use up and down arrows to move selection")
                });
                r("RoundedRectangle", ["scrollbar", "thumb", "horizontal"]).setAll({
                    y: p50,
                    centerY: p50,
                    height: p100,
                    ariaLabel: language.translate("Use left and right arrows to move selection")
                });
                // @todo: is this needed? used to be "ContentScrollbar"
                // r("Scrollbar", ["content?"]).setAll({
                // 	marginRight: 0,
                // 	marginLeft: 5,
                // 	layer: 5
                // });
                /**
                 * ========================================================================
                 * charts/xy
                 * ========================================================================
                 *
                 * This needs to be in DefaultTheme because it's the only theme that is
                 * automatically applied to Root, and tooltips different ancestors
                 * than actual charts using them.
                 */
                {
                    var rule = r("PointedRectangle", ["axis", "tooltip", "background"]);
                    rule.setAll({
                        cornerRadius: 0
                    });
                    setColor(rule, "fill", ic, "alternativeBackground");
                }
                r("Label", ["axis", "tooltip"]).setAll({
                    role: undefined
                });
                r("Label", ["axis", "tooltip", "y"]).setAll({
                    textAlign: "right"
                });
                r("Label", ["axis", "tooltip", "y", "opposite"]).setAll({
                    textAlign: "left"
                });
                r("Label", ["axis", "tooltip", "x"]).setAll({
                    textAlign: "center"
                });
                r("Tooltip", ["categoryaxis"]).setAll({
                    labelText: "{category}"
                });
                /**
                 * ------------------------------------------------------------------------
                 * Shapes
                 * ------------------------------------------------------------------------
                 */
                // Class: Graphics
                r("Star").setAll({
                    spikes: 5,
                    innerRadius: 5,
                    radius: 10
                });
                // STOCK
                r("Tooltip", ["stock"]).setAll({
                    paddingTop: 6,
                    paddingBottom: 5,
                    paddingLeft: 7,
                    paddingRight: 7
                });
                r("PointedRectangle", ["tooltip", "stock", "axis"]).setAll({
                    pointerLength: 0,
                    pointerBaseWidth: 0,
                    cornerRadius: 3
                });
                r("Label", ["tooltip", "stock"]).setAll({
                    fontSize: "0.8em"
                });
            }
        });
        return DefaultTheme;
    }(Theme));

    /**
     * Modified from Pixi:
     *
     * The MIT License
     *
     * Copyright (c) 2013-2017 Mathew Groves, Chad Engler
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    /**
     * @ignore
     */
    var Matrix = /** @class */ (function () {
        function Matrix(a, b, c, d, tx, ty) {
            if (a === void 0) { a = 1; }
            if (b === void 0) { b = 0; }
            if (c === void 0) { c = 0; }
            if (d === void 0) { d = 1; }
            if (tx === void 0) { tx = 0; }
            if (ty === void 0) { ty = 0; }
            Object.defineProperty(this, "a", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "b", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "c", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "d", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "tx", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "ty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.tx = tx;
            this.ty = ty;
        }
        /**
         * Sets the matrix based on all the available properties
         */
        Object.defineProperty(Matrix.prototype, "setTransform", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x, y, pivotX, pivotY, rotation, scale) {
                if (scale === void 0) { scale = 1; }
                this.a = Math.cos(rotation) * scale;
                this.b = Math.sin(rotation) * scale;
                this.c = -Math.sin(rotation) * scale;
                this.d = Math.cos(rotation) * scale;
                this.tx = x - ((pivotX * this.a) + (pivotY * this.c));
                this.ty = y - ((pivotX * this.b) + (pivotY * this.d));
            }
        });
        /**
         * Get a new position with the current transformation applied.
         * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)
         */
        Object.defineProperty(Matrix.prototype, "apply", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (origin) {
                return {
                    x: (this.a * origin.x) + (this.c * origin.y) + this.tx,
                    y: (this.b * origin.x) + (this.d * origin.y) + this.ty
                };
            }
        });
        /**
         * Get a new position with the inverse of the current transformation applied.
         * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)
         */
        Object.defineProperty(Matrix.prototype, "applyInverse", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (origin) {
                var id = 1 / ((this.a * this.d) + (this.c * -this.b));
                return {
                    x: (this.d * id * origin.x) + (-this.c * id * origin.y) + (((this.ty * this.c) - (this.tx * this.d)) * id),
                    y: (this.a * id * origin.y) + (-this.b * id * origin.x) + (((-this.ty * this.a) + (this.tx * this.b)) * id)
                };
            }
        });
        /**
         * Appends the given Matrix to this Matrix.
         */
        Object.defineProperty(Matrix.prototype, "append", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (matrix) {
                var a1 = this.a;
                var b1 = this.b;
                var c1 = this.c;
                var d1 = this.d;
                this.a = (matrix.a * a1) + (matrix.b * c1);
                this.b = (matrix.a * b1) + (matrix.b * d1);
                this.c = (matrix.c * a1) + (matrix.d * c1);
                this.d = (matrix.c * b1) + (matrix.d * d1);
                this.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;
                this.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;
            }
        });
        /**
         * Prepends the given Matrix to this Matrix.
         */
        Object.defineProperty(Matrix.prototype, "prepend", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (matrix) {
                var tx1 = this.tx;
                if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {
                    var a1 = this.a;
                    var c1 = this.c;
                    this.a = (a1 * matrix.a) + (this.b * matrix.c);
                    this.b = (a1 * matrix.b) + (this.b * matrix.d);
                    this.c = (c1 * matrix.a) + (this.d * matrix.c);
                    this.d = (c1 * matrix.b) + (this.d * matrix.d);
                }
                this.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;
                this.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;
            }
        });
        /**
         * Copies the other matrix's properties into this matrix
         */
        Object.defineProperty(Matrix.prototype, "copyFrom", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (matrix) {
                this.a = matrix.a;
                this.b = matrix.b;
                this.c = matrix.c;
                this.d = matrix.d;
                this.tx = matrix.tx;
                this.ty = matrix.ty;
            }
        });
        return Matrix;
    }());

    var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    var TAU = Math.PI * 2;

    var mapToEllipse = function mapToEllipse(_ref, rx, ry, cosphi, sinphi, centerx, centery) {
      var x = _ref.x,
          y = _ref.y;

      x *= rx;
      y *= ry;

      var xp = cosphi * x - sinphi * y;
      var yp = sinphi * x + cosphi * y;

      return {
        x: xp + centerx,
        y: yp + centery
      };
    };

    var approxUnitArc = function approxUnitArc(ang1, ang2) {
      // If 90 degree circular arc, use a constant
      // as derived from http://spencermortensen.com/articles/bezier-circle
      var a = ang2 === 1.5707963267948966 ? 0.551915024494 : ang2 === -1.5707963267948966 ? -0.551915024494 : 4 / 3 * Math.tan(ang2 / 4);

      var x1 = Math.cos(ang1);
      var y1 = Math.sin(ang1);
      var x2 = Math.cos(ang1 + ang2);
      var y2 = Math.sin(ang1 + ang2);

      return [{
        x: x1 - y1 * a,
        y: y1 + x1 * a
      }, {
        x: x2 + y2 * a,
        y: y2 - x2 * a
      }, {
        x: x2,
        y: y2
      }];
    };

    var vectorAngle = function vectorAngle(ux, uy, vx, vy) {
      var sign = ux * vy - uy * vx < 0 ? -1 : 1;

      var dot = ux * vx + uy * vy;

      if (dot > 1) {
        dot = 1;
      }

      if (dot < -1) {
        dot = -1;
      }

      return sign * Math.acos(dot);
    };

    var getArcCenter = function getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp) {
      var rxsq = Math.pow(rx, 2);
      var rysq = Math.pow(ry, 2);
      var pxpsq = Math.pow(pxp, 2);
      var pypsq = Math.pow(pyp, 2);

      var radicant = rxsq * rysq - rxsq * pypsq - rysq * pxpsq;

      if (radicant < 0) {
        radicant = 0;
      }

      radicant /= rxsq * pypsq + rysq * pxpsq;
      radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);

      var centerxp = radicant * rx / ry * pyp;
      var centeryp = radicant * -ry / rx * pxp;

      var centerx = cosphi * centerxp - sinphi * centeryp + (px + cx) / 2;
      var centery = sinphi * centerxp + cosphi * centeryp + (py + cy) / 2;

      var vx1 = (pxp - centerxp) / rx;
      var vy1 = (pyp - centeryp) / ry;
      var vx2 = (-pxp - centerxp) / rx;
      var vy2 = (-pyp - centeryp) / ry;

      var ang1 = vectorAngle(1, 0, vx1, vy1);
      var ang2 = vectorAngle(vx1, vy1, vx2, vy2);

      if (sweepFlag === 0 && ang2 > 0) {
        ang2 -= TAU;
      }

      if (sweepFlag === 1 && ang2 < 0) {
        ang2 += TAU;
      }

      return [centerx, centery, ang1, ang2];
    };

    var arcToBezier = function arcToBezier(_ref2) {
      var px = _ref2.px,
          py = _ref2.py,
          cx = _ref2.cx,
          cy = _ref2.cy,
          rx = _ref2.rx,
          ry = _ref2.ry,
          _ref2$xAxisRotation = _ref2.xAxisRotation,
          xAxisRotation = _ref2$xAxisRotation === undefined ? 0 : _ref2$xAxisRotation,
          _ref2$largeArcFlag = _ref2.largeArcFlag,
          largeArcFlag = _ref2$largeArcFlag === undefined ? 0 : _ref2$largeArcFlag,
          _ref2$sweepFlag = _ref2.sweepFlag,
          sweepFlag = _ref2$sweepFlag === undefined ? 0 : _ref2$sweepFlag;

      var curves = [];

      if (rx === 0 || ry === 0) {
        return [];
      }

      var sinphi = Math.sin(xAxisRotation * TAU / 360);
      var cosphi = Math.cos(xAxisRotation * TAU / 360);

      var pxp = cosphi * (px - cx) / 2 + sinphi * (py - cy) / 2;
      var pyp = -sinphi * (px - cx) / 2 + cosphi * (py - cy) / 2;

      if (pxp === 0 && pyp === 0) {
        return [];
      }

      rx = Math.abs(rx);
      ry = Math.abs(ry);

      var lambda = Math.pow(pxp, 2) / Math.pow(rx, 2) + Math.pow(pyp, 2) / Math.pow(ry, 2);

      if (lambda > 1) {
        rx *= Math.sqrt(lambda);
        ry *= Math.sqrt(lambda);
      }

      var _getArcCenter = getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp),
          _getArcCenter2 = _slicedToArray(_getArcCenter, 4),
          centerx = _getArcCenter2[0],
          centery = _getArcCenter2[1],
          ang1 = _getArcCenter2[2],
          ang2 = _getArcCenter2[3];

      // If 'ang2' == 90.0000000001, then `ratio` will evaluate to
      // 1.0000000001. This causes `segments` to be greater than one, which is an
      // unecessary split, and adds extra points to the bezier curve. To alleviate
      // this issue, we round to 1.0 when the ratio is close to 1.0.


      var ratio = Math.abs(ang2) / (TAU / 4);
      if (Math.abs(1.0 - ratio) < 0.0000001) {
        ratio = 1.0;
      }

      var segments = Math.max(Math.ceil(ratio), 1);

      ang2 /= segments;

      for (var i = 0; i < segments; i++) {
        curves.push(approxUnitArc(ang1, ang2));
        ang1 += ang2;
      }

      return curves.map(function (curve) {
        var _mapToEllipse = mapToEllipse(curve[0], rx, ry, cosphi, sinphi, centerx, centery),
            x1 = _mapToEllipse.x,
            y1 = _mapToEllipse.y;

        var _mapToEllipse2 = mapToEllipse(curve[1], rx, ry, cosphi, sinphi, centerx, centery),
            x2 = _mapToEllipse2.x,
            y2 = _mapToEllipse2.y;

        var _mapToEllipse3 = mapToEllipse(curve[2], rx, ry, cosphi, sinphi, centerx, centery),
            x = _mapToEllipse3.x,
            y = _mapToEllipse3.y;

        return { x1: x1, y1: y1, x2: x2, y2: y2, x: x, y: y };
      });
    };

    /** @ignore */ /** */
    /**
     * @ignore
     */
    function checkArgs(name, actual, expected) {
        if (actual !== expected) {
            throw new Error("Required " + expected + " arguments for " + name + " but got " + actual);
        }
    }
    /**
     * @ignore
     */
    function checkMinArgs(name, actual, expected) {
        if (actual < expected) {
            throw new Error("Required at least " + expected + " arguments for " + name + " but got " + actual);
        }
    }
    /**
     * @ignore
     */
    function checkEvenArgs(name, actual, expected) {
        checkMinArgs(name, actual, expected);
        if ((actual % expected) !== 0) {
            throw new Error("Arguments for " + name + " must be in pairs of " + expected);
        }
    }
    /**
     * @ignore
     */
    function assertBinary(value) {
        if (value === 0 || value === 1) {
            return value;
        }
        else {
            throw new Error("Flag must be 0 or 1");
        }
    }
    //  1 -> 0xffffff * (2 / 2)
    //  2 -> 0xffffff * (1 / 2)
    //
    //  3 -> 0xffffff * (3 / 4)
    //  4 -> 0xffffff * (1 / 4)
    //
    //  5 -> 0xffffff * (7 / 8)
    //  6 -> 0xffffff * (5 / 8)
    //  7 -> 0xffffff * (3 / 8)
    //  8 -> 0xffffff * (1 / 8)
    //
    //  9 -> 0xffffff * (15 / 16)
    // 10 -> 0xffffff * (13 / 16)
    // 11 -> 0xffffff * (11 / 16)
    // 12 -> 0xffffff *  (9 / 16)
    // 13 -> 0xffffff *  (7 / 16)
    // 14 -> 0xffffff *  (5 / 16)
    // 15 -> 0xffffff *  (3 / 16)
    // 16 -> 0xffffff *  (1 / 16)
    // @todo remove this old color distribution algo if the new one pans out
    // function distributeIdBAK(id: number): number {
    // 	if (id === 1) {
    // 		return 0x000001;
    // 	} else {
    // 		// Finds the closest power of 2
    // 		const base = Math.pow(2, Math.ceil(Math.log(id) / Math.log(2)));
    // 		// Translates the id into an odd fraction index
    // 		const index = ((base - id) * 2) + 1;
    // 		// TODO is Math.round correct ?
    // 		return Math.round(0xffffff * (index / base));
    // 	}
    // }
    /**
     * Function by smeans:
     * https://lowcode.life/generating-unique-contrasting-colors-in-javascript/
     * @ignore
     */
    function distributeId(id) {
        var rgb = [0, 0, 0];
        for (var i = 0; i < 24; i++) {
            rgb[i % 3] <<= 1;
            rgb[i % 3] |= id & 0x01;
            id >>= 1;
        }
        return (rgb[2] | 0) + (rgb[1] << 8) + (rgb[0] << 16);
    }
    /**
     * @ignore
     */
    function eachTargets(hitTarget, f) {
        for (;;) {
            if (hitTarget.interactive) {
                if (!f(hitTarget)) {
                    break;
                }
            }
            if (hitTarget._parent) {
                hitTarget = hitTarget._parent;
            }
            else {
                break;
            }
        }
    }
    // TODO feature detection for mouse/touch/pointer
    /**
     * @ignore
     */
    function onPointerEvent(element, name, f) {
        return addEventListener(element, getRendererEvent(name), function (event) {
            var touches = event.touches;
            if (touches) {
                if (touches.length == 0) {
                    touches = event.changedTouches;
                }
                f(copy$2(touches));
            }
            else {
                f([event]);
            }
        });
    }
    /**
     * @ignore
     */
    function isTainted(image) {
        var canvas = document.createElement("canvas");
        canvas.width = 1;
        canvas.height = 1;
        var context = canvas.getContext("2d");
        context.drawImage(image, 0, 0, 1, 1);
        try {
            context.getImageData(0, 0, 1, 1);
            return false;
        }
        catch (err) {
            console.warn("Image \"" + image.src + "\" is loaded from different host and is not covered by CORS policy. For more information about the implications read here: https://www.amcharts.com/docs/v5/concepts/cors");
            return true;
        }
    }
    /**
     * This is needed to workaround a bug in iOS which causes it to not GC canvas elements.
     *
     * @ignore
     */
    function clearCanvas(view) {
        view.width = 0;
        view.height = 0;
        view.style.width = "0px";
        view.style.height = "0px";
    }
    /**
     * @ignore
     */
    var CanvasPivot = /** @class */ (function () {
        function CanvasPivot() {
            Object.defineProperty(this, "_x", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_y", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
        }
        Object.defineProperty(CanvasPivot.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CanvasPivot.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
            },
            enumerable: false,
            configurable: true
        });
        return CanvasPivot;
    }());
    /**
     * @ignore
     */
    var CanvasDisplayObject = /** @class */ (function (_super) {
        __extends(CanvasDisplayObject, _super);
        function CanvasDisplayObject(renderer) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "_layer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "mask", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: null
            });
            Object.defineProperty(_this, "visible", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(_this, "exportable", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(_this, "interactive", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "inactive", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "wheelable", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "cancelTouch", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "isMeasured", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "buttonMode", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "alpha", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "compoundAlpha", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "angle", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "scale", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "x", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "y", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "pivot", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new CanvasPivot()
            });
            Object.defineProperty(_this, "filter", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "cursorOverStyle", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_replacedCursorStyle", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_localMatrix", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new Matrix()
            });
            Object.defineProperty(_this, "_matrix", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new Matrix()
            });
            // TODO can this be replaced with _localMatrix ?
            Object.defineProperty(_this, "_uMatrix", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new Matrix()
            });
            Object.defineProperty(_this, "_renderer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_parent", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_localBounds", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_bounds", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_colorId", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this._renderer = renderer;
            return _this;
        }
        Object.defineProperty(CanvasDisplayObject.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._renderer._removeObject(this);
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "getCanvas", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.getLayer().view;
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "getLayer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var self = this;
                for (;;) {
                    if (self._layer) {
                        return self._layer;
                    }
                    else if (self._parent) {
                        self = self._parent;
                    }
                    else {
                        return this._renderer.defaultLayer;
                    }
                }
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "setLayer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (order, visible) {
                if (visible === void 0) { visible = true; }
                if (order == null) {
                    this._layer = undefined;
                }
                else {
                    this._layer = this._renderer.getLayer(order, visible);
                    this._layer.visible = visible;
                    if (this._parent) {
                        this._parent.registerChildLayer(this._layer);
                    }
                }
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "markDirtyLayer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.getLayer().dirty = true;
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "clear", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.invalidateBounds();
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "invalidateBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._localBounds = undefined;
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "_addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_bounds) { }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "_getColorId", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._colorId === undefined) {
                    this._colorId = this._renderer.paintId(this);
                }
                return this._colorId;
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "_isInteractive", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.inactive == false && (this.interactive || this._renderer._forceInteractive > 0);
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "_isInteractiveMask", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._isInteractive();
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "contains", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (child) {
                for (;;) {
                    if (child === this) {
                        return true;
                    }
                    else if (child._parent) {
                        child = child._parent;
                    }
                    else {
                        return false;
                    }
                }
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "toGlobal", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                return this._matrix.apply(point);
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "toLocal", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                return this._matrix.applyInverse(point);
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "getLocalMatrix", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._uMatrix.setTransform(0, 0, this.pivot.x, this.pivot.y, this.angle * Math.PI / 180, this.scale);
                return this._uMatrix;
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "getLocalBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._localBounds) {
                    var bn = 10000000;
                    this._localBounds = {
                        left: bn,
                        top: bn,
                        right: -bn,
                        bottom: -bn
                    };
                    this._addBounds(this._localBounds);
                }
                return this._localBounds;
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "getAdjustedBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                this._setMatrix();
                var matrix = this.getLocalMatrix();
                var p0 = matrix.apply({ x: bounds.left, y: bounds.top });
                var p1 = matrix.apply({ x: bounds.right, y: bounds.top });
                var p2 = matrix.apply({ x: bounds.right, y: bounds.bottom });
                var p3 = matrix.apply({ x: bounds.left, y: bounds.bottom });
                return {
                    left: Math.min(p0.x, p1.x, p2.x, p3.x),
                    top: Math.min(p0.y, p1.y, p2.y, p3.y),
                    right: Math.max(p0.x, p1.x, p2.x, p3.x),
                    bottom: Math.max(p0.y, p1.y, p2.y, p3.y)
                };
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "on", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, callback, context) {
                if (this.interactive) {
                    return this._renderer._addEvent(this, key, callback, context);
                }
                else {
                    return new Disposer(function () { });
                }
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "_setMatrix", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                // TODO only calculate this if it has actually changed
                this._localMatrix.setTransform(this.x, this.y, this.pivot.x, this.pivot.y, 
                // Converts degrees to radians
                this.angle * Math.PI / 180, this.scale);
                this._matrix.copyFrom(this._localMatrix);
                if (this._parent) {
                    // TODO only calculate this if it has actually changed
                    this._matrix.prepend(this._parent._matrix);
                }
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "_transform", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context, resolution) {
                var m = this._matrix;
                context.setTransform(m.a * resolution, m.b * resolution, m.c * resolution, m.d * resolution, m.tx * resolution, m.ty * resolution);
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parentLayer) {
                var _this = this;
                if (this.visible && (this.exportable !== false || !this._renderer._omitTainted)) {
                    this._setMatrix();
                    var resolution_1 = this._renderer.resolution;
                    var layers = this._renderer.layers;
                    var ghostContext = this._renderer._ghostContext;
                    var mask_1 = this.mask;
                    if (mask_1) {
                        mask_1._setMatrix();
                    }
                    // TODO improve this
                    each$1(layers, function (layer) {
                        if (layer) {
                            var context = layer.context;
                            context.save();
                            // We must apply the mask before we transform the element
                            if (mask_1) {
                                mask_1._transform(context, layer.scale || resolution_1);
                                mask_1._runPath(context);
                                context.clip();
                            }
                            context.globalAlpha = _this.compoundAlpha * _this.alpha;
                            _this._transform(context, layer.scale || resolution_1);
                            if (_this.filter) {
                                context.filter = _this.filter;
                            }
                        }
                    });
                    ghostContext.save();
                    // We must apply the mask before we transform the element
                    if (mask_1 && this._isInteractiveMask()) {
                        mask_1._transform(ghostContext, resolution_1);
                        mask_1._runPath(ghostContext);
                        ghostContext.clip();
                    }
                    this._transform(ghostContext, resolution_1);
                    this._render(parentLayer);
                    ghostContext.restore();
                    each$1(layers, function (layer) {
                        if (layer) {
                            layer.context.restore();
                        }
                    });
                }
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "_render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parentLayer) {
                if (this.exportable === false) {
                    var layer = this._layer || parentLayer;
                    layer.tainted = true;
                }
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "hovering", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._renderer._hovering.has(this);
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "dragging", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                return this._renderer._dragging.some(function (x) { return x.value === _this; });
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.getLayer().dirty = true;
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "shouldCancelTouch", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var renderer = this._renderer;
                if (renderer.tapToActivate && !renderer._touchActive) {
                    return false;
                }
                if (this.cancelTouch) {
                    return true;
                }
                else if (this._parent) {
                    return this._parent.shouldCancelTouch();
                }
                return false;
            }
        });
        return CanvasDisplayObject;
    }(DisposerClass));
    /**
     * @ignore
     */
    var CanvasContainer = /** @class */ (function (_super) {
        __extends(CanvasContainer, _super);
        function CanvasContainer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "interactiveChildren", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(_this, "_childLayers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_children", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            return _this;
        }
        Object.defineProperty(CanvasContainer.prototype, "_isInteractiveMask", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.interactiveChildren || _super.prototype._isInteractiveMask.call(this);
            }
        });
        Object.defineProperty(CanvasContainer.prototype, "addChild", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (child) {
                child._parent = this;
                this._children.push(child);
                if (child._layer) {
                    this.registerChildLayer(child._layer);
                }
            }
        });
        Object.defineProperty(CanvasContainer.prototype, "addChildAt", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (child, index) {
                child._parent = this;
                this._children.splice(index, 0, child);
                if (child._layer) {
                    this.registerChildLayer(child._layer);
                }
            }
        });
        Object.defineProperty(CanvasContainer.prototype, "removeChild", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (child) {
                child._parent = undefined;
                removeFirst(this._children, child);
            }
        });
        Object.defineProperty(CanvasContainer.prototype, "_render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parentLayer) {
                var _this = this;
                _super.prototype._render.call(this, parentLayer);
                var renderer = this._renderer;
                if (this.interactive && this.interactiveChildren) {
                    ++renderer._forceInteractive;
                }
                var layer = this._layer || parentLayer;
                each$1(this._children, function (child) {
                    child.compoundAlpha = _this.compoundAlpha * _this.alpha;
                    child.render(layer);
                });
                if (this.interactive && this.interactiveChildren) {
                    --renderer._forceInteractive;
                }
            }
        });
        Object.defineProperty(CanvasContainer.prototype, "registerChildLayer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (layer) {
                if (!this._childLayers) {
                    this._childLayers = [];
                }
                pushOne(this._childLayers, layer);
                if (this._parent) {
                    this._parent.registerChildLayer(layer);
                }
            }
        });
        Object.defineProperty(CanvasContainer.prototype, "markDirtyLayer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (deep) {
                if (deep === void 0) { deep = false; }
                _super.prototype.markDirtyLayer.call(this);
                if (deep && this._childLayers) {
                    each$1(this._childLayers, function (layer) { return layer.dirty = true; });
                }
            }
        });
        Object.defineProperty(CanvasContainer.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.dispose.call(this);
                if (this._childLayers) {
                    each$1(this._childLayers, function (layer) {
                        layer.dirty = true;
                    });
                }
            }
        });
        return CanvasContainer;
    }(CanvasDisplayObject));
    /**
     * @ignore
     */
    function setPoint(bounds, point) {
        bounds.left = Math.min(bounds.left, point.x);
        bounds.top = Math.min(bounds.top, point.y);
        bounds.right = Math.max(bounds.right, point.x);
        bounds.bottom = Math.max(bounds.bottom, point.y);
    }
    /**
     * @ignore
     */
    var Op = /** @class */ (function () {
        function Op() {
        }
        Object.defineProperty(Op.prototype, "colorize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_context, _forceColor) { }
        });
        Object.defineProperty(Op.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_context) { }
        });
        Object.defineProperty(Op.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_bounds) { }
        });
        return Op;
    }());
    /**
     * @ignore
     */
    var BeginFill = /** @class */ (function (_super) {
        __extends(BeginFill, _super);
        function BeginFill(color) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "color", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: color
            });
            return _this;
        }
        Object.defineProperty(BeginFill.prototype, "colorize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context, forceColor) {
                if (forceColor !== undefined) {
                    context.fillStyle = forceColor;
                }
                else {
                    context.fillStyle = this.color;
                }
            }
        });
        return BeginFill;
    }(Op));
    /**
     * @ignore
     */
    var EndFill = /** @class */ (function (_super) {
        __extends(EndFill, _super);
        function EndFill(clearShadow) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "clearShadow", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: clearShadow
            });
            return _this;
        }
        Object.defineProperty(EndFill.prototype, "colorize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context, _forceColor) {
                context.fill();
                if (this.clearShadow) {
                    context.shadowColor = "";
                    context.shadowBlur = 0;
                    context.shadowOffsetX = 0;
                    context.shadowOffsetY = 0;
                }
            }
        });
        return EndFill;
    }(Op));
    /**
     * @ignore
     */
    var EndStroke = /** @class */ (function (_super) {
        __extends(EndStroke, _super);
        function EndStroke() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(EndStroke.prototype, "colorize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context, _forceColor) {
                context.stroke();
            }
        });
        return EndStroke;
    }(Op));
    /**
     * @ignore
     */
    var LineStyle = /** @class */ (function (_super) {
        __extends(LineStyle, _super);
        function LineStyle(width, color, lineJoin) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "width", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: width
            });
            Object.defineProperty(_this, "color", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: color
            });
            Object.defineProperty(_this, "lineJoin", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: lineJoin
            });
            return _this;
        }
        Object.defineProperty(LineStyle.prototype, "colorize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context, forceColor) {
                if (forceColor !== undefined) {
                    context.strokeStyle = forceColor;
                }
                else {
                    context.strokeStyle = this.color;
                }
                context.lineWidth = this.width;
                if (this.lineJoin) {
                    context.lineJoin = this.lineJoin;
                }
            }
        });
        return LineStyle;
    }(Op));
    /**
     * @ignore
     */
    var LineDash = /** @class */ (function (_super) {
        __extends(LineDash, _super);
        function LineDash(dash) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "dash", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: dash
            });
            return _this;
        }
        Object.defineProperty(LineDash.prototype, "colorize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context, _forceColor) {
                context.setLineDash(this.dash);
            }
        });
        return LineDash;
    }(Op));
    /**
     * @ignore
     */
    var LineDashOffset = /** @class */ (function (_super) {
        __extends(LineDashOffset, _super);
        function LineDashOffset(dashOffset) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "dashOffset", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: dashOffset
            });
            return _this;
        }
        Object.defineProperty(LineDashOffset.prototype, "colorize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context, _forceColor) {
                context.lineDashOffset = this.dashOffset;
            }
        });
        return LineDashOffset;
    }(Op));
    /**
     * @ignore
     */
    var DrawRect = /** @class */ (function (_super) {
        __extends(DrawRect, _super);
        function DrawRect(x, y, width, height) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "x", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: x
            });
            Object.defineProperty(_this, "y", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: y
            });
            Object.defineProperty(_this, "width", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: width
            });
            Object.defineProperty(_this, "height", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: height
            });
            return _this;
        }
        Object.defineProperty(DrawRect.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                context.rect(this.x, this.y, this.width, this.height);
            }
        });
        Object.defineProperty(DrawRect.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                var l = this.x;
                var t = this.y;
                var r = l + this.width;
                var b = t + this.height;
                setPoint(bounds, { x: l, y: t });
                setPoint(bounds, { x: r, y: t });
                setPoint(bounds, { x: l, y: b });
                setPoint(bounds, { x: r, y: b });
            }
        });
        return DrawRect;
    }(Op));
    /**
     * @ignore
     */
    var DrawCircle = /** @class */ (function (_super) {
        __extends(DrawCircle, _super);
        function DrawCircle(x, y, radius) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "x", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: x
            });
            Object.defineProperty(_this, "y", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: y
            });
            Object.defineProperty(_this, "radius", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: radius
            });
            return _this;
        }
        Object.defineProperty(DrawCircle.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                context.moveTo(this.x + this.radius, this.y);
                context.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);
            }
        });
        // TODO handle skewing and rotation
        Object.defineProperty(DrawCircle.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                setPoint(bounds, { x: this.x - this.radius, y: this.y - this.radius });
                setPoint(bounds, { x: this.x + this.radius, y: this.y + this.radius });
            }
        });
        return DrawCircle;
    }(Op));
    /**
     * @ignore
     */
    var DrawEllipse = /** @class */ (function (_super) {
        __extends(DrawEllipse, _super);
        function DrawEllipse(x, y, radiusX, radiusY) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "x", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: x
            });
            Object.defineProperty(_this, "y", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: y
            });
            Object.defineProperty(_this, "radiusX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: radiusX
            });
            Object.defineProperty(_this, "radiusY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: radiusY
            });
            return _this;
        }
        Object.defineProperty(DrawEllipse.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                context.ellipse(0, 0, this.radiusX, this.radiusY, 0, 0, Math.PI * 2);
            }
        });
        // TODO handle skewing and rotation
        Object.defineProperty(DrawEllipse.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                setPoint(bounds, { x: this.x - this.radiusX, y: this.y - this.radiusY });
                setPoint(bounds, { x: this.x + this.radiusX, y: this.y + this.radiusY });
            }
        });
        return DrawEllipse;
    }(Op));
    /**
     * @ignore
     */
    var Arc = /** @class */ (function (_super) {
        __extends(Arc, _super);
        function Arc(cx, cy, radius, startAngle, endAngle, anticlockwise) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "cx", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: cx
            });
            Object.defineProperty(_this, "cy", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: cy
            });
            Object.defineProperty(_this, "radius", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: radius
            });
            Object.defineProperty(_this, "startAngle", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: startAngle
            });
            Object.defineProperty(_this, "endAngle", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: endAngle
            });
            Object.defineProperty(_this, "anticlockwise", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: anticlockwise
            });
            return _this;
        }
        Object.defineProperty(Arc.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                if (this.radius > 0) {
                    context.arc(this.cx, this.cy, this.radius, this.startAngle, this.endAngle, this.anticlockwise);
                }
            }
        });
        Object.defineProperty(Arc.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                var arcBounds = getArcBounds(this.cx, this.cy, this.startAngle * DEGREES, this.endAngle * DEGREES, this.radius);
                setPoint(bounds, { x: arcBounds.left, y: arcBounds.top });
                setPoint(bounds, { x: arcBounds.right, y: arcBounds.bottom });
            }
        });
        return Arc;
    }(Op));
    /**
     * @ignore
     */
    var ArcTo = /** @class */ (function (_super) {
        __extends(ArcTo, _super);
        function ArcTo(x1, y1, x2, y2, radius) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "x1", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: x1
            });
            Object.defineProperty(_this, "y1", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: y1
            });
            Object.defineProperty(_this, "x2", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: x2
            });
            Object.defineProperty(_this, "y2", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: y2
            });
            Object.defineProperty(_this, "radius", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: radius
            });
            return _this;
        }
        Object.defineProperty(ArcTo.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                if (this.radius > 0) {
                    context.arcTo(this.x1, this.y1, this.x2, this.y2, this.radius);
                }
            }
        });
        // TODO: add points
        Object.defineProperty(ArcTo.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_bounds) {
                /*
                // not finished
                https://math.stackexchange.com/questions/1781438/finding-the-center-of-a-circle-given-two-points-and-a-radius-algebraically
        
                if (prevPoint) {
                    let x1 = prevPoint.x;
                    let y1 = prevPoint.y;
                    let x2 = this.x2;
                    let y2 = this.y2;
                    let r = this.radius;
        
                    let xa = (x2 - x1) / 2;
                    let ya = (y2 - y1) / 2;
        
                    let x0 = x1 + xa;
                    let y0 = y1 + ya;
        
                    let a = Math.hypot(xa, ya);
                    let b = Math.sqrt(r * r - a * a);
        
                    let cx = x0 + b * ya / a;
                    let cy = y0 - b * xa / a;
        
                    console.log(cx, cy);
                }*/
            }
        });
        return ArcTo;
    }(Op));
    /**
     * @ignore
     */
    var LineTo = /** @class */ (function (_super) {
        __extends(LineTo, _super);
        function LineTo(x, y) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "x", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: x
            });
            Object.defineProperty(_this, "y", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: y
            });
            return _this;
        }
        Object.defineProperty(LineTo.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                context.lineTo(this.x, this.y);
            }
        });
        Object.defineProperty(LineTo.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                setPoint(bounds, { x: this.x, y: this.y });
            }
        });
        return LineTo;
    }(Op));
    /**
     * @ignore
     */
    var MoveTo = /** @class */ (function (_super) {
        __extends(MoveTo, _super);
        function MoveTo(x, y) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "x", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: x
            });
            Object.defineProperty(_this, "y", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: y
            });
            return _this;
        }
        Object.defineProperty(MoveTo.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                context.moveTo(this.x, this.y);
            }
        });
        Object.defineProperty(MoveTo.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                setPoint(bounds, { x: this.x, y: this.y });
            }
        });
        return MoveTo;
    }(Op));
    /**
     * @ignore
     */
    var ClosePath = /** @class */ (function (_super) {
        __extends(ClosePath, _super);
        function ClosePath() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ClosePath.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                context.closePath();
            }
        });
        return ClosePath;
    }(Op));
    /**
     * @ignore
     */
    var BezierCurveTo = /** @class */ (function (_super) {
        __extends(BezierCurveTo, _super);
        function BezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "cpX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: cpX
            });
            Object.defineProperty(_this, "cpY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: cpY
            });
            Object.defineProperty(_this, "cpX2", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: cpX2
            });
            Object.defineProperty(_this, "cpY2", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: cpY2
            });
            Object.defineProperty(_this, "toX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: toX
            });
            Object.defineProperty(_this, "toY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: toY
            });
            return _this;
        }
        Object.defineProperty(BezierCurveTo.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                context.bezierCurveTo(this.cpX, this.cpY, this.cpX2, this.cpY2, this.toX, this.toY);
            }
        });
        // TODO: OK?
        Object.defineProperty(BezierCurveTo.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                setPoint(bounds, { x: this.cpX, y: this.cpY });
                setPoint(bounds, { x: this.cpX2, y: this.cpY2 });
                setPoint(bounds, { x: this.toX, y: this.toY });
            }
        });
        return BezierCurveTo;
    }(Op));
    /**
     * @ignore
     */
    var QuadraticCurveTo = /** @class */ (function (_super) {
        __extends(QuadraticCurveTo, _super);
        function QuadraticCurveTo(cpX, cpY, toX, toY) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "cpX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: cpX
            });
            Object.defineProperty(_this, "cpY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: cpY
            });
            Object.defineProperty(_this, "toX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: toX
            });
            Object.defineProperty(_this, "toY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: toY
            });
            return _this;
        }
        Object.defineProperty(QuadraticCurveTo.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                context.quadraticCurveTo(this.cpX, this.cpY, this.toX, this.toY);
            }
        });
        // TODO: OK?
        Object.defineProperty(QuadraticCurveTo.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                setPoint(bounds, { x: this.cpX, y: this.cpY });
                setPoint(bounds, { x: this.toX, y: this.toY });
            }
        });
        return QuadraticCurveTo;
    }(Op));
    /**
     * @ignore
     */
    var Shadow = /** @class */ (function (_super) {
        __extends(Shadow, _super);
        function Shadow(color, blur, offsetX, offsetY, opacity) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "color", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: color
            });
            Object.defineProperty(_this, "blur", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: blur
            });
            Object.defineProperty(_this, "offsetX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: offsetX
            });
            Object.defineProperty(_this, "offsetY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: offsetY
            });
            Object.defineProperty(_this, "opacity", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: opacity
            });
            return _this;
        }
        Object.defineProperty(Shadow.prototype, "colorize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context, _forceColor) {
                if (this.opacity) {
                    context.fillStyle = this.color;
                }
                context.shadowColor = this.color;
                context.shadowBlur = this.blur;
                context.shadowOffsetX = this.offsetX;
                context.shadowOffsetY = this.offsetY;
            }
        });
        return Shadow;
    }(Op));
    /**
     * @ignore
     */
    var CanvasGraphics = /** @class */ (function (_super) {
        __extends(CanvasGraphics, _super);
        function CanvasGraphics() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_operations", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "blendMode", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: BlendMode.NORMAL
            });
            Object.defineProperty(_this, "_hasShadows", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_fillAlpha", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_strokeAlpha", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(CanvasGraphics.prototype, "clear", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.clear.call(this);
                this._operations.length = 0;
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "_pushOp", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (op) {
                this._operations.push(op);
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "beginFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (color, alpha) {
                if (alpha === void 0) { alpha = 1; }
                this._fillAlpha = alpha;
                if (color) {
                    if (color instanceof Color) {
                        this._pushOp(new BeginFill(color.toCSS(alpha)));
                    }
                    else {
                        this.isMeasured = true;
                        this._pushOp(new BeginFill(color));
                    }
                }
                else {
                    this._pushOp(new BeginFill("rgba(0, 0, 0, " + alpha + ")"));
                }
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "endFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._pushOp(new EndFill(this._hasShadows));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "endStroke", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._pushOp(new EndStroke());
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "lineStyle", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (width, color, alpha, lineJoin) {
                if (width === void 0) { width = 0; }
                if (alpha === void 0) { alpha = 1; }
                this._strokeAlpha = alpha;
                if (color) {
                    if (color instanceof Color) {
                        this._pushOp(new LineStyle(width, color.toCSS(alpha), lineJoin));
                    }
                    else {
                        this._pushOp(new LineStyle(width, color, lineJoin));
                    }
                }
                else {
                    this._pushOp(new LineStyle(width, "rgba(0, 0, 0, " + alpha + ")", lineJoin));
                }
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "setLineDash", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dash) {
                this._pushOp(new LineDash(dash ? dash : []));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "setLineDashOffset", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dashOffset) {
                if (dashOffset === void 0) { dashOffset = 0; }
                this._pushOp(new LineDashOffset(dashOffset));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "drawRect", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x, y, width, height) {
                this._pushOp(new DrawRect(x, y, width, height));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "drawCircle", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x, y, radius) {
                this._pushOp(new DrawCircle(x, y, radius));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "drawEllipse", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x, y, radiusX, radiusY) {
                this._pushOp(new DrawEllipse(x, y, radiusX, radiusY));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "arc", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (cx, cy, radius, startAngle, endAngle, anticlockwise) {
                if (anticlockwise === void 0) { anticlockwise = false; }
                this._pushOp(new Arc(cx, cy, radius, startAngle, endAngle, anticlockwise));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "arcTo", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x1, y1, x2, y2, radius) {
                this._pushOp(new ArcTo(x1, y1, x2, y2, radius));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "lineTo", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x, y) {
                this._pushOp(new LineTo(x, y));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "moveTo", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x, y) {
                this._pushOp(new MoveTo(x, y));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "bezierCurveTo", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (cpX, cpY, cpX2, cpY2, toX, toY) {
                this._pushOp(new BezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "quadraticCurveTo", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (cpX, cpY, toX, toY) {
                this._pushOp(new QuadraticCurveTo(cpX, cpY, toX, toY));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "closePath", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._pushOp(new ClosePath());
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "shadow", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (color, blur, offsetX, offsetY, opacity) {
                if (blur === void 0) { blur = 0; }
                if (offsetX === void 0) { offsetX = 0; }
                if (offsetY === void 0) { offsetY = 0; }
                this._hasShadows = true;
                this._pushOp(new Shadow(opacity ? color.toCSS(opacity) : color.toCSS(this._fillAlpha || this._strokeAlpha), blur, offsetX, offsetY));
            }
        });
        // https://svgwg.org/svg2-draft/paths.html#DProperty
        // TODO better error checking
        Object.defineProperty(CanvasGraphics.prototype, "svgPath", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (path) {
                var _this = this;
                var x = 0;
                var y = 0;
                var cpx = null;
                var cpy = null;
                var qcpx = null;
                var qcpy = null;
                var SEGMENTS_REGEXP = /([MmZzLlHhVvCcSsQqTtAa])([^MmZzLlHhVvCcSsQqTtAa]*)/g;
                var ARGS_REGEXP = /[\u0009\u0020\u000A\u000C\u000D]*([\+\-]?[0-9]*\.?[0-9]+(?:[eE][\+\-]?[0-9]+)?)[\u0009\u0020\u000A\u000C\u000D]*,?/g;
                var match;
                while ((match = SEGMENTS_REGEXP.exec(path)) !== null) {
                    var name_1 = match[1];
                    var rest = match[2];
                    var args = [];
                    while ((match = ARGS_REGEXP.exec(rest)) !== null) {
                        args.push(+match[1]);
                    }
                    // Reset control point
                    if (name_1 !== "S" && name_1 !== "s" && name_1 !== "C" && name_1 !== "c") {
                        cpx = null;
                        cpy = null;
                    }
                    // Reset control point
                    if (name_1 !== "Q" && name_1 !== "q" && name_1 !== "T" && name_1 !== "t") {
                        qcpx = null;
                        qcpy = null;
                    }
                    switch (name_1) {
                        case "M":
                            checkEvenArgs(name_1, args.length, 2);
                            x = args[0];
                            y = args[1];
                            this.moveTo(x, y);
                            for (var i = 2; i < args.length; i += 2) {
                                x = args[i];
                                y = args[i + 1];
                                this.lineTo(x, y);
                            }
                            break;
                        case "m":
                            checkEvenArgs(name_1, args.length, 2);
                            x += args[0];
                            y += args[1];
                            this.moveTo(x, y);
                            for (var i = 2; i < args.length; i += 2) {
                                x += args[i];
                                y += args[i + 1];
                                this.lineTo(x, y);
                            }
                            break;
                        case "L":
                            checkEvenArgs(name_1, args.length, 2);
                            for (var i = 0; i < args.length; i += 2) {
                                x = args[i];
                                y = args[i + 1];
                                this.lineTo(x, y);
                            }
                            break;
                        case "l":
                            checkEvenArgs(name_1, args.length, 2);
                            for (var i = 0; i < args.length; i += 2) {
                                x += args[i];
                                y += args[i + 1];
                                this.lineTo(x, y);
                            }
                            break;
                        case "H":
                            checkMinArgs(name_1, args.length, 1);
                            for (var i = 0; i < args.length; ++i) {
                                x = args[i];
                                this.lineTo(x, y);
                            }
                            break;
                        case "h":
                            checkMinArgs(name_1, args.length, 1);
                            for (var i = 0; i < args.length; ++i) {
                                x += args[i];
                                this.lineTo(x, y);
                            }
                            break;
                        case "V":
                            checkMinArgs(name_1, args.length, 1);
                            for (var i = 0; i < args.length; ++i) {
                                y = args[i];
                                this.lineTo(x, y);
                            }
                            break;
                        case "v":
                            checkMinArgs(name_1, args.length, 1);
                            for (var i = 0; i < args.length; ++i) {
                                y += args[i];
                                this.lineTo(x, y);
                            }
                            break;
                        case "C":
                            checkEvenArgs(name_1, args.length, 6);
                            for (var i = 0; i < args.length; i += 6) {
                                var x1 = args[i];
                                var y1 = args[i + 1];
                                cpx = args[i + 2];
                                cpy = args[i + 3];
                                x = args[i + 4];
                                y = args[i + 5];
                                this.bezierCurveTo(x1, y1, cpx, cpy, x, y);
                            }
                            break;
                        case "c":
                            checkEvenArgs(name_1, args.length, 6);
                            for (var i = 0; i < args.length; i += 6) {
                                var x1 = args[i] + x;
                                var y1 = args[i + 1] + y;
                                cpx = args[i + 2] + x;
                                cpy = args[i + 3] + y;
                                x += args[i + 4];
                                y += args[i + 5];
                                this.bezierCurveTo(x1, y1, cpx, cpy, x, y);
                            }
                            break;
                        case "S":
                            checkEvenArgs(name_1, args.length, 4);
                            if (cpx === null || cpy === null) {
                                cpx = x;
                                cpy = y;
                            }
                            for (var i = 0; i < args.length; i += 4) {
                                var x1 = 2 * x - cpx;
                                var y1 = 2 * y - cpy;
                                cpx = args[i];
                                cpy = args[i + 1];
                                x = args[i + 2];
                                y = args[i + 3];
                                this.bezierCurveTo(x1, y1, cpx, cpy, x, y);
                            }
                            break;
                        case "s":
                            checkEvenArgs(name_1, args.length, 4);
                            if (cpx === null || cpy === null) {
                                cpx = x;
                                cpy = y;
                            }
                            for (var i = 0; i < args.length; i += 4) {
                                var x1 = 2 * x - cpx;
                                var y1 = 2 * y - cpy;
                                cpx = args[i] + x;
                                cpy = args[i + 1] + y;
                                x += args[i + 2];
                                y += args[i + 3];
                                this.bezierCurveTo(x1, y1, cpx, cpy, x, y);
                            }
                            break;
                        case "Q":
                            checkEvenArgs(name_1, args.length, 4);
                            for (var i = 0; i < args.length; i += 4) {
                                qcpx = args[i];
                                qcpy = args[i + 1];
                                x = args[i + 2];
                                y = args[i + 3];
                                this.quadraticCurveTo(qcpx, qcpy, x, y);
                            }
                            break;
                        case "q":
                            checkEvenArgs(name_1, args.length, 4);
                            for (var i = 0; i < args.length; i += 4) {
                                qcpx = args[i] + x;
                                qcpy = args[i + 1] + y;
                                x += args[i + 2];
                                y += args[i + 3];
                                this.quadraticCurveTo(qcpx, qcpy, x, y);
                            }
                            break;
                        case "T":
                            checkEvenArgs(name_1, args.length, 2);
                            if (qcpx === null || qcpy === null) {
                                qcpx = x;
                                qcpy = y;
                            }
                            for (var i = 0; i < args.length; i += 2) {
                                qcpx = 2 * x - qcpx;
                                qcpy = 2 * y - qcpy;
                                x = args[i];
                                y = args[i + 1];
                                this.quadraticCurveTo(qcpx, qcpy, x, y);
                            }
                            break;
                        case "t":
                            checkEvenArgs(name_1, args.length, 2);
                            if (qcpx === null || qcpy === null) {
                                qcpx = x;
                                qcpy = y;
                            }
                            for (var i = 0; i < args.length; i += 2) {
                                qcpx = 2 * x - qcpx;
                                qcpy = 2 * y - qcpy;
                                x += args[i];
                                y += args[i + 1];
                                this.quadraticCurveTo(qcpx, qcpy, x, y);
                            }
                            break;
                        case "A":
                        case "a":
                            var relative = (name_1 === "a");
                            checkEvenArgs(name_1, args.length, 7);
                            for (var i = 0; i < args.length; i += 7) {
                                var cx = args[i + 5];
                                var cy = args[i + 6];
                                if (relative) {
                                    cx += x;
                                    cy += y;
                                }
                                var bs = arcToBezier({
                                    px: x,
                                    py: y,
                                    rx: args[i],
                                    ry: args[i + 1],
                                    xAxisRotation: args[i + 2],
                                    largeArcFlag: assertBinary(args[i + 3]),
                                    sweepFlag: assertBinary(args[i + 4]),
                                    cx: cx,
                                    cy: cy,
                                });
                                each$1(bs, function (b) {
                                    _this.bezierCurveTo(b.x1, b.y1, b.x2, b.y2, b.x, b.y);
                                    x = b.x;
                                    y = b.y;
                                });
                            }
                            break;
                        case "Z":
                        case "z":
                            checkArgs(name_1, args.length, 0);
                            this.closePath();
                            break;
                    }
                }
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "_runPath", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                context.beginPath();
                each$1(this._operations, function (op) {
                    op.path(context);
                });
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "_render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parentLayer) {
                _super.prototype._render.call(this, parentLayer);
                var layer = this._layer || parentLayer;
                var layerDirty = layer.dirty;
                var interactive = this._isInteractive();
                if (layerDirty || interactive) {
                    var context_1 = layer.context;
                    var ghostContext_1 = this._renderer._ghostContext;
                    if (layerDirty) {
                        context_1.globalCompositeOperation = this.blendMode;
                        context_1.beginPath();
                    }
                    var color_1;
                    if (interactive) {
                        ghostContext_1.beginPath();
                        color_1 = this._getColorId();
                    }
                    each$1(this._operations, function (op) {
                        if (layerDirty) {
                            op.path(context_1);
                            op.colorize(context_1, undefined);
                        }
                        if (interactive) {
                            op.path(ghostContext_1);
                            op.colorize(ghostContext_1, color_1);
                        }
                    });
                }
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "renderDetached", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                if (this.visible) {
                    this._setMatrix();
                    context.save();
                    // We must apply the mask before we transform the element
                    var mask = this.mask;
                    if (mask) {
                        mask._setMatrix();
                        mask._transform(context, 1);
                        mask._runPath(context);
                        context.clip();
                    }
                    // TODO handle compoundAlpha somehow ?
                    context.globalAlpha = this.compoundAlpha * this.alpha;
                    this._transform(context, 1);
                    if (this.filter) {
                        context.filter = this.filter;
                    }
                    context.globalCompositeOperation = this.blendMode;
                    context.beginPath();
                    each$1(this._operations, function (op) {
                        op.path(context);
                        op.colorize(context, undefined);
                    });
                    context.restore();
                }
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "_addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                if (this.visible && this.isMeasured) {
                    each$1(this._operations, function (op) {
                        op.addBounds(bounds);
                    });
                }
            }
        });
        return CanvasGraphics;
    }(CanvasDisplayObject));
    /**
     * @ignore
     */
    var CanvasText = /** @class */ (function (_super) {
        __extends(CanvasText, _super);
        function CanvasText(renderer, text, style) {
            var _this = _super.call(this, renderer) || this;
            Object.defineProperty(_this, "text", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "style", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "resolution", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_textInfo", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_textVisible", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(_this, "_originalScale", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            _this.text = text;
            _this.style = style;
            return _this;
        }
        Object.defineProperty(CanvasText.prototype, "invalidateBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.invalidateBounds.call(this);
                this._textInfo = undefined;
            }
        });
        Object.defineProperty(CanvasText.prototype, "_shared", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                if (this.style.textAlign) {
                    context.textAlign = this.style.textAlign;
                }
                if (this.style.direction) {
                    context.direction = this.style.direction;
                }
                if (this.style.textBaseline) {
                    context.textBaseline = this.style.textBaseline;
                }
            }
        });
        Object.defineProperty(CanvasText.prototype, "_prerender", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (layer, ignoreGhost, ignoreFontWeight) {
                if (ignoreGhost === void 0) { ignoreGhost = false; }
                if (ignoreFontWeight === void 0) { ignoreFontWeight = false; }
                _super.prototype._render.call(this, layer);
                var context = layer.context;
                var ghostContext = this._renderer._ghostContext;
                // Font style
                var style = this.style;
                var fontStyle = this._getFontStyle(undefined, ignoreFontWeight);
                context.font = fontStyle;
                if (this._isInteractive() && !ignoreGhost) {
                    ghostContext.font = fontStyle;
                }
                // Other parameters
                if (style.fill) {
                    if (style.fill instanceof Color) {
                        context.fillStyle = style.fill.toCSS();
                    }
                    else {
                        context.fillStyle = style.fill;
                    }
                }
                if (style.shadowColor) {
                    layer.context.shadowColor = style.shadowColor.toCSS(style.shadowOpacity || 1);
                }
                if (style.shadowBlur) {
                    layer.context.shadowBlur = style.shadowBlur;
                }
                if (style.shadowOffsetX) {
                    layer.context.shadowOffsetX = style.shadowOffsetX;
                }
                if (style.shadowOffsetY) {
                    layer.context.shadowOffsetY = style.shadowOffsetY;
                }
                this._shared(context);
                if (this._isInteractive() && !ignoreGhost) {
                    ghostContext.fillStyle = this._getColorId();
                    this._shared(ghostContext);
                }
            }
        });
        Object.defineProperty(CanvasText.prototype, "_getFontStyle", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (style2, ignoreFontWeight) {
                if (ignoreFontWeight === void 0) { ignoreFontWeight = false; }
                // Process defaults
                var style = this.style;
                var fontStyle = [];
                if (style2 && style2.fontVariant) {
                    fontStyle.push(style2.fontVariant);
                }
                else if (style.fontVariant) {
                    fontStyle.push(style.fontVariant);
                }
                if (!ignoreFontWeight) {
                    if (style2 && style2.fontWeight) {
                        fontStyle.push(style2.fontWeight);
                    }
                    else if (style.fontWeight) {
                        fontStyle.push(style.fontWeight);
                    }
                }
                if (style2 && style2.fontStyle) {
                    fontStyle.push(style2.fontStyle);
                }
                else if (style.fontStyle) {
                    fontStyle.push(style.fontStyle);
                }
                if (style2 && style2.fontSize) {
                    if (isNumber(style2.fontSize)) {
                        style2.fontSize = style2.fontSize + "px";
                    }
                    fontStyle.push(style2.fontSize);
                }
                else if (style.fontSize) {
                    if (isNumber(style.fontSize)) {
                        style.fontSize = style.fontSize + "px";
                    }
                    fontStyle.push(style.fontSize);
                }
                if (style2 && style2.fontFamily) {
                    fontStyle.push(style2.fontFamily);
                }
                else if (style.fontFamily) {
                    fontStyle.push(style.fontFamily);
                }
                else if (fontStyle.length) {
                    fontStyle.push("Arial");
                }
                return fontStyle.join(" ");
            }
        });
        Object.defineProperty(CanvasText.prototype, "_render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parentLayer) {
                var _this = this;
                var layer = this._layer || parentLayer;
                // We need measurements in order to properly position text for alignment
                if (!this._textInfo) {
                    this._measure(layer);
                }
                if (this._textVisible) {
                    var interactive_1 = this._isInteractive();
                    var context_2 = layer.context;
                    var layerDirty_1 = layer.dirty;
                    var ghostContext_2 = this._renderer._ghostContext;
                    context_2.save();
                    ghostContext_2.save();
                    this._prerender(layer);
                    // const lines = this.text.toString().replace(/\r/g, "").split(/\n/);
                    // const x = this._localBounds && (this._localBounds.left < 0) ? Math.abs(this._localBounds.left) : 0;
                    // Process text info produced by _measure()
                    each$1(this._textInfo, function (line, _index) {
                        each$1(line.textChunks, function (chunk, _index) {
                            // Set style
                            if (chunk.style) {
                                context_2.save();
                                ghostContext_2.save();
                                context_2.font = chunk.style;
                                if (_this._isInteractive()) {
                                    ghostContext_2.font = chunk.style;
                                }
                            }
                            if (chunk.fill) {
                                context_2.save();
                                context_2.fillStyle = chunk.fill.toCSS();
                                // Color does not affect ghostContext so we not set it
                            }
                            // Draw text
                            if (layerDirty_1) {
                                context_2.fillText(chunk.text, chunk.offsetX, line.offsetY + chunk.offsetY);
                            }
                            // Draw underline
                            if (chunk.textDecoration == "underline" || chunk.textDecoration == "line-through") {
                                var thickness = 1;
                                var offset = 1;
                                var fontSize = chunk.height;
                                var offsetX = chunk.offsetX;
                                switch (_this.style.textAlign) {
                                    case "right":
                                    case "end":
                                        offsetX -= chunk.width;
                                        break;
                                    case "center":
                                        offsetX -= chunk.width / 2;
                                        break;
                                }
                                if (chunk.style) {
                                    var format = TextFormatter.getTextStyle(chunk.style);
                                    switch (format.fontWeight) {
                                        case "bolder":
                                        case "bold":
                                        case "700":
                                        case "800":
                                        case "900":
                                            thickness = 2;
                                            break;
                                    }
                                }
                                if (fontSize) {
                                    offset = fontSize / 20;
                                }
                                var y = void 0;
                                if (chunk.textDecoration == "line-through") {
                                    y = thickness + line.offsetY + chunk.offsetY - chunk.height / 2;
                                }
                                else {
                                    y = thickness + offset * 1.5 + line.offsetY + chunk.offsetY;
                                }
                                context_2.save();
                                context_2.beginPath();
                                if (chunk.fill) {
                                    context_2.strokeStyle = chunk.fill.toCSS();
                                }
                                else if (_this.style.fill && _this.style.fill instanceof Color) {
                                    context_2.strokeStyle = _this.style.fill.toCSS();
                                }
                                context_2.lineWidth = thickness * offset;
                                context_2.moveTo(offsetX, y);
                                context_2.lineTo(offsetX + chunk.width, y);
                                context_2.stroke();
                                context_2.restore();
                            }
                            if (interactive_1 && _this.interactive) {
                                // Draw text in ghost canvas ONLY if it is set as interactive
                                // explicitly. This way we avoid hit test anomalies caused by anti
                                // aliasing of text.
                                ghostContext_2.fillText(chunk.text, chunk.offsetX, line.offsetY + chunk.offsetY);
                            }
                            if (chunk.fill) {
                                context_2.restore();
                                // Color does not affect ghostContext so we not set it
                            }
                            // Reset style
                            if (chunk.style) {
                                context_2.restore();
                                ghostContext_2.restore();
                            }
                        });
                    });
                    context_2.restore();
                    ghostContext_2.restore();
                }
            }
        });
        Object.defineProperty(CanvasText.prototype, "_addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                if (this.visible && this.isMeasured) {
                    //if (this._textVisible) {
                    var x = this._measure(this.getLayer());
                    setPoint(bounds, { x: x.left, y: x.top });
                    setPoint(bounds, { x: x.right, y: x.bottom });
                    //}
                }
            }
        });
        Object.defineProperty(CanvasText.prototype, "_measure", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (layer) {
                var _this = this;
                var context = layer.context;
                var ghostContext = this._renderer._ghostContext;
                var rtl = this.style.direction == "rtl";
                // Reset text info
                this._textInfo = [];
                // Init
                var oversizedBehavior = this.style.oversizedBehavior;
                var maxWidth = this.style.maxWidth;
                var truncate = isNumber(maxWidth) && oversizedBehavior == "truncate";
                var wrap = isNumber(maxWidth) && oversizedBehavior == "wrap";
                // Pre-render
                context.save();
                ghostContext.save();
                this._prerender(layer, true, true);
                // Get default font metrix
                var refText = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ";
                // Split up text into lines
                var lines = this.text.toString().replace(/\r/g, "").split(/\n/);
                var styleRestored = true;
                var minX = 0;
                var maxX = 0;
                // Iterate through the lines
                var offsetY = 0;
                var currentStyle;
                each$1(lines, function (line, _index) {
                    // Split up line into format/value chunks
                    var chunks;
                    if (line == "") {
                        chunks = [{
                                type: "value",
                                text: ""
                            }];
                    }
                    else {
                        chunks = TextFormatter.chunk(line, false, _this.style.ignoreFormatting);
                    }
                    var _loop_1 = function () {
                        // Init line object
                        var lineInfo = {
                            offsetY: offsetY,
                            ascent: 0,
                            width: 0,
                            height: 0,
                            left: 0,
                            right: 0,
                            textChunks: []
                        };
                        // Measure reference text
                        var metrics = _this._measureText(refText, context);
                        var height = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
                        lineInfo.height = height;
                        lineInfo.ascent = metrics.actualBoundingBoxAscent;
                        var currentFormat;
                        var currentDecoration = _this.style.textDecoration;
                        var currentFill;
                        var currentChunkWidth;
                        var skipFurtherText = false;
                        var firstTextChunk = true;
                        var leftoverChunks = [];
                        var currentVerticalAlign;
                        //let offsetX = 0;
                        //let chunk;
                        //while(chunk = chunks.shift()) {
                        eachContinue$1(chunks, function (chunk, index) {
                            // Format chunk
                            if (chunk.type == "format") {
                                if (chunk.text == "[/]") {
                                    if (!styleRestored) {
                                        context.restore();
                                        ghostContext.restore();
                                        styleRestored = true;
                                    }
                                    currentFill = undefined;
                                    currentStyle = undefined;
                                    currentChunkWidth = undefined;
                                    currentDecoration = _this.style.textDecoration;
                                    currentVerticalAlign = undefined;
                                    currentFormat = chunk.text;
                                }
                                else {
                                    if (!styleRestored) {
                                        context.restore();
                                        ghostContext.restore();
                                    }
                                    var format = TextFormatter.getTextStyle(chunk.text);
                                    var fontStyle = _this._getFontStyle(format);
                                    context.save();
                                    ghostContext.save();
                                    context.font = fontStyle;
                                    currentStyle = fontStyle;
                                    currentFormat = chunk.text;
                                    if (format.textDecoration) {
                                        currentDecoration = format.textDecoration;
                                    }
                                    if (format.fill) {
                                        currentFill = format.fill;
                                    }
                                    if (format.width) {
                                        currentChunkWidth = toNumber(format.width);
                                    }
                                    if (format.verticalAlign) {
                                        currentVerticalAlign = format.verticalAlign;
                                    }
                                    styleRestored = false;
                                    // Measure reference text after change of format
                                    var metrics_1 = _this._measureText(refText, context);
                                    var height_1 = metrics_1.actualBoundingBoxAscent + metrics_1.actualBoundingBoxDescent;
                                    if (height_1 > lineInfo.height) {
                                        lineInfo.height = height_1;
                                    }
                                    if (metrics_1.actualBoundingBoxAscent > lineInfo.ascent) {
                                        lineInfo.ascent = metrics_1.actualBoundingBoxAscent;
                                    }
                                }
                            }
                            // Text chunk
                            else if (chunk.type == "value" && !skipFurtherText) {
                                // Measure
                                var metrics_2 = _this._measureText(chunk.text, context);
                                var chunkWidth = metrics_2.actualBoundingBoxLeft + metrics_2.actualBoundingBoxRight;
                                // Check for fit
                                if (truncate) {
                                    // Break words?
                                    var breakWords = firstTextChunk || _this.style.breakWords || false;
                                    // Measure ellipsis and check if it fits
                                    var ellipsis = _this.style.ellipsis || "";
                                    var ellipsisMetrics = _this._measureText(ellipsis, context);
                                    var ellipsisWidth = ellipsisMetrics.actualBoundingBoxLeft + ellipsisMetrics.actualBoundingBoxRight;
                                    // Check fit
                                    if ((lineInfo.width + chunkWidth) > maxWidth) {
                                        var excessWidth = maxWidth - lineInfo.width - ellipsisWidth;
                                        chunk.text = _this._truncateText(context, chunk.text, excessWidth, breakWords);
                                        chunk.text += ellipsis;
                                        skipFurtherText = true;
                                    }
                                }
                                else if (wrap) {
                                    // Check fit
                                    if ((lineInfo.width + chunkWidth) > maxWidth) {
                                        var excessWidth = maxWidth - lineInfo.width;
                                        var tmpText = _this._truncateText(context, chunk.text, excessWidth, false, firstTextChunk);
                                        if (tmpText == "") {
                                            // Unable to fit a single letter - hide the whole label
                                            _this._textVisible = true;
                                            return false;
                                        }
                                        //skipFurtherText = true;
                                        //Add remaining chunks for the next line
                                        leftoverChunks = chunks.slice(index + 1);
                                        //Add remaining text of current chunk if it was forced-cut
                                        if (trim(tmpText) != trim(chunk.text)) {
                                            leftoverChunks.unshift({
                                                type: "value",
                                                text: chunk.text.substr(tmpText.length)
                                            });
                                            if (currentFormat) {
                                                leftoverChunks.unshift({
                                                    type: "format",
                                                    text: currentFormat
                                                });
                                            }
                                        }
                                        // Set current chunk (truncated)
                                        chunk.text = trim(tmpText);
                                        chunks = [];
                                        skipFurtherText = true;
                                    }
                                }
                                // Chunk width?
                                var leftBoundMod = 1;
                                var rightBoundMod = 1;
                                if (currentStyle && currentChunkWidth && (currentChunkWidth > chunkWidth)) {
                                    // increase horizontal bounding boxes accordingly
                                    var boundsMod = chunkWidth / currentChunkWidth;
                                    switch (_this.style.textAlign) {
                                        case "right":
                                        case "end":
                                            leftBoundMod = boundsMod;
                                            break;
                                        case "center":
                                            leftBoundMod = boundsMod;
                                            rightBoundMod = boundsMod;
                                            break;
                                        default:
                                            rightBoundMod = boundsMod;
                                    }
                                    chunkWidth = currentChunkWidth;
                                }
                                var chunkHeight = metrics_2.actualBoundingBoxAscent + metrics_2.actualBoundingBoxDescent;
                                if (chunkHeight > lineInfo.height) {
                                    lineInfo.height = chunkHeight;
                                }
                                if (metrics_2.actualBoundingBoxAscent > lineInfo.ascent) {
                                    lineInfo.ascent = metrics_2.actualBoundingBoxAscent;
                                }
                                lineInfo.width += chunkWidth;
                                lineInfo.left += metrics_2.actualBoundingBoxLeft / leftBoundMod;
                                lineInfo.right += metrics_2.actualBoundingBoxRight / rightBoundMod;
                                lineInfo.textChunks.push({
                                    style: currentStyle,
                                    fill: currentFill,
                                    text: chunk.text,
                                    width: chunkWidth,
                                    height: chunkHeight,
                                    left: metrics_2.actualBoundingBoxLeft,
                                    right: metrics_2.actualBoundingBoxRight,
                                    ascent: metrics_2.actualBoundingBoxAscent,
                                    offsetX: 0,
                                    offsetY: 0,
                                    textDecoration: currentDecoration,
                                    verticalAlign: currentVerticalAlign
                                });
                                //offsetX += chunkWidth;
                                firstTextChunk = false;
                            }
                            return true;
                            //}
                        });
                        if (_this.style.lineHeight instanceof Percent) {
                            lineInfo.height *= _this.style.lineHeight.value;
                            lineInfo.ascent *= _this.style.lineHeight.value;
                        }
                        else {
                            lineInfo.height *= _this.style.lineHeight || 1.2;
                            lineInfo.ascent *= _this.style.lineHeight || 1.2;
                        }
                        if (minX < lineInfo.left) {
                            minX = lineInfo.left;
                        }
                        if (maxX < lineInfo.right) {
                            maxX = lineInfo.right;
                        }
                        _this._textInfo.push(lineInfo);
                        //lineInfo.offsetY += lineInfo.ascent;
                        offsetY += lineInfo.height;
                        // Reset chunks so that it can proceed to the next line
                        chunks = leftoverChunks || [];
                    };
                    while (chunks.length > 0) {
                        _loop_1();
                    }
                });
                if (!styleRestored) {
                    context.restore();
                    ghostContext.restore();
                }
                // Adjust chunk internal offsets
                each$1(this._textInfo, function (lineInfo, _index) {
                    var currentChunkOffset = 0;
                    each$1(lineInfo.textChunks, function (chunk) {
                        chunk.offsetX = currentChunkOffset + chunk.left - lineInfo.left;
                        chunk.offsetY += lineInfo.height - lineInfo.height * (_this.style.baselineRatio || 0.19);
                        currentChunkOffset += chunk.width;
                        if (chunk.verticalAlign) {
                            switch (chunk.verticalAlign) {
                                case "super":
                                    chunk.offsetY -= lineInfo.height / 2 - chunk.height / 2;
                                    break;
                                case "sub":
                                    chunk.offsetY += chunk.height / 2;
                                    break;
                            }
                        }
                    });
                });
                var bounds = {
                    left: rtl ? -maxX : -minX,
                    top: 0,
                    right: rtl ? minX : maxX,
                    bottom: offsetY,
                };
                // We need to fit?
                if (oversizedBehavior !== "none") {
                    var ratio = this._fitRatio(bounds);
                    if (ratio < 1) {
                        if (oversizedBehavior == "fit") {
                            if (isNumber(this.style.minScale) && (ratio < this.style.minScale)) {
                                this._textVisible = false;
                            }
                            else {
                                if (!this._originalScale || this._originalScale == 1) {
                                    this._originalScale = this.scale;
                                }
                                this.scale = ratio;
                                this._textVisible = true;
                            }
                        }
                        else if (oversizedBehavior == "hide") {
                            this._textVisible = false;
                        }
                        else {
                            switch (this.style.textAlign) {
                                case "right":
                                case "end":
                                    bounds.left = -maxWidth;
                                    bounds.right = 0;
                                    break;
                                case "center":
                                    bounds.left = -maxWidth / 2;
                                    bounds.right = maxWidth / 2;
                                    break;
                                default:
                                    bounds.left = 0;
                                    bounds.right = maxWidth;
                            }
                            this.scale = this._originalScale || 1;
                            this._originalScale = undefined;
                            this._textVisible = true;
                        }
                    }
                    else {
                        this.scale = this._originalScale || 1;
                        this._originalScale = undefined;
                        this._textVisible = true;
                    }
                }
                context.restore();
                ghostContext.restore();
                return bounds;
            }
        });
        Object.defineProperty(CanvasText.prototype, "_fitRatio", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                var maxW = this.style.maxWidth;
                var maxH = this.style.maxHeight;
                if (!isNumber(maxW) && !isNumber(maxH)) {
                    return 1;
                }
                var w = bounds.right - bounds.left;
                var h = bounds.bottom - bounds.top;
                return Math.min(maxW / w || 1, maxH / h || 1);
            }
        });
        Object.defineProperty(CanvasText.prototype, "_truncateText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context, text, maxWidth, breakWords, fallbackBreakWords) {
                if (breakWords === void 0) { breakWords = false; }
                if (fallbackBreakWords === void 0) { fallbackBreakWords = true; }
                var width;
                do {
                    if (breakWords) {
                        text = text.slice(0, -1);
                    }
                    else {
                        var tmp = text.replace(/[^,;:!?\\\/\s]+[,;:!?\\\/\s]*$/g, "");
                        if (tmp == "" && fallbackBreakWords) {
                            breakWords = true;
                        }
                        else {
                            text = tmp;
                        }
                    }
                    var metrics = this._measureText(text, context);
                    width = metrics.actualBoundingBoxLeft + metrics.actualBoundingBoxRight;
                } while ((width > maxWidth) && text != "");
                return text;
            }
        });
        Object.defineProperty(CanvasText.prototype, "_measureText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text, context) {
                var metrics = context.measureText(text);
                var fakeMetrics = {};
                if (metrics.actualBoundingBoxAscent == null) {
                    var div = document.createElement("div");
                    div.innerText = text;
                    div.style.visibility = "hidden";
                    div.style.position = "absolute";
                    div.style.top = "-1000000px;";
                    div.style.fontFamily = this.style.fontFamily || "";
                    div.style.fontSize = this.style.fontSize + "";
                    document.body.appendChild(div);
                    var bbox = div.getBoundingClientRect();
                    document.body.removeChild(div);
                    var h = bbox.height;
                    var w_1 = metrics.width;
                    var left = 0;
                    var right = w_1;
                    fakeMetrics = {
                        actualBoundingBoxAscent: h,
                        actualBoundingBoxDescent: 0,
                        actualBoundingBoxLeft: left,
                        actualBoundingBoxRight: right,
                        fontBoundingBoxAscent: h,
                        fontBoundingBoxDescent: 0,
                        width: w_1
                    };
                    //return fake;
                }
                else {
                    fakeMetrics = {
                        actualBoundingBoxAscent: metrics.actualBoundingBoxAscent,
                        actualBoundingBoxDescent: metrics.actualBoundingBoxDescent,
                        actualBoundingBoxLeft: metrics.actualBoundingBoxLeft,
                        actualBoundingBoxRight: metrics.actualBoundingBoxRight,
                        fontBoundingBoxAscent: metrics.actualBoundingBoxAscent,
                        fontBoundingBoxDescent: metrics.actualBoundingBoxDescent,
                        width: metrics.width
                    };
                }
                var w = metrics.width;
                switch (this.style.textAlign) {
                    case "right":
                    case "end":
                        fakeMetrics.actualBoundingBoxLeft = w;
                        fakeMetrics.actualBoundingBoxRight = 0;
                        break;
                    case "center":
                        fakeMetrics.actualBoundingBoxLeft = w / 2;
                        fakeMetrics.actualBoundingBoxRight = w / 2;
                        break;
                    default:
                        fakeMetrics.actualBoundingBoxLeft = 0;
                        fakeMetrics.actualBoundingBoxRight = w;
                }
                return fakeMetrics;
            }
        });
        return CanvasText;
    }(CanvasDisplayObject));
    /**
     * @ignore
     */
    var CanvasTextStyle = /** @class */ (function () {
        function CanvasTextStyle() {
            //public wordWrapWidth: number = 100;
            Object.defineProperty(this, "fill", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "textAlign", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "fontFamily", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "fontSize", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "fontWeight", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "fontStyle", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "fontVariant", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "textDecoration", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "shadowColor", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "shadowBlur", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "shadowOffsetX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "shadowOffsetY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "shadowOpacity", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // leading?: number;
            // letterSpacing?: number;
            Object.defineProperty(this, "lineHeight", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: percent(120)
            });
            Object.defineProperty(this, "baselineRatio", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0.19
            });
            // padding?: number;
            // stroke?: number;
            // strokeThickness?: number;
            // trim?: number;
            // wordWrap?: boolean;
            Object.defineProperty(this, "direction", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "textBaseline", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "oversizedBehavior", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: "none"
            });
            Object.defineProperty(this, "breakWords", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(this, "ellipsis", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: "…"
            });
            Object.defineProperty(this, "maxWidth", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "maxHeight", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "minScale", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "ignoreFormatting", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
        }
        return CanvasTextStyle;
    }());
    /**
     * @ignore
     */
    var CanvasRadialText = /** @class */ (function (_super) {
        __extends(CanvasRadialText, _super);
        function CanvasRadialText() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "textType", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: "circular"
            });
            Object.defineProperty(_this, "radius", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "startAngle", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "inside", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "orientation", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: "auto"
            });
            Object.defineProperty(_this, "kerning", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_textReversed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            return _this;
        }
        Object.defineProperty(CanvasRadialText.prototype, "_render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parentLayer) {
                switch (this.textType) {
                    case "circular":
                        this._renderCircular(parentLayer);
                        break;
                    default:
                        _super.prototype._render.call(this, parentLayer);
                        break;
                }
            }
        });
        Object.defineProperty(CanvasRadialText.prototype, "_renderCircular", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parentLayer) {
                var layer = this._layer || parentLayer;
                this._prerender(layer);
                var interactive = this._isInteractive();
                var context = layer.context;
                var layerDirty = layer.dirty;
                var ghostContext = this._renderer._ghostContext;
                // Savepoint
                context.save();
                if (interactive) {
                    ghostContext.save();
                }
                // Init
                var radius = (this.radius || 0);
                var startAngle = (this.startAngle || 0);
                var deltaAngle = 0;
                var orientation = this.orientation;
                var inward = orientation == "auto" ? "auto" : orientation == "inward";
                var inside = this.inside;
                var align = this.style.textAlign || "left";
                var kerning = this.kerning || 0;
                var clockwise = align == "left" ? 1 : -1;
                var shouldReverse = !this._textReversed;
                // We need measurements in order to properly position text for alignment
                if (!this._textInfo) {
                    this._measure(layer);
                }
                // Check if we need to invert the whole stuff
                if (inward == "auto") {
                    // Calc max angle so we know whether we need to flip it
                    var maxAngle_1 = 0;
                    var midAngle = 0;
                    each$1(this._textInfo, function (line, _index) {
                        var deltaAngle = startAngle + (line.width / (radius - line.height)) / 2 * -clockwise;
                        if (deltaAngle > maxAngle_1) {
                            maxAngle_1 = deltaAngle;
                        }
                    });
                    if (align == "left") {
                        midAngle = (maxAngle_1 + deltaAngle / 2) * DEGREES;
                    }
                    else if (align == "right") {
                        midAngle = (maxAngle_1 - deltaAngle / 2) * DEGREES;
                    }
                    else {
                        midAngle = startAngle * DEGREES;
                    }
                    midAngle = normalizeAngle(midAngle);
                    inward = (midAngle >= 270) || (midAngle <= 90);
                }
                if (inward == true && shouldReverse) {
                    this._textInfo.reverse();
                    this._textReversed = true;
                }
                // if ((inward == false && align == "left") || (inward == true && align == "right")) {
                // 	clockwise *= -1;
                // }
                // Process text info produced by _measure()
                each$1(this._textInfo, function (line, _index) {
                    var textHeight = line.height;
                    // Adjust radius (for `inside = false`)
                    // Radius adjustment for `inside = false` is below the line calculation
                    if (!inside) {
                        radius += textHeight;
                    }
                    // Reverse letters if we're painting them counter-clockwise
                    if (((clockwise == -1 && inward) || (clockwise == 1 && !inward)) && shouldReverse) {
                        line.textChunks.reverse();
                    }
                    // Init angles
                    var lineStartAngle = startAngle;
                    deltaAngle = 0;
                    // Adjust for center-align
                    if (align == "center") {
                        lineStartAngle += (line.width / (radius - textHeight)) / 2 * -clockwise;
                        deltaAngle = lineStartAngle - startAngle;
                    }
                    // if (inward == "auto") {
                    // 	let midAngle;
                    // 	if (align == "left") {
                    // 		midAngle = (lineStartAngle + deltaAngle / 2) * $math.DEGREES;
                    // 	}
                    // 	else if () {
                    // 		midAngle = (lineStartAngle - deltaAngle / 2) * $math.DEGREES;
                    // 	}
                    // 	inward = (midAngle >= 270) || (midAngle <= 90);
                    // }
                    // Rotate letters if they are facing outward
                    lineStartAngle += (Math.PI * (inward ? 0 : 1)); // Rotate 180 if outward
                    // Savepoint
                    context.save();
                    if (interactive) {
                        ghostContext.save();
                    }
                    // Assume starting angle
                    context.rotate(lineStartAngle);
                    if (interactive) {
                        ghostContext.rotate(lineStartAngle);
                    }
                    var angleShift = 0;
                    each$1(line.textChunks, function (chunk, _index) {
                        // Draw the letter
                        var char = chunk.text;
                        var charWidth = chunk.width;
                        // Rotate half a letter
                        angleShift = (charWidth / 2) / (radius - textHeight) * clockwise;
                        context.rotate(angleShift);
                        if (interactive) {
                            ghostContext.rotate(angleShift);
                        }
                        // Set style
                        if (chunk.style) {
                            context.save();
                            ghostContext.save();
                            context.font = chunk.style;
                            if (interactive) {
                                ghostContext.font = chunk.style;
                            }
                        }
                        if (chunk.fill) {
                            context.save();
                            context.fillStyle = chunk.fill.toCSS();
                            // Color does not affect ghostContext so we not set it
                        }
                        // Center letters
                        context.textBaseline = "middle";
                        context.textAlign = "center";
                        if (interactive) {
                            ghostContext.textBaseline = "middle";
                            ghostContext.textAlign = "center";
                        }
                        // Plop the letter
                        if (layerDirty) {
                            context.fillText(char, 0, (inward ? 1 : -1) * (0 - radius + textHeight / 2));
                        }
                        if (interactive) {
                            ghostContext.fillText(char, 0, (inward ? 1 : -1) * (0 - radius + textHeight / 2));
                        }
                        if (chunk.fill) {
                            context.restore();
                            // Color does not affect ghostContext so we not set it
                        }
                        // Reset style
                        if (chunk.style) {
                            context.restore();
                            ghostContext.restore();
                        }
                        // Rotate half a letter and add spacing
                        angleShift = (charWidth / 2 + kerning) / (radius - textHeight) * clockwise;
                        context.rotate(angleShift);
                        if (interactive) {
                            ghostContext.rotate(angleShift);
                        }
                    });
                    // Restore angle
                    context.restore();
                    if (interactive) {
                        ghostContext.restore();
                    }
                    // Adjust radius (for `inside = true`)
                    if (inside) {
                        radius -= textHeight;
                    }
                });
                // Restore
                context.restore();
                if (interactive) {
                    ghostContext.restore();
                }
            }
        });
        Object.defineProperty(CanvasRadialText.prototype, "_measure", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (layer) {
                switch (this.textType) {
                    case "circular":
                        return this._measureCircular(layer);
                    default:
                        return _super.prototype._measure.call(this, layer);
                }
            }
        });
        Object.defineProperty(CanvasRadialText.prototype, "_measureCircular", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (layer) {
                var _this = this;
                var context = layer.context;
                var ghostContext = this._renderer._ghostContext;
                var rtl = this.style.direction == "rtl";
                // Reset text info
                this._textInfo = [];
                this._textReversed = false;
                // Pre-render
                context.save();
                ghostContext.save();
                this._prerender(layer, true);
                // Split up text into lines
                var lines = this.text.toString().replace(/\r/g, "").split(/\n/);
                var styleRestored = true;
                // Iterate through the lines
                var offsetY = 0;
                each$1(lines, function (line, _index) {
                    // Split up line into format/value chunks
                    var chunks = TextFormatter.chunk(line, false, _this.style.ignoreFormatting);
                    // Init line object
                    var lineInfo = {
                        offsetY: offsetY,
                        ascent: 0,
                        width: 0,
                        height: 0,
                        left: 0,
                        right: 0,
                        textChunks: []
                    };
                    var currentStyle;
                    var currentFill;
                    var currentChunkWidth;
                    //while(chunk = chunks.shift()) {
                    each$1(chunks, function (chunk, _index) {
                        // Format chunk
                        if (chunk.type == "format") {
                            if (chunk.text == "[/]") {
                                if (!styleRestored) {
                                    context.restore();
                                    ghostContext.restore();
                                    styleRestored = true;
                                }
                                currentFill = undefined;
                                currentStyle = undefined;
                                currentChunkWidth = undefined;
                            }
                            else {
                                var format = TextFormatter.getTextStyle(chunk.text);
                                var fontStyle = _this._getFontStyle(format);
                                context.save();
                                ghostContext.save();
                                context.font = fontStyle;
                                currentStyle = fontStyle;
                                if (format.fill) {
                                    currentFill = format.fill;
                                }
                                if (format.width) {
                                    currentChunkWidth = toNumber(format.width);
                                }
                                styleRestored = false;
                            }
                        }
                        // Text format
                        else if (chunk.type == "value") {
                            // Measure each letter
                            var chars = chunk.text.match(/./ug) || [];
                            if (rtl) {
                                chars.reverse();
                            }
                            for (var i = 0; i < chars.length; i++) {
                                var char = chars[i];
                                // Measure
                                var metrics = _this._measureText(char, context);
                                var chunkWidth = metrics.width;
                                // Chunk width?
                                if (currentStyle && currentChunkWidth && (currentChunkWidth > chunkWidth)) {
                                    chunkWidth = currentChunkWidth;
                                }
                                var chunkHeight = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
                                if (chunkHeight > lineInfo.height) {
                                    lineInfo.height = chunkHeight;
                                }
                                if (metrics.actualBoundingBoxAscent > lineInfo.ascent) {
                                    lineInfo.ascent = metrics.actualBoundingBoxAscent;
                                }
                                lineInfo.width += chunkWidth;
                                lineInfo.left += metrics.actualBoundingBoxLeft;
                                lineInfo.right += metrics.actualBoundingBoxRight;
                                lineInfo.textChunks.push({
                                    style: currentStyle,
                                    fill: currentFill,
                                    text: char,
                                    width: chunkWidth,
                                    height: chunkHeight + metrics.actualBoundingBoxDescent,
                                    left: metrics.actualBoundingBoxLeft,
                                    right: metrics.actualBoundingBoxRight,
                                    ascent: metrics.actualBoundingBoxAscent,
                                    offsetX: 0,
                                    offsetY: chunkHeight,
                                    textDecoration: undefined
                                });
                                if (rtl) {
                                    break;
                                }
                            }
                        }
                    });
                    if (_this.style.lineHeight instanceof Percent) {
                        lineInfo.height *= _this.style.lineHeight.value;
                    }
                    else {
                        lineInfo.height *= _this.style.lineHeight || 1.2;
                    }
                    _this._textInfo.push(lineInfo);
                    //lineInfo.offsetY += lineInfo.ascent;
                    offsetY += lineInfo.height;
                });
                if (!styleRestored) {
                    context.restore();
                    ghostContext.restore();
                }
                // Adjust chunk internal offsets
                each$1(this._textInfo, function (lineInfo) {
                    each$1(lineInfo.textChunks, function (chunk) {
                        chunk.offsetY += Math.round((lineInfo.height - chunk.height + (lineInfo.ascent - chunk.ascent)) / 2);
                    });
                });
                context.restore();
                ghostContext.restore();
                return {
                    left: 0,
                    top: 0,
                    right: 0,
                    bottom: 0,
                };
            }
        });
        return CanvasRadialText;
    }(CanvasText));
    /**
     * @ignore
     */
    var CanvasImage = /** @class */ (function (_super) {
        __extends(CanvasImage, _super);
        function CanvasImage(renderer, image) {
            var _this = _super.call(this, renderer) || this;
            Object.defineProperty(_this, "width", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "height", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "image", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "tainted", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "shadowColor", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "shadowBlur", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "shadowOffsetX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "shadowOffsetY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "shadowOpacity", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_imageMask", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this.image = image;
            return _this;
        }
        Object.defineProperty(CanvasImage.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._dispose.call(this);
                if (this._imageMask) {
                    clearCanvas(this._imageMask);
                }
            }
        });
        Object.defineProperty(CanvasImage.prototype, "getLocalBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._localBounds) {
                    var w = 0;
                    var h = 0;
                    if (this.width) {
                        w = this.width;
                    }
                    if (this.height) {
                        h = this.height;
                    }
                    this._localBounds = {
                        left: 0,
                        top: 0,
                        right: w,
                        bottom: h
                    };
                    this._addBounds(this._localBounds);
                }
                return this._localBounds;
            }
        });
        Object.defineProperty(CanvasImage.prototype, "_render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parentLayer) {
                _super.prototype._render.call(this, parentLayer);
                if (this.image) {
                    var layer = this._layer || parentLayer;
                    if (this.tainted === undefined) {
                        this.tainted = isTainted(this.image);
                        layer.tainted = true;
                    }
                    if (this.tainted && this._renderer._omitTainted) {
                        return;
                    }
                    if (layer.dirty) {
                        if (this.shadowColor) {
                            layer.context.shadowColor = this.shadowColor.toCSS(this.shadowOpacity || 1);
                        }
                        if (this.shadowBlur) {
                            layer.context.shadowBlur = this.shadowBlur;
                        }
                        if (this.shadowOffsetX) {
                            layer.context.shadowOffsetX = this.shadowOffsetX;
                        }
                        if (this.shadowOffsetY) {
                            layer.context.shadowOffsetY = this.shadowOffsetY;
                        }
                        // TODO should this round ?
                        var width = this.width || this.image.naturalWidth;
                        var height = this.height || this.image.naturalHeight;
                        layer.context.drawImage(this.image, 0, 0, width, height);
                    }
                    if (this.interactive && this._isInteractive()) {
                        var mask = this._getMask(this.image);
                        this._renderer._ghostContext.drawImage(mask, 0, 0);
                    }
                }
            }
        });
        Object.defineProperty(CanvasImage.prototype, "clear", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.clear.call(this);
                this.image = undefined;
                this._imageMask = undefined;
            }
        });
        Object.defineProperty(CanvasImage.prototype, "_getMask", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (image) {
                if (this._imageMask === undefined) {
                    // TODO should this round ?
                    var width = this.width || image.naturalWidth;
                    var height = this.height || image.naturalHeight;
                    // We need to create a second canvas because destination-in clears out the entire canvas
                    var canvas = document.createElement("canvas");
                    canvas.width = width;
                    canvas.height = height;
                    var context = canvas.getContext("2d");
                    context.imageSmoothingEnabled = false;
                    context.fillStyle = this._getColorId();
                    context.fillRect(0, 0, width, height);
                    if (!isTainted(image)) {
                        context.globalCompositeOperation = "destination-in";
                        context.drawImage(image, 0, 0, width, height);
                    }
                    this._imageMask = canvas;
                }
                return this._imageMask;
            }
        });
        return CanvasImage;
    }(CanvasDisplayObject));
    /**
     * @ignore
     */
    var CanvasRendererEvent = /** @class */ (function () {
        function CanvasRendererEvent(event, point, bbox) {
            Object.defineProperty(this, "event", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: event
            });
            Object.defineProperty(this, "point", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: point
            });
            Object.defineProperty(this, "bbox", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: bbox
            });
            Object.defineProperty(this, "id", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "simulated", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(this, "native", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            if (supports("touchevents") && event instanceof Touch) {
                this.id = event.identifier;
            }
            else {
                this.id = null;
            }
        }
        return CanvasRendererEvent;
    }());
    /**
     * @ignore
     */
    var CanvasRenderer = /** @class */ (function (_super) {
        __extends(CanvasRenderer, _super);
        /*protected _mouseMoveThrottler: Throttler = new Throttler(() => {
            this._dispatchGlobalMousemove(this._lastPointerMoveEvent.event, this._lastPointerMoveEvent.native);
        });
        */
        function CanvasRenderer(resolution) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "view", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: document.createElement("div")
            });
            Object.defineProperty(_this, "_layerDom", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: document.createElement("div")
            });
            Object.defineProperty(_this, "layers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "_dirtyLayers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "defaultLayer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.getLayer(0)
            });
            Object.defineProperty(_this, "_ghostView", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_ghostContext", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_patternCanvas", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: document.createElement("canvas")
            });
            Object.defineProperty(_this, "_patternContext", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._patternCanvas.getContext("2d")
            });
            Object.defineProperty(_this, "_width", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_height", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_clientWidth", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_clientHeight", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "resolution", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "interactionsEnabled", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(_this, "_listeners", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_events", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_colorId", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_colorMap", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_forceInteractive", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_omitTainted", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            // TODO this should store the Id as well
            Object.defineProperty(_this, "_hovering", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new Set()
            });
            Object.defineProperty(_this, "_dragging", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "_mousedown", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "_lastPointerMoveEvent", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "tapToActivate", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "tapToActivateTimeout", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 3000
            });
            Object.defineProperty(_this, "_touchActive", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_touchActiveTimeout", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            if (resolution == null) {
                _this.resolution = window.devicePixelRatio;
            }
            else {
                _this.resolution = resolution;
            }
            _this.view.style.position = "absolute";
            _this.view.appendChild(_this._layerDom);
            _this._disposers.push(new Disposer(function () {
                each(_this._events, function (_key, events) {
                    events.disposer.dispose();
                });
                each$1(_this.layers, function (layer) {
                    clearCanvas(layer.view);
                    if (layer.exportableView) {
                        clearCanvas(layer.exportableView);
                    }
                });
                clearCanvas(_this._ghostView);
                clearCanvas(_this._patternCanvas);
            }));
            // @todo : do the same for ghost
            _this._ghostView = document.createElement("canvas");
            _this._ghostContext = _this._ghostView.getContext("2d", { alpha: false });
            _this._ghostContext.imageSmoothingEnabled = false;
            _this._ghostView.style.position = "absolute";
            _this._ghostView.style.top = "0px";
            _this._ghostView.style.left = "0px";
            _this._disposers.push(addEventListener(_this._ghostView, "click", function (originalEvent) {
                var event = _this.getEvent(originalEvent);
                var target = _this._getHitTarget(event.point, event.bbox);
                console.debug(target);
            }));
            // Monitor for possible pixel ratio changes (when page is zoomed)
            _this._disposers.push(addEventListener(window, "resize", function (_ev) {
                if (resolution == null) {
                    _this.resolution = window.devicePixelRatio;
                }
            }));
            // We need this in order top prevent default touch gestures when dragging
            // draggable elements
            if (supports("touchevents")) {
                var listener = function (ev) {
                    if (_this._dragging.length !== 0) {
                        eachContinue$1(_this._dragging, function (item) {
                            if (item.value.shouldCancelTouch()) {
                                ev.preventDefault();
                                return false;
                            }
                            return true;
                        });
                    }
                    // If touch down happends, delay touch out
                    if (_this._touchActiveTimeout) {
                        _this._delayTouchDeactivate();
                    }
                };
                _this._disposers.push(addEventListener(window, "touchstart", listener, { passive: false }));
                _this._disposers.push(addEventListener(_this.view, "touchstart", listener, { passive: false }));
                _this._disposers.push(addEventListener(_this.view, "touchmove", function () {
                    // If touch is moving, delay touch out
                    if (_this._touchActiveTimeout) {
                        _this._delayTouchDeactivate();
                    }
                }, { passive: true }));
                _this._disposers.push(addEventListener(window, "click", function (_ev) {
                    _this._touchActive = false;
                }, { passive: true }));
                _this._disposers.push(addEventListener(_this.view, "click", function (_ev) {
                    window.setTimeout(function () {
                        _this._touchActive = true;
                        _this._delayTouchDeactivate();
                    }, 100);
                }, { passive: true }));
            }
            // Prevent scrolling of the window when hovering on "wheelable" object
            if (supports("wheelevents")) {
                _this._disposers.push(addEventListener(_this.view, "wheel", function (ev) {
                    var prevent = false;
                    _this._hovering.forEach(function (obj) {
                        if (obj.wheelable) {
                            prevent = true;
                            return false;
                        }
                    });
                    if (prevent) {
                        ev.preventDefault();
                    }
                }, { passive: false }));
            }
            return _this;
        }
        Object.defineProperty(CanvasRenderer.prototype, "_delayTouchDeactivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                if (this._touchActiveTimeout) {
                    clearTimeout(this._touchActiveTimeout);
                }
                if (this.tapToActivateTimeout > 0) {
                    this._touchActiveTimeout = window.setTimeout(function () {
                        _this._touchActive = false;
                    }, this.tapToActivateTimeout);
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "debugGhostView", {
            get: function () {
                return !!this._ghostView.parentNode;
            },
            set: function (value) {
                if (value) {
                    if (!this._ghostView.parentNode) {
                        this.view.appendChild(this._ghostView);
                    }
                }
                else {
                    if (this._ghostView.parentNode) {
                        this._ghostView.parentNode.removeChild(this._ghostView);
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CanvasRenderer.prototype, "createLinearGradient", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x1, y1, x2, y2) {
                return this.defaultLayer.context.createLinearGradient(x1, y1, x2, y2);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "createRadialGradient", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x1, y1, radius1, x2, y2, radius2) {
                return this.defaultLayer.context.createRadialGradient(x1, y1, radius1, x2, y2, radius2);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "createPattern", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (graphics, background, repetition, width, height) {
                // const patternCanvas = document.createElement("canvas");
                // const patternContext = patternCanvas.getContext("2d")!;
                // patternCanvas.width = width;
                // patternCanvas.height = height;
                // if (fill) {
                // 	patternContext.fillStyle = fill.toCSS();
                // 	patternContext.fillRect(0, 0, patternCanvas.width, patternCanvas.height);
                // }
                // const layer = {
                // 	view: patternCanvas,
                // 	context: patternContext,
                // 	visible: true,
                // 	order: 0,
                // 	width: width,
                // 	height: height,
                // 	dirty: true
                // };
                // // patternContext.arc(0, 0, 50, 0, .5 * Math.PI);
                // // patternContext.stroke();
                // image.targetLayer = layer;
                // image.render(layer);
                //this._layerDom.appendChild(patternCanvas);
                this._patternCanvas.width = width;
                this._patternCanvas.height = height;
                this._patternContext.clearRect(0, 0, width, height);
                // patternCanvas.style.width = width * this.resolution + "px";
                // patternCanvas.style.height = height * this.resolution + "px";
                background.renderDetached(this._patternContext);
                graphics.renderDetached(this._patternContext);
                return this._patternContext.createPattern(this._patternCanvas, repetition);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "makeContainer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return new CanvasContainer(this);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "makeGraphics", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return new CanvasGraphics(this);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "makeText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text, style) {
                return new CanvasText(this, text, style);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "makeTextStyle", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return new CanvasTextStyle();
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "makeRadialText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text, style) {
                return new CanvasRadialText(this, text, style);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "makePicture", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (image) {
                return new CanvasImage(this, image);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "resize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (width, height) {
                var _this = this;
                this._clientWidth = width;
                this._clientHeight = height;
                this._width = Math.floor(width * this.resolution);
                this._height = Math.floor(height * this.resolution);
                each$1(this.layers, function (layer) {
                    if (layer) {
                        layer.dirty = true;
                        if (layer.width != null) {
                            layer.view.width = layer.width;
                            layer.view.style.width = layer.width + "px";
                        }
                        else {
                            layer.view.width = _this._width;
                            layer.view.style.width = width + "px";
                        }
                        if (layer.height != null) {
                            layer.view.height = layer.height;
                            layer.view.style.height = layer.height + "px";
                        }
                        else {
                            layer.view.height = _this._height;
                            layer.view.style.height = height + "px";
                        }
                    }
                });
                // @todo: do the same for ghost canvases
                this._ghostView.width = this._width;
                this._ghostView.height = this._height;
                this._ghostView.style.width = width + "px";
                this._ghostView.style.height = height + "px";
                this.view.style.width = width + "px";
                this.view.style.height = height + "px";
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "createDetachedLayer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var view = document.createElement("canvas");
                var context = view.getContext("2d");
                var layer = {
                    view: view,
                    context: context,
                    order: 0,
                    visible: true,
                    width: undefined,
                    height: undefined,
                    dirty: true,
                    tainted: false
                };
                view.style.position = "absolute";
                view.style.top = "0px";
                view.style.left = "0px";
                return layer;
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "getLayerByOrder", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (order) {
                var layers = this.layers;
                var length = layers.length;
                for (var i = 0; i < length; i++) {
                    var layer = layers[i];
                    if (layer.order == order) {
                        return layer;
                    }
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "getLayer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (order, visible) {
                if (visible === void 0) { visible = true; }
                var existingLayer = this.getLayerByOrder(order);
                if (existingLayer) {
                    return existingLayer;
                }
                var layer = this.createDetachedLayer();
                layer.order = order;
                layer.visible = visible;
                if (layer.visible && this._width) {
                    layer.view.width = this._width;
                    layer.view.style.width = this._clientWidth + "px";
                    layer.view.height = this._height;
                    layer.view.style.height = this._clientHeight + "px";
                }
                var layers = this.layers;
                layers.push(layer);
                layers.sort(function (a, b) {
                    if (a.order > b.order) {
                        return 1;
                    }
                    else if (a.order < b.order) {
                        return -1;
                    }
                    else {
                        return 0;
                    }
                });
                var length = layers.length;
                var layerIndex = indexOf(layers, layer);
                var next;
                for (var i = layerIndex + 1; i < length; i++) {
                    if (layers[i].visible) {
                        next = layers[i];
                        break;
                    }
                }
                if (layer.visible) {
                    if (next === undefined) {
                        this._layerDom.appendChild(layer.view);
                    }
                    else {
                        this._layerDom.insertBefore(layer.view, next.view);
                    }
                }
                return layer;
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (root) {
                var _this = this;
                this._dirtyLayers.length = 0;
                each$1(this.layers, function (layer) {
                    if (layer) {
                        if (layer.dirty && layer.visible) {
                            var context = layer.context;
                            _this._dirtyLayers.push(layer);
                            context.save();
                            context.clearRect(0, 0, _this._width, _this._height);
                        }
                    }
                });
                this._ghostContext.save();
                //this._ghostContext.clearRect(0, 0, this._width, this._height);
                //this._ghostContext.beginPath();
                this._ghostContext.fillStyle = '#000';
                this._ghostContext.fillRect(0, 0, this._width, this._height);
                root.render(this.defaultLayer);
                this._ghostContext.restore();
                //setTimeout(() => {
                // Remove this after the Chrome bug is fixed:
                // https://bugs.chromium.org/p/chromium/issues/detail?id=1279394
                each$1(this.layers, function (layer) {
                    if (layer) {
                        var context = layer.context;
                        context.beginPath();
                        context.moveTo(0, 0);
                        context.stroke();
                    }
                });
                each$1(this._dirtyLayers, function (layer) {
                    layer.context.restore();
                    layer.dirty = false;
                });
                //}, 100)
                if (this._hovering.size && this._lastPointerMoveEvent) {
                    //this._mouseMoveThrottler.run();
                    var native_1 = this._lastPointerMoveEvent.native;
                    each$1(this._lastPointerMoveEvent.events, function (event) {
                        _this._dispatchGlobalMousemove(event, native_1);
                    });
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "paintId", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (obj) {
                var id = distributeId(++this._colorId);
                var color = Color.fromHex(id).toCSS();
                this._colorMap[color] = obj;
                return color;
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_removeObject", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (obj) {
                if (obj._colorId !== undefined) {
                    delete this._colorMap[obj._colorId];
                }
            }
        });
        // protected _identifyObjectByColor(colorId: number): CanvasDisplayObject | undefined {
        // 	return this._colorMap[colorId];
        // }
        Object.defineProperty(CanvasRenderer.prototype, "getEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (originalEvent, adjustPoint) {
                if (adjustPoint === void 0) { adjustPoint = true; }
                var bbox = adjustPoint ? this.view.getBoundingClientRect() : new DOMRect(0, 0, 0, 0);
                return new CanvasRendererEvent(originalEvent, (originalEvent.clientX || originalEvent.clientY ? {
                    x: originalEvent.clientX - (originalEvent.clientX ? bbox.left : 0),
                    y: originalEvent.clientY - (originalEvent.clientY ? bbox.top : 0),
                } : {
                    x: 0,
                    y: 0
                }), bbox);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_getHitTarget", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point, bbox) {
                if (point.x < 0 || point.x > bbox.width || point.y < 0 || point.y > bbox.height) {
                    return;
                }
                else {
                    var pixel = this._ghostContext.getImageData(
                    // TODO should this round ?
                    Math.round((point.x / bbox.width) * this._width), Math.round((point.y / bbox.height) * this._height), 1, 1);
                    if (pixel.data[0] === 0 && pixel.data[1] === 0 && pixel.data[2] === 0) {
                        return false;
                    }
                    var colorId = Color.fromRGB(pixel.data[0], pixel.data[1], pixel.data[2]).toCSS();
                    var hit = this._colorMap[colorId];
                    return hit;
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_withEvents", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, f) {
                var events = this._events[key];
                if (events !== undefined) {
                    events.dispatching = true;
                    try {
                        f(events);
                    }
                    finally {
                        events.dispatching = false;
                        if (events.cleanup) {
                            events.cleanup = false;
                            keepIf(events.callbacks, function (callback) {
                                return !callback.disposed;
                            });
                            if (events.callbacks.length === 0) {
                                events.disposer.dispose();
                                delete this._events[key];
                            }
                        }
                    }
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_dispatchEventAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, event) {
                if (!this.interactionsEnabled) {
                    return;
                }
                this._withEvents(key, function (events) {
                    each$1(events.callbacks, function (callback) {
                        if (!callback.disposed) {
                            callback.callback.call(callback.context, event);
                        }
                    });
                });
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_dispatchEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, target, event) {
                if (!this.interactionsEnabled) {
                    return false;
                }
                var dispatched = false;
                this._withEvents(key, function (events) {
                    each$1(events.callbacks, function (callback) {
                        if (!callback.disposed && callback.object === target) {
                            callback.callback.call(callback.context, event);
                            dispatched = true;
                        }
                    });
                });
                return dispatched;
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_dispatchMousedown", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (originalEvent) {
                var _this = this;
                var button = originalEvent.button;
                if (button != 0 && button != 2 && button != 1 && button !== undefined) {
                    // Ignore non-primary mouse buttons
                    return;
                }
                var event = this.getEvent(originalEvent);
                var target = this._getHitTarget(event.point, event.bbox);
                if (target) {
                    var id_1 = event.id;
                    var dragged_1 = false;
                    eachTargets(target, function (obj) {
                        var info = { id: id_1, value: obj };
                        _this._mousedown.push(info);
                        if (!dragged_1 && _this._dispatchEvent("pointerdown", obj, event)) {
                            // Only dispatch the first element which matches
                            dragged_1 = true;
                            var has = _this._dragging.some(function (x) {
                                return x.value === obj && x.id === id_1;
                            });
                            if (!has) {
                                _this._dragging.push(info);
                            }
                        }
                        return true;
                    });
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_dispatchGlobalMousemove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (originalEvent, native) {
                var _this = this;
                var event = this.getEvent(originalEvent);
                var target = this._getHitTarget(event.point, event.bbox);
                event.native = native;
                if (target) {
                    this._hovering.forEach(function (obj) {
                        if (!obj.contains(target)) {
                            _this._hovering.delete(obj);
                            if (obj.cursorOverStyle) {
                                setStyle(document.body, "cursor", obj._replacedCursorStyle);
                            }
                            _this._dispatchEvent("pointerout", obj, event);
                        }
                    });
                    if (event.native) {
                        eachTargets(target, function (obj) {
                            if (!_this._hovering.has(obj)) {
                                _this._hovering.add(obj);
                                if (obj.cursorOverStyle) {
                                    obj._replacedCursorStyle = getStyle(document.body, "cursor");
                                    setStyle(document.body, "cursor", obj.cursorOverStyle);
                                }
                                _this._dispatchEvent("pointerover", obj, event);
                            }
                            return true;
                        });
                    }
                    //} else if (target === false) {
                }
                else {
                    this._hovering.forEach(function (obj) {
                        if (obj.cursorOverStyle) {
                            setStyle(document.body, "cursor", obj._replacedCursorStyle);
                        }
                        _this._dispatchEvent("pointerout", obj, event);
                    });
                    this._hovering.clear();
                }
                this._dispatchEventAll("globalpointermove", event);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_dispatchGlobalMouseup", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (originalEvent, native) {
                var event = this.getEvent(originalEvent);
                event.native = native;
                //const target = this._getHitTarget(event.point);
                this._dispatchEventAll("globalpointerup", event);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_dispatchDragMove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (originalEvent) {
                var _this = this;
                if (this._dragging.length !== 0) {
                    var event_1 = this.getEvent(originalEvent);
                    var id_2 = event_1.id;
                    this._dragging.forEach(function (obj) {
                        if (obj.id === id_2) {
                            _this._dispatchEvent("pointermove", obj.value, event_1);
                        }
                    });
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_dispatchDragEnd", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (originalEvent) {
                var _this = this;
                var button = originalEvent.button;
                var clickevent;
                if (button == 0 || button === undefined) {
                    clickevent = "click";
                }
                else if (button == 2) {
                    clickevent = "rightclick";
                }
                else if (button == 1) {
                    clickevent = "middleclick";
                }
                else {
                    // Ignore non-primary mouse buttons
                    return;
                }
                var event = this.getEvent(originalEvent);
                var id = event.id;
                if (this._mousedown.length !== 0) {
                    var target_1 = this._getHitTarget(event.point, event.bbox);
                    if (target_1) {
                        this._mousedown.forEach(function (obj) {
                            if (obj.id === id && obj.value.contains(target_1)) {
                                _this._dispatchEvent(clickevent, obj.value, event);
                            }
                        });
                    }
                    this._mousedown.length = 0;
                }
                if (this._dragging.length !== 0) {
                    this._dragging.forEach(function (obj) {
                        if (obj.id === id) {
                            _this._dispatchEvent("pointerup", obj.value, event);
                        }
                    });
                    this._dragging.length = 0;
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_dispatchDoubleClick", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (originalEvent) {
                var _this = this;
                var event = this.getEvent(originalEvent);
                var target = this._getHitTarget(event.point, event.bbox);
                if (target) {
                    eachTargets(target, function (obj) {
                        if (_this._dispatchEvent("dblclick", obj, event)) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    });
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_dispatchWheel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (originalEvent) {
                var _this = this;
                var event = this.getEvent(originalEvent);
                var target = this._getHitTarget(event.point, event.bbox);
                if (target) {
                    eachTargets(target, function (obj) {
                        if (_this._dispatchEvent("wheel", obj, event)) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    });
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_makeSharedEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, f) {
                var _this = this;
                if (this._listeners[key] === undefined) {
                    var listener_1 = f();
                    this._listeners[key] = new CounterDisposer(function () {
                        delete _this._listeners[key];
                        listener_1.dispose();
                    });
                }
                return this._listeners[key].increment();
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_onPointerEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name, f) {
                var native = false;
                var timer = null;
                function clear() {
                    timer = null;
                    native = false;
                }
                return new MultiDisposer([
                    new Disposer(function () {
                        if (timer !== null) {
                            clearTimeout(timer);
                        }
                        clear();
                    }),
                    addEventListener(this.view, getRendererEvent(name), function (_) {
                        native = true;
                        if (timer !== null) {
                            clearTimeout(timer);
                        }
                        timer = window.setTimeout(clear, 0);
                    }),
                    onPointerEvent(window, name, function (ev) {
                        if (timer !== null) {
                            clearTimeout(timer);
                            timer = null;
                        }
                        f(ev, native);
                        native = false;
                    }),
                ]);
            }
        });
        // This ensures that only a single DOM event is added (e.g. only a single mousemove event listener)
        Object.defineProperty(CanvasRenderer.prototype, "_initEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                var _this = this;
                switch (key) {
                    case "globalpointermove":
                    case "pointerover":
                    case "pointerout":
                        return this._makeSharedEvent("pointermove", function () {
                            var listener = function (events, native) {
                                _this._lastPointerMoveEvent = { events: events, native: native };
                                each$1(events, function (event) {
                                    _this._dispatchGlobalMousemove(event, native);
                                });
                            };
                            return new MultiDisposer([
                                _this._onPointerEvent("pointerdown", listener),
                                _this._onPointerEvent("pointermove", listener),
                            ]);
                        });
                    case "globalpointerup":
                        return this._makeSharedEvent("pointerup", function () {
                            var mouseup = _this._onPointerEvent("pointerup", function (events, native) {
                                each$1(events, function (event) {
                                    _this._dispatchGlobalMouseup(event, native);
                                });
                                _this._lastPointerMoveEvent = { events: events, native: native };
                            });
                            var pointercancel = _this._onPointerEvent("pointercancel", function (events, native) {
                                each$1(events, function (event) {
                                    _this._dispatchGlobalMouseup(event, native);
                                });
                                _this._lastPointerMoveEvent = { events: events, native: native };
                            });
                            return new Disposer(function () {
                                mouseup.dispose();
                                pointercancel.dispose();
                            });
                        });
                    case "click":
                    case "rightclick":
                    case "middleclick":
                    case "pointerdown":
                    /*
                        return this._makeSharedEvent("pointerdown", () => {
                            return this._onPointerEvent("pointerdown", (event, native) => {
                                this._lastPointerMoveEvent = { event, native };
                                this._dispatchMousedown(event)
                            });
                        });
                    */
                    case "pointermove":
                    case "pointerup":
                        return this._makeSharedEvent("pointerdown", function () {
                            //const throttler = new Throttler();
                            var mousedown = onPointerEvent(_this.view, "pointerdown", function (events) {
                                each$1(events, function (ev) {
                                    _this._dispatchMousedown(ev);
                                });
                            });
                            // TODO handle throttling properly for multitouch
                            var mousemove = _this._onPointerEvent("pointermove", function (ev) {
                                //throttler.throttle(() => {
                                each$1(ev, function (ev) {
                                    _this._dispatchDragMove(ev);
                                });
                                //});
                            });
                            var mouseup = _this._onPointerEvent("pointerup", function (ev) {
                                each$1(ev, function (ev) {
                                    _this._dispatchDragEnd(ev);
                                });
                            });
                            var pointercancel = _this._onPointerEvent("pointercancel", function (ev) {
                                each$1(ev, function (ev) {
                                    _this._dispatchDragEnd(ev);
                                });
                            });
                            return new Disposer(function () {
                                mousedown.dispose();
                                mousemove.dispose();
                                mouseup.dispose();
                                pointercancel.dispose();
                            });
                        });
                    case "dblclick":
                        return this._makeSharedEvent("dblclick", function () {
                            return _this._onPointerEvent("dblclick", function (ev) {
                                each$1(ev, function (ev) {
                                    _this._dispatchDoubleClick(ev);
                                });
                            });
                        });
                    case "wheel":
                        return this._makeSharedEvent("wheel", function () {
                            return addEventListener(window, getRendererEvent("wheel"), function (event) {
                                _this._dispatchWheel(event);
                            }, { passive: false });
                        });
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_addEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (object, key, callback, context) {
                var _this = this;
                var events = this._events[key];
                if (events === undefined) {
                    events = this._events[key] = {
                        disposer: this._initEvent(key),
                        callbacks: [],
                        dispatching: false,
                        cleanup: false,
                    };
                }
                var listener = { object: object, context: context, callback: callback, disposed: false };
                events.callbacks.push(listener);
                return new Disposer(function () {
                    listener.disposed = true;
                    if (events.dispatching) {
                        events.cleanup = true;
                    }
                    else {
                        removeFirst(events.callbacks, listener);
                        if (events.callbacks.length === 0) {
                            events.disposer.dispose();
                            delete _this._events[key];
                        }
                    }
                });
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "getCanvas", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (root, options) {
                var _this = this;
                // Make sure everything is rendered
                this.render(root);
                if (!options) {
                    options = {};
                }
                var scale = this.resolution;
                // Check if we need to scale
                if (options.minWidth && (options.minWidth > this._width)) {
                    var minScale = options.minWidth / this._width;
                    if (minScale > scale) {
                        scale = minScale * this.resolution;
                    }
                }
                if (options.minHeight && (options.minHeight > this._height)) {
                    var minScale = options.minHeight / this._height;
                    if (minScale > scale) {
                        scale = minScale * this.resolution;
                    }
                }
                if (options.maxWidth && (options.maxWidth < this._width)) {
                    var maxScale = options.maxWidth / this._width;
                    if (maxScale < scale) {
                        scale = maxScale * this.resolution;
                    }
                }
                if (options.maxHeight && (options.maxHeight > this._height)) {
                    var maxScale = options.maxHeight / this._height;
                    if (maxScale < scale) {
                        scale = maxScale * this.resolution;
                    }
                }
                // Check if we need to compensate for pixel ratio
                if (options.maintainPixelRatio) {
                    scale /= this.resolution;
                }
                // Init list canvases to remove from DOM after export
                var canvases = [];
                // Set up new canvas for export
                var forceRender = false;
                var canvasWidth = this._width;
                var canvasHeight = this._height;
                var canvas = document.createElement("canvas");
                if (scale != this.resolution) {
                    forceRender = true;
                    canvasWidth = this._width * scale / this.resolution;
                    canvasHeight = this._height * scale / this.resolution;
                }
                canvas.width = canvasWidth;
                canvas.height = canvasHeight;
                // Add to DOM so it inherits CSS
                canvas.style.position = "fixed";
                canvas.style.top = "-10000px";
                this.view.appendChild(canvas);
                canvases.push(canvas);
                // Context
                var context = canvas.getContext("2d");
                var width = 0;
                var height = 0;
                var needRerender = false;
                each$1(this.layers, function (layer) {
                    if (layer && layer.visible) {
                        if (layer.tainted || forceRender) {
                            needRerender = true;
                            layer.exportableView = layer.view;
                            layer.exportableContext = layer.context;
                            layer.view = document.createElement("canvas");
                            // Add to DOM so it inherits CSS
                            _this.view.style.position = "fixed";
                            _this.view.style.top = "-10000px";
                            _this.view.appendChild(layer.view);
                            canvases.push(layer.view);
                            layer.view.width = canvasWidth;
                            layer.view.height = canvasHeight;
                            layer.context = layer.view.getContext("2d");
                            layer.dirty = true;
                            layer.scale = scale;
                        }
                    }
                });
                if (needRerender) {
                    this._omitTainted = true;
                    this.render(root);
                    this._omitTainted = false;
                }
                each$1(this.layers, function (layer) {
                    if (layer && layer.visible) {
                        // Layer is fine. Just plop it into our target canvas
                        context.drawImage(layer.view, 0, 0);
                        // Restore layer original canvas
                        if (layer.exportableView) {
                            layer.view = layer.exportableView;
                            layer.exportableView = undefined;
                        }
                        if (layer.exportableContext) {
                            layer.context = layer.exportableContext;
                            layer.exportableContext = undefined;
                        }
                        if (width < layer.view.clientWidth) {
                            width = layer.view.clientWidth;
                        }
                        if (height < layer.view.clientHeight) {
                            height = layer.view.clientHeight;
                        }
                        layer.scale = undefined;
                    }
                });
                canvas.style.width = width + "px";
                canvas.style.height = height + "px";
                each$1(canvases, function (canvas) {
                    _this.view.style.position = "";
                    _this.view.style.top = "";
                    _this.view.removeChild(canvas);
                });
                return canvas;
            }
        });
        return CanvasRenderer;
    }(ArrayDisposer));

    function rAF(fps, callback) {
        if (fps == null) {
            requestAnimationFrame(callback);
        }
        else {
            setTimeout(function () {
                requestAnimationFrame(callback);
            }, 1000 / fps);
        }
    }
    // TODO implement Disposer
    /**
     * Root element of the chart.
     *
     * @see {@link https://www.amcharts.com/docs/v5/getting-started/#Root_element} for more info
     */
    var Root = /** @class */ (function () {
        function Root(id, settings, isReal) {
            if (settings === void 0) { settings = {}; }
            /**
             * A reference to original chart container (div element).
             */
            Object.defineProperty(this, "dom", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_inner", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_isDirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(this, "_isDirtyParents", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(this, "_dirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_dirtyParents", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_dirtyBounds", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_dirtyPositions", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_ticker", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: null
            });
            Object.defineProperty(this, "_tickers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            /**
             * Root's event dispatcher.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/events/} for more info
             */
            Object.defineProperty(this, "events", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new EventDispatcher()
            });
            /**
             * @ignore
             * @todo needs description
             */
            Object.defineProperty(this, "animationTime", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: null
            });
            Object.defineProperty(this, "_animations", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(this, "_renderer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_rootContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * Main content container.
             */
            Object.defineProperty(this, "container", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * A [[Container]] used to display tooltips in.
             */
            Object.defineProperty(this, "tooltipContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_tooltip", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // Locale-related
            /**
             * @ignore
             */
            Object.defineProperty(this, "language", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: Language.new(this, {})
            });
            /**
             * Locale used by the chart.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/locales/}
             */
            Object.defineProperty(this, "locale", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: en
            });
            // Date-time related
            /**
             * Use UTC when formatting date/time.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-dates/#UTC_and_time_zones} for more info
             */
            Object.defineProperty(this, "utc", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            /**
             * If set, will format date/time in specific time zone.
             *
             * The value should be named time zone, e.g.:
             * `"America/Vancouver"`, `"Australia/Sydney"`, `"UTC"`.
             *
             * @see {@link https://www.amcharts.com/docs/v5/getting-started/root-element/#Time_zone} for more info
             * @since 5.1.0
             */
            Object.defineProperty(this, "timezone", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * The maximum FPS that the Root will run at.
             *
             * If `undefined` it will run at the highest FPS.
             *
             * @see {@link https://www.amcharts.com/docs/v5/getting-started/root-element/#Performance} for more info
             */
            Object.defineProperty(this, "fps", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * Number formatter.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-numbers/} for more info
             */
            Object.defineProperty(this, "numberFormatter", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: NumberFormatter.new(this, {})
            });
            /**
             * Date/time formatter.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-dates/} for more info
             */
            Object.defineProperty(this, "dateFormatter", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: DateFormatter.new(this, {})
            });
            /**
             * Duration formatter.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-dates/} for more info
             */
            Object.defineProperty(this, "durationFormatter", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: DurationFormatter.new(this, {})
            });
            // Accessibility
            /**
             * Global tab index for using for the whole chart
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/accessibility/} for more info
             */
            Object.defineProperty(this, "tabindex", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            //@todo maybe make this better
            Object.defineProperty(this, "_tabindexes", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(this, "_focusElementDirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(this, "_focusElementContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_focusedSprite", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_isShift", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_keyboardDragPoint", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_tooltipElementContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_readerAlertElement", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_logo", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * Used for dynamically-created CSS and JavaScript with strict source policies.
             */
            Object.defineProperty(this, "nonce", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * Special color set to be used for various controls.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/#Interface_colors} for more info
             */
            Object.defineProperty(this, "interfaceColors", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * An instance of vertical layout object that can be used to set `layout` setting
             * of a [[Container]].
             *
             * @default VerticalLayout.new()
             */
            Object.defineProperty(this, "verticalLayout", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: VerticalLayout.new(this, {})
            });
            /**
             * An instance of horizontal layout object that can be used to set `layout` setting
             * of a [[Container]].
             *
             * @default HorizontalLayout.new()
             */
            Object.defineProperty(this, "horizontalLayout", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: HorizontalLayout.new(this, {})
            });
            /**
             * An instance of grid layout object that can be used to set `layout` setting
             * of a [[Container]].
             *
             * @default VerticalLayout.new()
             */
            Object.defineProperty(this, "gridLayout", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: GridLayout.new(this, {})
            });
            /**
             * Indicates whether chart should resized automatically when parent container
             * width and/or height changes.
             *
             * If disabled (`autoResize = false`) you can make the chart resize manually
             * by calling root element's `resize()` method.
             */
            Object.defineProperty(this, "autoResize", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(this, "_fontHash", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: ""
            });
            Object.defineProperty(this, "_isDisposed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(this, "_disposers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(this, "_resizeSensorDisposer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_tooltips", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            if (!isReal) {
                throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
            }
            if (settings.useSafeResolution == null) {
                settings.useSafeResolution = true;
            }
            var resolution;
            if (settings.useSafeResolution) {
                resolution = getSafeResolution();
            }
            this._renderer = new CanvasRenderer(resolution);
            var dom;
            if (id instanceof HTMLElement) {
                dom = id;
            }
            else {
                dom = document.getElementById(id);
            }
            each$1(registry.rootElements, function (root) {
                if (root.dom === dom) {
                    throw new Error("You cannot have multiple Roots on the same DOM node");
                }
            });
            this.interfaceColors = InterfaceColors.new(this, {});
            if (dom === null) {
                throw new Error("Could not find HTML element with id `" + id + "`");
            }
            this.dom = dom;
            var inner = document.createElement("div");
            inner.style.position = "relative";
            inner.style.height = "100%";
            dom.appendChild(inner);
            this._inner = inner;
            this._updateComputedStyles();
            registry.rootElements.push(this);
        }
        Object.defineProperty(Root, "new", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (id, settings) {
                var root = new Root(id, settings, true);
                root._init();
                return root;
            }
        });
        Object.defineProperty(Root.prototype, "moveDOM", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (id) {
                var dom;
                if (id instanceof HTMLElement) {
                    dom = id;
                }
                else {
                    dom = document.getElementById(id);
                }
                if (dom) {
                    while (this.dom.childNodes.length > 0) {
                        dom.appendChild(this.dom.childNodes[0]);
                    }
                    this.dom = dom;
                    this._initResizeSensor();
                    this.resize();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_handleLogo", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._logo) {
                    var w = this.dom.offsetWidth;
                    var h = this.dom.offsetHeight;
                    if ((w <= 150) || (h <= 60)) {
                        this._logo.hide();
                    }
                    else {
                        this._logo.show();
                    }
                }
            }
        });
        Object.defineProperty(Root.prototype, "_showBranding", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._logo) {
                    var logo = this.tooltipContainer.children.push(Container.new(this, {
                        interactive: true,
                        interactiveChildren: false,
                        position: "absolute",
                        setStateOnChildren: true,
                        paddingTop: 9,
                        paddingRight: 9,
                        paddingBottom: 9,
                        paddingLeft: 9,
                        scale: .6,
                        y: percent(100),
                        centerY: p100,
                        tooltipText: "Created using amCharts 5",
                        tooltipX: p100,
                        cursorOverStyle: "pointer",
                        background: Rectangle.new(this, {
                            fill: color(0x474758),
                            fillOpacity: 0,
                            tooltipY: 5
                        })
                    }));
                    var tooltip = Tooltip.new(this, {
                        pointerOrientation: "horizontal",
                        paddingTop: 4,
                        paddingRight: 7,
                        paddingBottom: 4,
                        paddingLeft: 7
                    });
                    tooltip.label.setAll({
                        fontSize: 12
                    });
                    tooltip.get("background").setAll({
                        fill: this.interfaceColors.get("background"),
                        stroke: this.interfaceColors.get("grid"),
                        strokeOpacity: 0.3
                    });
                    logo.set("tooltip", tooltip);
                    logo.events.on("click", function () {
                        window.open("https://www.amcharts.com/", "_blank");
                    });
                    logo.states.create("hover", {});
                    var m = logo.children.push(Graphics.new(this, {
                        stroke: color(0xcccccc),
                        strokeWidth: 3,
                        svgPath: "M5 25 L13 25h13.6c3.4 0 6 0 10.3-4.3s5.2-12 8.6-12c3.4 0 4.3 8.6 7.7 8.6M83.4 25H79.8c-3.4 0-6 0-10.3-4.3s-5.2-12-8.6-12-4.3 8.6-7.7 8.6"
                    }));
                    m.states.create("hover", { stroke: color(0x3CABFF) });
                    var a = logo.children.push(Graphics.new(this, {
                        stroke: color(0x888888),
                        strokeWidth: 3,
                        svgPath: "M83.4 25h-31C37 25 39.5 4.4 28.4 4.4S18.9 24.2 4.3 25H0"
                    }));
                    a.states.create("hover", { stroke: color(0x474758) });
                    //logo.set("tooltip", this._tooltip);
                    //logo.setPrivate("tooltipTarget", logo.get("background"));
                    this._logo = logo;
                    this._handleLogo();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_init", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var renderer = this._renderer;
                var rootContainer = Container.new(this, { visible: true, width: this.dom.clientWidth, height: this.dom.clientHeight });
                this._rootContainer = rootContainer;
                this._rootContainer._defaultThemes.push(DefaultTheme.new(this));
                var container = rootContainer.children.push(Container.new(this, { visible: true, width: p100, height: p100 }));
                this.container = container;
                renderer.resize(this.dom.clientWidth, this.dom.clientHeight);
                //@todo: better appendChild - refer
                this._inner.appendChild(renderer.view);
                // TODO: TMP TMP TMP for testing only, remove
                //document.body.appendChild((<any>renderer)._ghostView);
                this._initResizeSensor();
                // Create element which is used to make announcements to screen reader
                var readerAlertElement = document.createElement("div");
                readerAlertElement.setAttribute("role", "alert");
                readerAlertElement.style.zIndex = "-100000";
                readerAlertElement.style.opacity = "0";
                readerAlertElement.style.position = "absolute";
                readerAlertElement.style.top = "0";
                this._readerAlertElement = readerAlertElement;
                this._inner.appendChild(this._readerAlertElement);
                var focusElementContainer = document.createElement("div");
                focusElementContainer.style.position = "absolute";
                focusElementContainer.style.pointerEvents = "none";
                focusElementContainer.style.top = "0px";
                focusElementContainer.style.left = "0px";
                focusElementContainer.style.overflow = "hidden";
                focusElementContainer.style.width = this.dom.clientWidth + "px";
                focusElementContainer.style.height = this.dom.clientHeight + "px";
                focusElementContainer.setAttribute("role", "application");
                setInteractive(focusElementContainer, false);
                this._focusElementContainer = focusElementContainer;
                this._inner.appendChild(this._focusElementContainer);
                this._tooltipElementContainer = document.createElement("div");
                this._inner.appendChild(this._tooltipElementContainer);
                // Add keyboard events for accessibility, e.g. simulating drag with arrow
                // keys and click with ENTER
                if (supports("keyboardevents")) {
                    this._disposers.push(addEventListener(window, "keydown", function (ev) {
                        if (ev.keyCode == 16) {
                            _this._isShift = true;
                        }
                    }));
                    this._disposers.push(addEventListener(window, "keyup", function (ev) {
                        if (ev.keyCode == 16) {
                            _this._isShift = false;
                        }
                    }));
                    this._disposers.push(addEventListener(focusElementContainer, "keydown", function (ev) {
                        var focusedSprite = _this._focusedSprite;
                        if (focusedSprite) {
                            if (ev.keyCode == 27) {
                                // ESC pressed - lose current focus
                                blur();
                                _this._focusedSprite = undefined;
                            }
                            var dragOffsetX = 0;
                            var dragOffsetY = 0;
                            // TODO: figure out if using bogus MouseEvent is fine, or it will
                            // fail on some platforms
                            switch (ev.keyCode) {
                                case 13:
                                    ev.preventDefault();
                                    var downEvent = renderer.getEvent(new MouseEvent("click"));
                                    focusedSprite.events.dispatch("click", {
                                        type: "click",
                                        originalEvent: downEvent.event,
                                        point: downEvent.point,
                                        simulated: true,
                                        target: focusedSprite
                                    });
                                    return;
                                case 37:
                                    dragOffsetX = -6;
                                    break;
                                case 39:
                                    dragOffsetX = 6;
                                    break;
                                case 38:
                                    dragOffsetY = -6;
                                    break;
                                case 40:
                                    dragOffsetY = 6;
                                    break;
                                default:
                                    return;
                            }
                            if (dragOffsetX != 0 || dragOffsetY != 0) {
                                ev.preventDefault();
                                if (!focusedSprite.isDragging()) {
                                    // Start dragging
                                    _this._keyboardDragPoint = {
                                        x: 0,
                                        y: 0
                                    };
                                    var downEvent = renderer.getEvent(new MouseEvent("mousedown", {
                                        clientX: 0,
                                        clientY: 0
                                    }));
                                    if (focusedSprite.events.isEnabled("pointerdown")) {
                                        focusedSprite.events.dispatch("pointerdown", {
                                            type: "pointerdown",
                                            originalEvent: downEvent.event,
                                            point: downEvent.point,
                                            simulated: true,
                                            target: focusedSprite
                                        });
                                    }
                                }
                                // Move incrementally
                                var dragPoint = _this._keyboardDragPoint;
                                dragPoint.x += dragOffsetX;
                                dragPoint.y += dragOffsetY;
                                var moveEvent = renderer.getEvent(new MouseEvent("mousemove", {
                                    clientX: dragPoint.x,
                                    clientY: dragPoint.y
                                }), false);
                                if (focusedSprite.events.isEnabled("globalpointermove")) {
                                    focusedSprite.events.dispatch("globalpointermove", {
                                        type: "globalpointermove",
                                        originalEvent: moveEvent.event,
                                        point: moveEvent.point,
                                        simulated: true,
                                        target: focusedSprite
                                    });
                                }
                            }
                        }
                    }));
                    this._disposers.push(addEventListener(focusElementContainer, "keyup", function (ev) {
                        if (_this._focusedSprite) {
                            var focusedSprite = _this._focusedSprite;
                            var keyCode = ev.keyCode;
                            switch (keyCode) {
                                case 37:
                                case 39:
                                case 38:
                                case 40:
                                    if (focusedSprite.isDragging()) {
                                        // Simulate drag stop
                                        var dragPoint = _this._keyboardDragPoint;
                                        var upEvent = renderer.getEvent(new MouseEvent("mouseup", {
                                            clientX: dragPoint.x,
                                            clientY: dragPoint.y
                                        }));
                                        if (focusedSprite.events.isEnabled("globalpointerup")) {
                                            focusedSprite.events.dispatch("globalpointerup", {
                                                type: "globalpointerup",
                                                originalEvent: upEvent.event,
                                                point: upEvent.point,
                                                simulated: true,
                                                target: focusedSprite
                                            });
                                        }
                                        //this._positionFocusElement(focusedSprite);
                                        _this._keyboardDragPoint = undefined;
                                        // @todo dispatch mouseup event instead of calling dragStop?
                                        // this._dispatchEvent("globalpointerup", target, upEvent);
                                        return;
                                    }
                                    else if (focusedSprite.get("focusableGroup")) {
                                        // Find next item in focusable group
                                        var group_1 = focusedSprite.get("focusableGroup");
                                        var items = _this._tabindexes.filter(function (item) { return item.get("focusableGroup") == group_1; });
                                        var index = items.indexOf(focusedSprite);
                                        var lastIndex = items.length - 1;
                                        index += (keyCode == 39 || keyCode == 40) ? 1 : -1;
                                        if (index < 0) {
                                            index = lastIndex;
                                        }
                                        else if (index > lastIndex) {
                                            index = 0;
                                        }
                                        focus(items[index].getPrivate("focusElement").dom);
                                    }
                                    break;
                            }
                        }
                    }));
                }
                this._startTicker();
                this.setThemes([]);
                this._addTooltip();
                if (!this._hasLicense()) {
                    this._showBranding();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_initResizeSensor", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                if (this._resizeSensorDisposer) {
                    this._resizeSensorDisposer.dispose();
                }
                this._resizeSensorDisposer = new ResizeSensor(this.dom, function () {
                    if (_this.autoResize) {
                        _this.resize();
                    }
                });
                this._disposers.push(this._resizeSensorDisposer);
            }
        });
        /**
         * If automatic resizing of char is disabled (`root.autoResize = false`), it
         * can be resized manually by calling this method.
         */
        Object.defineProperty(Root.prototype, "resize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var dom = this.dom;
                var w = dom.clientWidth;
                var h = dom.clientHeight;
                if (w > 0 && h > 0) {
                    var focusElementContainer = this._focusElementContainer;
                    focusElementContainer.style.width = w + "px";
                    focusElementContainer.style.height = h + "px";
                    this._renderer.resize(w, h);
                    var rootContainer = this._rootContainer;
                    rootContainer.setPrivate("width", w);
                    rootContainer.setPrivate("height", h);
                    this._render();
                    this._handleLogo();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._renderer.render(this._rootContainer._display);
                if (this._focusElementDirty) {
                    this._updateCurrentFocus();
                    this._focusElementDirty = false;
                }
            }
        });
        Object.defineProperty(Root.prototype, "_runTickers", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (currentTime) {
                each$1(this._tickers, function (f) {
                    f(currentTime);
                });
            }
        });
        Object.defineProperty(Root.prototype, "_runAnimations", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (currentTime) {
                keepIf(this._animations, function (animation) {
                    return !animation._runAnimation(currentTime);
                });
            }
        });
        Object.defineProperty(Root.prototype, "_runDirties", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                //console.log("tick **************************************************************");
                var allParents = {};
                while (this._isDirtyParents) {
                    // This must be before calling _prepareChildren
                    this._isDirtyParents = false;
                    keys(this._dirtyParents).forEach(function (key) {
                        var parent = _this._dirtyParents[key];
                        delete _this._dirtyParents[key];
                        if (!parent.isDisposed()) {
                            allParents[parent.uid] = parent;
                            parent._prepareChildren();
                        }
                    });
                }
                keys(allParents).forEach(function (key) {
                    allParents[key]._updateChildren();
                });
                var objects = [];
                //		console.log("_beforeChanged")
                keys(this._dirty).forEach(function (key) {
                    var entity = _this._dirty[key];
                    if (entity.isDisposed()) {
                        delete _this._dirty[entity.uid];
                    }
                    else {
                        objects.push(entity);
                        entity._beforeChanged();
                    }
                });
                //		console.log("_changed")
                objects.forEach(function (entity) {
                    entity._changed();
                    delete _this._dirty[entity.uid];
                    entity._clearDirty();
                });
                this._isDirty = false;
                var depths = {};
                var bounds = [];
                keys(this._dirtyBounds).forEach(function (key) {
                    var entity = _this._dirtyBounds[key];
                    delete _this._dirtyBounds[key];
                    if (!entity.isDisposed()) {
                        depths[entity.uid] = entity.depth();
                        bounds.push(entity);
                    }
                });
                // High depth -> low depth
                bounds.sort(function (x, y) {
                    return compare(depths[y.uid], depths[x.uid]);
                });
                //		console.log("_updateBounds")
                bounds.forEach(function (entity) {
                    entity._updateBounds();
                });
                //		console.log("_updatePosition")
                var dirtyPositions = this._dirtyPositions;
                keys(dirtyPositions).forEach(function (key) {
                    var sprite = dirtyPositions[key];
                    delete dirtyPositions[key];
                    if (!sprite.isDisposed()) {
                        sprite._updatePosition();
                    }
                });
                //		console.log("_afterChanged")
                objects.forEach(function (entity) {
                    entity._afterChanged();
                });
            }
        });
        Object.defineProperty(Root.prototype, "_renderFrame", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (currentTime) {
                if (this.events.isEnabled("framestarted")) {
                    this.events.dispatch("framestarted", {
                        type: "framestarted",
                        target: this,
                        timestamp: currentTime,
                    });
                }
                this._checkComputedStyles();
                this._runTickers(currentTime);
                this._runAnimations(currentTime);
                this._runDirties();
                this._render();
                if (this.events.isEnabled("frameended")) {
                    this.events.dispatch("frameended", {
                        type: "frameended",
                        target: this,
                        timestamp: currentTime,
                    });
                }
                return this._tickers.length === 0 &&
                    this._animations.length === 0 &&
                    !this._isDirty;
            }
        });
        Object.defineProperty(Root.prototype, "_runTicker", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (currentTime) {
                if (!this.isDisposed()) {
                    this.animationTime = currentTime;
                    var done = this._renderFrame(currentTime);
                    // No more work to do
                    if (done) {
                        this._ticker = null;
                        this.animationTime = null;
                    }
                    else {
                        rAF(this.fps, this._ticker);
                    }
                }
            }
        });
        Object.defineProperty(Root.prototype, "_runTickerNow", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this.isDisposed()) {
                    for (;;) {
                        var currentTime = performance.now();
                        this.animationTime = currentTime;
                        var done = this._renderFrame(currentTime);
                        if (done) {
                            this.animationTime = null;
                            break;
                        }
                    }
                }
            }
        });
        Object.defineProperty(Root.prototype, "_startTicker", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                if (this._ticker === null) {
                    this.animationTime = null;
                    this._ticker = function (currentTime) {
                        _this._runTicker(currentTime);
                    };
                    rAF(this.fps, this._ticker);
                }
            }
        });
        Object.defineProperty(Root.prototype, "_addDirtyEntity", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (entity) {
                if (this._dirty[entity.uid] === undefined) {
                    this._isDirty = true;
                    this._dirty[entity.uid] = entity;
                    this._startTicker();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_addDirtyParent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parent) {
                if (this._dirtyParents[parent.uid] === undefined) {
                    this._isDirty = true;
                    this._isDirtyParents = true;
                    this._dirtyParents[parent.uid] = parent;
                    this._startTicker();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_addDirtyBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (entity) {
                if (this._dirtyBounds[entity.uid] === undefined) {
                    this._isDirty = true;
                    this._dirtyBounds[entity.uid] = entity;
                    this._startTicker();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_addDirtyPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (sprite) {
                if (this._dirtyPositions[sprite.uid] === undefined) {
                    this._isDirty = true;
                    this._dirtyPositions[sprite.uid] = sprite;
                    this._startTicker();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_addAnimation", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (animation) {
                // TODO use numeric id instead
                if (this._animations.indexOf(animation) === -1) {
                    this._animations.push(animation);
                    this._startTicker();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_markDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._isDirty = true;
            }
        });
        Object.defineProperty(Root.prototype, "_markDirtyRedraw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this.events.once("frameended", function () {
                    _this._isDirty = true;
                    _this._startTicker();
                });
            }
        });
        Object.defineProperty(Root.prototype, "eachFrame", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                var _this = this;
                this._tickers.push(f);
                this._startTicker();
                return new Disposer(function () {
                    removeFirst(_this._tickers, f);
                });
            }
        });
        /**
         * Returns width of the target container, in pixels.
         *
         * @return Width
         */
        Object.defineProperty(Root.prototype, "width", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.dom.clientWidth;
            }
        });
        /**
         * Returns height of the target container, in pixels.
         *
         * @return Height
         */
        Object.defineProperty(Root.prototype, "height", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.dom.clientHeight;
            }
        });
        /**
         * Disposes root and all the content in it.
         */
        Object.defineProperty(Root.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._isDisposed) {
                    this._isDisposed = true;
                    this._rootContainer.dispose();
                    this._renderer.dispose();
                    this.horizontalLayout.dispose();
                    this.verticalLayout.dispose();
                    this.interfaceColors.dispose();
                    each$1(this._disposers, function (x) {
                        x.dispose();
                    });
                    if (this._inner) {
                        removeElement(this._inner);
                    }
                    remove(registry.rootElements, this);
                }
            }
        });
        /**
         * Returns `true` if root element is disposed.
         *
         * @return Disposed?
         */
        Object.defineProperty(Root.prototype, "isDisposed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._isDisposed;
            }
        });
        /**
         * Triggers screen reader read out a message.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/accessibility/} for more info
         * @param  text  Alert text
         */
        Object.defineProperty(Root.prototype, "readerAlert", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text) {
                this._readerAlertElement.innerHTML = stripTags(text);
            }
        });
        /**
         * Sets themes to be used for the chart.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/themes/} for more info
         * @param  themes  A list of themes
         */
        Object.defineProperty(Root.prototype, "setThemes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (themes) {
                this._rootContainer.set("themes", themes);
                // otherwise new themes are not applied
                var tooltipContainer = this.tooltipContainer;
                if (tooltipContainer) {
                    tooltipContainer._applyThemes();
                }
                // @todo review this
                var interfaceColors = this.interfaceColors;
                if (interfaceColors) {
                    interfaceColors._applyThemes();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_addTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this.tooltipContainer) {
                    var tooltipContainer = this._rootContainer.children.push(Container.new(this, { position: "absolute", isMeasured: false, width: p100, height: p100, layer: 30 }));
                    this.tooltipContainer = tooltipContainer;
                    var tooltip = Tooltip.new(this, {});
                    this.container.set("tooltip", tooltip);
                    tooltip.hide(0);
                    this._tooltip = tooltip;
                }
            }
        });
        /**
         * Accesibility
         */
        Object.defineProperty(Root.prototype, "_registerTabindexOrder", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                if (target.get("focusable")) {
                    pushOne(this._tabindexes, target);
                }
                else {
                    remove(this._tabindexes, target);
                }
                this._invalidateTabindexes();
            }
        });
        Object.defineProperty(Root.prototype, "_unregisterTabindexOrder", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                remove(this._tabindexes, target);
                this._invalidateTabindexes();
            }
        });
        Object.defineProperty(Root.prototype, "_invalidateTabindexes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this._tabindexes.sort(function (a, b) {
                    var aindex = a.get("tabindexOrder", 0);
                    var bindex = b.get("tabindexOrder", 0);
                    if (aindex == bindex) {
                        return 0;
                    }
                    else if (aindex > bindex) {
                        return 1;
                    }
                    else {
                        return -1;
                    }
                });
                var groups = [];
                each$1(this._tabindexes, function (item, index) {
                    if (!item.getPrivate("focusElement")) {
                        _this._makeFocusElement(index, item);
                    }
                    else {
                        _this._moveFocusElement(index, item);
                    }
                    var group = item.get("focusableGroup");
                    if (group) {
                        if (groups.indexOf(group) !== -1) {
                            // Non-first element in the group, make it not directly focusable
                            item.getPrivate("focusElement").dom.setAttribute("tabindex", "-1");
                        }
                        else {
                            groups.push(group);
                        }
                    }
                });
            }
        });
        Object.defineProperty(Root.prototype, "_updateCurrentFocus", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._focusedSprite) {
                    this._decorateFocusElement(this._focusedSprite);
                    this._positionFocusElement(this._focusedSprite);
                }
            }
        });
        Object.defineProperty(Root.prototype, "_decorateFocusElement", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target, focusElement) {
                // Decorate with proper accessibility attributes
                if (!focusElement) {
                    focusElement = target.getPrivate("focusElement").dom;
                }
                if (!focusElement) {
                    return;
                }
                if (target.get("visible") && target.get("role") != "tooltip" && !target.isHidden()) {
                    if (focusElement.getAttribute("tabindex") != "-1") {
                        focusElement.setAttribute("tabindex", "" + this.tabindex);
                    }
                }
                else {
                    focusElement.removeAttribute("tabindex");
                }
                var role = target.get("role");
                if (role) {
                    focusElement.setAttribute("role", role);
                }
                else {
                    focusElement.removeAttribute("role");
                }
                var ariaLabel = target.get("ariaLabel");
                if (ariaLabel) {
                    var label = populateString(target, ariaLabel);
                    focusElement.setAttribute("aria-label", label);
                }
                else {
                    focusElement.removeAttribute("aria-label");
                }
                var ariaLive = target.get("ariaLive");
                if (ariaLive) {
                    focusElement.setAttribute("aria-live", ariaLive);
                }
                else {
                    focusElement.removeAttribute("aria-live");
                }
                var ariaChecked = target.get("ariaChecked");
                if (ariaChecked != null) {
                    focusElement.setAttribute("aria-checked", ariaChecked ? "true" : "false");
                }
                else {
                    focusElement.removeAttribute("aria-checked");
                }
                if (target.get("ariaHidden")) {
                    focusElement.setAttribute("aria-hidden", "hidden");
                }
                else {
                    focusElement.removeAttribute("aria-hidden");
                }
                var ariaOrientation = target.get("ariaOrientation");
                if (ariaOrientation) {
                    focusElement.setAttribute("aria-orientation", ariaOrientation);
                }
                else {
                    focusElement.removeAttribute("aria-orientation");
                }
                var ariaValueNow = target.get("ariaValueNow");
                if (ariaValueNow) {
                    focusElement.setAttribute("aria-valuenow", ariaValueNow);
                }
                else {
                    focusElement.removeAttribute("aria-valuenow");
                }
                var ariaValueMin = target.get("ariaValueMin");
                if (ariaValueMin) {
                    focusElement.setAttribute("aria-valuemin", ariaValueMin);
                }
                else {
                    focusElement.removeAttribute("aria-valuemin");
                }
                var ariaValueMax = target.get("ariaValueMax");
                if (ariaValueMax) {
                    focusElement.setAttribute("aria-valuemax", ariaValueMax);
                }
                else {
                    focusElement.removeAttribute("aria-valuemax");
                }
                var ariaValueText = target.get("ariaValueText");
                if (ariaValueText) {
                    focusElement.setAttribute("aria-valuetext", ariaValueText);
                }
                else {
                    focusElement.removeAttribute("aria-valuetext");
                }
                var ariaControls = target.get("ariaControls");
                if (ariaControls) {
                    focusElement.setAttribute("aria-controls", ariaControls);
                }
                else {
                    focusElement.removeAttribute("aria-controls");
                }
            }
        });
        Object.defineProperty(Root.prototype, "_makeFocusElement", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, target) {
                var _this = this;
                if (target.getPrivate("focusElement")) {
                    return;
                }
                // Init
                var focusElement = document.createElement("div");
                if (target.get("role") != "tooltip") {
                    focusElement.tabIndex = this.tabindex;
                }
                focusElement.style.position = "absolute";
                setInteractive(focusElement, false);
                var disposers = [];
                target.setPrivate("focusElement", {
                    dom: focusElement,
                    disposers: disposers,
                });
                this._decorateFocusElement(target);
                disposers.push(addEventListener(focusElement, "focus", function (ev) {
                    _this._handleFocus(ev, index);
                }));
                disposers.push(addEventListener(focusElement, "blur", function (ev) {
                    _this._handleBlur(ev, index);
                }));
                this._moveFocusElement(index, target);
            }
        });
        Object.defineProperty(Root.prototype, "_removeFocusElement", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                remove(this._tabindexes, target);
                var focusElement = target.getPrivate("focusElement");
                if (focusElement) {
                    var container = this._focusElementContainer;
                    container.removeChild(focusElement.dom);
                    each$1(focusElement.disposers, function (x) {
                        x.dispose();
                    });
                }
            }
        });
        Object.defineProperty(Root.prototype, "_hideFocusElement", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                var focusElement = target.getPrivate("focusElement");
                focusElement.dom.style.display = "none";
            }
        });
        Object.defineProperty(Root.prototype, "_moveFocusElement", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, target) {
                // Get container
                var container = this._focusElementContainer;
                var focusElement = target.getPrivate("focusElement").dom;
                if (focusElement === this._focusElementContainer.children[index]) {
                    // Nothing to do
                    return;
                }
                var next = this._focusElementContainer.children[index + 1];
                if (next) {
                    container.insertBefore(focusElement, next);
                }
                else {
                    container.append(focusElement);
                }
            }
        });
        Object.defineProperty(Root.prototype, "_positionFocusElement", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                var bounds = target.globalBounds();
                var width = bounds.right == bounds.left ? target.width() : bounds.right - bounds.left;
                var height = bounds.top == bounds.bottom ? target.height() : bounds.bottom - bounds.top;
                var focusElement = target.getPrivate("focusElement").dom;
                focusElement.style.top = (bounds.top - 2) + "px";
                focusElement.style.left = (bounds.left - 2) + "px";
                focusElement.style.width = (width + 4) + "px";
                focusElement.style.height = (height + 4) + "px";
            }
        });
        Object.defineProperty(Root.prototype, "_handleFocus", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (ev, index) {
                // Get element
                var focused = this._tabindexes[index];
                // Jump over hidden elements
                if (!focused.isVisibleDeep()) {
                    this._focusNext(ev.target, this._isShift ? -1 : 1);
                    return;
                }
                // Size and position
                this._positionFocusElement(focused);
                //this._decorateFocusElement(focused);
                this._focusedSprite = focused;
                if (focused.events.isEnabled("focus")) {
                    focused.events.dispatch("focus", {
                        type: "focus",
                        originalEvent: ev,
                        target: focused
                    });
                }
            }
        });
        Object.defineProperty(Root.prototype, "_focusNext", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (el, direction) {
                var focusableElements = Array.from(document.querySelectorAll([
                    'a[href]',
                    'area[href]',
                    'button:not([disabled])',
                    'details',
                    'input:not([disabled])',
                    'iframe:not([disabled])',
                    'select:not([disabled])',
                    'textarea:not([disabled])',
                    '[contentEditable=""]',
                    '[contentEditable="true"]',
                    '[contentEditable="TRUE"]',
                    '[tabindex]:not([tabindex^="-"])',
                    //':not([disabled])'
                ].join(',')));
                var index = focusableElements.indexOf(el) + direction;
                if (index < 0) {
                    index = focusableElements.length - 1;
                }
                else if (index >= focusableElements.length) {
                    index = 0;
                }
                focusableElements[index].focus();
            }
        });
        Object.defineProperty(Root.prototype, "_handleBlur", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (ev, _index) {
                var focused = this._focusedSprite;
                if (focused && focused.events.isEnabled("blur")) {
                    focused.events.dispatch("blur", {
                        type: "blur",
                        originalEvent: ev,
                        target: focused
                    });
                }
                this._focusedSprite = undefined;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Root.prototype, "updateTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                var text = stripTags(target._getText());
                var tooltipElement = target.getPrivate("tooltipElement");
                if (target.get("role") == "tooltip" && text != "") {
                    if (!tooltipElement) {
                        tooltipElement = this._makeTooltipElement(target);
                    }
                    if (tooltipElement.innerHTML != text) {
                        tooltipElement.innerHTML = text;
                    }
                }
                else if (tooltipElement) {
                    tooltipElement.remove();
                    target.removePrivate("tooltipElement");
                }
            }
        });
        Object.defineProperty(Root.prototype, "_makeTooltipElement", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                var container = this._tooltipElementContainer;
                var tooltipElement = document.createElement("div");
                tooltipElement.style.position = "absolute";
                tooltipElement.style.opacity = "0.0000001";
                setInteractive(tooltipElement, false);
                this._decorateFocusElement(target, tooltipElement);
                container.append(tooltipElement);
                target.setPrivate("tooltipElement", tooltipElement);
                return tooltipElement;
            }
        });
        Object.defineProperty(Root.prototype, "_invalidateAccessibility", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                this._focusElementDirty = true;
                var focusElement = target.getPrivate("focusElement");
                if (target.get("focusable")) {
                    if (focusElement) {
                        this._decorateFocusElement(target);
                        this._positionFocusElement(target);
                    }
                    // else {
                    // 	this._renderer._makeFocusElement(0, this);
                    // }
                }
                else if (focusElement) {
                    this._removeFocusElement(target);
                }
                //this.updateCurrentFocus();
            }
        });
        /**
         * Returns `true` if `target` is currently focused.
         *
         * @param   target  Target
         * @return          Focused?
         */
        Object.defineProperty(Root.prototype, "focused", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                return this._focusedSprite === target;
            }
        });
        /**
         * Converts document coordinates to coordinates withing root element.
         *
         * @param   point  Document point
         * @return         Root point
         */
        Object.defineProperty(Root.prototype, "documentPointToRoot", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                var bbox = this.dom.getBoundingClientRect();
                return {
                    x: point.x - bbox.left,
                    y: point.y - bbox.top
                };
            }
        });
        /**
         * Converts root coordinates to document
         *
         * @param   point  Document point
         * @return         Root point
         */
        Object.defineProperty(Root.prototype, "rootPointToDocument", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                var bbox = this.dom.getBoundingClientRect();
                return {
                    x: point.x + bbox.left,
                    y: point.y + bbox.top
                };
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Root.prototype, "addDisposer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (disposer) {
                this._disposers.push(disposer);
                return disposer;
            }
        });
        Object.defineProperty(Root.prototype, "_updateComputedStyles", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var styles = window.getComputedStyle(this.dom);
                var fontHash = "";
                each(styles, function (key, val) {
                    if (isString(key) && key.match(/^font/)) {
                        fontHash += val;
                    }
                });
                var changed = fontHash != this._fontHash;
                if (changed) {
                    this._fontHash = fontHash;
                }
                return changed;
            }
        });
        Object.defineProperty(Root.prototype, "_checkComputedStyles", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._updateComputedStyles()) {
                    this._invalidateLabelBounds(this.container);
                }
            }
        });
        Object.defineProperty(Root.prototype, "_invalidateLabelBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                var _this = this;
                if (target instanceof Container) {
                    target.children.each(function (child) {
                        _this._invalidateLabelBounds(child);
                    });
                }
                else if (target instanceof Text) {
                    target.markDirtyBounds();
                }
            }
        });
        /**
         * To all the clever heads out there. Yes, we did not make any attempts to
         * scramble this.
         *
         * This is a part of a tool meant for our users to manage their commercial
         * licenses for removal of amCharts branding from charts.
         *
         * The only legit way to do so is to purchase a commercial license for amCharts:
         * https://www.amcharts.com/online-store/
         *
         * Removing or altering this code, or disabling amCharts branding in any other
         * way is against the license and thus illegal.
         */
        Object.defineProperty(Root.prototype, "_hasLicense", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                for (var i = 0; i < registry.licenses.length; i++) {
                    if (registry.licenses[i].match(/^AM5C.{5,}/i)) {
                        return true;
                    }
                }
                return false;
            }
        });
        Object.defineProperty(Root.prototype, "_licenseApplied", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._logo) {
                    this._logo.set("forceHidden", true);
                }
            }
        });
        Object.defineProperty(Root.prototype, "debugGhostView", {
            /**
             * @ignore
             */
            get: function () {
                return this._renderer.debugGhostView;
            },
            /**
             * @ignore
             */
            set: function (value) {
                this._renderer.debugGhostView = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Root.prototype, "tapToActivate", {
            /**
             * @return Needs a tap to activate touch functions
             */
            get: function () {
                return this._renderer.tapToActivate;
            },
            /**
             * Set this to `true` if you need chart to require first a tap onto it before
             * touch gesture related functionality like zoom/pan is turned on.
             *
             * @see {@link https://www.amcharts.com/docs/v5/getting-started/root-element/#Touch_related_options} for more info
             * @default false
             * @since 5.2.9
             * @param  value  Needs a tap to activate touch functions
             */
            set: function (value) {
                this._renderer.tapToActivate = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Root.prototype, "tapToActivateTimeout", {
            /**
             * @return Timeout
             */
            get: function () {
                return this._renderer.tapToActivateTimeout;
            },
            /**
             * If `tapToActivate` is set to `true`, this setting will determine number
             * of milliseconds the chart will stay "active", before releasing the
             * controls back to the page.
             *
             * @see {@link https://www.amcharts.com/docs/v5/getting-started/root-element/#Touch_related_options} for more info
             * @default 3000
             * @since 5.2.9
             * @param  value  Timeout
             */
            set: function (value) {
                this._renderer.tapToActivateTimeout = value;
            },
            enumerable: false,
            configurable: true
        });
        return Root;
    }());

    /**
     * @ignore
     */
    var rules;
    /**
     * @ignore
     */
    function modalCSS(element, root, _prefix) {
        var ic = root.interfaceColors;
        var active = ic.get("secondaryButton").toCSS();
        var text = ic.get("text").toCSS();
        var shadow = ic.get("alternativeBackground").toCSS(0.45);
        //const altbg = ic.get("alternativeBackground")!.toCSS();
        if (!rules) {
            var disposer_1 = new MultiDisposer([
                new StyleRule(element, ".am5-modal", {
                    "width": "100%",
                    "height": "100%",
                    "position": "absolute",
                    "z-index": "100000",
                    "top": "0",
                    "left": "0"
                }),
                new StyleRule(element, ".am5-modal-curtain", {
                    "top": "0",
                    "left": "0",
                    "width": "100%",
                    "height": "100%",
                    "position": "absolute",
                    "background": ic.get("background").toCSS(0.5),
                    "z-index": "100"
                }),
                new StyleRule(element, ".am5-modal-wrapper", {
                    "top": "0",
                    "left": "0",
                    "width": "100%",
                    "height": "100%",
                    "position": "absolute",
                    "text-align": "center",
                    "white-space": "nowrap",
                    "background": ic.get("background").toCSS(0.5),
                    "z-index": "101"
                }),
                new StyleRule(element, ".am5-modal-wrapper:before", {
                    "content": "''",
                    "display": "inline-block",
                    "height": "100%",
                    "vertical-align": "middle",
                    "margin-right": "-0.25em"
                }),
                new StyleRule(element, ".am5-modal-content", {
                    "display": "inline-block",
                    "padding": "1.2em",
                    "vertical-align": "middle",
                    "text-align": "left",
                    "white-space": "normal",
                    "background": ic.get("background").toCSS(),
                    //"border": "1px solid " + ic.get("alternativeBackground")!.toCSS(),
                    "border-radius": "4px",
                    "-webkit-box-shadow": "0px 0px 36px 0px " + shadow,
                    "box-shadow": "0px 0px 36px 0px " + shadow,
                    "color": text
                }),
                new StyleRule(element, ".am5-modal-content h1", {
                    "font-size": "1em",
                    "margin": "0 0 0.5em 0"
                }),
                new StyleRule(element, ".am5-modal-table", {
                    "display": "table",
                    "margin": "1em 0"
                }),
                new StyleRule(element, ".am5-modal-table-row", {
                    "display": "table-row"
                }),
                new StyleRule(element, ".am5-modal-table-heading", {
                    "display": "table-heading",
                    "padding": "3px 10px 3px 0",
                }),
                new StyleRule(element, ".am5-modal-table-cell", {
                    "display": "table-cell",
                    "padding": "3px 0 3px 0",
                }),
                new StyleRule(element, ".am5-modal-table-cell > *", {
                    "vertical-align": "middle"
                }),
                new StyleRule(element, ".am5-modal-content input[type=text], .am5-modal-content input[type=number], .am5-modal-content select", {
                    "border": "1px solid " + active,
                    "border-radius": "4px",
                    "padding": "3px 5px",
                    "margin": "2px"
                }),
                new StyleRule(element, ".am5-modal-input-narrow", {
                    "width": "50px"
                }),
                new StyleRule(element, ".am5-modal-button", {
                    "font-weight": "400",
                    "color": ic.get("secondaryButtonText").toCSS(),
                    "line-height": "1.5",
                    "text-align": "center",
                    "text-decoration": "none",
                    "vertical-align": "middle",
                    "cursor": "pointer",
                    "padding": "0.2em 0.8em",
                    "font-size": "1em",
                    "border-radius": "0.25em",
                    "margin": "0 0.25em 0 0",
                    "border": "1px solid " + ic.get("secondaryButtonStroke").toCSS(),
                    "background": ic.get("secondaryButton").toCSS()
                }),
                new StyleRule(element, ".am5-modal-button:hover", {
                    "background": ic.get("secondaryButtonHover").toCSS()
                }),
                new StyleRule(element, ".am5-modal-button.am5-modal-primary", {
                    "color": ic.get("primaryButtonText").toCSS(),
                    "border": "1px solid " + ic.get("primaryButtonStroke").toCSS(),
                    "background": ic.get("primaryButton").toCSS()
                }),
                new StyleRule(element, ".am5-modal-button.am5-modal-primary:hover", {
                    "background": ic.get("primaryButtonHover").toCSS()
                }),
            ]);
            rules = new CounterDisposer(function () {
                rules = undefined;
                disposer_1.dispose();
            });
        }
        return rules.increment();
    }
    /**
     * Used to display a modal dialog with HTML content.
     */
    var Modal = /** @class */ (function (_super) {
        __extends(Modal, _super);
        function Modal() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        //protected _currentPass: number = 0;
        Object.defineProperty(Modal.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                // Applying themes because this will not have parents
                _super.prototype._afterNewApplyThemes.call(this);
                // Load CSS
                modalCSS(getShadowRoot(this._root.dom), this._root);
                // Create elements
                var container = document.createElement("div");
                container.className = "am5-modal";
                container.style.display = "none";
                this.root._inner.appendChild(container);
                this.setPrivate("container", container);
                var curtain = document.createElement("div");
                curtain.className = "am5-modal-curtain";
                container.appendChild(curtain);
                this.setPrivate("curtain", curtain);
                addEventListener(curtain, "click", function () {
                    _this.cancel();
                });
                var wrapper = document.createElement("div");
                wrapper.className = "am5-modal-wrapper";
                container.appendChild(wrapper);
                this.setPrivate("wrapper", wrapper);
                var content = document.createElement("div");
                content.className = "am5-modal-content";
                wrapper.appendChild(content);
                this.setPrivate("content", content);
                var html = this.get("content");
                if (html) {
                    content.innerHTML = html;
                }
                // Close on ESC
                if (supports("keyboardevents")) {
                    this._disposers.push(addEventListener(document, "keydown", function (ev) {
                        if (_this.isOpen() && ev.keyCode == 27) {
                            _this.cancel();
                        }
                    }));
                }
            }
        });
        Object.defineProperty(Modal.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("content")) {
                    this.getPrivate("content").innerHTML = this.get("content", "");
                }
            }
        });
        /**
         * Returns `true` if modal is currently open.
         *
         * @return  Modal open?
         */
        Object.defineProperty(Modal.prototype, "isOpen", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.getPrivate("container").style.display != "none";
            }
        });
        /**
         * Opens modal.
         */
        Object.defineProperty(Modal.prototype, "open", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.getPrivate("container").style.display = "block";
                this.events.dispatch("opened", {
                    type: "opened",
                    target: this
                });
            }
        });
        /**
         * Closes modal.
         */
        Object.defineProperty(Modal.prototype, "close", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.getPrivate("container").style.display = "none";
                this.events.dispatch("closed", {
                    type: "closed",
                    target: this
                });
            }
        });
        /**
         * Closes modal and invokes `cancelled` event.
         */
        Object.defineProperty(Modal.prototype, "cancel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.getPrivate("container").style.display = "none";
                this.events.dispatch("cancelled", {
                    type: "cancelled",
                    target: this
                });
            }
        });
        /**
         * Disposes modal.
         */
        Object.defineProperty(Modal.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.dispose.call(this);
                this.root.dom.removeChild(this.getPrivate("container"));
            }
        });
        Object.defineProperty(Modal, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Modal"
        });
        Object.defineProperty(Modal, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Entity.classNames.concat([Modal.className])
        });
        return Modal;
    }(Entity));

    /**
     * A universal placeholder for bullet elements.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/bullets/} for more info
     */
    var Bullet = /** @class */ (function (_super) {
        __extends(Bullet, _super);
        function Bullet() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // used by MapPolygons where one data item can have multiple bullets of the same kind
            Object.defineProperty(_this, "_index", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * Target series object if it's a bullet for series.
             */
            Object.defineProperty(_this, "series", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(Bullet.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                // Applying themes because bullet will not have parent
                _super.prototype._afterNewApplyThemes.call(this);
            }
        });
        Object.defineProperty(Bullet.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("sprite")) {
                    var sprite = this.get("sprite");
                    if (sprite) {
                        sprite.setAll({ position: "absolute", role: "figure" });
                        this._disposers.push(sprite);
                    }
                }
                if (this.isDirty("locationX") || this.isDirty("locationY")) {
                    if (this.series) {
                        this.series._positionBullet(this);
                    }
                }
            }
        });
        Object.defineProperty(Bullet, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Bullet"
        });
        Object.defineProperty(Bullet, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Entity.classNames.concat([Bullet.className])
        });
        return Bullet;
    }(Entity));

    /**
     * Draws a rectangle with rounded corners.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     * @important
     */
    var RoundedRectangle = /** @class */ (function (_super) {
        __extends(RoundedRectangle, _super);
        function RoundedRectangle() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(RoundedRectangle.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("cornerRadiusTL") || this.isDirty("cornerRadiusTR") || this.isDirty("cornerRadiusBR") || this.isDirty("cornerRadiusBL")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(RoundedRectangle.prototype, "_draw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var width = this.width();
                var height = this.height();
                var w = width;
                var h = height;
                var wSign = w / Math.abs(width);
                var hSign = h / Math.abs(height);
                if (isNumber(w) && isNumber(h)) {
                    var minSide = Math.min(w, h) / 2;
                    var crtl = relativeToValue(this.get("cornerRadiusTL", 8), minSide);
                    var crtr = relativeToValue(this.get("cornerRadiusTR", 8), minSide);
                    var crbr = relativeToValue(this.get("cornerRadiusBR", 8), minSide);
                    var crbl = relativeToValue(this.get("cornerRadiusBL", 8), minSide);
                    var maxcr = Math.min(Math.abs(w / 2), Math.abs(h / 2));
                    crtl = fitToRange(crtl, 0, maxcr);
                    crtr = fitToRange(crtr, 0, maxcr);
                    crbr = fitToRange(crbr, 0, maxcr);
                    crbl = fitToRange(crbl, 0, maxcr);
                    this._display.moveTo(crtl * wSign, 0);
                    this._display.lineTo(w - crtr * wSign, 0);
                    if (crtr > 0) {
                        this._display.arcTo(w, 0, w, crtr * hSign, crtr);
                    }
                    this._display.lineTo(w, h - crbr * hSign);
                    if (crbr > 0) {
                        this._display.arcTo(w, h, w - crbr * wSign, h, crbr);
                    }
                    this._display.lineTo(crbl * wSign, h);
                    if (crbl > 0) {
                        this._display.arcTo(0, h, 0, h - crbl * hSign, crbl);
                    }
                    this._display.lineTo(0, crtl * hSign);
                    if (crtl > 0) {
                        this._display.arcTo(0, 0, crtl * wSign, 0, crtl);
                    }
                }
            }
        });
        Object.defineProperty(RoundedRectangle, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "RoundedRectangle"
        });
        Object.defineProperty(RoundedRectangle, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Rectangle.classNames.concat([RoundedRectangle.className])
        });
        return RoundedRectangle;
    }(Rectangle));

    /**
     * Draws an interactive button.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/buttons/} for more info
     * @important
     */
    var Button = /** @class */ (function (_super) {
        __extends(Button, _super);
        function Button() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Button.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["button"]);
                _super.prototype._afterNew.call(this);
                if (!this._settings.background) {
                    this.set("background", RoundedRectangle.new(this._root, {
                        themeTags: mergeTags(this._settings.themeTags, ["background"])
                    }));
                }
            }
        });
        Object.defineProperty(Button.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._prepareChildren.call(this);
                if (this.isDirty("icon")) {
                    var previous = this._prevSettings.icon;
                    var icon = this.get("icon");
                    if (icon !== previous) {
                        this._disposeProperty("icon");
                        if (previous) {
                            previous.dispose();
                        }
                        if (icon) {
                            this.children.push(icon);
                        }
                        this._prevSettings.icon = icon;
                    }
                }
                if (this.isDirty("label")) {
                    var previous = this._prevSettings.label;
                    var label = this.get("label");
                    if (label !== previous) {
                        this._disposeProperty("label");
                        if (previous) {
                            previous.dispose();
                        }
                        if (label) {
                            this.children.push(label);
                        }
                        this._prevSettings.label = label;
                    }
                }
            }
        });
        Object.defineProperty(Button, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Button"
        });
        Object.defineProperty(Button, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Container.classNames.concat([Button.className])
        });
        return Button;
    }(Container));

    /**
     * Draws a circle.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     * @important
     */
    var Circle = /** @class */ (function (_super) {
        __extends(Circle, _super);
        function Circle() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Circle.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("radius")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Circle.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear) {
                    this._display.drawCircle(0, 0, this.get("radius", 10));
                }
            }
        });
        Object.defineProperty(Circle, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Circle"
        });
        Object.defineProperty(Circle, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([Circle.className])
        });
        return Circle;
    }(Graphics));

    /**
     * Draws a Ellipse.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     * @important
     */
    var Ellipse = /** @class */ (function (_super) {
        __extends(Ellipse, _super);
        function Ellipse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Ellipse.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("radiusX") || this.isDirty("radiusY") || this.isDirty("rotation")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Ellipse.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear) {
                    this._display.drawEllipse(0, 0, Math.abs(this.get("radiusX")), Math.abs(this.get("radiusY")));
                }
            }
        });
        Object.defineProperty(Ellipse, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Ellipse"
        });
        Object.defineProperty(Ellipse, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([Ellipse.className])
        });
        return Ellipse;
    }(Graphics));

    /**
     * Draws a Star.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     * @important
     */
    var Star = /** @class */ (function (_super) {
        __extends(Star, _super);
        function Star() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Star.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("radius") || this.isDirty("innerRadius") || this.isDirty("spikes")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Star.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear) {
                    var display = this._display;
                    var r = this.get("radius", 0);
                    var ir = relativeToValue(this.get("innerRadius", 0), r);
                    var spikes = this.get("spikes", 0);
                    var step = Math.PI / spikes;
                    var angle = Math.PI / 2 * 3;
                    display.moveTo(0, -r);
                    for (var i = 0; i < spikes; i++) {
                        display.lineTo(Math.cos(angle) * r, Math.sin(angle) * r);
                        angle += step;
                        display.lineTo(Math.cos(angle) * ir, Math.sin(angle) * ir);
                        angle += step;
                    }
                    display.lineTo(0, -r);
                }
            }
        });
        Object.defineProperty(Star, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Star"
        });
        Object.defineProperty(Star, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([Star.className])
        });
        return Star;
    }(Graphics));

    /**
     * A [[List]] that holds components data.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/data/} for more info
     */
    var ListData = /** @class */ (function (_super) {
        __extends(ListData, _super);
        function ListData() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * An optional processor for data.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/data/#Pre_processing_data} for more info
             */
            Object.defineProperty(_this, "processor", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(ListData.prototype, "incrementRef", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        /**
         * @ignore
         */
        Object.defineProperty(ListData.prototype, "decrementRef", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        Object.defineProperty(ListData.prototype, "_onPush", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (newValue) {
                if (this.processor) {
                    this.processor.processRow(newValue);
                    //console.log(newValue)
                }
                _super.prototype._onPush.call(this, newValue);
            }
        });
        Object.defineProperty(ListData.prototype, "_onInsertIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, newValue) {
                if (this.processor) {
                    this.processor.processRow(newValue);
                }
                _super.prototype._onInsertIndex.call(this, index, newValue);
            }
        });
        Object.defineProperty(ListData.prototype, "_onSetIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, oldValue, newValue) {
                if (this.processor) {
                    this.processor.processRow(newValue);
                }
                _super.prototype._onSetIndex.call(this, index, oldValue, newValue);
            }
        });
        return ListData;
    }(List));
    /**
     * @deprecated
     * @todo remove
     */
    var JsonData = /** @class */ (function () {
        function JsonData(value) {
            Object.defineProperty(this, "processor", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_value", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this._value = value;
        }
        Object.defineProperty(JsonData.prototype, "incrementRef", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        Object.defineProperty(JsonData.prototype, "decrementRef", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        return JsonData;
    }());

    /**
     * A base element that holds data bit (data item) for any [[Component]].
     */
    var DataItem = /** @class */ (function (_super) {
        __extends(DataItem, _super);
        function DataItem(component, dataContext, settings) {
            var _this = _super.call(this, settings) || this;
            /**
             * A data item's owener [[Component]].
             */
            Object.defineProperty(_this, "component", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * A reference to actual item in source data this item is based on.
             */
            Object.defineProperty(_this, "dataContext", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * @todo requires description
             */
            Object.defineProperty(_this, "bullets", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * A set of "open" values.
             */
            Object.defineProperty(_this, "open", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * A set of "close" values.
             */
            Object.defineProperty(_this, "close", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this.dataContext = dataContext;
            _this.component = component;
            _this._settings.visible = true;
            _this._checkDirty();
            return _this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(DataItem.prototype, "markDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.component.markDirtyValues(this);
            }
        });
        Object.defineProperty(DataItem.prototype, "_startAnimation", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.component._root._addAnimation(this);
            }
        });
        Object.defineProperty(DataItem.prototype, "_animationTime", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.component._root.animationTime;
            }
        });
        Object.defineProperty(DataItem.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.component) {
                    this.component.disposeDataItem(this);
                }
                _super.prototype._dispose.call(this);
            }
        });
        /**
         * Shows a data item that's currently hidden.
         */
        Object.defineProperty(DataItem.prototype, "show", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (duration) {
                this.setRaw("visible", true);
                if (this.component) {
                    this.component.showDataItem(this, duration);
                }
            }
        });
        /**
         * Hides a data item that's currently visible.
         */
        Object.defineProperty(DataItem.prototype, "hide", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (duration) {
                this.setRaw("visible", false);
                if (this.component) {
                    this.component.hideDataItem(this, duration);
                }
            }
        });
        Object.defineProperty(DataItem.prototype, "isHidden", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return !this.get("visible");
            }
        });
        return DataItem;
    }(Settings));
    /**
     * A base class for elements that make use of data.
     */
    var Component = /** @class */ (function (_super) {
        __extends(Component, _super);
        function Component() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_data", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListData()
            });
            Object.defineProperty(_this, "_dataItems", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "_mainDataItems", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._dataItems
            });
            Object.defineProperty(_this, "valueFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "fields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: ["id"]
            });
            Object.defineProperty(_this, "_valueFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_valueFieldsF", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_fields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_fieldsF", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_valuesDirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_dataChanged", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_dataGrouped", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            /**
             * Indicates if the component has already been initialized.
             */
            Object.defineProperty(_this, "inited", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            return _this;
        }
        Object.defineProperty(Component.prototype, "data", {
            /**
             * @return  Data
             */
            get: function () {
                return this._data;
            },
            /**
             * Component's data.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/data/} for more info
             */
            set: function (data) {
                data.incrementRef();
                this._data.decrementRef();
                this._data = data;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Component.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._dispose.call(this);
                this._data.decrementRef();
            }
        });
        Object.defineProperty(Component.prototype, "_onDataClear", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        Object.defineProperty(Component.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._afterNew.call(this);
                this._data.incrementRef();
                this._updateFields();
                this._disposers.push(this.data.events.onAll(function (change) {
                    var dataItems = _this._mainDataItems;
                    _this.markDirtyValues();
                    _this._markDirtyGroup();
                    _this._dataChanged = true;
                    if (change.type === "clear") {
                        each$1(dataItems, function (dataItem) {
                            dataItem.dispose();
                        });
                        dataItems.length = 0;
                        _this._onDataClear();
                    }
                    else if (change.type === "push") {
                        var dataItem = new DataItem(_this, change.newValue, _this._makeDataItem(change.newValue));
                        dataItems.push(dataItem);
                        _this.processDataItem(dataItem);
                    }
                    else if (change.type === "setIndex") {
                        var dataItem_1 = dataItems[change.index];
                        var properties_1 = _this._makeDataItem(change.newValue);
                        keys(properties_1).forEach(function (key) {
                            dataItem_1.animate({
                                key: key,
                                to: properties_1[key],
                                duration: _this.get("interpolationDuration", 0),
                                easing: _this.get("interpolationEasing"),
                            });
                        });
                        dataItem_1.dataContext = change.newValue;
                    }
                    else if (change.type === "insertIndex") {
                        var dataItem = new DataItem(_this, change.newValue, _this._makeDataItem(change.newValue));
                        dataItems.splice(change.index, 0, dataItem);
                        _this.processDataItem(dataItem);
                    }
                    else if (change.type === "removeIndex") {
                        var dataItem = dataItems[change.index];
                        dataItem.dispose();
                        dataItems.splice(change.index, 1);
                    }
                    else if (change.type === "moveIndex") {
                        var dataItem = dataItems[change.oldIndex];
                        dataItems.splice(change.oldIndex, 1);
                        dataItems.splice(change.newIndex, 0, dataItem);
                    }
                    else {
                        throw new Error("Unknown IStreamEvent type");
                    }
                    _this._afterDataChange();
                }));
            }
        });
        Object.defineProperty(Component.prototype, "_updateFields", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                if (this.valueFields) {
                    this._valueFields = [];
                    this._valueFieldsF = {};
                    each$1(this.valueFields, function (key) {
                        var field = _this.get((key + "Field"));
                        if (field) {
                            _this._valueFields.push(key);
                            _this._valueFieldsF[key] = { fieldKey: key + "Field", workingKey: key + "Working" };
                        }
                    });
                }
                if (this.fields) {
                    this._fields = [];
                    this._fieldsF = {};
                    each$1(this.fields, function (key) {
                        var field = _this.get((key + "Field"));
                        if (field) {
                            _this._fields.push(key);
                            _this._fieldsF[key] = key + "Field";
                        }
                    });
                }
            }
        });
        Object.defineProperty(Component.prototype, "dataItems", {
            /**
             * A list of component's data items.
             *
             * @return  Data items
             */
            get: function () {
                return this._dataItems;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Component.prototype, "processDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem) { }
        });
        Object.defineProperty(Component.prototype, "_makeDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (data) {
                var _this = this;
                //const output: this["_dataItemSettings"] = {};
                var output = {}; // temporary to solve error
                if (this._valueFields) {
                    each$1(this._valueFields, function (key) {
                        var field = _this.get((_this._valueFieldsF[key].fieldKey));
                        output[key] = data[field];
                        output[_this._valueFieldsF[key].workingKey] = output[key];
                    });
                }
                if (this._fields) {
                    each$1(this._fields, function (key) {
                        var field = _this.get((_this._fieldsF[key]));
                        output[key] = data[field];
                    });
                }
                return output;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Component.prototype, "makeDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (data) {
                var dataItem = new DataItem(this, undefined, data);
                this.processDataItem(dataItem);
                return dataItem;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Component.prototype, "pushDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (data) {
                var dataItem = this.makeDataItem(data);
                this._mainDataItems.push(dataItem);
                return dataItem;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Component.prototype, "disposeDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem) { }
        });
        /**
         * Shows component's data item.
         *
         * @param   dataItem   Data item
         * @param   _duration  Animation duration in milliseconds
         * @return             Promise
         */
        Object.defineProperty(Component.prototype, "showDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, _duration) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        dataItem.set("visible", true);
                        return [2 /*return*/];
                    });
                });
            }
        });
        /**
         * Hides component's data item.
         *
         * @param   dataItem   Data item
         * @param   _duration  Animation duration in milliseconds
         * @return             Promise
         */
        Object.defineProperty(Component.prototype, "hideDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, _duration) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        dataItem.set("visible", false);
                        return [2 /*return*/];
                    });
                });
            }
        });
        Object.defineProperty(Component.prototype, "_clearDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._clearDirty.call(this);
                this._valuesDirty = false;
            }
        });
        Object.defineProperty(Component.prototype, "_afterDataChange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        Object.defineProperty(Component.prototype, "_afterChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._afterChanged.call(this);
                if (this._dataChanged) {
                    var type = "datavalidated";
                    if (this.events.isEnabled(type)) {
                        this.events.dispatch(type, { type: type, target: this });
                    }
                    this._dataChanged = false;
                }
                this.inited = true;
            }
        });
        /**
         * Forces a repaint of the element which relies on data.
         *
         * @since 5.0.21
         */
        Object.defineProperty(Component.prototype, "markDirtyValues", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem) {
                this.markDirty();
                this._valuesDirty = true;
            }
        });
        Object.defineProperty(Component.prototype, "_markDirtyGroup", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._dataGrouped = false;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Component.prototype, "markDirtySize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._sizeDirty = true;
                this.markDirty();
            }
        });
        Object.defineProperty(Component, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Component"
        });
        Object.defineProperty(Component, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Container.classNames.concat([Component.className])
        });
        return Component;
    }(Container));

    /**
     * Base class for gradients.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info
     */
    var Gradient = /** @class */ (function (_super) {
        __extends(Gradient, _super);
        function Gradient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Gradient.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                // Applying themes because gradient will not have parent
                _super.prototype._afterNewApplyThemes.call(this);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Gradient.prototype, "getFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_target) {
                return {
                    addColorStop: function (_offset, _color) { }
                };
            }
        });
        Object.defineProperty(Gradient.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                //if (this.isDirty("target") && this.get("target")) {
                //	this.get("target")!.events.on("boundschanged", () => {
                //	});
                //}
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Gradient.prototype, "getBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                var gradientTarget = this.get("target");
                if (gradientTarget) {
                    var bounds = gradientTarget.globalBounds();
                    var p0 = target.toLocal({ x: bounds.left, y: bounds.top });
                    var p1 = target.toLocal({ x: bounds.right, y: bounds.top });
                    var p2 = target.toLocal({ x: bounds.right, y: bounds.bottom });
                    var p3 = target.toLocal({ x: bounds.left, y: bounds.bottom });
                    return {
                        left: Math.min(p0.x, p1.x, p2.x, p3.x),
                        top: Math.min(p0.y, p1.y, p2.y, p3.y),
                        right: Math.max(p0.x, p1.x, p2.x, p3.x),
                        bottom: Math.max(p0.y, p1.y, p2.y, p3.y)
                    };
                }
                return target._display.getLocalBounds();
            }
        });
        Object.defineProperty(Gradient, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Gradient"
        });
        Object.defineProperty(Gradient, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Entity.classNames.concat([Gradient.className])
        });
        return Gradient;
    }(Entity));

    /**
     * Linear gradient.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info
     */
    var LinearGradient = /** @class */ (function (_super) {
        __extends(LinearGradient, _super);
        function LinearGradient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(LinearGradient.prototype, "getFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                var rotation = this.get("rotation", 0);
                var bounds = this.getBounds(target);
                var l = bounds.left || 0;
                var r = bounds.right || 0;
                var t = bounds.top || 0;
                var b = bounds.bottom || 0;
                var cos = cos$1(rotation);
                var sin = sin$1(rotation);
                var w = cos * (r - l);
                var h = sin * (b - t);
                var longer = Math.max(w, h);
                var gradient = this._root._renderer.createLinearGradient(l, t, l + longer * cos, t + longer * sin);
                var stops = this.get("stops");
                if (stops) {
                    var i_1 = 0;
                    each$1(stops, function (stop) {
                        var offset = stop.offset;
                        if (!isNumber(offset)) {
                            offset = i_1 / (stops.length - 1);
                        }
                        var opacity = stop.opacity;
                        if (!isNumber(opacity)) {
                            opacity = 1;
                        }
                        var color = stop.color;
                        if (color) {
                            var lighten = stop.lighten;
                            if (lighten) {
                                color = Color.lighten(color, lighten);
                            }
                            var brighten = stop.brighten;
                            if (brighten) {
                                color = Color.brighten(color, brighten);
                            }
                            gradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');
                        }
                        i_1++;
                    });
                }
                return gradient;
            }
        });
        Object.defineProperty(LinearGradient, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "LinearGradient"
        });
        Object.defineProperty(LinearGradient, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Gradient.classNames.concat([LinearGradient.className])
        });
        return LinearGradient;
    }(Gradient));

    /**
     * Heat legend.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/legend/heat-legend/} for more info
     */
    var HeatLegend = /** @class */ (function (_super) {
        __extends(HeatLegend, _super);
        function HeatLegend() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * A [[Container]] that all labels are placed in.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "labelContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Container.new(_this._root, {}))
            });
            /**
             * A [[Container]] that all markers are placed in.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "markerContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Container.new(_this._root, {}))
            });
            /**
             * A start [[Label]].
             *
             * @default Label.new()
             */
            Object.defineProperty(_this, "startLabel", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.labelContainer.children.push(Label.new(_this._root, { themeTags: ["start"] }))
            });
            /**
             * An end [[Label]].
             *
             * @default Label.new()
             */
            Object.defineProperty(_this, "endLabel", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.labelContainer.children.push(Label.new(_this._root, { themeTags: ["end"] }))
            });
            /**
             * List of rectangle elements used for default legend markers.
             *
             * @default new ListTemplate<RoundedRectangle>
             */
            Object.defineProperty(_this, "markers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return RoundedRectangle._new(_this._root, {
                    themeTags: mergeTags(_this.markers.template.get("themeTags", []), [_this.get("orientation"), "heatlegend", "marker"])
                }, [_this.markers.template]); })
            });
            return _this;
        }
        Object.defineProperty(HeatLegend.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["heatlegend", this._settings.orientation]);
                _super.prototype._afterNew.call(this);
                this.set("tooltip", Tooltip.new(this._root, {
                    themeTags: ["heatlegend"]
                }));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(HeatLegend.prototype, "makeMarker", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var marker = this.markers.make();
                marker.states.create("disabled", {});
                return marker;
            }
        });
        /**
         * Moves and shows tooltip at specific value.
         *
         * Can also specify optional text to show in tooltip, as well as the color.
         *
         * @param  value  Value
         * @param  text   Text
         * @param  color  Color
         */
        Object.defineProperty(HeatLegend.prototype, "showValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, text, color) {
                var tooltip = this.getTooltip();
                if (tooltip && isNumber(value)) {
                    var startValue = this.get("startValue", 0);
                    var endValue = this.get("endValue", 1);
                    var c = (value - startValue) / (endValue - startValue);
                    var startColor = this.get("startColor");
                    var endColor = this.get("endColor");
                    if (!text) {
                        text = this.getNumberFormatter().format(value);
                    }
                    if (!color) {
                        color = Color.interpolate(c, startColor, endColor);
                    }
                    tooltip.label.set("text", text);
                    var p = void 0;
                    if (this.get("orientation") == "vertical") {
                        p = this.markerContainer.toGlobal({ x: 0, y: this.innerHeight() * (1 - c) });
                    }
                    else {
                        p = this.markerContainer.toGlobal({ x: this.innerWidth() * c, y: 0 });
                    }
                    var background = tooltip.get("background");
                    if (background) {
                        background.set("fill", Color.interpolate(c, startColor, endColor));
                    }
                    tooltip.set("pointTo", p);
                    tooltip.show();
                }
            }
        });
        Object.defineProperty(HeatLegend.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._prepareChildren.call(this);
                var labelContainer = this.labelContainer;
                var orientation = this.get("orientation");
                var startLabel = this.startLabel;
                var endLabel = this.endLabel;
                var tooltip = this.getTooltip();
                if (this.isDirty("orientation")) {
                    if (orientation == "vertical") {
                        this.markerContainer.setAll({ layout: this._root.verticalLayout, height: p100 });
                        this.set("layout", this._root.horizontalLayout);
                        startLabel.setAll({ y: p100, x: undefined, centerY: p100, centerX: p100 });
                        endLabel.setAll({ y: 0, x: undefined, centerY: 0, centerX: p100 });
                        labelContainer.setAll({ height: p100, width: undefined });
                        if (tooltip) {
                            tooltip.set("pointerOrientation", "horizontal");
                        }
                    }
                    else {
                        this.markerContainer.setAll({ layout: this._root.horizontalLayout, width: p100 });
                        this.set("layout", this._root.verticalLayout);
                        startLabel.setAll({ x: 0, y: undefined, centerX: 0, centerY: 0 });
                        endLabel.setAll({ x: p100, y: undefined, centerX: p100, centerY: 0 });
                        labelContainer.setAll({ width: p100, height: undefined });
                        if (tooltip) {
                            tooltip.set("pointerOrientation", "vertical");
                        }
                    }
                }
                if (this.isDirty("stepCount")) {
                    var stepCount = this.get("stepCount", 1);
                    var startColor = this.get("startColor");
                    var endColor = this.get("endColor");
                    this.markerContainer.children.clear();
                    if (stepCount > 1) {
                        for (var i = 0; i < stepCount; i++) {
                            var marker = this.makeMarker();
                            if (orientation == "vertical") {
                                this.markerContainer.children.moveValue(marker, 0);
                            }
                            else {
                                this.markerContainer.children.push(marker);
                            }
                            if (startColor && endColor) {
                                marker.set("fill", Color.interpolate(i / stepCount, startColor, endColor));
                            }
                        }
                    }
                    else if (stepCount == 1) {
                        var marker = this.makeMarker();
                        this.markerContainer.children.push(marker);
                        var gradient = LinearGradient.new(this._root, { stops: [{ color: startColor }, { color: endColor }] });
                        if (orientation == "vertical") {
                            gradient.set("rotation", 90);
                            var stops = gradient.get("stops");
                            if (stops) {
                                stops.reverse();
                            }
                        }
                        else {
                            gradient.set("rotation", 0);
                        }
                        if (startColor && endColor) {
                            marker.set("fillGradient", gradient);
                        }
                    }
                }
                if (this.isDirty("startText") || this.isDirty("startValue")) {
                    startLabel.set("text", this.get("startText", this.getNumberFormatter().format(this.get("startValue", 0))));
                }
                if (this.isDirty("endText") || this.isDirty("endValue")) {
                    endLabel.set("text", this.get("endText", this.getNumberFormatter().format(this.get("endValue", 1))));
                }
            }
        });
        Object.defineProperty(HeatLegend, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "HeatLegend"
        });
        Object.defineProperty(HeatLegend, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Container.classNames.concat([HeatLegend.className])
        });
        return HeatLegend;
    }(Container));

    /**
     * Returns a `Promise` which can be used to execute code after number of
     * milliseconds.
     *
     * @param   ms  Sleep duration in ms
     * @return      Promise
     */
    function sleep(ms) {
        return new Promise(function (resolve, _reject) {
            setTimeout(resolve, ms);
        });
    }
    /**
     * Maps time period names to their numeric representations in milliseconds.
     *
     * @ignore Exclude from docs
     */
    var timeUnitDurations = {
        millisecond: 1,
        second: 1000,
        minute: 60000,
        hour: 3600000,
        day: 86400000,
        week: 604800000,
        month: 365.242 / 12 * 86400000,
        year: 31536000000
    };
    /**
     * Returns the next time unit that goes after source `unit`.
     *
     * E.g. "hour" is the next unit after "minute", etc.
     *
     * @ignore Exclude from docs
     * @param unit  Source time unit
     * @return Next time unit
     */
    function getNextUnit(unit) {
        switch (unit) {
            case "year":
                return;
            case "month":
                return "year";
            case "week":
                return "month";
            case "day":
                return "month"; // not a mistake
            case "hour":
                return "day";
            case "minute":
                return "hour";
            case "second":
                return "minute";
            case "millisecond":
                return "second";
        }
    }
    /**
     * Returns number of milliseconds in the `count` of time `unit`.
     *
     * Available units: "millisecond", "second", "minute", "hour", "day", "week",
     * "month", and "year".
     *
     * @param unit   Time unit
     * @param count  Number of units
     * @return Milliseconds
     */
    function getDuration(unit, count) {
        if (count == null) {
            count = 1;
        }
        return timeUnitDurations[unit] * count;
    }
    /**
     * @ignore
     */
    function getIntervalDuration(interval) {
        if (interval) {
            return timeUnitDurations[interval.timeUnit] * interval.count;
        }
        return 0;
    }
    function getDateIntervalDuration(interval, date, firstDateOfWeek, utc, timezone) {
        var unit = interval.timeUnit;
        var count = interval.count;
        if (unit == "hour" || unit == "minute" || unit == "second" || unit == "millisecond") {
            return timeUnitDurations[interval.timeUnit] * interval.count;
        }
        else {
            var firstTime = round(new Date(date.getTime()), unit, count, firstDateOfWeek, utc, undefined, timezone).getTime();
            var lastTime = add(new Date(firstTime), unit, count, utc).getTime();
            return lastTime - firstTime;
        }
    }
    /**
     * Returns current `Date` object.
     *
     * @return Current date
     */
    function now() {
        return new Date();
    }
    /**
     * Returns current timestamp.
     *
     * @return Current timestamp
     */
    function getTime() {
        return now().getTime();
    }
    /**
     * Returns a copy of the `Date` object.
     *
     * @param date  Source date
     * @return Copy
     */
    function copy(date) {
        return new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3
    }
    /**
     * Checks if the `unit` part of two `Date` objects do not match. Two dates
     * represent a "range" of time, rather the same time date.
     *
     * @param timeOne  timestamp
     * @param timeTwo  timestamp
     * @param unit     Time unit to check
     * @return Range?
     */
    function checkChange(timeOne, timeTwo, unit, utc, timezone) {
        // quick
        if ((timeTwo - timeOne) > getDuration(unit, 1.2)) {
            return true;
        }
        var dateOne = new Date(timeOne);
        var dateTwo = new Date(timeTwo);
        if (timezone) {
            dateOne = timezone.convertLocal(dateOne);
            dateTwo = timezone.convertLocal(dateTwo);
        }
        var timeZoneOffset1 = 0;
        var timeZoneOffset2 = 0;
        if (!utc && unit != "millisecond") {
            timeZoneOffset1 = dateOne.getTimezoneOffset();
            dateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);
            timeZoneOffset2 = dateTwo.getTimezoneOffset();
            dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);
        }
        var changed = false;
        switch (unit) {
            case "year":
                if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {
                    changed = true;
                }
                break;
            case "month":
                if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {
                    changed = true;
                }
                else if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {
                    changed = true;
                }
                break;
            case "day":
                if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {
                    changed = true;
                }
                else if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {
                    changed = true;
                }
                break;
            case "hour":
                if (dateOne.getUTCHours() != dateTwo.getUTCHours()) {
                    changed = true;
                }
                break;
            case "minute":
                if (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {
                    changed = true;
                }
                break;
            case "second":
                if (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {
                    changed = true;
                }
                break;
            case "millisecond":
                if (dateOne.getTime() != dateTwo.getTime()) {
                    changed = true;
                }
                break;
        }
        if (changed) {
            return changed;
        }
        var nextUnit = getNextUnit(unit);
        if (nextUnit) {
            return checkChange(timeOne, timeTwo, nextUnit, utc, timezone);
        }
        else {
            return false;
        }
    }
    /**
     * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.
     *
     * @param date   Source date
     * @param unit   Time unit
     * @param count  Number of units to add
     * @return Modified date
     */
    function add(date, unit, count, utc) {
        var timeZoneOffset = 0;
        if (!utc && unit != "millisecond") {
            timeZoneOffset = date.getTimezoneOffset();
            date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);
        }
        switch (unit) {
            case "day":
                var day = date.getUTCDate();
                date.setUTCDate(day + count);
                break;
            case "second":
                var seconds = date.getUTCSeconds();
                date.setUTCSeconds(seconds + count);
                break;
            case "millisecond":
                var milliseconds = date.getUTCMilliseconds();
                date.setUTCMilliseconds(milliseconds + count);
                break;
            case "hour":
                var hours = date.getUTCHours();
                date.setUTCHours(hours + count);
                break;
            case "minute":
                var minutes = date.getUTCMinutes();
                date.setUTCMinutes(minutes + count);
                break;
            case "year":
                var year = date.getUTCFullYear();
                date.setUTCFullYear(year + count);
                break;
            case "month":
                var month = date.getUTCMonth();
                date.setUTCMonth(month + count);
                break;
            case "week":
                var wday = date.getUTCDate();
                date.setUTCDate(wday + count * 7);
                break;
        }
        if (!utc && unit != "millisecond") {
            date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);
            if (unit == "day" || unit == "week" || unit == "month" || unit == "year") {
                var newTimeZoneOffset = date.getTimezoneOffset();
                if (newTimeZoneOffset != timeZoneOffset) {
                    var diff = newTimeZoneOffset - timeZoneOffset;
                    date.setUTCMinutes(date.getUTCMinutes() + diff);
                    // solves issues if newe time falls back to old time zone
                    if (date.getTimezoneOffset() != newTimeZoneOffset) {
                        date.setUTCMinutes(date.getUTCMinutes() - diff);
                    }
                }
            }
        }
        return date;
    }
    /**
     * "Rounds" the date to specific time unit.
     *
     * @param date             Source date
     * @param unit             Time unit
     * @param count            Number of units to round to
     * @param firstDateOfWeek  First day of week
     * @param utc              Use UTC timezone
     * @param firstDate        First date to round to
     * @param roundMinutes     Minutes to round to (some timezones use non-whole hour)
     * @param timezone         Use specific named timezone when rounding
     * @return New date
     */
    function round(date, unit, count, firstDateOfWeek, utc, firstDate, timezone) {
        if (!timezone || utc) {
            var timeZoneOffset = 0;
            if (!utc && unit != "millisecond") {
                timeZoneOffset = date.getTimezoneOffset();
                date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);
            }
            switch (unit) {
                case "day":
                    var day = date.getUTCDate();
                    if (count > 1) {
                        //	day = Math.floor(day / count) * count;
                        if (firstDate) {
                            firstDate = round(firstDate, "day", 1);
                            var difference = date.getTime() - firstDate.getTime();
                            var unitCount = Math.floor(difference / getDuration("day") / count);
                            var duration = getDuration("day", unitCount * count);
                            date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration("minute"));
                        }
                    }
                    else {
                        date.setUTCDate(day);
                    }
                    date.setUTCHours(0, 0, 0, 0);
                    break;
                case "second":
                    var seconds = date.getUTCSeconds();
                    if (count > 1) {
                        seconds = Math.floor(seconds / count) * count;
                    }
                    date.setUTCSeconds(seconds, 0);
                    break;
                case "millisecond":
                    if (count == 1) {
                        return date; // much better for perf!
                    }
                    var milliseconds = date.getUTCMilliseconds();
                    milliseconds = Math.floor(milliseconds / count) * count;
                    date.setUTCMilliseconds(milliseconds);
                    break;
                case "hour":
                    var hours = date.getUTCHours();
                    if (count > 1) {
                        hours = Math.floor(hours / count) * count;
                    }
                    date.setUTCHours(hours, 0, 0, 0);
                    break;
                case "minute":
                    var minutes = date.getUTCMinutes();
                    milliseconds = date.getUTCMilliseconds();
                    if (count > 1) {
                        minutes = Math.floor(minutes / count) * count;
                    }
                    date.setUTCMinutes(minutes, 0, 0);
                    break;
                case "month":
                    var month = date.getUTCMonth();
                    if (count > 1) {
                        month = Math.floor(month / count) * count;
                    }
                    date.setUTCMonth(month, 1);
                    date.setUTCHours(0, 0, 0, 0);
                    break;
                case "year":
                    var year = date.getUTCFullYear();
                    if (count > 1) {
                        year = Math.floor(year / count) * count;
                    }
                    date.setUTCFullYear(year, 0, 1);
                    date.setUTCHours(0, 0, 0, 0);
                    break;
                case "week":
                    var wday = date.getUTCDate();
                    var weekDay = date.getUTCDay();
                    if (!isNumber(firstDateOfWeek)) {
                        firstDateOfWeek = 1;
                    }
                    if (weekDay >= firstDateOfWeek) {
                        wday = wday - weekDay + firstDateOfWeek;
                    }
                    else {
                        wday = wday - (7 + weekDay) + firstDateOfWeek;
                    }
                    date.setUTCDate(wday);
                    date.setUTCHours(0, 0, 0, 0);
                    break;
            }
            if (!utc && unit != "millisecond") {
                date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);
                if (unit == "day" || unit == "week" || unit == "month" || unit == "year") {
                    var newTimeZoneOffset = date.getTimezoneOffset();
                    if (newTimeZoneOffset != timeZoneOffset) {
                        var diff = newTimeZoneOffset - timeZoneOffset;
                        date.setUTCMinutes(date.getUTCMinutes() + diff);
                    }
                }
            }
            return date;
        }
        else {
            var tzoffset = timezone.offsetUTC(date);
            var timeZoneOffset = date.getTimezoneOffset();
            var parsedDate = timezone.parseDate(date);
            var year = parsedDate.year;
            var month = parsedDate.month;
            var day = parsedDate.day;
            var hour = parsedDate.hour;
            var minute = parsedDate.minute;
            var second = parsedDate.second;
            var millisecond = parsedDate.millisecond;
            var weekday = parsedDate.weekday;
            switch (unit) {
                case "day":
                    if (firstDate) {
                        firstDate = round(firstDate, "day", 1);
                        var difference = date.getTime() - firstDate.getTime();
                        var unitCount = Math.floor(difference / getDuration("day") / count);
                        var duration = getDuration("day", unitCount * count);
                        date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration("minute"));
                        parsedDate = timezone.parseDate(date);
                        year = parsedDate.year;
                        month = parsedDate.month;
                        day = parsedDate.day;
                    }
                    hour = 0;
                    minute = 0;
                    second = 0;
                    millisecond = 0;
                    break;
                case "second":
                    if (count > 1) {
                        second = Math.floor(second / count) * count;
                    }
                    millisecond = 0;
                    break;
                case "millisecond":
                    if (count > 1) {
                        millisecond = Math.floor(millisecond / count) * count;
                    }
                    break;
                case "hour":
                    if (count > 1) {
                        hour = Math.floor(hour / count) * count;
                    }
                    minute = 0;
                    second = 0;
                    millisecond = 0;
                    break;
                case "minute":
                    if (count > 1) {
                        minute = Math.floor(minute / count) * count;
                    }
                    second = 0;
                    millisecond = 0;
                    break;
                case "month":
                    if (count > 1) {
                        month = Math.floor(month / count) * count;
                    }
                    day = 1;
                    hour = 0;
                    minute = 0;
                    second = 0;
                    millisecond = 0;
                    break;
                case "year":
                    if (count > 1) {
                        year = Math.floor(year / count) * count;
                    }
                    month = 0;
                    day = 1;
                    hour = 0;
                    minute = 0;
                    second = 0;
                    millisecond = 0;
                    break;
                case "week":
                    if (!isNumber(firstDateOfWeek)) {
                        firstDateOfWeek = 1;
                    }
                    if (weekday >= firstDateOfWeek) {
                        day = day - weekday + firstDateOfWeek;
                    }
                    else {
                        day = day - (7 + weekday) + firstDateOfWeek;
                    }
                    hour = 0;
                    minute = 0;
                    second = 0;
                    millisecond = 0;
                    break;
            }
            minute += tzoffset - timeZoneOffset;
            date = new Date(year, month, day, hour, minute, second, millisecond);
            var newOffset = date.getTimezoneOffset();
            if (newOffset != timeZoneOffset) {
                date.setTime(date.getTime() + (timeZoneOffset - newOffset) * 60000);
            }
            return date;
        }
    }
    /**
     * @ignore
     */
    function chooseInterval(index, duration, gridCount, intervals) {
        var gridInterval = intervals[index];
        var intervalDuration = getIntervalDuration(gridInterval);
        var lastIndex = intervals.length - 1;
        if (index >= lastIndex) {
            return __assign({}, intervals[lastIndex]);
        }
        var count = Math.ceil(duration / intervalDuration);
        if (duration < intervalDuration && index > 0) {
            return __assign({}, intervals[index - 1]);
        }
        if (count <= gridCount) {
            return __assign({}, intervals[index]);
        }
        else {
            if (index + 1 < intervals.length) {
                return chooseInterval(index + 1, duration, gridCount, intervals);
            }
            else {
                return __assign({}, intervals[index]);
            }
        }
    }
    /**
     * @ignore
     */
    function getUnitValue(date, unit) {
        switch (unit) {
            case "day":
                return date.getDate();
            case "second":
                return date.getSeconds();
            case "millisecond":
                return date.getMilliseconds();
            case "hour":
                return date.getHours();
            case "minute":
                return date.getMinutes();
            case "month":
                return date.getMonth();
            case "year":
                return date.getFullYear();
            case "week":
                return getWeek(date);
        }
    }

    var Time = /*#__PURE__*/Object.freeze({
        __proto__: null,
        sleep: sleep,
        timeUnitDurations: timeUnitDurations,
        getNextUnit: getNextUnit,
        getDuration: getDuration,
        getIntervalDuration: getIntervalDuration,
        getDateIntervalDuration: getDateIntervalDuration,
        now: now,
        getTime: getTime,
        copy: copy,
        checkChange: checkChange,
        add: add,
        round: round,
        chooseInterval: chooseInterval,
        getUnitValue: getUnitValue
    });

    /**
     * A base class for all series.
     */
    var Series = /** @class */ (function (_super) {
        __extends(Series, _super);
        function Series() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_aggregatesCalculated", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_selectionAggregatesCalculated", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_dataProcessed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_psi", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_pei", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * A chart series belongs to.
             */
            Object.defineProperty(_this, "chart", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * List of bullets to use for the series.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/bullets/} for more info
             */
            Object.defineProperty(_this, "bullets", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new List()
            });
            /**
             * A [[Container]] series' bullets are stored in.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "bulletsContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: Container.new(_this._root, { width: p100, height: p100, position: "absolute" })
            });
            return _this;
        }
        Object.defineProperty(Series.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this.valueFields.push("value");
                _super.prototype._afterNew.call(this);
                this.setPrivate("customData", {});
                this._disposers.push(this.bullets.events.onAll(function (change) {
                    if (change.type === "clear") {
                        _this._handleBullets(_this.dataItems);
                    }
                    else if (change.type === "push") {
                        _this._handleBullets(_this.dataItems);
                    }
                    else if (change.type === "setIndex") {
                        _this._handleBullets(_this.dataItems);
                    }
                    else if (change.type === "insertIndex") {
                        _this._handleBullets(_this.dataItems);
                    }
                    else if (change.type === "removeIndex") {
                        _this._handleBullets(_this.dataItems);
                    }
                    else if (change.type === "moveIndex") {
                        _this._handleBullets(_this.dataItems);
                    }
                    else {
                        throw new Error("Unknown IListEvent type");
                    }
                }));
            }
        });
        Object.defineProperty(Series.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.bulletsContainer.dispose(); // can be in a different parent
                _super.prototype._dispose.call(this);
            }
        });
        Object.defineProperty(Series.prototype, "startIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var len = this.dataItems.length;
                return Math.min(this.getPrivate("startIndex", 0), len);
            }
        });
        Object.defineProperty(Series.prototype, "endIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var len = this.dataItems.length;
                return Math.min(this.getPrivate("endIndex", len), len);
            }
        });
        Object.defineProperty(Series.prototype, "_handleBullets", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItems) {
                each$1(dataItems, function (dataItem) {
                    var bullets = dataItem.bullets;
                    if (bullets) {
                        each$1(bullets, function (bullet) {
                            bullet.dispose();
                        });
                        dataItem.bullets = undefined;
                    }
                });
                this.markDirtyValues();
            }
        });
        /**
         * Looks up and returns a data item by its ID.
         *
         * @param   id  ID
         * @return      Data item
         */
        Object.defineProperty(Series.prototype, "getDataItemById", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (id) {
                return find(this.dataItems, function (dataItem) {
                    return dataItem.get("id") == id;
                });
            }
        });
        Object.defineProperty(Series.prototype, "_makeBullets", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var _this = this;
                if (this._shouldMakeBullet(dataItem)) {
                    dataItem.bullets = [];
                    this.bullets.each(function (bulletFunction) {
                        _this._makeBullet(dataItem, bulletFunction);
                    });
                }
            }
        });
        Object.defineProperty(Series.prototype, "_shouldMakeBullet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem) {
                return true;
            }
        });
        Object.defineProperty(Series.prototype, "_makeBullet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, bulletFunction, index) {
                var bullet = bulletFunction(this._root, this, dataItem);
                if (bullet) {
                    var sprite = bullet.get("sprite");
                    if (sprite) {
                        sprite._setDataItem(dataItem);
                        sprite.setRaw("position", "absolute");
                        this.bulletsContainer.children.push(sprite);
                    }
                    bullet._index = index;
                    bullet.series = this;
                    dataItem.bullets.push(bullet);
                }
                return bullet;
            }
        });
        Object.defineProperty(Series.prototype, "_clearDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._clearDirty.call(this);
                this._aggregatesCalculated = false;
                this._selectionAggregatesCalculated = false;
            }
        });
        Object.defineProperty(Series.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._prepareChildren.call(this);
                var startIndex = this.startIndex();
                var endIndex = this.endIndex();
                if (this.isPrivateDirty("baseValueSeries")) {
                    var baseValueSeries = this.getPrivate("baseValueSeries");
                    if (baseValueSeries) {
                        this._disposers.push(baseValueSeries.onPrivate("startIndex", function () {
                            _this.markDirtyValues();
                        }));
                    }
                }
                var calculateAggregates = this.get("calculateAggregates");
                if (calculateAggregates) {
                    if (this._valuesDirty && !this._dataProcessed) {
                        if (!this._aggregatesCalculated) {
                            this._calculateAggregates(0, this.dataItems.length);
                            this._aggregatesCalculated = true;
                        }
                    }
                    if ((this._psi != startIndex || this._pei != endIndex) && !this._selectionAggregatesCalculated) {
                        if (startIndex === 0 && endIndex === this.dataItems.length && this._aggregatesCalculated) ;
                        else {
                            this._calculateAggregates(startIndex, endIndex);
                        }
                        this._selectionAggregatesCalculated = true;
                    }
                }
                if (this.isDirty("tooltip")) {
                    var tooltip = this.get("tooltip");
                    if (tooltip) {
                        tooltip.hide(0);
                        tooltip.set("tooltipTarget", this);
                    }
                }
                if (this.isDirty("fill") || this.isDirty("stroke")) {
                    var markerRectangle = void 0;
                    var legendDataItem = this.get("legendDataItem");
                    if (legendDataItem) {
                        markerRectangle = legendDataItem.get("markerRectangle");
                        if (markerRectangle) {
                            if (this.isVisible()) {
                                if (this.isDirty("stroke")) {
                                    var stroke = this.get("stroke");
                                    markerRectangle.set("stroke", stroke);
                                }
                                if (this.isDirty("fill")) {
                                    var fill = this.get("fill");
                                    markerRectangle.set("fill", fill);
                                }
                            }
                        }
                    }
                    this.updateLegendMarker(undefined);
                }
                if (this.bullets.length > 0) {
                    var startIndex_1 = this.startIndex();
                    var endIndex_1 = this.endIndex();
                    for (var i = startIndex_1; i < endIndex_1; i++) {
                        var dataItem = this.dataItems[i];
                        if (!dataItem.bullets) {
                            this._makeBullets(dataItem);
                        }
                    }
                }
            }
        });
        Object.defineProperty(Series.prototype, "_calculateAggregates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (startIndex, endIndex) {
                var _this = this;
                var fields = this._valueFields;
                if (!fields) {
                    throw new Error("No value fields are set for the series.");
                }
                var sum = {};
                var absSum = {};
                var count = {};
                var low = {};
                var high = {};
                var open = {};
                var close = {};
                var average = {};
                var previous = {};
                each$1(fields, function (key) {
                    sum[key] = 0;
                    absSum[key] = 0;
                    count[key] = 0;
                });
                each$1(fields, function (key) {
                    var change = key + "Change";
                    var changePercent = key + "ChangePercent";
                    var changePrevious = key + "ChangePrevious";
                    var changePreviousPercent = key + "ChangePreviousPercent";
                    var changeSelection = key + "ChangeSelection";
                    var changeSelectionPercent = key + "ChangeSelectionPercent";
                    var openKey = "valueY";
                    if (key == "valueX" || key == "openValueX" || key == "lowValueX" || key == "highValueX") {
                        openKey = "valueX";
                    }
                    var baseValueSeries = _this.getPrivate("baseValueSeries");
                    for (var i = startIndex; i < endIndex; i++) {
                        var dataItem = _this.dataItems[i];
                        var value = dataItem.get(key);
                        if (value != null) {
                            count[key]++;
                            sum[key] += value;
                            absSum[key] += Math.abs(value);
                            average[key] = sum[key] / count[key];
                            if (low[key] > value || low[key] == null) {
                                low[key] = value;
                            }
                            if (high[key] < value || high[key] == null) {
                                high[key] = value;
                            }
                            close[key] = value;
                            if (open[key] == null) {
                                open[key] = value;
                                previous[key] = value;
                                if (baseValueSeries) {
                                    open[openKey] = baseValueSeries._getBase(openKey);
                                }
                            }
                            if (startIndex === 0) {
                                dataItem.setRaw((change), value - open[openKey]);
                                dataItem.setRaw((changePercent), (value - open[openKey]) / open[openKey] * 100);
                            }
                            dataItem.setRaw((changePrevious), value - previous[openKey]);
                            dataItem.setRaw((changePreviousPercent), (value - previous[openKey]) / previous[openKey] * 100);
                            dataItem.setRaw((changeSelection), value - open[openKey]);
                            dataItem.setRaw((changeSelectionPercent), (value - open[openKey]) / open[openKey] * 100);
                            previous[key] = value;
                        }
                    }
                });
                each$1(fields, function (key) {
                    _this.setPrivate((key + "AverageSelection"), average[key]);
                    _this.setPrivate((key + "CountSelection"), count[key]);
                    _this.setPrivate((key + "SumSelection"), sum[key]);
                    _this.setPrivate((key + "AbsoluteSumSelection"), absSum[key]);
                    _this.setPrivate((key + "LowSelection"), low[key]);
                    _this.setPrivate((key + "HighSelection"), high[key]);
                    _this.setPrivate((key + "OpenSelection"), open[key]);
                    _this.setPrivate((key + "CloseSelection"), close[key]);
                });
                if (startIndex === 0 && endIndex === this.dataItems.length) {
                    each$1(fields, function (key) {
                        _this.setPrivate((key + "Average"), average[key]);
                        _this.setPrivate((key + "Count"), count[key]);
                        _this.setPrivate((key + "Sum"), sum[key]);
                        _this.setPrivate((key + "AbsoluteSum"), absSum[key]);
                        _this.setPrivate((key + "Low"), low[key]);
                        _this.setPrivate((key + "High"), high[key]);
                        _this.setPrivate((key + "Open"), open[key]);
                        _this.setPrivate((key + "Close"), close[key]);
                    });
                }
            }
        });
        Object.defineProperty(Series.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._updateChildren.call(this);
                this._psi = this.startIndex();
                this._pei = this.endIndex();
                if (this.isDirty("visible")) {
                    this.bulletsContainer.set("visible", this.get("visible"));
                }
                // Apply heat rules
                if (this._valuesDirty && this.get("heatRules") != null) {
                    var rules = this.get("heatRules", []);
                    each$1(rules, function (rule) {
                        var minValue = rule.minValue || _this.getPrivate((rule.dataField + "Low")) || 0;
                        var maxValue = rule.maxValue || _this.getPrivate((rule.dataField + "High")) || 0;
                        each$1(rule.target._entities, function (target) {
                            var value = target.dataItem.get(rule.dataField);
                            if (!isNumber(value)) {
                                return;
                            }
                            var percent;
                            if (rule.logarithmic) {
                                percent = (Math.log(value) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / ((Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E));
                            }
                            else {
                                percent = (value - minValue) / (maxValue - minValue);
                            }
                            if (isNumber(value) && (!isNumber(percent) || Math.abs(percent) == Infinity)) {
                                percent = 0.5;
                            }
                            // fixes problems if all values are the same
                            var propertyValue;
                            if (isNumber(rule.min)) {
                                propertyValue = rule.min + (rule.max - rule.min) * percent;
                            }
                            else if (rule.min instanceof Color) {
                                propertyValue = Color.interpolate(percent, rule.min, rule.max);
                            }
                            else if (rule.min instanceof Percent) {
                                propertyValue = percentInterpolate(percent, rule.min, rule.max);
                            }
                            if (rule.customFunction) {
                                rule.customFunction.call(_this, target, minValue, maxValue, value);
                            }
                            else {
                                target.set(rule.key, propertyValue);
                            }
                        });
                    });
                }
                if (this.bullets.length > 0) {
                    var count = this.dataItems.length;
                    var startIndex = this.startIndex();
                    var endIndex = this.endIndex();
                    if (endIndex < count) {
                        endIndex++;
                    }
                    if (startIndex > 0) {
                        startIndex--;
                    }
                    for (var i = 0; i < startIndex; i++) {
                        this._hideBullets(this.dataItems[i]);
                    }
                    for (var i = startIndex; i < endIndex; i++) {
                        this._positionBullets(this.dataItems[i]);
                    }
                    for (var i = endIndex; i < count; i++) {
                        this._hideBullets(this.dataItems[i]);
                    }
                }
            }
        });
        Object.defineProperty(Series.prototype, "_positionBullets", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var _this = this;
                if (dataItem.bullets) {
                    each$1(dataItem.bullets, function (bullet) {
                        _this._positionBullet(bullet);
                        var sprite = bullet.get("sprite");
                        if (bullet.get("dynamic")) {
                            if (sprite) {
                                sprite._markDirtyKey("fill");
                                sprite.markDirtySize();
                            }
                            if (sprite instanceof Container) {
                                sprite.walkChildren(function (child) {
                                    child._markDirtyKey("fill");
                                    child.markDirtySize();
                                    if (child instanceof Label) {
                                        child.text.markDirtyText();
                                    }
                                });
                            }
                        }
                        if (sprite instanceof Label && sprite.get("populateText")) {
                            sprite.text.markDirtyText();
                        }
                    });
                }
            }
        });
        Object.defineProperty(Series.prototype, "_hideBullets", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                if (dataItem.bullets) {
                    each$1(dataItem.bullets, function (bullet) {
                        var sprite = bullet.get("sprite");
                        if (sprite) {
                            sprite.setPrivate("visible", false);
                        }
                    });
                }
            }
        });
        Object.defineProperty(Series.prototype, "_positionBullet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_bullet) {
            }
        });
        Object.defineProperty(Series.prototype, "_placeBulletsContainer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (chart) {
                chart.bulletsContainer.children.moveValue(this.bulletsContainer);
            }
        });
        Object.defineProperty(Series.prototype, "_removeBulletsContainer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var bulletsContainer = this.bulletsContainer;
                if (bulletsContainer.parent) {
                    bulletsContainer.parent.children.removeValue(bulletsContainer);
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Series.prototype, "disposeDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var bullets = dataItem.bullets;
                if (bullets) {
                    each$1(bullets, function (bullet) {
                        bullet.dispose();
                    });
                }
            }
        });
        Object.defineProperty(Series.prototype, "_getItemReaderLabel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return "";
            }
        });
        /**
         * Shows series's data item.
         *
         * @param   dataItem  Data item
         * @param   duration  Animation duration in milliseconds
         * @return            Promise
         */
        Object.defineProperty(Series.prototype, "showDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var promises, bullets;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                promises = [_super.prototype.showDataItem.call(this, dataItem, duration)];
                                bullets = dataItem.bullets;
                                if (bullets) {
                                    each$1(bullets, function (bullet) {
                                        promises.push(bullet.get("sprite").show(duration));
                                    });
                                }
                                return [4 /*yield*/, Promise.all(promises)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            }
        });
        /**
         * Hides series's data item.
         *
         * @param   dataItem  Data item
         * @param   duration  Animation duration in milliseconds
         * @return            Promise
         */
        Object.defineProperty(Series.prototype, "hideDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var promises, bullets;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                promises = [_super.prototype.hideDataItem.call(this, dataItem, duration)];
                                bullets = dataItem.bullets;
                                if (bullets) {
                                    each$1(bullets, function (bullet) {
                                        promises.push(bullet.get("sprite").hide(duration));
                                    });
                                }
                                return [4 /*yield*/, Promise.all(promises)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            }
        });
        Object.defineProperty(Series.prototype, "_sequencedShowHide", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (show, duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var startIndex_2, endIndex_2;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!this.get("sequencedInterpolation")) return [3 /*break*/, 4];
                                if (!isNumber(duration)) {
                                    duration = this.get("interpolationDuration", 0);
                                }
                                if (!(duration > 0)) return [3 /*break*/, 2];
                                startIndex_2 = this.startIndex();
                                endIndex_2 = this.endIndex();
                                return [4 /*yield*/, Promise.all(map(this.dataItems, function (dataItem, i) { return __awaiter(_this, void 0, void 0, function () {
                                        var realDuration, delay;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    realDuration = duration || 0;
                                                    if (i < startIndex_2 - 10 || i > endIndex_2 + 10) {
                                                        realDuration = 0;
                                                    }
                                                    delay = this.get("sequencedDelay", 0) + realDuration / (endIndex_2 - startIndex_2);
                                                    return [4 /*yield*/, sleep(delay * (i - startIndex_2))];
                                                case 1:
                                                    _a.sent();
                                                    if (!show) return [3 /*break*/, 3];
                                                    return [4 /*yield*/, this.showDataItem(dataItem, realDuration)];
                                                case 2:
                                                    _a.sent();
                                                    return [3 /*break*/, 5];
                                                case 3: return [4 /*yield*/, this.hideDataItem(dataItem, realDuration)];
                                                case 4:
                                                    _a.sent();
                                                    _a.label = 5;
                                                case 5: return [2 /*return*/];
                                            }
                                        });
                                    }); }))];
                            case 1:
                                _a.sent();
                                return [3 /*break*/, 4];
                            case 2: return [4 /*yield*/, Promise.all(map(this.dataItems, function (dataItem) {
                                    if (show) {
                                        return _this.showDataItem(dataItem, 0);
                                    }
                                    else {
                                        return _this.hideDataItem(dataItem, 0);
                                    }
                                }))];
                            case 3:
                                _a.sent();
                                _a.label = 4;
                            case 4: return [2 /*return*/];
                        }
                    });
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Series.prototype, "updateLegendValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var legendDataItem = dataItem.get("legendDataItem");
                if (legendDataItem) {
                    var valueLabel = legendDataItem.get("valueLabel");
                    if (valueLabel) {
                        var text = valueLabel.text;
                        var txt = "";
                        valueLabel._setDataItem(dataItem);
                        txt = this.get("legendValueText", text.get("text", ""));
                        valueLabel.set("text", txt);
                        text.markDirtyText();
                    }
                    var label = legendDataItem.get("label");
                    if (label) {
                        var text = label.text;
                        var txt = "";
                        label._setDataItem(dataItem);
                        txt = this.get("legendLabelText", text.get("text", ""));
                        label.set("text", txt);
                        text.markDirtyText();
                    }
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Series.prototype, "updateLegendMarker", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem) {
            }
        });
        Object.defineProperty(Series.prototype, "_onHide", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._onHide.call(this);
                var tooltip = this.getTooltip();
                if (tooltip) {
                    tooltip.hide();
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Series.prototype, "hoverDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem) { }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Series.prototype, "unhoverDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem) { }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Series.prototype, "_getBase", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                var dataItem = this.dataItems[this.startIndex()];
                if (dataItem) {
                    return dataItem.get(key);
                }
                return 0;
            }
        });
        Object.defineProperty(Series, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Series"
        });
        Object.defineProperty(Series, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Component.classNames.concat([Series.className])
        });
        return Series;
    }(Component));

    /**
     * A universal legend control.
     *
     * @important
     * @see {@link https://www.amcharts.com/docs/v5/concepts/legend/} for more info
     */
    var Legend = /** @class */ (function (_super) {
        __extends(Legend, _super);
        function Legend() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * List of all [[Container]] elements for legend items.
             *
             * @default new ListTemplate<Container>
             */
            Object.defineProperty(_this, "itemContainers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return Container._new(_this._root, {
                    themeTags: mergeTags(_this.itemContainers.template.get("themeTags", []), ["legend", "item"]),
                    themeTagsSelf: mergeTags(_this.itemContainers.template.get("themeTagsSelf", []), ["itemcontainer"]),
                    background: RoundedRectangle.new(_this._root, {
                        themeTags: mergeTags(_this.itemContainers.template.get("themeTags", []), ["legend", "item", "background"]),
                        themeTagsSelf: mergeTags(_this.itemContainers.template.get("themeTagsSelf", []), ["itemcontainer"])
                    })
                }, [_this.itemContainers.template]); })
            });
            /**
             * List of legend marker elements.
             *
             * @default new ListTemplate<Container>
             */
            Object.defineProperty(_this, "markers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return Container._new(_this._root, {
                    themeTags: mergeTags(_this.markers.template.get("themeTags", []), ["legend", "marker"])
                }, [_this.markers.template]); })
            });
            /**
             * List of legend label elements.
             *
             * @default new ListTemplate<Label>
             */
            Object.defineProperty(_this, "labels", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return Label._new(_this._root, {
                    themeTags: mergeTags(_this.labels.template.get("themeTags", []), ["legend", "label"])
                }, [_this.labels.template]); })
            });
            /**
             * List of legend value label elements.
             *
             * @default new ListTemplate<label>
             */
            Object.defineProperty(_this, "valueLabels", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return Label._new(_this._root, {
                    themeTags: mergeTags(_this.valueLabels.template.get("themeTags", []), ["legend", "label", "value"])
                }, [_this.valueLabels.template]); })
            });
            /**
             * List of rectangle elements used for default legend markers.
             *
             * @default new ListTemplate<RoundedRectangle>
             */
            Object.defineProperty(_this, "markerRectangles", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return RoundedRectangle._new(_this._root, {
                    themeTags: mergeTags(_this.markerRectangles.template.get("themeTags", []), ["legend", "marker", "rectangle"])
                }, [_this.markerRectangles.template]); })
            });
            return _this;
        }
        Object.defineProperty(Legend.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["legend"]);
                this.fields.push("name", "stroke", "fill");
                _super.prototype._afterNew.call(this);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Legend.prototype, "makeItemContainer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var itemContainer = this.children.push(this.itemContainers.make());
                itemContainer._setDataItem(dataItem);
                this.itemContainers.push(itemContainer);
                itemContainer.states.create("disabled", {});
                return itemContainer;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Legend.prototype, "makeMarker", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var marker = this.markers.make();
                this.markers.push(marker);
                marker.states.create("disabled", {});
                return marker;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Legend.prototype, "makeLabel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var label = this.labels.make();
                label.states.create("disabled", {});
                return label;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Legend.prototype, "makeValueLabel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var valueLabel = this.valueLabels.make();
                valueLabel.states.create("disabled", {});
                return valueLabel;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Legend.prototype, "makeMarkerRectangle", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var markerRectangle = this.markerRectangles.make();
                markerRectangle.states.create("disabled", {});
                return markerRectangle;
            }
        });
        Object.defineProperty(Legend.prototype, "processDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var _this = this;
                _super.prototype.processDataItem.call(this, dataItem);
                var itemContainer = this.makeItemContainer(dataItem);
                var nameField = this.get("nameField");
                var fillField = this.get("fillField");
                var strokeField = this.get("strokeField");
                if (itemContainer) {
                    var clickTarget = this.get("clickTarget", "itemContainer");
                    var item_1 = dataItem.dataContext;
                    if (item_1 && item_1.set) {
                        item_1.set("legendDataItem", dataItem);
                    }
                    itemContainer._setDataItem(dataItem);
                    dataItem.set("itemContainer", itemContainer);
                    var marker = this.makeMarker();
                    if (marker) {
                        itemContainer.children.push(marker);
                        marker._setDataItem(dataItem);
                        dataItem.set("marker", marker);
                        var useDefaultMarker = this.get("useDefaultMarker");
                        var markerRectangle_1 = marker.children.push(this.makeMarkerRectangle());
                        var fill = dataItem.get("fill");
                        var stroke = dataItem.get("stroke");
                        dataItem.set("markerRectangle", markerRectangle_1);
                        if (item_1 && item_1.get) {
                            fill = item_1.get(fillField, fill);
                            stroke = item_1.get(strokeField, stroke);
                        }
                        if (!stroke) {
                            stroke = fill;
                        }
                        if (!useDefaultMarker) {
                            if (item_1 && item_1.createLegendMarker) {
                                item_1.createLegendMarker();
                            }
                        }
                        else {
                            if (item_1.on) {
                                item_1.on(fillField, function () {
                                    markerRectangle_1.set("fill", item_1.get(fillField));
                                });
                                item_1.on(strokeField, function () {
                                    markerRectangle_1.set("stroke", item_1.get(strokeField));
                                });
                            }
                        }
                        markerRectangle_1.setAll({ fill: fill, stroke: stroke });
                        // this solves if template field is set on slice
                        var component = item_1.component;
                        if (component && component.updateLegendMarker) {
                            component.updateLegendMarker(item_1);
                        }
                    }
                    var label_1 = this.makeLabel();
                    if (label_1) {
                        itemContainer.children.push(label_1);
                        label_1._setDataItem(dataItem);
                        dataItem.set("label", label_1);
                        label_1.text.on("text", function () {
                            itemContainer.set("ariaLabel", label_1.text._getText() + "; " + _this._t("Press ENTER to toggle"));
                        });
                        if (item_1 && item_1.get) {
                            dataItem.set("name", item_1.get(nameField));
                        }
                        var name_1 = dataItem.get("name");
                        if (name_1) {
                            label_1.set("text", name_1);
                        }
                    }
                    var valueLabel = this.makeValueLabel();
                    if (valueLabel) {
                        itemContainer.children.push(valueLabel);
                        valueLabel._setDataItem(dataItem);
                        dataItem.set("valueLabel", valueLabel);
                    }
                    if (item_1 && item_1.show) {
                        this._disposers.push(item_1.on("visible", function (visible) {
                            itemContainer.set("disabled", !visible);
                        }));
                        if (!item_1.get("visible")) {
                            itemContainer.set("disabled", true);
                        }
                        if (clickTarget != "none") {
                            var clickContainer = itemContainer;
                            if (clickTarget == "marker") {
                                clickContainer = marker;
                            }
                            this._addClickEvents(clickContainer, item_1, dataItem);
                        }
                    }
                    // Sort children
                    this.children.values.sort(function (a, b) {
                        var targetA = a.dataItem.dataContext;
                        var targetB = b.dataItem.dataContext;
                        if (targetA && targetB) {
                            var indexA = _this.data.indexOf(targetA);
                            var indexB = _this.data.indexOf(targetB);
                            if (indexA > indexB) {
                                return 1;
                            }
                            else if (indexA < indexB) {
                                return -1;
                            }
                        }
                        return 0;
                    });
                }
            }
        });
        Object.defineProperty(Legend.prototype, "_addClickEvents", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (container, item, dataItem) {
                var _this = this;
                container.set("cursorOverStyle", "pointer");
                container.events.on("pointerover", function () {
                    var component = item.component;
                    if (component && component.hoverDataItem) {
                        component.hoverDataItem(item);
                    }
                });
                container.events.on("pointerout", function () {
                    var component = item.component;
                    if (component && component.hoverDataItem) {
                        component.unhoverDataItem(item);
                    }
                });
                container.events.on("click", function () {
                    var labelText = dataItem.get("label").text._getText();
                    if (item.show && item.isHidden && (item.isHidden() || item.get("visible") === false)) {
                        item.show();
                        container.set("disabled", false);
                        _this._root.readerAlert(_this._t("%1 shown", _this._root.locale, labelText));
                    }
                    else if (item.hide) {
                        item.hide();
                        container.set("disabled", true);
                        _this._root.readerAlert(_this._t("%1 hidden", _this._root.locale, labelText));
                    }
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Legend.prototype, "disposeDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var dataContext = dataItem.dataContext;
                if (dataContext && dataContext.get) {
                    var di = dataContext.get("legendDataItem");
                    if (di == dataItem) {
                        dataContext.set("legendDataItem", undefined);
                    }
                }
                var itemContainer = dataItem.get("itemContainer");
                if (itemContainer) {
                    this.itemContainers.removeValue(itemContainer);
                    itemContainer.dispose();
                }
                var marker = dataItem.get("marker");
                if (marker) {
                    this.markers.removeValue(marker);
                    marker.dispose();
                }
                var markerRectangle = dataItem.get("markerRectangle");
                if (markerRectangle) {
                    this.markerRectangles.removeValue(markerRectangle);
                    markerRectangle.dispose();
                }
                var label = dataItem.get("label");
                if (label) {
                    this.labels.removeValue(label);
                    label.dispose();
                }
                var valueLabel = dataItem.get("valueLabel");
                if (valueLabel) {
                    this.valueLabels.removeValue(valueLabel);
                    valueLabel.dispose();
                }
            }
        });
        Object.defineProperty(Legend, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Legend"
        });
        Object.defineProperty(Legend, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Series.classNames.concat([Legend.className])
        });
        return Legend;
    }(Series));

    /** @ignore */ /** */
    /**
     * @ignore
     */
    function segmentedLine(display, segments) {
        for (var s = 0, len = segments.length; s < len; s++) {
            var groups = segments[s];
            if (groups.length > 0) {
                var firstGroup = groups[0];
                if (firstGroup.length > 0) {
                    var firstPoint = firstGroup[0];
                    display.moveTo(firstPoint.x, firstPoint.y);
                    for (var g = 0, len_1 = groups.length; g < len_1; g++) {
                        line$1(display, groups[g]);
                    }
                }
            }
        }
    }
    /**
     * @ignore
     */
    function line$1(display, points) {
        for (var p = 0, len = points.length; p < len; p++) {
            var point = points[p];
            display.lineTo(point.x, point.y);
        }
    }

    /**
     * Draws a line.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     * @important
     */
    var Line = /** @class */ (function (_super) {
        __extends(Line, _super);
        function Line() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Line.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("points") || this.isDirty("segments") || this._sizeDirty || this.isPrivateDirty("width") || this.isPrivateDirty("height")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Line.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear) {
                    var points = this.get("points");
                    var segments = this.get("segments");
                    if (points && points.length > 0) {
                        var point = points[0];
                        this._display.moveTo(point.x, point.y);
                        segmentedLine(this._display, [[points]]);
                    }
                    else if (segments) {
                        segmentedLine(this._display, segments);
                    }
                    else if (!this.get("draw")) {
                        var w = this.width();
                        var h = this.height();
                        this._display.moveTo(0, 0);
                        this._display.lineTo(w, h);
                    }
                }
            }
        });
        Object.defineProperty(Line, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Line"
        });
        Object.defineProperty(Line, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([Line.className])
        });
        return Line;
    }(Graphics));

    /**
     * Displays an image.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/images/} for more info
     * @important
     */
    var Picture = /** @class */ (function (_super) {
        __extends(Picture, _super);
        function Picture() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_display", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._root._renderer.makePicture(undefined)
            });
            return _this;
        }
        Object.defineProperty(Picture.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this.isDirty("width")) {
                    var width = this.get("width");
                    this._display.width = isNumber(width) ? width : undefined;
                }
                if (this.isDirty("height")) {
                    var height = this.get("height");
                    this._display.height = isNumber(height) ? height : undefined;
                }
                if (this.isDirty("shadowColor")) {
                    this._display.clear();
                    var shadowColor = this.get("shadowColor");
                    this._display.shadowColor = shadowColor == null ? undefined : shadowColor;
                }
                if (this.isDirty("shadowBlur")) {
                    this._display.clear();
                    this._display.shadowBlur = this.get("shadowBlur");
                }
                if (this.isDirty("shadowOffsetX")) {
                    this._display.clear();
                    this._display.shadowOffsetX = this.get("shadowOffsetX");
                }
                if (this.isDirty("shadowOffsetY")) {
                    this._display.clear();
                    this._display.shadowOffsetY = this.get("shadowOffsetY");
                }
                if (this.isDirty("shadowOpacity")) {
                    this._display.clear();
                    this._display.shadowOpacity = this.get("shadowOpacity");
                }
                if (this.isDirty("src")) {
                    this._display.clear();
                    this._load();
                }
            }
        });
        Object.defineProperty(Picture.prototype, "_load", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var src = this.get("src");
                if (src) {
                    var image_1 = new Image();
                    //image.crossOrigin = "Anonymous";
                    image_1.src = src;
                    image_1.decode().then(function () {
                        _this._display.image = image_1;
                        _this._updateSize();
                    }).catch(function (_error) {
                        // TODO: maybe raise error?
                    });
                }
            }
        });
        Object.defineProperty(Picture.prototype, "_updateSize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._updateSize.call(this);
                var image = this._display.image;
                if (image) {
                    var w = this.getPrivate("width", this.get("width"));
                    var h = this.getPrivate("height", this.get("height"));
                    var r = image.width && image.height ? image.width / image.height : 0;
                    if (isNumber(w) && isNumber(h)) {
                        this._display.width = w;
                        this._display.height = h;
                    }
                    else if (isNumber(w) && r) {
                        h = w / r;
                    }
                    else if (isNumber(h) && r) {
                        w = h * r;
                    }
                    else {
                        w = image.width;
                        h = image.height;
                    }
                    if (isNumber(w)) {
                        this._display.width = w;
                    }
                    if (isNumber(h)) {
                        this._display.height = h;
                    }
                    this.markDirtyBounds();
                    this.markDirty();
                }
            }
        });
        Object.defineProperty(Picture, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Picture"
        });
        Object.defineProperty(Picture, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Sprite.classNames.concat([Picture.className])
        });
        return Picture;
    }(Sprite));

    /**
     * @ignore
     */
    var RadialText = /** @class */ (function (_super) {
        __extends(RadialText, _super);
        function RadialText() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_display", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._root._renderer.makeRadialText("", _this.textStyle)
            });
            return _this;
        }
        Object.defineProperty(RadialText.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(RadialText.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                this._display.clear();
                if (this.isDirty("textType")) {
                    this._display.textType = this.get("textType");
                    this.markDirtyBounds();
                }
                if (this.isDirty("radius")) {
                    this._display.radius = this.get("radius");
                    this.markDirtyBounds();
                }
                if (this.isDirty("startAngle")) {
                    this._display.startAngle = (this.get("startAngle", 0) + 90) * RADIANS;
                    this.markDirtyBounds();
                }
                if (this.isDirty("inside")) {
                    this._display.inside = this.get("inside");
                    this.markDirtyBounds();
                }
                if (this.isDirty("orientation")) {
                    this._display.orientation = this.get("orientation");
                    this.markDirtyBounds();
                }
                if (this.isDirty("kerning")) {
                    this._display.kerning = this.get("kerning");
                    this.markDirtyBounds();
                }
            }
        });
        Object.defineProperty(RadialText, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "RadialText"
        });
        Object.defineProperty(RadialText, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Text.classNames.concat([RadialText.className])
        });
        return RadialText;
    }(Text));

    var RadialLabel = /** @class */ (function (_super) {
        __extends(RadialLabel, _super);
        function RadialLabel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_flipped", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            return _this;
        }
        Object.defineProperty(RadialLabel.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._textKeys.push("textType", "kerning");
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(RadialLabel.prototype, "_makeText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._text = this.children.push(RadialText.new(this._root, {}));
            }
        });
        /**
         * Returns base radius in pixels.
         *
         * @return Base radius
         */
        Object.defineProperty(RadialLabel.prototype, "baseRadius", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var radiusPrivate = this.getPrivate("radius", 0);
                var innerRadiusPrivate = this.getPrivate("innerRadius", 0);
                var baseRadius = this.get("baseRadius", 0);
                return innerRadiusPrivate + relativeToValue(baseRadius, radiusPrivate - innerRadiusPrivate);
            }
        });
        /**
         * Returns radius adjustment in pixels.
         *
         * @return Radius
         */
        Object.defineProperty(RadialLabel.prototype, "radius", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var inside = this.get("inside", false);
                return this.baseRadius() + this.get("radius", 0) * (inside ? -1 : 1);
            }
        });
        Object.defineProperty(RadialLabel.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._updateChildren.call(this);
                if (this.isDirty("baseRadius") || this.isPrivateDirty("radius") || this.isPrivateDirty("innerRadius") || this.isDirty("labelAngle") || this.isDirty("radius") || this.isDirty("inside") || this.isDirty("orientation") || this.isDirty("textType")) {
                    var textType = this.get("textType", "adjusted");
                    var inside = this.get("inside", false);
                    var orientation_1 = this.get("orientation");
                    var labelAngle = normalizeAngle(this.get("labelAngle", 0));
                    this._text.set("startAngle", this.get("labelAngle", 0));
                    this._text.set("inside", inside);
                    var sin = sin$1(labelAngle);
                    var cos = cos$1(labelAngle);
                    var baseRadius = this.baseRadius();
                    var radius = this.radius();
                    this._display.angle = 0;
                    if (textType == "circular") {
                        this.setAll({
                            paddingTop: 0,
                            paddingBottom: 0,
                            paddingLeft: 0,
                            paddingRight: 0
                        });
                        // Circular labels are handled and positioned differently
                        this._text.set("orientation", orientation_1);
                        this._text.set("radius", radius);
                    }
                    else {
                        if (baseRadius == 0) {
                            labelAngle = 0;
                            radius = 0;
                        }
                        // Positioning of radial/regular labels are teh same
                        var x = radius * cos;
                        var y = radius * sin;
                        if (textType == "radial") {
                            this.setRaw("x", x);
                            this.setRaw("y", y);
                            if ((labelAngle < 90) || (labelAngle > 270) || orientation_1 != "auto") {
                                this._display.angle = labelAngle; // + 90;
                                this._flipped = false;
                            }
                            else {
                                this._display.angle = labelAngle + 180;
                                this._flipped = true;
                            }
                            this._dirty.rotation = false;
                        }
                        else if (textType == "adjusted") {
                            this.setRaw("centerX", p50);
                            this.setRaw("centerY", p50);
                            this.setRaw("x", x);
                            this.setRaw("y", y);
                        }
                        else if (textType == "regular") {
                            this.setRaw("x", x);
                            this.setRaw("y", y);
                        }
                    }
                    this.markDirtyPosition();
                    this.markDirtyBounds();
                }
            }
        });
        Object.defineProperty(RadialLabel.prototype, "_updatePosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var textType = this.get("textType", "regular");
                var inside = this.get("inside", false);
                var dx = 0;
                var dy = 0;
                var labelAngle = this.get("labelAngle", 0);
                var bounds = this.localBounds();
                var w = bounds.right - bounds.left;
                var h = bounds.bottom - bounds.top;
                if (textType == "radial") {
                    if (this._flipped) {
                        var centerX = this.get("centerX");
                        if (centerX instanceof Percent) {
                            w = w * (1 - centerX.value * 2);
                        }
                        dx = w * cos$1(labelAngle);
                        dy = w * sin$1(labelAngle);
                    }
                }
                else if (!inside && textType == "adjusted") {
                    dx = w / 2 * cos$1(labelAngle);
                    dy = h / 2 * sin$1(labelAngle);
                }
                this.setRaw("dx", dx);
                this.setRaw("dy", dy);
                _super.prototype._updatePosition.call(this);
            }
        });
        Object.defineProperty(RadialLabel.prototype, "text", {
            /**
             * @ignore
             */
            get: function () {
                return this._text;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RadialLabel, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "RadialLabel"
        });
        Object.defineProperty(RadialLabel, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Label.classNames.concat([RadialLabel.className])
        });
        return RadialLabel;
    }(Label));

    /**
     * Draws a triangle.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     * @important
     */
    var Triangle = /** @class */ (function (_super) {
        __extends(Triangle, _super);
        function Triangle() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Triangle.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("width") || this.isDirty("height") || this.isPrivateDirty("width") || this.isPrivateDirty("height")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Triangle.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear && !this.get("draw")) {
                    this._draw();
                }
            }
        });
        Object.defineProperty(Triangle.prototype, "_draw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var w = this.width();
                var h = this.height();
                var display = this._display;
                display.moveTo(-w / 2, h / 2);
                display.lineTo(0, -h / 2);
                display.lineTo(w / 2, h / 2);
                display.lineTo(-w / 2, h / 2);
            }
        });
        Object.defineProperty(Triangle.prototype, "_updateSize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.markDirty();
                this._clear = true;
            }
        });
        Object.defineProperty(Triangle, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Triangle"
        });
        Object.defineProperty(Triangle, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([Triangle.className])
        });
        return Triangle;
    }(Graphics));

    /**
     * A control that allows zooming chart's axes, or other uses requiring range
     * selection.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/} for more info
     */
    var Scrollbar = /** @class */ (function (_super) {
        __extends(Scrollbar, _super);
        function Scrollbar() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * A thumb elment - a draggable square between the grips, used for panning
             * the selection.
             */
            Object.defineProperty(_this, "thumb", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._makeThumb()
            });
            /**
             * Start grip button.
             */
            Object.defineProperty(_this, "startGrip", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._makeButton()
            });
            /**
             * End grip button.
             */
            Object.defineProperty(_this, "endGrip", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._makeButton()
            });
            Object.defineProperty(_this, "_thumbBusy", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_startDown", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_endDown", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_thumbDown", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_gripDown", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(Scrollbar.prototype, "_addOrientationClass", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["scrollbar", this._settings.orientation]);
                if (!this._settings.background) {
                    this._settings.background = RoundedRectangle.new(this._root, {
                        themeTags: mergeTags(this._settings.themeTags, ["main", "background"])
                    });
                }
            }
        });
        Object.defineProperty(Scrollbar.prototype, "_makeButton", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.children.push(Button.new(this._root, {
                    themeTags: ["resize", "button", this.get("orientation")], icon: Graphics.new(this._root, {
                        themeTags: ["icon"]
                    })
                }));
            }
        });
        Object.defineProperty(Scrollbar.prototype, "_makeThumb", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.children.push(RoundedRectangle.new(this._root, {
                    themeTags: ["thumb", this.get("orientation")]
                }));
            }
        });
        Object.defineProperty(Scrollbar.prototype, "_handleAnimation", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (animation) {
                var _this = this;
                if (animation) {
                    this._disposers.push(animation.events.on("stopped", function () {
                        _this.setPrivateRaw("isBusy", false);
                        _this._thumbBusy = false;
                    }));
                }
            }
        });
        Object.defineProperty(Scrollbar.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this._addOrientationClass();
                _super.prototype._afterNew.call(this);
                var startGrip = this.startGrip;
                var endGrip = this.endGrip;
                var thumb = this.thumb;
                var background = this.get("background");
                if (background) {
                    this._disposers.push(background.events.on("click", function (event) {
                        _this.setPrivateRaw("isBusy", true);
                        var point = _this._display.toLocal(event.point);
                        var w = _this.width();
                        var h = _this.height();
                        var orientation = _this.get("orientation");
                        var newMiddle;
                        if (orientation == "vertical") {
                            newMiddle = (point.y - thumb.height() / 2) / h;
                        }
                        else {
                            newMiddle = (point.x - thumb.width() / 2) / w;
                        }
                        var newCoordinate;
                        var key;
                        if (orientation == "vertical") {
                            newCoordinate = newMiddle * h;
                            key = "y";
                        }
                        else {
                            newCoordinate = newMiddle * w;
                            key = "x";
                        }
                        var duration = _this.get("animationDuration", 0);
                        if (duration > 0) {
                            _this._thumbBusy = true;
                            _this._handleAnimation(_this.thumb.animate({ key: key, to: newCoordinate, duration: duration, easing: _this.get("animationEasing") }));
                        }
                        else {
                            _this.thumb.set(key, newCoordinate);
                            _this._root.events.on("frameended", function () {
                                _this.setPrivateRaw("isBusy", false);
                            });
                        }
                    }));
                }
                this._disposers.push(thumb.events.on("dblclick", function (event) {
                    if (!isLocalEvent(event.originalEvent, _this)) {
                        return;
                    }
                    var duration = _this.get("animationDuration", 0);
                    var easing = _this.get("animationEasing");
                    _this.animate({ key: "start", to: 0, duration: duration, easing: easing });
                    _this.animate({ key: "end", to: 1, duration: duration, easing: easing });
                }));
                this._disposers.push(startGrip.events.on("pointerdown", function () {
                    _this.setPrivateRaw("isBusy", true);
                    _this._startDown = true;
                    _this._gripDown = "start";
                }));
                this._disposers.push(endGrip.events.on("pointerdown", function () {
                    _this.setPrivateRaw("isBusy", true);
                    _this._endDown = true;
                    _this._gripDown = "end";
                }));
                this._disposers.push(thumb.events.on("pointerdown", function () {
                    _this.setPrivateRaw("isBusy", true);
                    _this._thumbDown = true;
                    _this._gripDown = undefined;
                }));
                this._disposers.push(startGrip.events.on("globalpointerup", function () {
                    if (_this._startDown) {
                        _this.setPrivateRaw("isBusy", false);
                    }
                    _this._startDown = false;
                }));
                this._disposers.push(endGrip.events.on("globalpointerup", function () {
                    if (_this._endDown) {
                        _this.setPrivateRaw("isBusy", false);
                    }
                    _this._endDown = false;
                }));
                this._disposers.push(thumb.events.on("globalpointerup", function () {
                    if (_this._thumbDown) {
                        _this.setPrivateRaw("isBusy", false);
                    }
                    _this._thumbDown = false;
                }));
                this._disposers.push(startGrip.on("x", function () {
                    _this._updateThumb();
                }));
                this._disposers.push(endGrip.on("x", function () {
                    _this._updateThumb();
                }));
                this._disposers.push(startGrip.on("y", function () {
                    _this._updateThumb();
                }));
                this._disposers.push(endGrip.on("y", function () {
                    _this._updateThumb();
                }));
                this._disposers.push(thumb.events.on("positionchanged", function () {
                    _this._updateGripsByThumb();
                }));
                if (this.get("orientation") == "vertical") {
                    startGrip.set("x", 0);
                    endGrip.set("x", 0);
                    this._disposers.push(thumb.adapters.add("y", function (value) {
                        return Math.max(Math.min(Number(value), _this.height() - thumb.height()), 0);
                    }));
                    this._disposers.push(thumb.adapters.add("x", function (_value) {
                        return _this.width() / 2;
                    }));
                    this._disposers.push(startGrip.adapters.add("x", function (_value) {
                        return _this.width() / 2;
                    }));
                    this._disposers.push(endGrip.adapters.add("x", function (_value) {
                        return _this.width() / 2;
                    }));
                    this._disposers.push(startGrip.adapters.add("y", function (value) {
                        return Math.max(Math.min(Number(value), _this.height()), 0);
                    }));
                    this._disposers.push(endGrip.adapters.add("y", function (value) {
                        return Math.max(Math.min(Number(value), _this.height()), 0);
                    }));
                }
                else {
                    startGrip.set("y", 0);
                    endGrip.set("y", 0);
                    this._disposers.push(thumb.adapters.add("x", function (value) {
                        return Math.max(Math.min(Number(value), _this.width() - thumb.width()), 0);
                    }));
                    this._disposers.push(thumb.adapters.add("y", function (_value) {
                        return _this.height() / 2;
                    }));
                    this._disposers.push(startGrip.adapters.add("y", function (_value) {
                        return _this.height() / 2;
                    }));
                    this._disposers.push(endGrip.adapters.add("y", function (_value) {
                        return _this.height() / 2;
                    }));
                    this._disposers.push(startGrip.adapters.add("x", function (value) {
                        return Math.max(Math.min(Number(value), _this.width()), 0);
                    }));
                    this._disposers.push(endGrip.adapters.add("x", function (value) {
                        return Math.max(Math.min(Number(value), _this.width()), 0);
                    }));
                }
            }
        });
        Object.defineProperty(Scrollbar.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._updateChildren.call(this);
                if (this.isDirty("end") || this.isDirty("start") || this._sizeDirty) {
                    this.updateGrips();
                }
            }
        });
        Object.defineProperty(Scrollbar.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this.isDirty("start") || this.isDirty("end")) {
                    var eventType = "rangechanged";
                    if (this.events.isEnabled(eventType)) {
                        this.events.dispatch(eventType, { type: eventType, target: this, start: this.get("start", 0), end: this.get("end", 1), grip: this._gripDown });
                    }
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Scrollbar.prototype, "updateGrips", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var startGrip = this.startGrip;
                var endGrip = this.endGrip;
                var orientation = this.get("orientation");
                var height = this.height();
                var width = this.width();
                if (orientation == "vertical") {
                    startGrip.set("y", height * this.get("start", 0));
                    endGrip.set("y", height * this.get("end", 1));
                }
                else {
                    startGrip.set("x", width * this.get("start", 0));
                    endGrip.set("x", width * this.get("end", 1));
                }
                var valueFunction = this.getPrivate("positionTextFunction");
                var from = Math.round(this.get("start", 0) * 100);
                var to = Math.round(this.get("end", 0) * 100);
                var fromValue;
                var toValue;
                if (valueFunction) {
                    fromValue = valueFunction.call(this, this.get("start", 0));
                    toValue = valueFunction.call(this, this.get("end", 0));
                }
                else {
                    fromValue = from + "%";
                    toValue = to + "%";
                }
                startGrip.set("ariaLabel", this._t("From %1", undefined, fromValue));
                startGrip.set("ariaValueNow", "" + from);
                startGrip.set("ariaValueText", from + "%");
                startGrip.set("ariaValueMin", "0");
                startGrip.set("ariaValueMax", "100");
                endGrip.set("ariaLabel", this._t("To %1", undefined, toValue));
                endGrip.set("ariaValueNow", "" + to);
                endGrip.set("ariaValueText", to + "%");
                endGrip.set("ariaValueMin", "0");
                endGrip.set("ariaValueMax", "100");
            }
        });
        Object.defineProperty(Scrollbar.prototype, "_updateThumb", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var thumb = this.thumb;
                var startGrip = this.startGrip;
                var endGrip = this.endGrip;
                var height = this.height();
                var width = this.width();
                var x0 = startGrip.x();
                var x1 = endGrip.x();
                var y0 = startGrip.y();
                var y1 = endGrip.y();
                var start = 0;
                var end = 1;
                if (this.get("orientation") == "vertical") {
                    if (isNumber(y0) && isNumber(y1)) {
                        if (!this._thumbBusy && !thumb.isDragging()) {
                            thumb.set("height", y1 - y0);
                            thumb.set("y", y0);
                        }
                        start = y0 / height;
                        end = y1 / height;
                    }
                }
                else {
                    if (isNumber(x0) && isNumber(x1)) {
                        if (!this._thumbBusy && !thumb.isDragging()) {
                            thumb.set("width", x1 - x0);
                            thumb.set("x", x0);
                        }
                        start = x0 / width;
                        end = x1 / width;
                    }
                }
                if (this.getPrivate("isBusy") && (this.get("start") != start || this.get("end") != end)) {
                    this.set("start", start);
                    this.set("end", end);
                }
                var valueFunction = this.getPrivate("positionTextFunction");
                var from = Math.round(this.get("start", 0) * 100);
                var to = Math.round(this.get("end", 0) * 100);
                var fromValue;
                var toValue;
                if (valueFunction) {
                    fromValue = valueFunction.call(this, this.get("start", 0));
                    toValue = valueFunction.call(this, this.get("end", 0));
                }
                else {
                    fromValue = from + "%";
                    toValue = to + "%";
                }
                thumb.set("ariaLabel", this._t("From %1 to %2", undefined, fromValue, toValue));
                thumb.set("ariaValueNow", "" + from);
                thumb.set("ariaValueText", from + "%");
            }
        });
        Object.defineProperty(Scrollbar.prototype, "_updateGripsByThumb", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var thumb = this.thumb;
                var startGrip = this.startGrip;
                var endGrip = this.endGrip;
                if (this.get("orientation") == "vertical") {
                    var thumbSize = thumb.height();
                    startGrip.set("y", thumb.y());
                    endGrip.set("y", thumb.y() + thumbSize);
                }
                else {
                    var thumbSize = thumb.width();
                    startGrip.set("x", thumb.x());
                    endGrip.set("x", thumb.x() + thumbSize);
                }
            }
        });
        Object.defineProperty(Scrollbar, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Scrollbar"
        });
        Object.defineProperty(Scrollbar, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Container.classNames.concat([Scrollbar.className])
        });
        return Scrollbar;
    }(Container));

    /**
     * A control that allows zooming chart's axes, or other uses requiring range
     * selection.
     */
    var Slider = /** @class */ (function (_super) {
        __extends(Slider, _super);
        function Slider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Slider.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._addOrientationClass();
                _super.prototype._afterNew.call(this);
                this.endGrip.setPrivate("visible", false);
                this.thumb.setPrivate("visible", false);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Slider.prototype, "updateGrips", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.updateGrips.call(this);
                var startGrip = this.startGrip;
                this.endGrip.setAll({ x: startGrip.x(), y: startGrip.y() });
                this.setRaw("end", this.get("start"));
            }
        });
        Object.defineProperty(Slider, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Slider"
        });
        Object.defineProperty(Slider, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Scrollbar.classNames.concat([Slider.className])
        });
        return Slider;
    }(Scrollbar));

    const pi$1 = Math.PI,
        tau$1 = 2 * pi$1,
        epsilon$1 = 1e-6,
        tauEpsilon = tau$1 - epsilon$1;

    function Path() {
      this._x0 = this._y0 = // start of current subpath
      this._x1 = this._y1 = null; // end of current subpath
      this._ = "";
    }

    function path() {
      return new Path;
    }

    Path.prototype = path.prototype = {
      constructor: Path,
      moveTo: function(x, y) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
      },
      closePath: function() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._ += "Z";
        }
      },
      lineTo: function(x, y) {
        this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      quadraticCurveTo: function(x1, y1, x, y) {
        this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      bezierCurveTo: function(x1, y1, x2, y2, x, y) {
        this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      arcTo: function(x1, y1, x2, y2, r) {
        x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
        var x0 = this._x1,
            y0 = this._y1,
            x21 = x2 - x1,
            y21 = y2 - y1,
            x01 = x0 - x1,
            y01 = y0 - y1,
            l01_2 = x01 * x01 + y01 * y01;

        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);

        // Is this path empty? Move to (x1,y1).
        if (this._x1 === null) {
          this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
        }

        // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
        else if (!(l01_2 > epsilon$1));

        // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
        // Equivalently, is (x1,y1) coincident with (x2,y2)?
        // Or, is the radius zero? Line to (x1,y1).
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$1) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        }

        // Otherwise, draw an arc!
        else {
          var x20 = x2 - x0,
              y20 = y2 - y0,
              l21_2 = x21 * x21 + y21 * y21,
              l20_2 = x20 * x20 + y20 * y20,
              l21 = Math.sqrt(l21_2),
              l01 = Math.sqrt(l01_2),
              l = r * Math.tan((pi$1 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
              t01 = l / l01,
              t21 = l / l21;

          // If the start tangent is not coincident with (x0,y0), line to.
          if (Math.abs(t01 - 1) > epsilon$1) {
            this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
          }

          this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
        }
      },
      arc: function(x, y, r, a0, a1, ccw) {
        x = +x, y = +y, r = +r, ccw = !!ccw;
        var dx = r * Math.cos(a0),
            dy = r * Math.sin(a0),
            x0 = x + dx,
            y0 = y + dy,
            cw = 1 ^ ccw,
            da = ccw ? a0 - a1 : a1 - a0;

        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);

        // Is this path empty? Move to (x0,y0).
        if (this._x1 === null) {
          this._ += "M" + x0 + "," + y0;
        }

        // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
        else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) {
          this._ += "L" + x0 + "," + y0;
        }

        // Is this arc empty? We’re done.
        if (!r) return;

        // Does the angle go the wrong way? Flip the direction.
        if (da < 0) da = da % tau$1 + tau$1;

        // Is this a complete circle? Draw two arcs to complete the circle.
        if (da > tauEpsilon) {
          this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
        }

        // Is this arc non-empty? Draw an arc!
        else if (da > epsilon$1) {
          this._ += "A" + r + "," + r + ",0," + (+(da >= pi$1)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
        }
      },
      rect: function(x, y, w, h) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
      },
      toString: function() {
        return this._;
      }
    };

    function constant(x) {
      return function constant() {
        return x;
      };
    }

    const abs = Math.abs;
    const atan2 = Math.atan2;
    const cos = Math.cos;
    const max$1 = Math.max;
    const min$1 = Math.min;
    const sin = Math.sin;
    const sqrt = Math.sqrt;

    const epsilon = 1e-12;
    const pi = Math.PI;
    const halfPi = pi / 2;
    const tau = 2 * pi;

    function acos(x) {
      return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
    }

    function asin(x) {
      return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
    }

    function arcInnerRadius(d) {
      return d.innerRadius;
    }

    function arcOuterRadius(d) {
      return d.outerRadius;
    }

    function arcStartAngle(d) {
      return d.startAngle;
    }

    function arcEndAngle(d) {
      return d.endAngle;
    }

    function arcPadAngle(d) {
      return d && d.padAngle; // Note: optional!
    }

    function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
      var x10 = x1 - x0, y10 = y1 - y0,
          x32 = x3 - x2, y32 = y3 - y2,
          t = y32 * x10 - x32 * y10;
      if (t * t < epsilon) return;
      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
      return [x0 + t * x10, y0 + t * y10];
    }

    // Compute perpendicular offset line of length rc.
    // http://mathworld.wolfram.com/Circle-LineIntersection.html
    function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
      var x01 = x0 - x1,
          y01 = y0 - y1,
          lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
          ox = lo * y01,
          oy = -lo * x01,
          x11 = x0 + ox,
          y11 = y0 + oy,
          x10 = x1 + ox,
          y10 = y1 + oy,
          x00 = (x11 + x10) / 2,
          y00 = (y11 + y10) / 2,
          dx = x10 - x11,
          dy = y10 - y11,
          d2 = dx * dx + dy * dy,
          r = r1 - rc,
          D = x11 * y10 - x10 * y11,
          d = (dy < 0 ? -1 : 1) * sqrt(max$1(0, r * r * d2 - D * D)),
          cx0 = (D * dy - dx * d) / d2,
          cy0 = (-D * dx - dy * d) / d2,
          cx1 = (D * dy + dx * d) / d2,
          cy1 = (-D * dx + dy * d) / d2,
          dx0 = cx0 - x00,
          dy0 = cy0 - y00,
          dx1 = cx1 - x00,
          dy1 = cy1 - y00;

      // Pick the closer of the two intersection points.
      // TODO Is there a faster way to determine which intersection to use?
      if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

      return {
        cx: cx0,
        cy: cy0,
        x01: -ox,
        y01: -oy,
        x11: cx0 * (r1 / r - 1),
        y11: cy0 * (r1 / r - 1)
      };
    }

    function arc() {
      var innerRadius = arcInnerRadius,
          outerRadius = arcOuterRadius,
          cornerRadius = constant(0),
          padRadius = null,
          startAngle = arcStartAngle,
          endAngle = arcEndAngle,
          padAngle = arcPadAngle,
          context = null;

      function arc() {
        var buffer,
            r,
            r0 = +innerRadius.apply(this, arguments),
            r1 = +outerRadius.apply(this, arguments),
            a0 = startAngle.apply(this, arguments) - halfPi,
            a1 = endAngle.apply(this, arguments) - halfPi,
            da = abs(a1 - a0),
            cw = a1 > a0;

        if (!context) context = buffer = path();

        // Ensure that the outer radius is always larger than the inner radius.
        if (r1 < r0) r = r1, r1 = r0, r0 = r;

        // Is it a point?
        if (!(r1 > epsilon)) context.moveTo(0, 0);

        // Or is it a circle or annulus?
        else if (da > tau - epsilon) {
          context.moveTo(r1 * cos(a0), r1 * sin(a0));
          context.arc(0, 0, r1, a0, a1, !cw);
          if (r0 > epsilon) {
            context.moveTo(r0 * cos(a1), r0 * sin(a1));
            context.arc(0, 0, r0, a1, a0, cw);
          }
        }

        // Or is it a circular or annular sector?
        else {
          var a01 = a0,
              a11 = a1,
              a00 = a0,
              a10 = a1,
              da0 = da,
              da1 = da,
              ap = padAngle.apply(this, arguments) / 2,
              rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
              rc = min$1(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
              rc0 = rc,
              rc1 = rc,
              t0,
              t1;

          // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
          if (rp > epsilon) {
            var p0 = asin(rp / r0 * sin(ap)),
                p1 = asin(rp / r1 * sin(ap));
            if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
            else da0 = 0, a00 = a10 = (a0 + a1) / 2;
            if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
            else da1 = 0, a01 = a11 = (a0 + a1) / 2;
          }

          var x01 = r1 * cos(a01),
              y01 = r1 * sin(a01),
              x10 = r0 * cos(a10),
              y10 = r0 * sin(a10);

          // Apply rounded corners?
          if (rc > epsilon) {
            var x11 = r1 * cos(a11),
                y11 = r1 * sin(a11),
                x00 = r0 * cos(a00),
                y00 = r0 * sin(a00),
                oc;

            // Restrict the corner radius according to the sector angle.
            if (da < pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
              var ax = x01 - oc[0],
                  ay = y01 - oc[1],
                  bx = x11 - oc[0],
                  by = y11 - oc[1],
                  kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
                  lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
              rc0 = min$1(rc, (r0 - lc) / (kc - 1));
              rc1 = min$1(rc, (r1 - lc) / (kc + 1));
            }
          }

          // Is the sector collapsed to a line?
          if (!(da1 > epsilon)) context.moveTo(x01, y01);

          // Does the sector’s outer ring have rounded corners?
          else if (rc1 > epsilon) {
            t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
            t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

            context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

            // Have the corners merged?
            if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

            // Otherwise, draw the two corners and the ring.
            else {
              context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
              context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
              context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
            }
          }

          // Or is the outer ring just a circular arc?
          else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

          // Is there no inner ring, and it’s a circular sector?
          // Or perhaps it’s an annular sector collapsed due to padding?
          if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);

          // Does the sector’s inner ring (or point) have rounded corners?
          else if (rc0 > epsilon) {
            t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
            t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

            context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

            // Have the corners merged?
            if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

            // Otherwise, draw the two corners and the ring.
            else {
              context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
              context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
              context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
            }
          }

          // Or is the inner ring just a circular arc?
          else context.arc(0, 0, r0, a10, a00, cw);
        }

        context.closePath();

        if (buffer) return context = null, buffer + "" || null;
      }

      arc.centroid = function() {
        var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
            a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
        return [cos(a) * r, sin(a) * r];
      };

      arc.innerRadius = function(_) {
        return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant(+_), arc) : innerRadius;
      };

      arc.outerRadius = function(_) {
        return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant(+_), arc) : outerRadius;
      };

      arc.cornerRadius = function(_) {
        return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant(+_), arc) : cornerRadius;
      };

      arc.padRadius = function(_) {
        return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant(+_), arc) : padRadius;
      };

      arc.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), arc) : startAngle;
      };

      arc.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), arc) : endAngle;
      };

      arc.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), arc) : padAngle;
      };

      arc.context = function(_) {
        return arguments.length ? ((context = _ == null ? null : _), arc) : context;
      };

      return arc;
    }

    function array(x) {
      return typeof x === "object" && "length" in x
        ? x // Array, TypedArray, NodeList, array-like
        : Array.from(x); // Map, Set, iterable, string, or anything else
    }

    function Linear(context) {
      this._context = context;
    }

    Linear.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; // falls through
          default: this._context.lineTo(x, y); break;
        }
      }
    };

    function curveLinear(context) {
      return new Linear(context);
    }

    function x(p) {
      return p[0];
    }

    function y(p) {
      return p[1];
    }

    function line(x$1, y$1) {
      var defined = constant(true),
          context = null,
          curve = curveLinear,
          output = null;

      x$1 = typeof x$1 === "function" ? x$1 : (x$1 === undefined) ? x : constant(x$1);
      y$1 = typeof y$1 === "function" ? y$1 : (y$1 === undefined) ? y : constant(y$1);

      function line(data) {
        var i,
            n = (data = array(data)).length,
            d,
            defined0 = false,
            buffer;

        if (context == null) output = curve(buffer = path());

        for (i = 0; i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) output.lineStart();
            else output.lineEnd();
          }
          if (defined0) output.point(+x$1(d, i, data), +y$1(d, i, data));
        }

        if (buffer) return output = null, buffer + "" || null;
      }

      line.x = function(_) {
        return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), line) : x$1;
      };

      line.y = function(_) {
        return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), line) : y$1;
      };

      line.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), line) : defined;
      };

      line.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
      };

      line.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
      };

      return line;
    }

    function area(x0, y0, y1) {
      var x1 = null,
          defined = constant(true),
          context = null,
          curve = curveLinear,
          output = null;

      x0 = typeof x0 === "function" ? x0 : (x0 === undefined) ? x : constant(+x0);
      y0 = typeof y0 === "function" ? y0 : (y0 === undefined) ? constant(0) : constant(+y0);
      y1 = typeof y1 === "function" ? y1 : (y1 === undefined) ? y : constant(+y1);

      function area(data) {
        var i,
            j,
            k,
            n = (data = array(data)).length,
            d,
            defined0 = false,
            buffer,
            x0z = new Array(n),
            y0z = new Array(n);

        if (context == null) output = curve(buffer = path());

        for (i = 0; i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) {
              j = i;
              output.areaStart();
              output.lineStart();
            } else {
              output.lineEnd();
              output.lineStart();
              for (k = i - 1; k >= j; --k) {
                output.point(x0z[k], y0z[k]);
              }
              output.lineEnd();
              output.areaEnd();
            }
          }
          if (defined0) {
            x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
            output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
          }
        }

        if (buffer) return output = null, buffer + "" || null;
      }

      function arealine() {
        return line().defined(defined).curve(curve).context(context);
      }

      area.x = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), x1 = null, area) : x0;
      };

      area.x0 = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), area) : x0;
      };

      area.x1 = function(_) {
        return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : x1;
      };

      area.y = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), y1 = null, area) : y0;
      };

      area.y0 = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), area) : y0;
      };

      area.y1 = function(_) {
        return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : y1;
      };

      area.lineX0 =
      area.lineY0 = function() {
        return arealine().x(x0).y(y0);
      };

      area.lineY1 = function() {
        return arealine().x(x0).y(y1);
      };

      area.lineX1 = function() {
        return arealine().x(x1).y(y0);
      };

      area.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), area) : defined;
      };

      area.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
      };

      area.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
      };

      return area;
    }

    function point$2(that, x, y) {
      that._context.bezierCurveTo(
        that._x1 + that._k * (that._x2 - that._x0),
        that._y1 + that._k * (that._y2 - that._y0),
        that._x2 + that._k * (that._x1 - x),
        that._y2 + that._k * (that._y1 - y),
        that._x2,
        that._y2
      );
    }

    function Cardinal(context, tension) {
      this._context = context;
      this._k = (1 - tension) / 6;
    }

    Cardinal.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 =
        this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2: this._context.lineTo(this._x2, this._y2); break;
          case 3: point$2(this, this._x1, this._y1); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
          case 2: this._point = 3; // falls through
          default: point$2(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var curveCardinal = (function custom(tension) {

      function cardinal(context) {
        return new Cardinal(context, tension);
      }

      cardinal.tension = function(tension) {
        return custom(+tension);
      };

      return cardinal;
    })(0);

    function Step(context, t) {
      this._context = context;
      this._t = t;
    }

    Step.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; // falls through
          default: {
            if (this._t <= 0) {
              this._context.lineTo(this._x, y);
              this._context.lineTo(x, y);
            } else {
              var x1 = this._x * (1 - this._t) + x * this._t;
              this._context.lineTo(x1, this._y);
              this._context.lineTo(x1, y);
            }
            break;
          }
        }
        this._x = x, this._y = y;
      }
    };

    function stepAfter(context) {
      return new Step(context, 1);
    }

    /**
     * Draws a slice shape.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     */
    var Slice = /** @class */ (function (_super) {
        __extends(Slice, _super);
        function Slice() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * @ignore
             */
            Object.defineProperty(_this, "ix", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            /**
             * @ignore
             */
            Object.defineProperty(_this, "iy", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_generator", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: arc()
            });
            return _this;
        }
        Object.defineProperty(Slice.prototype, "_getTooltipPoint", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var tooltipX = this.get("tooltipX");
                var tooltipY = this.get("tooltipY");
                var x = 0;
                var y = 0;
                if (isNumber(tooltipX)) {
                    x = tooltipX;
                }
                if (isNumber(tooltipY)) {
                    y = tooltipY;
                }
                var radius = this.get("radius", 0);
                var innerRadius = this.get("innerRadius", 0);
                var dRadius = this.get("dRadius", 0);
                var dInnerRadius = this.get("dInnerRadius", 0);
                radius += dRadius;
                innerRadius += dInnerRadius;
                if (innerRadius < 0) {
                    innerRadius = radius + innerRadius;
                }
                if (tooltipX instanceof Percent) {
                    x = this.ix * (innerRadius + (radius - innerRadius) * tooltipX.value);
                }
                if (tooltipY instanceof Percent) {
                    y = this.iy * (innerRadius + (radius - innerRadius) * tooltipY.value);
                }
                if (this.get("arc") >= 360 && innerRadius == 0) {
                    x = 0;
                    y = 0;
                }
                return { x: x, y: y };
            }
        });
        Object.defineProperty(Slice.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("radius") || this.isDirty("arc") || this.isDirty("innerRadius") || this.isDirty("startAngle") || this.isDirty("dRadius") || this.isDirty("dInnerRadius") || this.isDirty("cornerRadius")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Slice.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear) {
                    var startAngle = this.get("startAngle", 0);
                    var arc_1 = this.get("arc", 0);
                    var generator = this._generator;
                    if (arc_1 < 0) {
                        startAngle = startAngle + arc_1;
                        arc_1 = arc_1 * -1;
                    }
                    if (arc_1 > 0.1) { // this fixes bug with full circle when arc is very small
                        generator.cornerRadius(this.get("cornerRadius", 0));
                    }
                    generator.context(this._display);
                    var radius = this.get("radius", 0);
                    var innerRadius = this.get("innerRadius", 0);
                    var dRadius = this.get("dRadius", 0);
                    var dInnerRadius = this.get("dInnerRadius", 0);
                    radius += dRadius;
                    innerRadius += dInnerRadius;
                    if (innerRadius < 0) {
                        innerRadius = radius + innerRadius;
                    }
                    generator({ innerRadius: innerRadius, outerRadius: radius, startAngle: (startAngle + 90) * RADIANS, endAngle: (startAngle + arc_1 + 90) * RADIANS });
                    var middleAngle = startAngle + arc_1 / 2;
                    this.ix = cos$1(middleAngle);
                    this.iy = sin$1(middleAngle);
                }
                if (this.isDirty("shiftRadius")) {
                    var shiftRadius = this.get("shiftRadius", 0);
                    this.setRaw("dx", this.ix * shiftRadius);
                    this.setRaw("dy", this.iy * shiftRadius);
                    this.markDirtyPosition();
                }
            }
        });
        Object.defineProperty(Slice, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Slice"
        });
        Object.defineProperty(Slice, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([Slice.className])
        });
        return Slice;
    }(Graphics));

    /**
     * A base class for all charts.
     */
    var Chart$1 = /** @class */ (function (_super) {
        __extends(Chart, _super);
        function Chart() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * A [[Container]] chart places its elements in.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "chartContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Container.new(_this._root, { width: p100, height: p100, interactiveChildren: false }))
            });
            /**
             * A [[Container]] chart places its bullets in.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "bulletsContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: Container.new(_this._root, { interactiveChildren: false, isMeasured: false, position: "absolute", width: p100, height: p100 })
            });
            return _this;
        }
        Object.defineProperty(Chart, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Chart"
        });
        Object.defineProperty(Chart, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Container.classNames.concat([Chart.className])
        });
        return Chart;
    }(Container));

    /**
     * A base class for all series-based charts.
     */
    var SerialChart = /** @class */ (function (_super) {
        __extends(SerialChart, _super);
        function SerialChart() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * A [[Container]] where chart will store all series.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "seriesContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: Container.new(_this._root, { width: p100, height: p100, isMeasured: false })
            });
            /**
             * A list of chart's series.
             */
            Object.defineProperty(_this, "series", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListAutoDispose()
            });
            return _this;
        }
        Object.defineProperty(SerialChart.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._afterNew.call(this);
                this._disposers.push(this.series);
                var children = this.seriesContainer.children;
                this._disposers.push(this.series.events.onAll(function (change) {
                    if (change.type === "clear") {
                        each$1(change.oldValues, function (series) {
                            _this._removeSeries(series);
                        });
                        var colors = _this.get("colors");
                        if (colors) {
                            colors.reset();
                        }
                    }
                    else if (change.type === "push") {
                        children.moveValue(change.newValue);
                        _this._processSeries(change.newValue);
                    }
                    else if (change.type === "setIndex") {
                        children.setIndex(change.index, change.newValue);
                        _this._processSeries(change.newValue);
                    }
                    else if (change.type === "insertIndex") {
                        children.insertIndex(change.index, change.newValue);
                        _this._processSeries(change.newValue);
                    }
                    else if (change.type === "removeIndex") {
                        _this._removeSeries(change.oldValue);
                    }
                    else if (change.type === "moveIndex") {
                        children.moveValue(change.value, change.newIndex);
                        _this._processSeries(change.value);
                    }
                    else {
                        throw new Error("Unknown IListEvent type");
                    }
                }));
            }
        });
        Object.defineProperty(SerialChart.prototype, "_processSeries", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (series) {
                series.chart = this;
                series._placeBulletsContainer(this);
            }
        });
        Object.defineProperty(SerialChart.prototype, "_removeSeries", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (series) {
                if (!series.isDisposed()) {
                    this.seriesContainer.children.removeValue(series);
                    series._removeBulletsContainer();
                }
            }
        });
        Object.defineProperty(SerialChart, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "SerialChart"
        });
        Object.defineProperty(SerialChart, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Chart$1.classNames.concat([SerialChart.className])
        });
        return SerialChart;
    }(Chart$1));

    /**
     * Draws a tick element (mostly used on axes).
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     */
    var Tick = /** @class */ (function (_super) {
        __extends(Tick, _super);
        function Tick() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Tick, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Tick"
        });
        Object.defineProperty(Tick, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Line.classNames.concat([Tick.className])
        });
        return Tick;
    }(Line));

    function parseDate(timezone, date) {
        var year = 0;
        var month = 0;
        var day = 1;
        var hour = 0;
        var minute = 0;
        var second = 0;
        var millisecond = 0;
        var weekday = 0;
        timezone.formatToParts(date).forEach(function (x) {
            switch (x.type) {
                case "year":
                    year = +x.value;
                    break;
                case "month":
                    month = (+x.value) - 1;
                    break;
                case "day":
                    day = +x.value;
                    break;
                case "hour":
                    hour = +x.value;
                    break;
                case "minute":
                    minute = +x.value;
                    break;
                case "second":
                    second = +x.value;
                    break;
                case "fractionalSecond":
                    millisecond = +x.value;
                    break;
                case "weekday":
                    switch (x.value) {
                        case "Sun":
                            weekday = 0;
                            break;
                        case "Mon":
                            weekday = 1;
                            break;
                        case "Tue":
                            weekday = 2;
                            break;
                        case "Wed":
                            weekday = 3;
                            break;
                        case "Thu":
                            weekday = 4;
                            break;
                        case "Fri":
                            weekday = 5;
                            break;
                        case "Sat":
                            weekday = 6;
                            break;
                    }
            }
        });
        if (hour === 24) {
            hour = 0;
        }
        return { year: year, month: month, day: day, hour: hour, minute: minute, second: second, millisecond: millisecond, weekday: weekday };
    }
    function toUTCDate(timezone, date) {
        var _a = parseDate(timezone, date), year = _a.year, month = _a.month, day = _a.day, hour = _a.hour, minute = _a.minute, second = _a.second, millisecond = _a.millisecond;
        return Date.UTC(year, month, day, hour, minute, second, millisecond);
    }
    var Timezone = /** @class */ (function () {
        function Timezone(timezone, isReal) {
            Object.defineProperty(this, "_utc", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_dtf", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "name", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            if (!isReal) {
                throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
            }
            this.name = timezone;
            this._utc = new Intl.DateTimeFormat("UTC", {
                hour12: false,
                timeZone: "UTC",
                year: "numeric",
                month: "2-digit",
                day: "2-digit",
                hour: "2-digit",
                minute: "2-digit",
                second: "2-digit",
                weekday: "short",
                fractionalSecondDigits: 3,
            });
            this._dtf = new Intl.DateTimeFormat("UTC", {
                hour12: false,
                timeZone: timezone,
                year: "numeric",
                month: "2-digit",
                day: "2-digit",
                hour: "2-digit",
                minute: "2-digit",
                second: "2-digit",
                weekday: "short",
                fractionalSecondDigits: 3,
            });
        }
        /**
         * Use this method to create an instance of this class.
         *
         * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info
         * @param   timezone  IANA timezone
         * @return            Instantiated object
         */
        Object.defineProperty(Timezone, "new", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (timezone) {
                return (new this(timezone, true));
            }
        });
        Object.defineProperty(Timezone.prototype, "convertLocal", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (date) {
                var offset = this.offsetUTC(date);
                var userOffset = date.getTimezoneOffset();
                var output = new Date(date);
                output.setUTCMinutes(output.getUTCMinutes() - (offset - userOffset));
                var newUserOffset = output.getTimezoneOffset();
                if (userOffset != newUserOffset) {
                    output.setUTCMinutes(output.getUTCMinutes() + newUserOffset - userOffset);
                }
                return output;
            }
        });
        Object.defineProperty(Timezone.prototype, "offsetUTC", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (date) {
                var utc = toUTCDate(this._utc, date);
                var dtf = toUTCDate(this._dtf, date);
                return (utc - dtf) / 60000;
            }
        });
        Object.defineProperty(Timezone.prototype, "parseDate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (date) {
                return parseDate(this._dtf, date);
            }
        });
        return Timezone;
    }());

    /**
     * Radial gradient.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info
     */
    var RadialGradient = /** @class */ (function (_super) {
        __extends(RadialGradient, _super);
        function RadialGradient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(RadialGradient.prototype, "getFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                var bounds = this.getBounds(target);
                var x = 0;
                var y = 0;
                var l = bounds.left || 0;
                var r = bounds.right || 0;
                var t = bounds.top || 0;
                var b = bounds.bottom || 0;
                var width = r - l;
                var height = b - t;
                var radius = target.get("radius");
                if (isNumber(radius)) {
                    x = 0;
                    y = 0;
                }
                else {
                    radius = Math.min(width, height) / 2;
                    x = width / 2;
                    y = height / 2;
                }
                var gradient = this._root._renderer.createRadialGradient(x, y, 0, x, y, radius);
                var stops = this.get("stops");
                if (stops) {
                    var i_1 = 0;
                    each$1(stops, function (stop) {
                        var offset = stop.offset;
                        if (!isNumber(offset)) {
                            offset = i_1 / (stops.length - 1);
                        }
                        var opacity = stop.opacity;
                        if (!isNumber(opacity)) {
                            opacity = 1;
                        }
                        var color = stop.color;
                        if (color) {
                            var lighten = stop.lighten;
                            if (lighten) {
                                color = Color.lighten(color, lighten);
                            }
                            var brighten = stop.brighten;
                            if (brighten) {
                                color = Color.brighten(color, brighten);
                            }
                            gradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');
                        }
                        i_1++;
                    });
                }
                return gradient;
            }
        });
        Object.defineProperty(RadialGradient, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "RadialGradient"
        });
        Object.defineProperty(RadialGradient, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Gradient.classNames.concat([RadialGradient.className])
        });
        return RadialGradient;
    }(Gradient));

    /**
     * Base class for patterns.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info
     */
    var Pattern = /** @class */ (function (_super) {
        __extends(Pattern, _super);
        function Pattern() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_display", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._root._renderer.makeGraphics()
            });
            Object.defineProperty(_this, "_backgroundDisplay", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._root._renderer.makeGraphics()
            });
            Object.defineProperty(_this, "_clear", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_pattern", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(Pattern.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                // Applying themes because pattern will not have parent
                _super.prototype._afterNewApplyThemes.call(this);
            }
        });
        Object.defineProperty(Pattern.prototype, "pattern", {
            get: function () {
                return this._pattern;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pattern.prototype, "_draw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        Object.defineProperty(Pattern.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("repetition") || this.isDirty("width") || this.isDirty("height") || this.isDirty("rotation") || this.isDirty("color") || this.isDirty("strokeWidth") || this.isDirty("strokeDasharray") || this.isDirty("strokeDashoffset") || this.isDirty("colorOpacity") || this.isDirty("fill") || this.isDirty("fillOpacity")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Pattern.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear) {
                    var repetition = this.get("repetition", "");
                    var width = this.get("width", 100);
                    var height = this.get("height", 100);
                    var fill = this.get("fill");
                    var fillOpacity = this.get("fillOpacity", 1);
                    this._display.clear();
                    this._backgroundDisplay.clear();
                    if (fill && (fillOpacity > 0)) {
                        this._backgroundDisplay.beginFill(fill, fillOpacity);
                        this._backgroundDisplay.drawRect(0, 0, width, height);
                        this._backgroundDisplay.endFill();
                    }
                    this._display.angle = this.get("rotation", 0);
                    //this._display.pivot = { x: width / 2, y: height / 2 };
                    this._draw();
                    this._pattern = this._root._renderer.createPattern(this._display, this._backgroundDisplay, repetition, width, height);
                }
            }
        });
        Object.defineProperty(Pattern, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Pattern"
        });
        Object.defineProperty(Pattern, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Entity.classNames.concat([Pattern.className])
        });
        return Pattern;
    }(Entity));

    /**
     * Circle pattern.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info
     */
    var CirclePattern = /** @class */ (function (_super) {
        __extends(CirclePattern, _super);
        function CirclePattern() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CirclePattern.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("gap")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(CirclePattern.prototype, "_draw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._draw.call(this);
                var checkered = this.get("checkered", false);
                var centered = this.get("centered", true);
                var gap = this.get("gap", 0);
                var rotation = this.get("rotation", 0);
                var w = this.get("width", 100);
                var h = this.get("height", 100);
                var radius = this.get("radius", 3);
                var cellW = radius * 2 + gap;
                var cellH = radius * 2 + gap;
                var cols = Math.round(w / cellW);
                var rows = Math.round(h / cellH);
                cellW = w / cols;
                cellH = h / rows;
                if (rotation != 0) {
                    // @todo this is probably not right
                    this._display.x = cellW * cos$1(rotation);
                    this._display.y = cellH * sin$1(rotation);
                }
                var color = this.get("color");
                var colorOpacity = this.get("colorOpacity");
                if (color || colorOpacity) {
                    this._display.beginFill(color, colorOpacity);
                }
                for (var r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {
                    for (var c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {
                        if (!checkered || ((r & 1) != 1 && (c & 1) != 1) || ((r & 1) == 1 && (c & 1) == 1)) {
                            var x = c * cellW;
                            var y = r * cellH;
                            if (centered) {
                                x += cellW + gap / 2;
                                y += cellH + gap / 2;
                            }
                            this._display.drawCircle(x - radius, y - radius, radius);
                        }
                    }
                }
                if (checkered) {
                    w = w / 2 - gap * 2;
                    h = h / 2 - gap * 2;
                }
                else {
                    w -= gap;
                    h -= gap;
                }
                if (color || colorOpacity) {
                    this._display.endFill();
                }
            }
        });
        Object.defineProperty(CirclePattern, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "CirclePattern"
        });
        Object.defineProperty(CirclePattern, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Pattern.classNames.concat([CirclePattern.className])
        });
        return CirclePattern;
    }(Pattern));

    /**
     * Line pattern.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info
     */
    var LinePattern = /** @class */ (function (_super) {
        __extends(LinePattern, _super);
        function LinePattern() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(LinePattern.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("gap")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(LinePattern.prototype, "_draw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._draw.call(this);
                var w = this.get("width", 100);
                var h = this.get("height", 100);
                var gap = this.get("gap", 0);
                var strokeWidth = this.get("strokeWidth", 1);
                if (!gap) {
                    this._display.moveTo(0, 0);
                    this._display.lineTo(w, 0);
                }
                else {
                    var step = gap + strokeWidth;
                    var count = h / step;
                    for (var i = -count; i < count * 2; i++) {
                        var y = Math.round(i * step - step / 2) + 0.5;
                        this._display.moveTo(-w, y);
                        this._display.lineTo(w * 2, y);
                    }
                }
                this._display.lineStyle(strokeWidth, this.get("color"), this.get("colorOpacity"));
                var strokeDasharray = this.get("strokeDasharray");
                if (isNumber(strokeDasharray)) {
                    if (strokeDasharray < 0.5) {
                        strokeDasharray = [0];
                    }
                    else {
                        strokeDasharray = [strokeDasharray];
                    }
                }
                this._display.setLineDash(strokeDasharray);
                var strokeDashoffset = this.get("strokeDashoffset");
                if (strokeDashoffset) {
                    this._display.setLineDashOffset(strokeDashoffset);
                }
                this._display.endStroke();
            }
        });
        Object.defineProperty(LinePattern, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "LinePattern"
        });
        Object.defineProperty(LinePattern, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Pattern.classNames.concat([LinePattern.className])
        });
        return LinePattern;
    }(Pattern));

    /**
     * Rectangle pattern.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info
     */
    var RectanglePattern = /** @class */ (function (_super) {
        __extends(RectanglePattern, _super);
        function RectanglePattern() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(RectanglePattern.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("gap")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(RectanglePattern.prototype, "_draw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._draw.call(this);
                var checkered = this.get("checkered", false);
                var centered = this.get("centered", true);
                var gap = this.get("gap", 0);
                var rotation = this.get("rotation", 0);
                var w = this.get("width", 100);
                var h = this.get("height", 100);
                var rectW = this.get("maxWidth", 5);
                var rectH = this.get("maxHeight", 5);
                var cellW = rectW + gap;
                var cellH = rectH + gap;
                var cols = Math.round(w / cellW);
                var rows = Math.round(h / cellH);
                cellW = w / cols;
                cellH = h / rows;
                if (rotation != 0) {
                    // @todo this is probably not right
                    this._display.x = cellW / 2 * cos$1(rotation);
                    this._display.y = -cellH / 2 * sin$1(rotation);
                }
                for (var r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {
                    for (var c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {
                        if (!checkered || ((r & 1) != 1 && (c & 1) != 1) || ((r & 1) == 1 && (c & 1) == 1)) {
                            var x = c * cellW;
                            var y = r * cellH;
                            if (centered) {
                                x += (cellW - rectW) / 2;
                                y += (cellH - rectH) / 2;
                            }
                            this._display.drawRect(x, y, rectW, rectH);
                        }
                    }
                }
                if (checkered) {
                    w = w / 2 - gap * 2;
                    h = h / 2 - gap * 2;
                }
                else {
                    w -= gap;
                    h -= gap;
                }
                var color = this.get("color");
                var colorOpacity = this.get("colorOpacity");
                if (color || colorOpacity) {
                    // this._display.lineStyle(strokeWidth, stroke, colorOpacity);
                    // this._display.endStroke();
                    this._display.beginFill(color, colorOpacity);
                    this._display.endFill();
                }
            }
        });
        Object.defineProperty(RectanglePattern, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "RectanglePattern"
        });
        Object.defineProperty(RectanglePattern, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Pattern.classNames.concat([RectanglePattern.className])
        });
        return RectanglePattern;
    }(Pattern));

    /**
     * An object which holds list of colors and can generate new ones.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/#Color_sets} for more info
     */
    var ColorSet = /** @class */ (function (_super) {
        __extends(ColorSet, _super);
        function ColorSet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        //protected _currentPass: number = 0;
        Object.defineProperty(ColorSet.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                // Applying themes because color set will not have parent
                _super.prototype._afterNewApplyThemes.call(this);
            }
        });
        Object.defineProperty(ColorSet.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.isDirty("colors")) {
                    this.reset();
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(ColorSet.prototype, "generateColors", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setPrivate("currentPass", this.getPrivate("currentPass", 0) + 1);
                var pass = this.getPrivate("currentPass");
                var colors = this.get("colors", [this.get("baseColor", Color.fromHex(0xff0000))]);
                if (!this.getPrivate("numColors")) {
                    this.setPrivate("numColors", colors.length);
                }
                //const len = colors.length;
                var len = this.getPrivate("numColors");
                //const start = len - this.getPrivate("numColors")!;
                var start = 0;
                var passOptions = this.get("passOptions");
                var reuse = this.get("reuse");
                for (var i = start; i < len; i++) {
                    if (reuse) {
                        colors.push(colors[i]);
                    }
                    else {
                        var hsl = colors[i].toHSL();
                        var h = hsl.h + (passOptions.hue || 0) * pass;
                        while (h > 1)
                            h -= 1;
                        var s = hsl.s + (passOptions.saturation || 0) * pass;
                        //if (s > 1) s -= Math.floor(s);
                        if (s > 1)
                            s = 1;
                        if (s < 0)
                            s = 0;
                        var l = hsl.l + (passOptions.lightness || 0) * pass;
                        //if (l > 1) l -= Math.floor(l);
                        while (l > 1)
                            l -= 1;
                        colors.push(Color.fromHSL(h, s, l));
                    }
                }
            }
        });
        /**
         * Returns a [[Color]] at specific index.
         *
         * If there's no color at this index, a new color is generated.
         *
         * @param   index  Index
         * @return         Color
         */
        Object.defineProperty(ColorSet.prototype, "getIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index) {
                var colors = this.get("colors", []);
                var saturation = this.get("saturation");
                if (index >= colors.length) {
                    this.generateColors();
                    return this.getIndex(index);
                }
                return saturation != null ? Color.saturate(colors[index], saturation) : colors[index];
            }
        });
        /**
         * Returns next [[Color]] in the list.
         *
         * If the list is out of colors, new ones are generated dynamically.
         */
        Object.defineProperty(ColorSet.prototype, "next", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var currentStep = this.getPrivate("currentStep", this.get("startIndex", 0));
                this.setPrivate("currentStep", currentStep + this.get("step", 1));
                return this.getIndex(currentStep);
            }
        });
        /**
         * Resets counter to the start of the list, so the next call for `next()` will
         * return the first color.
         */
        Object.defineProperty(ColorSet.prototype, "reset", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setPrivate("currentStep", this.get("startIndex", 0));
                this.setPrivate("currentPass", 0);
            }
        });
        Object.defineProperty(ColorSet, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "ColorSet"
        });
        Object.defineProperty(ColorSet, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Entity.classNames.concat([ColorSet.className])
        });
        return ColorSet;
    }(Entity));

    /**
     * Tool to parse JSON string into structured data.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/data/#Parsing} for more info
     * @important
     */
    var JSONParser = /** @class */ (function () {
        function JSONParser() {
        }
        /**
         * Parses JSON string.
         *
         * @param   input    JSON
         * @param   options  Options
         * @return           Data
         */
        Object.defineProperty(JSONParser, "parse", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (input, options) {
                options = this._applyDefaults(options);
                try {
                    if (isString(input)) {
                        var data = JSON.parse(input);
                        if (options.reverse && isArray(data)) {
                            data.reverse();
                        }
                        return data;
                    }
                    else if (isArray(input) || isObject(input)) {
                        return input;
                    }
                    else {
                        throw ("Unable to parse JSON data");
                    }
                }
                catch (e) {
                    return undefined;
                }
            }
        });
        Object.defineProperty(JSONParser, "_applyDefaults", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (options) {
                var normalized = {};
                var defaults = {
                    reverse: false
                };
                if (!options) {
                    options = {};
                }
                each(defaults, function (key, val) {
                    normalized[key] = options[key] || val;
                });
                return normalized;
            }
        });
        return JSONParser;
    }());
    /**
     * Tool to parse JSON string into structured data.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/data/#Parsing} for more info
     * @important
     */
    var CSVParser = /** @class */ (function () {
        function CSVParser() {
        }
        /**
         * Parses CSV string.
         *
         * @param   input    CSV
         * @param   options  Options
         * @return           Data
         */
        Object.defineProperty(CSVParser, "parse", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (input, options) {
                options = this._applyDefaults(options);
                // Get CSV data as array
                var data = this.CSVToArray(input, options.delimiter);
                // Init resuling array
                var res = [], cols = [], col, i;
                // Skip rows
                for (i = 0; i < options.skipRows; i++) {
                    data.shift();
                }
                // First row holds column names?
                if (options.useColumnNames) {
                    cols = data.shift();
                    // Normalize column names
                    for (var x = 0; x < cols.length; x++) {
                        // trim
                        col = cols[x] != null ? cols[x].replace(/^\s+|\s+$/gm, "") : "";
                        // Check for empty
                        if ("" === col) {
                            col = "col" + x;
                        }
                        cols[x] = col;
                    }
                }
                // Iterate through the result set
                var row;
                while (true) {
                    row = options.reverse ? data.pop() : data.shift();
                    if (!row) {
                        break;
                    }
                    if (options.skipEmpty && row.length === 1 && row[0] === "") {
                        continue;
                    }
                    var dataPoint = {};
                    for (i = 0; i < row.length; i++) {
                        col = undefined === cols[i] ? "col" + i : cols[i];
                        dataPoint[col] = row[i];
                    }
                    res.push(dataPoint);
                }
                return res;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(CSVParser, "CSVToArray", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (data, delimiter) {
                // Check to see if the delimiter is defined. If not,
                // then default to comma.
                delimiter = (delimiter || ',');
                // Create a regular expression to parse the CSV values.
                var objPattern = new RegExp((
                // Delimiters.
                "(\\" + delimiter + "|\\r?\\n|\\r|^)" +
                    // Quoted fields.
                    "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +
                    // Standard fields.
                    "([^\"\\" + delimiter + "\\r\\n]*))"), "gi");
                // Create an array to hold our data. Give the array
                // a default empty first row.
                var arrData = [
                    []
                ];
                // Create an array to hold our individual pattern
                // matching groups.
                var arrMatches = null;
                // Keep looping over the regular expression matches
                // until we can no longer find a match.
                while (true) {
                    arrMatches = objPattern.exec(data);
                    if (!arrMatches) {
                        break;
                    }
                    // Get the delimiter that was found.
                    var strMatchedDelimiter = arrMatches[1];
                    // Check to see if the given delimiter has a length
                    // (is not the start of string) and if it matches
                    // field delimiter. If id does not, then we know
                    // that this delimiter is a row delimiter.
                    if (strMatchedDelimiter.length &&
                        (strMatchedDelimiter !== delimiter)) {
                        // Since we have reached a new row of data,
                        // add an empty row to our data array.
                        arrData.push([]);
                    }
                    // Now that we have our delimiter out of the way,
                    // let's check to see which kind of value we
                    // captured (quoted or unquoted).
                    var strMatchedValue = void 0;
                    if (arrMatches[2]) {
                        // We found a quoted value. When we capture
                        // this value, unescape any double quotes.
                        strMatchedValue = arrMatches[2].replace(new RegExp("\"\"", "g"), "\"");
                    }
                    else {
                        // We found a non-quoted value.
                        strMatchedValue = arrMatches[3];
                    }
                    // Now that we have our value string, let's add
                    // it to the data array.
                    arrData[arrData.length - 1].push(strMatchedValue);
                }
                // Return the parsed data.
                return (arrData);
            }
        });
        Object.defineProperty(CSVParser, "_applyDefaults", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (options) {
                var normalized = {};
                var defaults = {
                    delimiter: ",",
                    reverse: false,
                    skipRows: 0,
                    skipEmpty: true,
                    useColumnNames: false
                };
                if (!options) {
                    options = {};
                }
                each(defaults, function (key, val) {
                    normalized[key] = options[key] || val;
                });
                return normalized;
            }
        });
        return CSVParser;
    }());

    /**
     * A tool that can process the data before it is being used in charts.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/data/#Pre_processing_data} for more info
     * @important
     */
    var DataProcessor = /** @class */ (function (_super) {
        __extends(DataProcessor, _super);
        function DataProcessor() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_checkDates", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_checkNumbers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_checkColors", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_checkEmpty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_checkDeep", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            return _this;
        }
        Object.defineProperty(DataProcessor.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._afterNew.call(this);
                this._checkFeatures();
                this.on("dateFields", function () { return _this._checkFeatures(); });
                this.on("dateFormat", function () { return _this._checkFeatures(); });
                this.on("numericFields", function () { return _this._checkFeatures(); });
                this.on("colorFields", function () { return _this._checkFeatures(); });
                this.on("emptyAs", function () { return _this._checkFeatures(); });
            }
        });
        Object.defineProperty(DataProcessor.prototype, "_checkFeatures", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.isDirty("dateFields") || this.isDirty("dateFormat")) {
                    this._checkDates = this.get("dateFields") && (this.get("dateFields").length > 0);
                }
                if (this.isDirty("numericFields")) {
                    this._checkNumbers = this.get("numericFields") && (this.get("numericFields").length > 0);
                }
                if (this.isDirty("colorFields")) {
                    this._checkColors = this.get("colorFields") && (this.get("colorFields").length > 0);
                }
                if (this.isDirty("emptyAs")) {
                    this._checkEmpty = this.get("emptyAs") != null;
                }
                this._checkDeepFeatures();
            }
        });
        Object.defineProperty(DataProcessor.prototype, "_checkDeepFeatures", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var deepFields = [];
                each$1(["dateFields", "numericFields", "colorFields"], function (where) {
                    each$1(_this.get(where, []), function (field) {
                        var steps = field.split(".");
                        steps.pop();
                        while (steps.length > 0) {
                            deepFields.push(steps.join("."));
                            steps.pop();
                        }
                    });
                });
                this._checkDeep = deepFields.length > 0;
                this.setPrivate("deepFields", deepFields);
            }
        });
        /**
         * Processess entire array of data.
         *
         * NOTE: calling this will modify original array!
         */
        Object.defineProperty(DataProcessor.prototype, "processMany", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (data) {
                var _this = this;
                if (isArray(data) && (this._checkDates || this._checkNumbers || this._checkColors || this._checkEmpty)) {
                    each$1(data, function (row) {
                        _this.processRow(row);
                    });
                }
            }
        });
        /**
         * Processes a row (object) of data.
         *
         * NOTE: calling this will modify values of the original object!
         */
        Object.defineProperty(DataProcessor.prototype, "processRow", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (row, prefix) {
                var _this = this;
                if (prefix === void 0) { prefix = ""; }
                each(row, function (key, _value) {
                    var lookupKey = prefix + key;
                    if (_this._checkEmpty) {
                        row[key] = _this._maybeToEmpty(row[key]);
                    }
                    if (_this._checkNumbers) {
                        row[key] = _this._maybeToNumber(lookupKey, row[key]);
                    }
                    if (_this._checkDates) {
                        row[key] = _this._maybeToDate(lookupKey, row[key]);
                    }
                    if (_this._checkColors) {
                        row[key] = _this._maybeToColor(lookupKey, row[key]);
                    }
                    if (_this._checkDeep && _this.getPrivate("deepFields", []).indexOf(lookupKey) !== -1 && isObject(row[key])) {
                        _this.processRow(row[key], lookupKey + ".");
                    }
                });
            }
        });
        Object.defineProperty(DataProcessor.prototype, "_maybeToNumber", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (field, value) {
                if (this.get("numericFields").indexOf(field) !== -1) {
                    return toNumber(value);
                }
                return value;
            }
        });
        Object.defineProperty(DataProcessor.prototype, "_maybeToDate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (field, value) {
                if (this.get("dateFields").indexOf(field) !== -1) {
                    return this._root.dateFormatter.parse(value, this.get("dateFormat", "")).getTime();
                }
                return value;
            }
        });
        Object.defineProperty(DataProcessor.prototype, "_maybeToEmpty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                if ((value == null || value == "") && this.get("emptyAs") != null) {
                    return this.get("emptyAs");
                }
                return value;
            }
        });
        Object.defineProperty(DataProcessor.prototype, "_maybeToColor", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (field, value) {
                if (this.get("colorFields").indexOf(field) !== -1) {
                    return Color.fromAny(value);
                }
                return value;
            }
        });
        return DataProcessor;
    }(Entity));

    /**
     * A collection of network-related functions
     */
    /**
     * Loads an external file via its URL.
     *
     * Please note that this is an asynchronous function.
     *
     * It will not return the result, but rather a `Promise`.
     *
     * You can use the `await` notion, or `then()`.
     *
     * ```TypeScript
     * // Using await
     * let response = await Net.load( "http://www.my.com/data.json" );
     * console.log( response.response );
     *
     * // Using then()
     * Net.load( "http://www.my.com/data.json" ).then( ( response ) => {
     *   console.log( response.response );
     * } );
     * ```
     * ```JavaScript
     * // Using then()
     * Net.load( "http://www.my.com/data.json" ).then( function( response ) {
     *   console.log( response.response );
     * } );
     * ```
     *
     * @async
     * @see {@link https://www.amcharts.com/docs/v5/concepts/data/net-load-utility/} for more info
     * @param url      URL for the file to load
     * @param target   A target element that is requesting the net load
     * @param options  Request options
     * @return Result (Promise)
     */
    function load(url, target, options) {
        return new Promise(function (success, error) {
            // Is return type Blob?
            var isBlob = options != null && options.responseType == "blob";
            // Create request and set up handlers
            var xhr = new XMLHttpRequest();
            xhr.onload = function () {
                if (xhr.status === 200) {
                    var response = void 0;
                    var blob_1;
                    if (isBlob) {
                        blob_1 = xhr.response;
                        readBlob(blob_1).then(function (response) {
                            var output = {
                                xhr: xhr,
                                error: false,
                                response: response,
                                blob: blob_1,
                                type: xhr.getResponseHeader("Content-Type"),
                                target: target
                            };
                            success(output);
                        });
                        return;
                    }
                    else {
                        response = xhr.responseText || xhr.response;
                    }
                    var output = {
                        xhr: xhr,
                        error: false,
                        response: response,
                        blob: blob_1,
                        type: xhr.getResponseHeader("Content-Type"),
                        target: target
                    };
                    success(output);
                }
                else {
                    error({
                        xhr: xhr,
                        error: true,
                        type: xhr.getResponseHeader("Content-Type"),
                        target: target
                    });
                }
            };
            xhr.onerror = function () {
                error({
                    xhr: xhr,
                    error: true,
                    type: xhr.getResponseHeader("Content-Type"),
                    target: target
                });
            };
            // Open request
            xhr.open("GET", url, true);
            if (options && options.withCredentials) {
                xhr.withCredentials = true;
            }
            // Process options
            if (options != null) {
                if (options.requestHeaders != null) {
                    for (var i = 0; i < options.requestHeaders.length; i++) {
                        var header = options.requestHeaders[i];
                        xhr.setRequestHeader(header.key, header.value);
                    }
                }
                if (options.responseType != null) {
                    xhr.responseType = options.responseType;
                }
            }
            // Send request
            xhr.send();
        });
    }
    /**
     * Returns textual representation of a Blob object.
     *
     * @param   blob  Target blob
     * @return        Text promise
     */
    function readBlob(blob) {
        return new Promise(function (success, error) {
            var reader = new FileReader();
            reader.onload = function (_event) {
                success(reader.result);
            };
            reader.onerror = function (e) {
                error(e);
            };
            reader.readAsText(blob);
        });
    }

    var Net = /*#__PURE__*/Object.freeze({
        __proto__: null,
        load: load,
        readBlob: readBlob
    });

    var am5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        array: Array$1,
        ease: Ease,
        math: Math$1,
        net: Net,
        object: Object$1,
        time: Time,
        type: Type,
        utils: Utils,
        Root: Root,
        Theme: Theme,
        addLicense: addLicense,
        registry: registry,
        disposeAllRootElements: disposeAllRootElements,
        ready: ready,
        Modal: Modal,
        Entity: Entity,
        Bullet: Bullet,
        Button: Button,
        Circle: Circle,
        Ellipse: Ellipse,
        Star: Star,
        Component: Component,
        DataItem: DataItem,
        Container: Container,
        Graphics: Graphics,
        GridLayout: GridLayout,
        HeatLegend: HeatLegend,
        HorizontalLayout: HorizontalLayout,
        Label: Label,
        Layout: Layout,
        Legend: Legend,
        Line: Line,
        Picture: Picture,
        PointedRectangle: PointedRectangle,
        RadialLabel: RadialLabel,
        RadialText: RadialText,
        Rectangle: Rectangle,
        Triangle: Triangle,
        RoundedRectangle: RoundedRectangle,
        Scrollbar: Scrollbar,
        Slider: Slider,
        Slice: Slice,
        Sprite: Sprite,
        Series: Series,
        Chart: Chart$1,
        SerialChart: SerialChart,
        Text: Text,
        Tick: Tick,
        Tooltip: Tooltip,
        VerticalLayout: VerticalLayout,
        Timezone: Timezone,
        Gradient: Gradient,
        LinearGradient: LinearGradient,
        RadialGradient: RadialGradient,
        CirclePattern: CirclePattern,
        LinePattern: LinePattern,
        Pattern: Pattern,
        RectanglePattern: RectanglePattern,
        Color: Color,
        color: color,
        ColorSet: ColorSet,
        ListData: ListData,
        JsonData: JsonData,
        JSONParser: JSONParser,
        CSVParser: CSVParser,
        DataProcessor: DataProcessor,
        DateFormatter: DateFormatter,
        DurationFormatter: DurationFormatter,
        InterfaceColors: InterfaceColors,
        NumberFormatter: NumberFormatter,
        Percent: Percent,
        percent: percent,
        p100: p100,
        p50: p50,
        p0: p0,
        Template: Template,
        TextFormatter: TextFormatter
    });

    /**
     * @ignore
     */
    var XYChartDefaultTheme = /** @class */ (function (_super) {
        __extends(XYChartDefaultTheme, _super);
        function XYChartDefaultTheme() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(XYChartDefaultTheme.prototype, "setupDefaultRules", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype.setupDefaultRules.call(this);
                var ic = this._root.interfaceColors;
                var language = this._root.language;
                var r = this.rule.bind(this);
                /**
                 * ========================================================================
                 * charts/xy
                 * ========================================================================
                 */
                r("XYChart").setAll({
                    colors: ColorSet.new(this._root, {}),
                    paddingLeft: 20,
                    paddingRight: 20,
                    paddingTop: 16,
                    paddingBottom: 16,
                    panX: false,
                    panY: false,
                    wheelStep: 0.25,
                    arrangeTooltips: true,
                    pinchZoomX: false,
                    pinchZoomY: false
                });
                /**
                 * ------------------------------------------------------------------------
                 * charts/xy: XYChartScrollbar
                 * ------------------------------------------------------------------------
                 */
                r("XYChart", ["scrollbar", "chart"]).setAll({
                    paddingBottom: 0,
                    paddingLeft: 0,
                    paddingTop: 0,
                    paddingRight: 0,
                    colors: ColorSet.new(this._root, {
                        saturation: 0
                    })
                });
                {
                    var rule = r("Graphics", ["scrollbar", "overlay"]);
                    rule.setAll({
                        fillOpacity: 0.5
                    });
                    setColor(rule, "fill", ic, "background");
                }
                // Class: RoundedRectangle
                r("RoundedRectangle", ["xy", "scrollbar", "thumb"]).setAll({
                    cornerRadiusTR: 0,
                    cornerRadiusTL: 0,
                    cornerRadiusBR: 0,
                    cornerRadiusBL: 0,
                    fillOpacity: 0,
                    focusable: true
                });
                r("RoundedRectangle", ["xy", "scrollbar", "thumb"]).states.create("hover", { fillOpacity: 0.4 });
                r("RoundedRectangle", ["xy", "scrollbar", "chart", "background"]).setAll({
                    cornerRadiusTL: 0,
                    cornerRadiusBL: 0,
                    cornerRadiusTR: 0,
                    cornerRadiusBR: 0
                });
                r("RoundedRectangle", ["xy", "scrollbar", "chart", "background", "resize", "button"]).setAll({
                    cornerRadiusBL: 40,
                    cornerRadiusBR: 40,
                    cornerRadiusTL: 40,
                    cornerRadiusTR: 40
                });
                r("AxisRendererX", ["xy", "chart", "scrollbar"]).setAll({
                    strokeOpacity: 0,
                    inside: true
                });
                r("AxisRendererY", ["xy", "chart", "scrollbar"]).setAll({
                    strokeOpacity: 0,
                    inside: true,
                    minGridDistance: 5
                });
                r("AxisLabel", ["xy", "scrollbar", "x"]).setAll({
                    opacity: 0.5,
                    centerY: p100,
                    minPosition: 0.01,
                    maxPosition: 0.99,
                    fontSize: "0.8em"
                });
                r("AxisLabel", ["category"]).setAll({
                    text: "{category}",
                    populateText: true
                });
                r("AxisLabel", ["x"]).setAll({
                    centerY: 0
                });
                r("AxisLabel", ["x", "inside"]).setAll({
                    centerY: p100
                });
                r("AxisLabel", ["x", "inside", "opposite"]).setAll({
                    centerY: 0
                });
                r("AxisLabel", ["x", "opposite"]).setAll({
                    centerY: p100
                });
                r("AxisLabel", ["y"]).setAll({
                    centerX: p100
                });
                r("AxisLabel", ["y", "inside"]).setAll({
                    centerX: 0
                });
                r("AxisLabel", ["y", "inside", "opposite"]).setAll({
                    centerX: p100
                });
                r("AxisLabel", ["y", "opposite"]).setAll({
                    centerX: 0
                });
                r("AxisLabel", ["xy", "scrollbar", "y"]).setAll({
                    visible: false
                });
                // Class: Grid
                r("Grid", ["xy", "scrollbar", "y"]).setAll({
                    visible: false
                });
                // Class: Grid
                r("Grid", ["xy", "scrollbar", "x"]).setAll({
                    opacity: 0.5
                });
                /**
                 * ------------------------------------------------------------------------
                 * charts/xy: Cursor
                 * ------------------------------------------------------------------------
                 */
                r("XYCursor").setAll({
                    behavior: "none",
                    layer: 30,
                    exportable: false,
                    snapToSeriesBy: "xy"
                });
                {
                    var rule = r("Grid", ["cursor", "x"]);
                    rule.setAll({
                        strokeOpacity: 0.8,
                        strokeDasharray: [2, 2]
                    });
                    setColor(rule, "stroke", ic, "alternativeBackground");
                }
                {
                    var rule = r("Grid", ["cursor", "y"]);
                    rule.setAll({
                        strokeOpacity: 0.8,
                        strokeDasharray: [2, 2]
                    });
                    setColor(rule, "stroke", ic, "alternativeBackground");
                }
                {
                    var rule = r("Graphics", ["cursor", "selection"]);
                    rule.setAll({
                        fillOpacity: 0.15,
                    });
                    setColor(rule, "fill", ic, "alternativeBackground");
                }
                /**
                 * ------------------------------------------------------------------------
                 * charts/xy: Axes
                 * ------------------------------------------------------------------------
                 */
                r("Axis").setAll({
                    start: 0,
                    end: 1,
                    minZoomCount: 1,
                    maxZoomCount: Infinity,
                    maxZoomFactor: 1000,
                    maxDeviation: 0.1,
                    snapTooltip: true,
                    tooltipLocation: 0.5,
                    panX: true,
                    panY: true,
                    zoomX: true,
                    zoomY: true,
                    fixAxisSize: true
                });
                r("AxisLabel").setAll({
                    location: 0.5,
                    multiLocation: 0,
                    centerX: p50,
                    centerY: p50,
                    paddingTop: 3,
                    paddingBottom: 3,
                    paddingLeft: 5,
                    paddingRight: 5
                });
                // The following is deprecated following text measuring updates in 5.0.5
                // r("AxisLabel", ["y"]).setAll({
                // 	textAlign: "right"
                // });
                // r("AxisLabel", ["y", "opposite"]).setAll({
                // 	textAlign: "left"
                // });
                r("Container", ["axis", "header"]).setAll({
                    layer: 30
                });
                {
                    var rule = r("AxisRenderer");
                    rule.setAll({
                        strokeOpacity: 0
                    });
                    setColor(rule, "stroke", ic, "grid");
                }
                r("AxisRendererX").setAll({
                    minGridDistance: 120,
                    opposite: false,
                    inversed: false,
                    cellStartLocation: 0,
                    cellEndLocation: 1,
                    width: p100
                });
                r("AxisRendererY").setAll({
                    minGridDistance: 40,
                    opposite: false,
                    inversed: false,
                    cellStartLocation: 0,
                    cellEndLocation: 1,
                    height: p100
                });
                {
                    var rule = r("Rectangle", ["axis", "thumb"]);
                    rule.setAll({
                        fillOpacity: 0
                    });
                    setColor(rule, "fill", ic, "alternativeBackground");
                    rule.states.create("hover", { fillOpacity: 0.1 });
                }
                r("Rectangle", ["axis", "thumb", "x"]).setAll({
                    cursorOverStyle: "ew-resize"
                });
                r("Rectangle", ["axis", "thumb", "y"]).setAll({
                    cursorOverStyle: "ns-resize"
                });
                {
                    var rule = r("Grid");
                    rule.setAll({
                        location: 0,
                        strokeOpacity: 0.15,
                    });
                    setColor(rule, "stroke", ic, "grid");
                }
                r("Grid", ["base"]).setAll({
                    strokeOpacity: 0.3
                });
                {
                    var rule = r("Graphics", ["axis", "fill"]);
                    rule.setAll({
                        visible: false,
                        isMeasured: false,
                        position: "absolute",
                        fillOpacity: 0.05,
                    });
                    setColor(rule, "fill", ic, "alternativeBackground");
                }
                r("Graphics", ["axis", "fill", "range"]).setAll({
                    isMeasured: true
                });
                // hides all elements of series axis range
                r("Graphics", ["series", "fill", "range"]).setAll({
                    visible: false,
                    isMeasured: true
                });
                r("Grid", ["series", "range"]).setAll({
                    visible: false
                });
                r("AxisTick", ["series", "range"]).setAll({
                    visible: false
                });
                r("AxisLabel", ["series", "range"]).setAll({
                    visible: false
                });
                {
                    var rule = r("AxisTick");
                    rule.setAll({
                        location: 0.5,
                        multiLocation: 0,
                        strokeOpacity: 1,
                        isMeasured: false,
                        position: "absolute",
                        visible: false
                    });
                    setColor(rule, "stroke", ic, "grid");
                }
                r("CategoryAxis").setAll({
                    startLocation: 0,
                    endLocation: 1,
                    fillRule: function (dataItem, index) {
                        var axisFill = dataItem.get("axisFill");
                        if (axisFill) {
                            if (!isNumber(index) || index % 2 == 0) {
                                axisFill.setPrivate("visible", true);
                            }
                            else {
                                axisFill.setPrivate("visible", false);
                            }
                        }
                    }
                });
                var gridIntervals = [
                    { timeUnit: "millisecond", count: 1 },
                    { timeUnit: "millisecond", count: 5 },
                    { timeUnit: "millisecond", count: 10 },
                    { timeUnit: "millisecond", count: 50 },
                    { timeUnit: "millisecond", count: 100 },
                    { timeUnit: "millisecond", count: 500 },
                    { timeUnit: "second", count: 1 },
                    { timeUnit: "second", count: 5 },
                    { timeUnit: "second", count: 10 },
                    { timeUnit: "second", count: 30 },
                    { timeUnit: "minute", count: 1 },
                    { timeUnit: "minute", count: 5 },
                    { timeUnit: "minute", count: 10 },
                    { timeUnit: "minute", count: 15 },
                    { timeUnit: "minute", count: 30 },
                    { timeUnit: "hour", count: 1 },
                    { timeUnit: "hour", count: 3 },
                    { timeUnit: "hour", count: 6 },
                    { timeUnit: "hour", count: 12 },
                    { timeUnit: "day", count: 1 },
                    { timeUnit: "day", count: 2 },
                    { timeUnit: "day", count: 3 },
                    { timeUnit: "day", count: 4 },
                    { timeUnit: "day", count: 5 },
                    { timeUnit: "week", count: 1 },
                    { timeUnit: "month", count: 1 },
                    { timeUnit: "month", count: 2 },
                    { timeUnit: "month", count: 3 },
                    { timeUnit: "month", count: 6 },
                    { timeUnit: "year", count: 1 },
                    { timeUnit: "year", count: 2 },
                    { timeUnit: "year", count: 5 },
                    { timeUnit: "year", count: 10 },
                    { timeUnit: "year", count: 50 },
                    { timeUnit: "year", count: 100 },
                    { timeUnit: "year", count: 200 },
                    { timeUnit: "year", count: 500 },
                    { timeUnit: "year", count: 1000 },
                    { timeUnit: "year", count: 2000 },
                    { timeUnit: "year", count: 5000 },
                    { timeUnit: "year", count: 10000 },
                    { timeUnit: "year", count: 100000 }
                ];
                var dateFormats = {
                    "millisecond": language.translate("_date_millisecond"),
                    "second": language.translate("_date_second"),
                    "minute": language.translate("_date_minute"),
                    "hour": language.translate("_date_hour"),
                    "day": language.translate("_date_day"),
                    "week": language.translate("_date_day"),
                    "month": language.translate("_date_month"),
                    "year": language.translate("_date_year")
                };
                var periodChangeDateFormats = {
                    "millisecond": language.translate("_date_millisecond"),
                    "second": language.translate("_date_second"),
                    "minute": language.translate("_date_minute"),
                    "hour": language.translate("_date_day"),
                    "day": language.translate("_date_day"),
                    "week": language.translate("_date_day"),
                    "month": language.translate("_date_month") + " " + language.translate("_date_year"),
                    "year": language.translate("_date_year")
                };
                var tooltipDateFormats = {
                    "millisecond": language.translate("_date_millisecond_full"),
                    "second": language.translate("_date_second_full"),
                    "minute": language.translate("_date_minute_full"),
                    "hour": language.translate("_date_hour_full"),
                    "day": language.translate("_date_day_full"),
                    "week": language.translate("_date_week_full"),
                    "month": language.translate("_date_month_full"),
                    "year": language.translate("_date_year")
                };
                r("CategoryDateAxis").setAll({
                    markUnitChange: true,
                    gridIntervals: copy$2(gridIntervals),
                    dateFormats: copy$1(dateFormats),
                    periodChangeDateFormats: copy$1(periodChangeDateFormats)
                });
                r("DateAxis").setAll({
                    strictMinMax: true,
                    startLocation: 0,
                    endLocation: 1,
                    markUnitChange: true,
                    groupData: false,
                    groupCount: 500,
                    gridIntervals: copy$2(gridIntervals),
                    dateFormats: copy$1(dateFormats),
                    periodChangeDateFormats: copy$1(periodChangeDateFormats),
                    tooltipDateFormats: tooltipDateFormats,
                    groupIntervals: [
                        { timeUnit: "millisecond", count: 1 },
                        { timeUnit: "millisecond", count: 10 },
                        { timeUnit: "millisecond", count: 100 },
                        { timeUnit: "second", count: 1 },
                        { timeUnit: "second", count: 10 },
                        { timeUnit: "minute", count: 1 },
                        { timeUnit: "minute", count: 10 },
                        { timeUnit: "hour", count: 1 },
                        { timeUnit: "day", count: 1 },
                        { timeUnit: "week", count: 1 },
                        { timeUnit: "month", count: 1 },
                        { timeUnit: "year", count: 1 }
                    ],
                    fillRule: function (dataItem) {
                        var axisFill = dataItem.get("axisFill");
                        if (axisFill) {
                            var axis = dataItem.component;
                            var value = dataItem.get("value");
                            var endValue = dataItem.get("endValue");
                            var intervalDuration = axis.intervalDuration();
                            var baseInterval = axis.getPrivate("baseInterval");
                            var min = axis.getPrivate("min", 0);
                            min = round(new Date(min), baseInterval.timeUnit, baseInterval.count, _this._root.locale.firstDayOfWeek, _this._root.utc, undefined, _this._root.timezone).getTime();
                            if (value != null && endValue != null) {
                                var val = Math.round((value - min) / intervalDuration) / 2;
                                if (val == Math.round(val)) {
                                    axisFill.setPrivate("visible", true);
                                }
                                else {
                                    axisFill.setPrivate("visible", false);
                                }
                            }
                        }
                    }
                });
                r("GaplessDateAxis").setAll({
                    fillRule: function (dataItem) {
                        var axisFill = dataItem.get("axisFill");
                        if (axisFill) {
                            var index = dataItem.get("index");
                            var visible = false;
                            if (!isNumber(index) || index % 2 == 0) {
                                visible = true;
                            }
                            axisFill.setPrivate("visible", visible);
                        }
                    }
                });
                r("ValueAxis").setAll({
                    baseValue: 0,
                    logarithmic: false,
                    strictMinMax: false,
                    fillRule: function (dataItem) {
                        var axisFill = dataItem.get("axisFill");
                        if (axisFill) {
                            var axis = dataItem.component;
                            var value = dataItem.get("value");
                            var step = axis.getPrivate("step");
                            if (isNumber(value) && isNumber(step)) {
                                if (round$1(value / step / 2, 5) == Math.round(value / step / 2)) {
                                    axisFill.setPrivate("visible", false);
                                }
                                else {
                                    axisFill.setPrivate("visible", true);
                                }
                            }
                        }
                    }
                });
                r("DurationAxis").setAll({
                    baseUnit: "second"
                });
                /**
                 * ------------------------------------------------------------------------
                 * charts/xy: Series
                 * ------------------------------------------------------------------------
                 */
                r("XYSeries").setAll({
                    maskBullets: true,
                    stackToNegative: true,
                    locationX: 0.5,
                    locationY: 0.5,
                    snapTooltip: false,
                    openValueXGrouped: "open",
                    openValueYGrouped: "open",
                    valueXGrouped: "close",
                    valueYGrouped: "close",
                    seriesTooltipTarget: "series"
                });
                r("BaseColumnSeries").setAll({
                    adjustBulletPosition: true
                });
                r("ColumnSeries").setAll({
                    clustered: true
                });
                r("RoundedRectangle", ["series", "column"]).setAll({
                    position: "absolute",
                    isMeasured: false,
                    width: percent(70),
                    height: percent(70),
                    strokeWidth: 1,
                    strokeOpacity: 1,
                    cornerRadiusBL: 0,
                    cornerRadiusTL: 0,
                    cornerRadiusBR: 0,
                    cornerRadiusTR: 0,
                    fillOpacity: 1,
                    role: "figure"
                });
                r("LineSeries").setAll({
                    connect: true,
                    autoGapCount: 1.1,
                    stackToNegative: false
                });
                r("Graphics", ["series", "stroke"]).setAll({
                    position: "absolute",
                    strokeWidth: 1,
                    strokeOpacity: 1,
                    isMeasured: false
                });
                r("Graphics", ["series", "fill"]).setAll({
                    visible: false,
                    fillOpacity: 0,
                    position: "absolute",
                    strokeWidth: 0,
                    strokeOpacity: 0,
                    isMeasured: false
                });
                r("Graphics", ["line", "series", "legend", "marker", "stroke"]).setAll({
                    draw: function (display, sprite) {
                        var parent = sprite.parent;
                        if (parent) {
                            var h = parent.height();
                            var w = parent.width();
                            display.moveTo(0, h / 2);
                            display.lineTo(w, h / 2);
                        }
                    }
                });
                {
                    var rule = r("Graphics", ["line", "series", "legend", "marker", "stroke"]).states.create("disabled", {});
                    setColor(rule, "stroke", ic, "disabled");
                }
                r("Graphics", ["line", "series", "legend", "marker", "fill"]).setAll({
                    draw: function (display, sprite) {
                        var parent = sprite.parent;
                        if (parent) {
                            var h = parent.height();
                            var w = parent.width();
                            display.moveTo(0, 0);
                            display.lineTo(w, 0);
                            display.lineTo(w, h);
                            display.lineTo(0, h);
                            display.lineTo(0, 0);
                        }
                    }
                });
                {
                    var rule = r("Graphics", ["line", "series", "legend", "marker", "fill"]).states.create("disabled", {});
                    setColor(rule, "stroke", ic, "disabled");
                }
                r("SmoothedXYLineSeries").setAll({
                    tension: 0.5
                });
                r("SmoothedXLineSeries").setAll({
                    tension: 0.5
                });
                r("SmoothedYLineSeries").setAll({
                    tension: 0.5
                });
                r("Candlestick").setAll({
                    position: "absolute",
                    isMeasured: false,
                    width: percent(50),
                    height: percent(50),
                    strokeWidth: 1,
                    strokeOpacity: 1,
                    cornerRadiusBL: 0,
                    cornerRadiusTL: 0,
                    cornerRadiusBR: 0,
                    cornerRadiusTR: 0,
                    fillOpacity: 1,
                    role: "figure"
                });
                r("OHLC").setAll({
                    width: percent(80),
                    height: percent(80)
                });
                r("CandlestickSeries").setAll({
                    lowValueXGrouped: "low",
                    lowValueYGrouped: "low",
                    highValueXGrouped: "high",
                    highValueYGrouped: "high",
                    openValueXGrouped: "open",
                    openValueYGrouped: "open",
                    valueXGrouped: "close",
                    valueYGrouped: "close"
                });
                // These rules can be used for regular columns, too
                {
                    var rule = r("Rectangle", ["column", "autocolor"]).states.create("riseFromOpen", {});
                    setColor(rule, "fill", ic, "positive");
                    setColor(rule, "stroke", ic, "positive");
                }
                {
                    var rule = r("Rectangle", ["column", "autocolor"]).states.create("dropFromOpen", {});
                    setColor(rule, "fill", ic, "negative");
                    setColor(rule, "stroke", ic, "negative");
                }
                r("Rectangle", ["column", "autocolor", "pro"]).states.create("riseFromPrevious", { fillOpacity: 1 });
                r("Rectangle", ["column", "autocolor", "pro"]).states.create("dropFromPrevious", { fillOpacity: 0 });
            }
        });
        return XYChartDefaultTheme;
    }(Theme));

    /**
     * Creates an XY chart.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/} for more info
     * @important
     */
    var XYChart = /** @class */ (function (_super) {
        __extends(XYChart, _super);
        function XYChart() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * A list of horizontal axes.
             */
            Object.defineProperty(_this, "xAxes", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListAutoDispose()
            });
            /**
             * A list of vertical axes.
             */
            Object.defineProperty(_this, "yAxes", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListAutoDispose()
            });
            /**
             * A [[Container]] located on top of the chart, used to store top horizontal
             * axes.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "topAxesContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.chartContainer.children.push(Container.new(_this._root, { width: p100, layout: _this._root.verticalLayout }))
            });
            /**
             * A [[Container]] located in the middle the chart, used to store vertical axes
             * and plot area container.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "yAxesAndPlotContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.chartContainer.children.push(Container.new(_this._root, { width: p100, height: p100, layout: _this._root.horizontalLayout }))
            });
            /**
             * A [[Container]] located on bottom of the chart, used to store bottom
             * horizontal axes.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "bottomAxesContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.chartContainer.children.push(Container.new(_this._root, { width: p100, layout: _this._root.verticalLayout }))
            });
            /**
             * A [[Container]] located on left of the chart, used to store left-hand
             * vertical axes.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "leftAxesContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.yAxesAndPlotContainer.children.push(Container.new(_this._root, { height: p100, layout: _this._root.horizontalLayout }))
            });
            /**
             * A [[Container]] located in the middle of the chart, used to store plotContainer and topPlotContainer
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "plotsContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.yAxesAndPlotContainer.children.push(Container.new(_this._root, { width: p100, height: p100, maskContent: false }))
            });
            /**
             * A [[Container]] located in the middle of the chart, used to store actual
             * plots (series).
             *
             * NOTE: `plotContainer` will automatically have its `background` preset. If
             * you need to modify background or outline for chart's plot area, you can
             * use `plotContainer.get("background")` for that.*
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "plotContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.plotsContainer.children.push(Container.new(_this._root, { width: p100, height: p100 }))
            });
            /**
             * A [[Container]] used for any elements that need to be displayed over
             * regular `plotContainer`.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "topPlotContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.plotsContainer.children.push(Container.new(_this._root, { width: p100, height: p100 }))
            });
            /**
             * A [[Container]] axis grid elements are stored in.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "gridContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.plotContainer.children.push(Container.new(_this._root, { width: p100, height: p100, isMeasured: false }))
            });
            /**
             * A [[Container]] axis background grid elements are stored in.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "topGridContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: Container.new(_this._root, { width: p100, height: p100, isMeasured: false })
            });
            /**
             * A [[Container]] located on right of the chart, used to store right-hand
             * vertical axes.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "rightAxesContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.yAxesAndPlotContainer.children.push(Container.new(_this._root, { height: p100, layout: _this._root.horizontalLayout }))
            });
            /**
             * A [[Container]] axis headers are stored in.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "axisHeadersContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.plotContainer.children.push(Container.new(_this._root, {}))
            });
            /**
             * A button that is shown when chart is not fully zoomed out.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Zoom_out_button} for more info
             * @default Button.new()
             */
            Object.defineProperty(_this, "zoomOutButton", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.topPlotContainer.children.push(Button.new(_this._root, {
                    themeTags: ["zoom"],
                    icon: Graphics.new(_this._root, {
                        themeTags: ["button", "icon"]
                    })
                }))
            });
            Object.defineProperty(_this, "_movePoint", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: { x: 0, y: 0 }
            });
            Object.defineProperty(_this, "_wheelDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_otherCharts", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_movePoints", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_downStartX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_downEndX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_downStartY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_downEndY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(XYChart.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this._defaultThemes.push(XYChartDefaultTheme.new(this._root));
                _super.prototype._afterNew.call(this);
                this._disposers.push(this.xAxes);
                this._disposers.push(this.yAxes);
                var root = this._root;
                var verticalLayout = this._root.verticalLayout;
                var zoomOutButton = this.zoomOutButton;
                zoomOutButton.events.on("click", function () {
                    _this.zoomOut();
                });
                zoomOutButton.set("opacity", 0);
                zoomOutButton.states.lookup("default").set("opacity", 1);
                this.chartContainer.set("layout", verticalLayout);
                var plotContainer = this.plotContainer;
                plotContainer.children.push(this.seriesContainer);
                this._disposers.push(this._processAxis(this.xAxes, this.bottomAxesContainer));
                this._disposers.push(this._processAxis(this.yAxes, this.leftAxesContainer));
                plotContainer.children.push(this.topGridContainer);
                plotContainer.children.push(this.bulletsContainer);
                // Setting trasnparent background so that full body of the plot container
                // is interactive
                plotContainer.set("interactive", true);
                plotContainer.set("interactiveChildren", false);
                plotContainer.set("background", Rectangle.new(root, {
                    themeTags: ["xy", "background"],
                    fill: Color.fromHex(0x000000),
                    fillOpacity: 0
                }));
                this._disposers.push(plotContainer.events.on("pointerdown", function (event) {
                    _this._handlePlotDown(event.originalEvent);
                }));
                this._disposers.push(plotContainer.events.on("globalpointerup", function (event) {
                    _this._handlePlotUp(event.originalEvent);
                }));
                this._disposers.push(plotContainer.events.on("globalpointermove", function (event) {
                    _this._handlePlotMove(event.originalEvent);
                }));
                this._maskGrid();
                this._setUpTouch();
            }
        });
        Object.defineProperty(XYChart.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("pinchZoomX") || this.isDirty("pinchZoomY") || this.get("panX") || this.get("panY")) {
                    this._setUpTouch();
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_setUpTouch", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this.plotContainer._display.cancelTouch) {
                    this.plotContainer._display.cancelTouch = (this.get("pinchZoomX") || this.get("pinchZoomY") || this.get("panX") || this.get("panY")) ? true : false;
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_maskGrid", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.gridContainer.set("maskContent", true);
                this.topGridContainer.set("maskContent", true);
            }
        });
        Object.defineProperty(XYChart.prototype, "_removeSeries", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (series) {
                var xAxis = series.get("xAxis");
                if (xAxis) {
                    remove(xAxis.series, series);
                }
                var yAxis = series.get("yAxis");
                if (yAxis) {
                    remove(yAxis.series, series);
                }
                var cursor = this.get("cursor");
                if (cursor) {
                    var snapToSeries = cursor.get("snapToSeries");
                    if (snapToSeries) {
                        remove(snapToSeries, series);
                    }
                }
                _super.prototype._removeSeries.call(this, series);
            }
        });
        /**
         * This method is invoked when mouse wheel is used over chart's plot
         * container, and handles zooming/pan.
         *
         * You can invoke this method manually, if you need to mimic chart's wheel
         * behavior over other elements of the chart.
         */
        Object.defineProperty(XYChart.prototype, "handleWheel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (event) {
                var _this = this;
                var wheelX = this.get("wheelX");
                var wheelY = this.get("wheelY");
                var plotContainer = this.plotContainer;
                var wheelEvent = event.originalEvent;
                // Ignore wheel event if it is happening on a non-chart element, e.g. if
                // some page element is over the chart.
                if (isLocalEvent(wheelEvent, this)) {
                    wheelEvent.preventDefault();
                }
                else {
                    return;
                }
                var plotPoint = plotContainer.toLocal(this._root.documentPointToRoot({ x: wheelEvent.clientX, y: wheelEvent.clientY }));
                var wheelStep = this.get("wheelStep", 0.2);
                var shiftY = wheelEvent.deltaY / 100;
                var shiftX = wheelEvent.deltaX / 100;
                if ((wheelX === "zoomX" || wheelX === "zoomXY") && shiftX != 0) {
                    this.xAxes.each(function (axis) {
                        if (axis.get("zoomX")) {
                            var start = axis.get("start");
                            var end = axis.get("end");
                            var position = axis.fixPosition(plotPoint.x / plotContainer.width());
                            var newStart = start - wheelStep * (end - start) * shiftX * position;
                            var newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);
                            if (1 / (newEnd - newStart) < axis.get("maxZoomFactor", Infinity) / axis.get("minZoomCount", 1)) {
                                _this._handleWheelAnimation(axis.zoom(newStart, newEnd));
                            }
                        }
                    });
                }
                if ((wheelY === "zoomX" || wheelY === "zoomXY") && shiftY != 0) {
                    this.xAxes.each(function (axis) {
                        if (axis.get("zoomX")) {
                            var start = axis.get("start");
                            var end = axis.get("end");
                            var position = axis.fixPosition(plotPoint.x / plotContainer.width());
                            var newStart = start - wheelStep * (end - start) * shiftY * position;
                            var newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);
                            if (1 / (newEnd - newStart) < axis.getPrivate("maxZoomFactor", Infinity) / axis.get("minZoomCount", 1)) {
                                _this._handleWheelAnimation(axis.zoom(newStart, newEnd));
                            }
                        }
                    });
                }
                if ((wheelX === "zoomY" || wheelX === "zoomXY") && shiftX != 0) {
                    this.yAxes.each(function (axis) {
                        if (axis.get("zoomY")) {
                            var start = axis.get("start");
                            var end = axis.get("end");
                            var position = axis.fixPosition(plotPoint.y / plotContainer.height());
                            var newStart = start - wheelStep * (end - start) * shiftX * position;
                            var newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);
                            if (1 / (newEnd - newStart) < axis.get("maxZoomFactor", Infinity) / axis.get("minZoomCount", 1)) {
                                _this._handleWheelAnimation(axis.zoom(newStart, newEnd));
                            }
                        }
                    });
                }
                if ((wheelY === "zoomY" || wheelY === "zoomXY") && shiftY != 0) {
                    this.yAxes.each(function (axis) {
                        if (axis.get("zoomY")) {
                            var start = axis.get("start");
                            var end = axis.get("end");
                            var position = axis.fixPosition(plotPoint.y / plotContainer.height());
                            var newStart = start - wheelStep * (end - start) * shiftY * position;
                            var newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);
                            if (1 / (newEnd - newStart) < axis.get("maxZoomFactor", Infinity) / axis.get("minZoomCount", 1)) {
                                _this._handleWheelAnimation(axis.zoom(newStart, newEnd));
                            }
                        }
                    });
                }
                if ((wheelX === "panX" || wheelX === "panXY") && shiftX != 0) {
                    this.xAxes.each(function (axis) {
                        if (axis.get("panX")) {
                            var start = axis.get("start");
                            var end = axis.get("end");
                            var delta = _this._getWheelSign(axis) * wheelStep * (end - start) * shiftX;
                            var newStart = start + delta;
                            var newEnd = end + delta;
                            var se = _this._fixWheel(newStart, newEnd);
                            newStart = se[0];
                            newEnd = se[1];
                            _this._handleWheelAnimation(axis.zoom(newStart, newEnd));
                        }
                    });
                }
                if ((wheelY === "panX" || wheelY === "panXY") && shiftY != 0) {
                    this.xAxes.each(function (axis) {
                        if (axis.get("panX")) {
                            var start = axis.get("start");
                            var end = axis.get("end");
                            var delta = _this._getWheelSign(axis) * wheelStep * (end - start) * shiftY;
                            var newStart = start + delta;
                            var newEnd = end + delta;
                            var se = _this._fixWheel(newStart, newEnd);
                            newStart = se[0];
                            newEnd = se[1];
                            _this._handleWheelAnimation(axis.zoom(newStart, newEnd));
                        }
                    });
                }
                if ((wheelX === "panY" || wheelX === "panXY") && shiftX != 0) {
                    this.yAxes.each(function (axis) {
                        if (axis.get("panY")) {
                            var start = axis.get("start");
                            var end = axis.get("end");
                            var delta = _this._getWheelSign(axis) * wheelStep * (end - start) * shiftX;
                            var newStart = start + delta;
                            var newEnd = end + delta;
                            var se = _this._fixWheel(newStart, newEnd);
                            newStart = se[0];
                            newEnd = se[1];
                            _this._handleWheelAnimation(axis.zoom(newStart, newEnd));
                        }
                    });
                }
                if ((wheelY === "panY" || wheelY === "panXY") && shiftY != 0) {
                    this.yAxes.each(function (axis) {
                        if (axis.get("panY")) {
                            var start = axis.get("start");
                            var end = axis.get("end");
                            var delta = _this._getWheelSign(axis) * wheelStep * (end - start) * shiftY;
                            var newStart = start - delta;
                            var newEnd = end - delta;
                            var se = _this._fixWheel(newStart, newEnd);
                            newStart = se[0];
                            newEnd = se[1];
                            _this._handleWheelAnimation(axis.zoom(newStart, newEnd));
                        }
                    });
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_handleSetWheel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var wheelX = this.get("wheelX");
                var wheelY = this.get("wheelY");
                var plotContainer = this.plotContainer;
                if (wheelX !== "none" || wheelY !== "none") {
                    this._wheelDp = plotContainer.events.on("wheel", function (event) {
                        _this.handleWheel(event);
                    });
                    this._disposers.push(this._wheelDp);
                }
                else {
                    if (this._wheelDp) {
                        this._wheelDp.dispose();
                    }
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_getWheelSign", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axis) {
                var sign = 1;
                if (axis.get("renderer").get("inversed")) {
                    sign = -1;
                }
                return sign;
            }
        });
        Object.defineProperty(XYChart.prototype, "_fixWheel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (start, end) {
                var diff = end - start;
                if (start < 0) {
                    start = 0;
                    end = start + diff;
                }
                if (end > 1) {
                    end = 1;
                    start = end - diff;
                }
                return [start, end];
            }
        });
        Object.defineProperty(XYChart.prototype, "_handlePlotDown", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (event) {
                var plotContainer = this.plotContainer;
                var local = plotContainer.toLocal(this._root.documentPointToRoot({ x: event.clientX, y: event.clientY }));
                if (this.get("pinchZoomX") || this.get("pinchZoomY")) {
                    var touchEvent = event;
                    var pointerId = touchEvent.pointerId;
                    if (pointerId) {
                        if (keys(plotContainer._downPoints).length > 0) {
                            var xAxis = this.xAxes.getIndex(0);
                            var yAxis = this.yAxes.getIndex(0);
                            if (xAxis) {
                                this._downStartX = xAxis.get("start", 0);
                                this._downEndX = xAxis.get("end", 1);
                            }
                            if (yAxis) {
                                this._downStartY = yAxis.get("start", 0);
                                this._downEndY = yAxis.get("end", 1);
                            }
                        }
                    }
                }
                if (this.get("panX") || this.get("panY")) {
                    if (local.x >= 0 && local.y >= 0 && local.x <= plotContainer.width() && local.y <= this.height()) {
                        //this._downPoint = local;
                        this._downPoint = { x: event.clientX, y: event.clientY };
                        var panX = this.get("panX");
                        var panY = this.get("panY");
                        if (panX) {
                            this.xAxes.each(function (axis) {
                                axis._panStart = axis.get("start");
                                axis._panEnd = axis.get("end");
                            });
                        }
                        if (panY) {
                            this.yAxes.each(function (axis) {
                                axis._panStart = axis.get("start");
                                axis._panEnd = axis.get("end");
                            });
                        }
                        var eventType = "panstarted";
                        if (this.events.isEnabled(eventType)) {
                            this.events.dispatch(eventType, { type: eventType, target: this });
                        }
                    }
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_handleWheelAnimation", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (animation) {
                var _this = this;
                if (animation) {
                    animation.events.on("stopped", function () {
                        _this._dispatchWheelAnimation();
                    });
                }
                else {
                    this._dispatchWheelAnimation();
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_dispatchWheelAnimation", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var eventType = "wheelended";
                if (this.events.isEnabled(eventType)) {
                    this.events.dispatch(eventType, { type: eventType, target: this });
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_handlePlotUp", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_event) {
                if (this._downPoint) {
                    if (this.get("panX") || this.get("panY")) {
                        var eventType = "panended";
                        if (this.events.isEnabled(eventType)) {
                            this.events.dispatch(eventType, { type: eventType, target: this });
                        }
                    }
                }
                // TODO: handle multitouch
                this._downPoint = undefined;
                this.xAxes.each(function (xAxis) {
                    xAxis._isPanning = false;
                });
                this.yAxes.each(function (yAxis) {
                    yAxis._isPanning = false;
                });
            }
        });
        Object.defineProperty(XYChart.prototype, "_handlePlotMove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (event) {
                var plotContainer = this.plotContainer;
                if (this.get("pinchZoomX") || this.get("pinchZoomY")) {
                    var touchEvent = event;
                    var pointerId = touchEvent.pointerId;
                    if (pointerId) {
                        this._movePoints[pointerId] = this._root.documentPointToRoot({ x: event.clientX, y: event.clientY });
                        if (keys(plotContainer._downPoints).length > 1) {
                            this._handlePinch();
                            return;
                        }
                    }
                }
                var downPoint = this._downPoint;
                if (downPoint) {
                    downPoint = plotContainer.toLocal(this._root.documentPointToRoot(downPoint));
                    var local_1 = plotContainer.toLocal(this._root.documentPointToRoot({ x: event.clientX, y: event.clientY }));
                    var panX = this.get("panX");
                    var panY = this.get("panY");
                    if (panX) {
                        var scrollbarX = this.get("scrollbarX");
                        if (scrollbarX) {
                            scrollbarX.events.disableType("rangechanged");
                        }
                        this.xAxes.each(function (axis) {
                            if (axis.get("panX")) {
                                axis._isPanning = true;
                                //const maxDeviation = axis.get("maxDeviation", 0);
                                var panStart = axis._panStart;
                                var panEnd = axis._panEnd;
                                var difference = (panEnd - panStart);
                                var deltaX = difference * (downPoint.x - local_1.x) / plotContainer.width();
                                if (axis.get("renderer").get("inversed")) {
                                    deltaX *= -1;
                                }
                                var start = panStart + deltaX;
                                var end = panEnd + deltaX;
                                if (end - start < 1 + axis.get("maxDeviation", 1) * 2) {
                                    axis.set("start", start);
                                    axis.set("end", end);
                                }
                            }
                        });
                        if (scrollbarX) {
                            scrollbarX.events.enableType("rangechanged");
                        }
                    }
                    if (panY) {
                        var scrollbarY = this.get("scrollbarY");
                        if (scrollbarY) {
                            scrollbarY.events.disableType("rangechanged");
                        }
                        this.yAxes.each(function (axis) {
                            if (axis.get("panY")) {
                                axis._isPanning = true;
                                //const maxDeviation = axis.get("maxDeviation", 0);
                                var panStart = axis._panStart;
                                var panEnd = axis._panEnd;
                                var difference = (panEnd - panStart);
                                var deltaY = difference * (downPoint.y - local_1.y) / plotContainer.height();
                                if (axis.get("renderer").get("inversed")) {
                                    deltaY *= -1;
                                }
                                var start = panStart - deltaY;
                                var end = panEnd - deltaY;
                                if (end - start < 1 + axis.get("maxDeviation", 1) * 2) {
                                    axis.set("start", start);
                                    axis.set("end", end);
                                }
                            }
                        });
                        if (scrollbarY) {
                            scrollbarY.events.enableType("rangechanged");
                        }
                    }
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_handlePinch", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _a, _b, _c, _d;
                var _this = this;
                var plotContainer = this.plotContainer;
                var i = 0;
                var downPoints = [];
                var movePoints = [];
                each(plotContainer._downPoints, function (k, point) {
                    downPoints[i] = point;
                    var movePoint = _this._movePoints[k];
                    if (movePoint) {
                        movePoints[i] = movePoint;
                    }
                    i++;
                });
                if (downPoints.length > 1 && movePoints.length > 1) {
                    var w = plotContainer.width();
                    var h = plotContainer.height();
                    var downPoint0 = downPoints[0];
                    var downPoint1 = downPoints[1];
                    var movePoint0 = movePoints[0];
                    var movePoint1 = movePoints[1];
                    if (downPoint0 && downPoint1 && movePoint0 && movePoint1) {
                        movePoint0 = plotContainer.toLocal(movePoint0);
                        movePoint1 = plotContainer.toLocal(movePoint1);
                        downPoint0 = plotContainer.toLocal(downPoint0);
                        downPoint1 = plotContainer.toLocal(downPoint1);
                        if (this.get("pinchZoomX")) {
                            var downStartX = this._downStartX;
                            var downEndX = this._downEndX;
                            if (downStartX != null && downEndX != null) {
                                if (downPoint0.x > downPoint1.x) {
                                    _a = __read([downPoint1, downPoint0], 2), downPoint0 = _a[0], downPoint1 = _a[1];
                                    _b = __read([movePoint1, movePoint0], 2), movePoint0 = _b[0], movePoint1 = _b[1];
                                }
                                var downPos0 = downStartX + (downPoint0.x / w) * (downEndX - downStartX);
                                var downPos1 = downStartX + (downPoint1.x / w) * (downEndX - downStartX);
                                var movePos0 = downStartX + (movePoint0.x / w) * (downEndX - downStartX);
                                var movePos1 = downStartX + (movePoint1.x / w) * (downEndX - downStartX);
                                var initialDistance = Math.max(0.001, downPos1 - downPos0);
                                var currentDistance = Math.max(0.001, movePos1 - movePos0);
                                var d = initialDistance / currentDistance;
                                var s_1 = downStartX * d + downPos0 - movePos0 * d;
                                var e_1 = downEndX * d + downPos1 - movePos1 * d;
                                this.xAxes.each(function (xAxis) {
                                    var sa = xAxis.fixPosition(s_1);
                                    var ea = xAxis.fixPosition(e_1);
                                    xAxis.zoom(sa, ea, 0);
                                });
                            }
                        }
                        if (this.get("pinchZoomY")) {
                            var downStartY = this._downStartY;
                            var downEndY = this._downEndY;
                            if (downStartY != null && downEndY != null) {
                                if (downPoint0.y < downPoint1.y) {
                                    _c = __read([downPoint1, downPoint0], 2), downPoint0 = _c[0], downPoint1 = _c[1];
                                    _d = __read([movePoint1, movePoint0], 2), movePoint0 = _d[0], movePoint1 = _d[1];
                                }
                                var downPos0 = downStartY + (1 - downPoint0.y / h) * (downEndY - downStartY);
                                var downPos1 = downStartY + (1 - downPoint1.y / h) * (downEndY - downStartY);
                                var movePos0 = downStartY + (1 - movePoint0.y / h) * (downEndY - downStartY);
                                var movePos1 = downStartY + (1 - movePoint1.y / h) * (downEndY - downStartY);
                                var initialDistance = Math.max(0.001, downPos1 - downPos0);
                                var currentDistance = Math.max(0.001, movePos1 - movePos0);
                                var d = initialDistance / currentDistance;
                                var s_2 = downStartY * d + downPos0 - movePos0 * d;
                                var e_2 = downEndY * d + downPos1 - movePos1 * d;
                                this.yAxes.each(function (yAxis) {
                                    var sa = yAxis.fixPosition(s_2);
                                    var ea = yAxis.fixPosition(e_2);
                                    yAxis.zoom(sa, ea, 0);
                                });
                            }
                        }
                    }
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_handleCursorPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var cursor = this.get("cursor");
                if (cursor) {
                    var cursorPoint_1 = cursor.getPrivate("point");
                    var snapToSeries = cursor.get("snapToSeries");
                    if (snapToSeries && cursorPoint_1) {
                        var snapToSeriesBy_1 = cursor.get("snapToSeriesBy");
                        var dataItems_1 = [];
                        each$1(snapToSeries, function (series) {
                            if (!series.isHidden() && !series.isHiding()) {
                                if (snapToSeriesBy_1 != "x!" && snapToSeriesBy_1 != "y!") {
                                    var startIndex = series.startIndex();
                                    var endIndex = series.endIndex();
                                    for (var i = startIndex; i < endIndex; i++) {
                                        var dataItem = series.dataItems[i];
                                        if (dataItem && !dataItem.isHidden()) {
                                            dataItems_1.push(dataItem);
                                        }
                                    }
                                }
                                else {
                                    var tooltipDataItem = series.get("tooltipDataItem");
                                    if (tooltipDataItem) {
                                        dataItems_1.push(tooltipDataItem);
                                    }
                                }
                            }
                        });
                        var minDistance_1 = Infinity;
                        var closestItem_1;
                        each$1(dataItems_1, function (dataItem) {
                            var point = dataItem.get("point");
                            if (point) {
                                var distance = 0;
                                if (snapToSeriesBy_1 == "x" || snapToSeriesBy_1 == "x!") {
                                    distance = Math.abs(cursorPoint_1.x - point.x);
                                }
                                else if (snapToSeriesBy_1 == "y" || snapToSeriesBy_1 == "y!") {
                                    distance = Math.abs(cursorPoint_1.y - point.y);
                                }
                                else {
                                    distance = Math.hypot(cursorPoint_1.x - point.x, cursorPoint_1.y - point.y);
                                }
                                if (distance < minDistance_1) {
                                    minDistance_1 = distance;
                                    closestItem_1 = dataItem;
                                }
                            }
                        });
                        each$1(snapToSeries, function (series) {
                            var tooltip = series.get("tooltip");
                            if (tooltip) {
                                tooltip._setDataItem(undefined);
                            }
                        });
                        if (closestItem_1) {
                            var series = closestItem_1.component;
                            series.showDataItemTooltip(closestItem_1);
                            var point = closestItem_1.get("point");
                            if (point) {
                                cursor.handleMove(series.toGlobal(point), true);
                            }
                        }
                    }
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_updateCursor", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var cursor = this.get("cursor");
                if (cursor) {
                    cursor.handleMove();
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_addCursor", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (cursor) {
                this.plotContainer.children.push(cursor);
            }
        });
        Object.defineProperty(XYChart.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._prepareChildren.call(this);
                this.series.each(function (series) {
                    _this._colorize(series);
                });
                if (this.isDirty("wheelX") || this.isDirty("wheelY")) {
                    this._handleSetWheel();
                }
                if (this.isDirty("cursor")) {
                    var previous = this._prevSettings.cursor;
                    var cursor = this.get("cursor");
                    if (cursor !== previous) {
                        this._disposeProperty("cursor");
                        if (previous) {
                            previous.dispose();
                        }
                        if (cursor) {
                            cursor._setChart(this);
                            this._addCursor(cursor);
                            this._pushPropertyDisposer("cursor", cursor.events.on("selectended", function () {
                                _this._handleCursorSelectEnd();
                            }));
                        }
                        //this.setRaw("cursor", cursor) // to reset previous value
                        this._prevSettings.cursor = cursor;
                    }
                }
                if (this.isDirty("scrollbarX")) {
                    var previous = this._prevSettings.scrollbarX;
                    var scrollbarX = this.get("scrollbarX");
                    if (scrollbarX !== previous) {
                        this._disposeProperty("scrollbarX");
                        if (previous) {
                            previous.dispose();
                        }
                        if (scrollbarX) {
                            if (!scrollbarX.parent) {
                                this.topAxesContainer.children.push(scrollbarX);
                            }
                            this._pushPropertyDisposer("scrollbarX", scrollbarX.events.on("rangechanged", function (e) {
                                _this._handleScrollbar(_this.xAxes, e.start, e.end, e.grip);
                            }));
                            // Used to populate `ariaLabel` with meaningful values
                            scrollbarX.setPrivate("positionTextFunction", function (position) {
                                var axis = _this.xAxes.getIndex(0);
                                return axis ? axis.getTooltipText(position) || "" : "";
                            });
                        }
                        this._prevSettings.scrollbarX = scrollbarX;
                    }
                }
                if (this.isDirty("scrollbarY")) {
                    var previous = this._prevSettings.scrollbarY;
                    var scrollbarY = this.get("scrollbarY");
                    if (scrollbarY !== previous) {
                        this._disposeProperty("scrollbarY");
                        if (previous) {
                            previous.dispose();
                        }
                        if (scrollbarY) {
                            if (!scrollbarY.parent) {
                                this.rightAxesContainer.children.push(scrollbarY);
                            }
                            this._pushPropertyDisposer("scrollbarY", scrollbarY.events.on("rangechanged", function (e) {
                                _this._handleScrollbar(_this.yAxes, e.start, e.end, e.grip);
                            }));
                            // Used to populate `ariaLabel` with meaningful values
                            scrollbarY.setPrivate("positionTextFunction", function (position) {
                                var axis = _this.yAxes.getIndex(0);
                                return axis ? axis.getTooltipText(position) || "" : "";
                            });
                        }
                        this._prevSettings.scrollbarY = scrollbarY;
                    }
                }
                this._handleZoomOut();
            }
        });
        Object.defineProperty(XYChart.prototype, "_processSeries", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (series) {
                _super.prototype._processSeries.call(this, series);
                this._colorize(series);
            }
        });
        Object.defineProperty(XYChart.prototype, "_colorize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (series) {
                var colorSet = this.get("colors");
                if (colorSet) {
                    if (series.get("fill") == null) {
                        var color = colorSet.next();
                        series._setSoft("stroke", color);
                        series._setSoft("fill", color);
                    }
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_handleCursorSelectEnd", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var cursor = this.get("cursor");
                var behavior = cursor.get("behavior");
                var downPositionX = cursor.getPrivate("downPositionX", 0);
                var downPositionY = cursor.getPrivate("downPositionY", 0);
                var positionX = cursor.getPrivate("positionX", 0.5);
                var positionY = cursor.getPrivate("positionY", 0.5);
                this.xAxes.each(function (axis) {
                    if (behavior === "zoomX" || behavior === "zoomXY") {
                        var position0 = axis.toAxisPosition(downPositionX);
                        var position1 = axis.toAxisPosition(positionX);
                        axis.zoom(position0, position1);
                    }
                    axis.setPrivate("updateScrollbar", true);
                });
                this.yAxes.each(function (axis) {
                    if (behavior === "zoomY" || behavior === "zoomXY") {
                        var position0 = axis.toAxisPosition(downPositionY);
                        var position1 = axis.toAxisPosition(positionY);
                        axis.zoom(position0, position1);
                    }
                    axis.setPrivate("updateScrollbar", true);
                });
            }
        });
        Object.defineProperty(XYChart.prototype, "_handleScrollbar", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axes, start, end, priority) {
                axes.each(function (axis) {
                    var axisStart = axis.fixPosition(start);
                    var axisEnd = axis.fixPosition(end);
                    var zoomAnimation = axis.zoom(axisStart, axisEnd, undefined, priority);
                    var updateScrollbar = "updateScrollbar";
                    axis.setPrivateRaw(updateScrollbar, false);
                    if (zoomAnimation) {
                        zoomAnimation.events.on("stopped", function () {
                            axis.setPrivateRaw(updateScrollbar, true);
                        });
                    }
                    else {
                        axis.setPrivateRaw(updateScrollbar, true);
                    }
                });
            }
        });
        Object.defineProperty(XYChart.prototype, "_processAxis", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axes, container) {
                var _this = this;
                return axes.events.onAll(function (change) {
                    if (change.type === "clear") {
                        each$1(change.oldValues, function (axis) {
                            _this._removeAxis(axis);
                        });
                    }
                    else if (change.type === "push") {
                        container.children.push(change.newValue);
                        change.newValue.processChart(_this);
                    }
                    else if (change.type === "setIndex") {
                        container.children.setIndex(change.index, change.newValue);
                        change.newValue.processChart(_this);
                    }
                    else if (change.type === "insertIndex") {
                        container.children.insertIndex(change.index, change.newValue);
                        change.newValue.processChart(_this);
                    }
                    else if (change.type === "removeIndex") {
                        _this._removeAxis(change.oldValue);
                    }
                    else if (change.type === "moveIndex") {
                        container.children.moveValue(change.value, change.newIndex);
                        change.value.processChart(_this);
                    }
                    else {
                        throw new Error("Unknown IListEvent type");
                    }
                });
            }
        });
        Object.defineProperty(XYChart.prototype, "_removeAxis", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axis) {
                if (!axis.isDisposed()) {
                    var axisParent = axis.parent;
                    if (axisParent) {
                        axisParent.children.removeValue(axis);
                    }
                    var gridContainer = axis.gridContainer;
                    var gridParent = gridContainer.parent;
                    if (gridParent) {
                        gridParent.children.removeValue(gridContainer);
                    }
                    var topGridContainer = axis.topGridContainer;
                    var topGridParent = topGridContainer.parent;
                    if (topGridParent) {
                        topGridParent.children.removeValue(topGridContainer);
                    }
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_updateChartLayout", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var left = this.leftAxesContainer.width();
                var right = this.rightAxesContainer.width();
                var bottomAxesContainer = this.bottomAxesContainer;
                bottomAxesContainer.set("paddingLeft", left);
                bottomAxesContainer.set("paddingRight", right);
                var topAxesContainer = this.topAxesContainer;
                topAxesContainer.set("paddingLeft", left);
                topAxesContainer.set("paddingRight", right);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYChart.prototype, "processAxis", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_axis) { }
        });
        Object.defineProperty(XYChart.prototype, "_handleAxisSelection", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axis, force) {
                var _a;
                var start = axis.fixPosition(axis.get("start", 0));
                var end = axis.fixPosition(axis.get("end", 1));
                if (start > end) {
                    _a = __read([end, start], 2), start = _a[0], end = _a[1];
                }
                if (this.xAxes.indexOf(axis) != -1) {
                    if (force || axis.getPrivate("updateScrollbar")) {
                        var scrollbarX = this.get("scrollbarX");
                        if (scrollbarX && (!scrollbarX.getPrivate("isBusy") || force)) {
                            scrollbarX.setRaw("start", start);
                            scrollbarX.setRaw("end", end);
                            scrollbarX.updateGrips();
                        }
                    }
                }
                else if (this.yAxes.indexOf(axis) != -1) {
                    if (force || axis.getPrivate("updateScrollbar")) {
                        var scrollbarY = this.get("scrollbarY");
                        if (scrollbarY && (!scrollbarY.getPrivate("isBusy") || force)) {
                            scrollbarY.setRaw("start", start);
                            scrollbarY.setRaw("end", end);
                            scrollbarY.updateGrips();
                        }
                    }
                }
                this._handleZoomOut();
            }
        });
        Object.defineProperty(XYChart.prototype, "_handleZoomOut", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var zoomOutButton = this.zoomOutButton;
                if (zoomOutButton && zoomOutButton.parent) {
                    var visible_1 = false;
                    this.xAxes.each(function (axis) {
                        if (axis.get("start") != 0 || axis.get("end") != 1) {
                            visible_1 = true;
                        }
                    });
                    this.yAxes.each(function (axis) {
                        if (axis.get("start") != 0 || axis.get("end") != 1) {
                            visible_1 = true;
                        }
                    });
                    if (visible_1) {
                        if (zoomOutButton.isHidden()) {
                            zoomOutButton.show();
                        }
                    }
                    else {
                        zoomOutButton.hide();
                    }
                }
            }
        });
        /**
         * Checks if point is within plot area.
         *
         * @param   point  Reference point
         * @return         Is within plot area?
         */
        Object.defineProperty(XYChart.prototype, "inPlot", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                var plotContainer = this.plotContainer;
                var otherCharts = this.getPrivate("otherCharts", this._otherCharts);
                var global = plotContainer.toGlobal(point);
                if (point.x >= -0.1 && point.y >= -0.1 && point.x <= plotContainer.width() + 0.1 && point.y <= plotContainer.height() + 0.1) {
                    return true;
                }
                if (otherCharts) {
                    for (var i = otherCharts.length - 1; i >= 0; i--) {
                        var chart = otherCharts[i];
                        if (chart != this) {
                            var chartPlotContainer = chart.plotContainer;
                            var documentPoint = this._root.rootPointToDocument(global);
                            var chartRoot = chart._root.documentPointToRoot(documentPoint);
                            var local = chartPlotContainer.toLocal(chartRoot);
                            if (local.x >= -0.1 && local.y >= -0.1 && local.x <= chartPlotContainer.width() + 0.1 && local.y <= chartPlotContainer.height() + 0.1) {
                                return true;
                            }
                        }
                    }
                }
                return false;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYChart.prototype, "arrangeTooltips", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var plotContainer = this.plotContainer;
                var w = plotContainer.width();
                var h = plotContainer.height();
                var plotT = plotContainer._display.toGlobal({ x: 0, y: 0 });
                var plotB = plotContainer._display.toGlobal({ x: w, y: h });
                var tooltips = [];
                var sum = 0;
                var minDistance = Infinity;
                var movePoint = this._movePoint;
                var maxTooltipDistance = this.get("maxTooltipDistance");
                var maxTooltipDistanceBy = this.get("maxTooltipDistanceBy", "xy");
                var closest;
                var closestPoint;
                if (isNumber(maxTooltipDistance)) {
                    this.series.each(function (series) {
                        var tooltip = series.get("tooltip");
                        if (tooltip) {
                            var point = tooltip.get("pointTo");
                            if (point) {
                                var distance = Math.hypot(movePoint.x - point.x, movePoint.y - point.y);
                                if (maxTooltipDistanceBy == "x") {
                                    distance = Math.abs(movePoint.x - point.x);
                                }
                                else if (maxTooltipDistanceBy == "y") {
                                    distance = Math.abs(movePoint.y - point.y);
                                }
                                if (distance < minDistance) {
                                    minDistance = distance;
                                    closest = series;
                                    closestPoint = point;
                                }
                            }
                        }
                    });
                }
                var tooltipSeries = [];
                this.series.each(function (series) {
                    var tooltip = series.get("tooltip");
                    if (tooltip) {
                        var hidden = false;
                        var point = tooltip.get("pointTo");
                        if (point) {
                            if (maxTooltipDistance >= 0) {
                                var point_1 = tooltip.get("pointTo");
                                if (point_1) {
                                    if (series != closest) {
                                        var distance = Math.hypot(closestPoint.x - point_1.x, closestPoint.y - point_1.y);
                                        if (maxTooltipDistanceBy == "x") {
                                            distance = Math.abs(closestPoint.x - point_1.x);
                                        }
                                        else if (maxTooltipDistanceBy == "y") {
                                            distance = Math.abs(closestPoint.y - point_1.y);
                                        }
                                        if (distance > maxTooltipDistance) {
                                            hidden = true;
                                        }
                                    }
                                }
                            }
                            else if (maxTooltipDistance == -1) {
                                if (series != closest) {
                                    hidden = true;
                                }
                            }
                            if (!_this.inPlot(_this._tooltipToLocal(point)) || !tooltip.dataItem) {
                                hidden = true;
                            }
                            else {
                                if (!hidden) {
                                    sum += point.y;
                                }
                            }
                            if (hidden || series.isHidden() || series.isHiding()) {
                                tooltip.hide(0);
                            }
                            else {
                                tooltip.show();
                                tooltips.push(tooltip);
                                tooltipSeries.push(series);
                            }
                        }
                    }
                });
                this.setPrivate("tooltipSeries", tooltipSeries);
                if (this.get("arrangeTooltips")) {
                    var tooltipContainer_1 = this._root.tooltipContainer;
                    var count = tooltips.length;
                    var average = sum / count;
                    if (average > h / 2 + plotT.y) {
                        tooltips.sort(function (a, b) { return compareNumber(b.get("pointTo").y, a.get("pointTo").y); });
                        var prevY_1 = plotB.y;
                        each$1(tooltips, function (tooltip) {
                            var height = tooltip.height();
                            var centerY = tooltip.get("centerY");
                            if (centerY instanceof Percent) {
                                height *= centerY.value;
                            }
                            height += tooltip.get("marginBottom", 0);
                            tooltip.set("bounds", { left: plotT.x, top: plotT.y, right: plotB.x, bottom: prevY_1 });
                            prevY_1 = Math.min(prevY_1 - height, tooltip._fy - height);
                            tooltipContainer_1.children.moveValue(tooltip, 0);
                        });
                    }
                    else {
                        tooltips.reverse();
                        tooltips.sort(function (a, b) { return compareNumber(a.get("pointTo").y, b.get("pointTo").y); });
                        var prevY_2 = 0;
                        each$1(tooltips, function (tooltip) {
                            var height = tooltip.height();
                            var centerY = tooltip.get("centerY");
                            if (centerY instanceof Percent) {
                                height *= centerY.value;
                            }
                            height += tooltip.get("marginBottom", 0);
                            tooltip.set("bounds", { left: plotT.x, top: prevY_2, right: plotB.x, bottom: Math.max(plotT.y + h, prevY_2 + height) });
                            tooltipContainer_1.children.moveValue(tooltip, 0);
                            prevY_2 = Math.max(prevY_2 + height, tooltip._fy + height);
                        });
                    }
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_tooltipToLocal", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                return this.plotContainer.toLocal(point);
            }
        });
        /**
         * Fully zooms out the chart.
         */
        Object.defineProperty(XYChart.prototype, "zoomOut", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.xAxes.each(function (axis) {
                    axis.setPrivate("updateScrollbar", true);
                    axis.zoom(0, 1);
                });
                this.yAxes.each(function (axis) {
                    axis.setPrivate("updateScrollbar", true);
                    axis.zoom(0, 1);
                });
            }
        });
        Object.defineProperty(XYChart, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "XYChart"
        });
        Object.defineProperty(XYChart, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: SerialChart.classNames.concat([XYChart.className])
        });
        return XYChart;
    }(SerialChart));

    /**
     * Creates a scrollbar with chart preview in it.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/#Scrollbar_with_chart_preview} for more info
     * @important
     */
    var XYChartScrollbar = /** @class */ (function (_super) {
        __extends(XYChartScrollbar, _super);
        function XYChartScrollbar() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * An instance of an [[XYChart]] that is used to plot chart preview in
             * scrollbar.
             */
            Object.defineProperty(_this, "chart", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(XYChart.new(_this._root, {
                    themeTags: ["chart"],
                    interactive: false,
                    interactiveChildren: false,
                    panX: false,
                    panY: false,
                    wheelX: "none",
                    wheelY: "none"
                }))
            });
            /**
             * A graphics element that is displayed over inactive portion of the
             * scrollbarpreview, to dim it down.
             */
            Object.defineProperty(_this, "overlay", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Graphics.new(_this._root, {
                    themeTags: ["overlay"],
                    interactive: false
                }))
            });
            return _this;
        }
        Object.defineProperty(XYChartScrollbar.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._addOrientationClass();
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["scrollbar", "xy", "chart", this._settings.orientation]);
                var children = this.children;
                children.moveValue(this.thumb);
                children.moveValue(this.startGrip);
                children.moveValue(this.endGrip);
                this.thumb.set("opacity", 0);
                this.thumb.states.create("hover", { opacity: 0.2 });
                var plotContainer = this.chart.plotContainer;
                plotContainer.set("interactive", false);
                plotContainer.remove("background");
                plotContainer.children.removeValue(this.chart.zoomOutButton);
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(XYChartScrollbar.prototype, "_updateThumb", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._updateThumb.call(this);
                this.overlay.set("draw", function (display) {
                    var _a, _b;
                    var startGrip = _this.startGrip;
                    var endGrip = _this.endGrip;
                    var x0 = startGrip.x();
                    var y0 = startGrip.y();
                    var x1 = endGrip.x();
                    var y1 = endGrip.y();
                    var h = _this.height();
                    var w = _this.width();
                    if (x0 > x1) {
                        _a = __read([x1, x0], 2), x0 = _a[0], x1 = _a[1];
                    }
                    if (y0 > y1) {
                        _b = __read([y1, y0], 2), y0 = _b[0], y1 = _b[1];
                    }
                    if (_this.get("orientation") === "horizontal") {
                        display.moveTo(0, 0);
                        display.lineTo(x0, 0);
                        display.lineTo(x0, h);
                        display.lineTo(0, h);
                        display.lineTo(0, 0);
                        display.moveTo(x1, 0);
                        display.lineTo(w, 0);
                        display.lineTo(w, h);
                        display.lineTo(x1, h);
                        display.lineTo(x1, 0);
                    }
                    else {
                        display.moveTo(0, 0);
                        display.lineTo(0, y0);
                        display.lineTo(w, y0);
                        display.lineTo(w, 0);
                        display.lineTo(0, 0);
                        display.moveTo(0, y1);
                        display.lineTo(0, h);
                        display.lineTo(w, h);
                        display.lineTo(w, y1);
                        display.lineTo(0, y1);
                    }
                });
            }
        });
        Object.defineProperty(XYChartScrollbar, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "XYChartScrollbar"
        });
        Object.defineProperty(XYChartScrollbar, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Scrollbar.classNames.concat([XYChartScrollbar.className])
        });
        return XYChartScrollbar;
    }(Scrollbar));

    /**
     * Creates an axis grid line.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Grid} for more info
     * @important
     */
    var Grid = /** @class */ (function (_super) {
        __extends(Grid, _super);
        function Grid() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Grid.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isPrivateDirty("width") || this.isPrivateDirty("height")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Grid, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Grid"
        });
        Object.defineProperty(Grid, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([Grid.className])
        });
        return Grid;
    }(Graphics));

    /**
     * Creates a chart cursor for an [[XYChart]].
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/} for more info
     * @important
     */
    var XYCursor = /** @class */ (function (_super) {
        __extends(XYCursor, _super);
        function XYCursor() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * A [[Grid]] elment that used for horizontal line of the cursor crosshair.
             *
             * @default Grid.new()
             */
            Object.defineProperty(_this, "lineX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Grid.new(_this._root, {
                    themeTags: ["x"]
                }))
            });
            /**
             * A [[Grid]] elment that used for horizontal line of the cursor crosshair.
             *
             * @default Grid.new()
             */
            Object.defineProperty(_this, "lineY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Grid.new(_this._root, {
                    themeTags: ["y"]
                }))
            });
            /**
             * An element that represents current selection.
             *
             * @default Graphics.new()
             */
            Object.defineProperty(_this, "selection", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Graphics.new(_this._root, {
                    themeTags: ["selection", "cursor"], layer: 30
                }))
            });
            Object.defineProperty(_this, "_movePoint", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_lastPoint", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: { x: 0, y: 0 }
            });
            Object.defineProperty(_this, "_tooltipX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_tooltipY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            /**
             * A chart cursor is attached to.
             */
            Object.defineProperty(_this, "chart", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_toX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_toY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(XYCursor.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["xy", "cursor"]);
                _super.prototype._afterNew.call(this);
                this.setAll({ "width": p100, height: p100, isMeasured: true, position: "absolute" });
                this.states.create("hidden", { visible: true, opacity: 0 });
                this._drawLines();
                this.setPrivateRaw("visible", false);
                this._disposers.push(this.setTimeout(function () {
                    _this.setPrivate("visible", true);
                }, 500));
                this.lineX.events.on("positionchanged", function () {
                    _this._handleXLine();
                });
                this.lineY.events.on("positionchanged", function () {
                    _this._handleYLine();
                });
            }
        });
        Object.defineProperty(XYCursor.prototype, "_setUpTouch", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var chart = this.chart;
                if (chart) {
                    chart.plotContainer._display.cancelTouch = this.get("behavior") != "none" ? true : false;
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_handleXLine", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var x = this.lineX.x();
                var visible = true;
                if (x < 0 || x > this.width()) {
                    visible = false;
                }
                this.lineX.setPrivate("visible", visible);
            }
        });
        Object.defineProperty(XYCursor.prototype, "_handleYLine", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var y = this.lineY.y();
                var visible = true;
                if (y < 0 || y > this.height()) {
                    visible = false;
                }
                this.lineY.setPrivate("visible", visible);
            }
        });
        Object.defineProperty(XYCursor.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._prepareChildren.call(this);
                if (this.isDirty("xAxis")) {
                    this._tooltipX = false;
                    var xAxis = this.get("xAxis");
                    if (xAxis) {
                        var tooltip_1 = xAxis.get("tooltip");
                        if (tooltip_1) {
                            this._tooltipX = true;
                            tooltip_1.on("pointTo", function () {
                                _this._updateXLine(tooltip_1);
                            });
                        }
                    }
                }
                if (this.isDirty("yAxis")) {
                    this._tooltipY = false;
                    var yAxis = this.get("yAxis");
                    if (yAxis) {
                        var tooltip_2 = yAxis.get("tooltip");
                        if (tooltip_2) {
                            this._tooltipY = true;
                            tooltip_2.on("pointTo", function () {
                                _this._updateYLine(tooltip_2);
                            });
                        }
                    }
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_handleSyncWith", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var chart = this.chart;
                if (chart) {
                    var syncWith = this.get("syncWith");
                    var otherCharts_1 = [];
                    if (syncWith) {
                        each$1(syncWith, function (cursor) {
                            var chart = cursor.chart;
                            if (chart) {
                                otherCharts_1.push(chart);
                            }
                        });
                    }
                    chart._otherCharts = otherCharts_1;
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._updateChildren.call(this);
                this._handleSyncWith();
                if (this.isDirty("positionX") || this.isDirty("positionY")) {
                    var positionX = this.get("positionX");
                    var positionY = this.get("positionY");
                    if (positionX == null && positionY == null) {
                        this.hide(0);
                    }
                    else {
                        this._movePoint = this.toGlobal(this._getPoint(this.get("positionX", 0), this.get("positionY", 0)));
                        this.handleMove();
                    }
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_updateXLine", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip) {
                var x = round$1(this._display.toLocal(tooltip.get("pointTo", { x: 0, y: 0 })).x, 2);
                if (this._toX != x) {
                    this.lineX.animate({ key: "x", to: x, duration: tooltip.get("animationDuration", 0), easing: tooltip.get("animationEasing") });
                    this._toX = x;
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_updateYLine", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip) {
                var y = round$1(this._display.toLocal(tooltip.get("pointTo", { x: 0, y: 0 })).y, 2);
                if (this._toY != y) {
                    this.lineY.animate({ key: "y", to: y, duration: tooltip.get("animationDuration", 0), easing: tooltip.get("animationEasing") });
                    this._toY = y;
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_drawLines", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this.lineX.set("draw", function (display) {
                    display.moveTo(0, 0);
                    display.lineTo(0, _this.height());
                });
                this.lineY.set("draw", function (display) {
                    display.moveTo(0, 0);
                    display.lineTo(_this.width(), 0);
                });
            }
        });
        Object.defineProperty(XYCursor.prototype, "_setChart", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (chart) {
                var _this = this;
                this.chart = chart;
                this._handleSyncWith();
                var plotContainer = chart.plotContainer;
                this.events.on("boundschanged", function () {
                    _this._disposers.push(_this.setTimeout(function () {
                        if (_this.get("alwaysShow")) {
                            _this._movePoint = _this.toGlobal(_this._getPoint(_this.get("positionX", 0), _this.get("positionY", 0)));
                            _this.handleMove();
                        }
                    }, 50));
                });
                //this._display.interactive = true;
                if (supports("touchevents")) {
                    this._disposers.push(plotContainer.events.on("click", function (event) {
                        if (isTouchEvent(event.originalEvent)) {
                            _this._handleMove(event.originalEvent);
                        }
                    }));
                    this._setUpTouch();
                }
                this._disposers.push(plotContainer.events.on("pointerdown", function (event) {
                    _this._handleCursorDown(event.originalEvent);
                }));
                this._disposers.push(plotContainer.events.on("globalpointerup", function (event) {
                    _this._handleCursorUp(event.originalEvent);
                    if (!event.native && !_this.isHidden()) {
                        _this._handleMove(event.originalEvent);
                    }
                }));
                this._disposers.push(plotContainer.events.on("globalpointermove", function (event) {
                    if (!_this.get("syncWith")) {
                        if (keys(plotContainer._downPoints).length == 0 && !event.native && _this.isHidden()) {
                            // Ignore mouse movement if it originates on outside element and
                            // we're not dragging.
                            return;
                        }
                    }
                    _this._handleMove(event.originalEvent);
                }));
                var parent = this.parent;
                if (parent) {
                    parent.children.moveValue(this.selection);
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_inPlot", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                var chart = this.chart;
                if (chart) {
                    return chart.inPlot(point);
                }
                return false;
            }
        });
        Object.defineProperty(XYCursor.prototype, "_handleCursorDown", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (event) {
                var rootPoint = this._root.documentPointToRoot({ x: event.clientX, y: event.clientY });
                var local = this._display.toLocal(rootPoint);
                var chart = this.chart;
                this.selection.set("draw", function () { });
                if (chart && this._inPlot(local)) {
                    this._downPoint = local;
                    if (this.get("behavior") != "none") {
                        this.selection.show();
                        var type = "selectstarted";
                        if (this.events.isEnabled(type)) {
                            this.events.dispatch(type, { type: type, target: this });
                        }
                    }
                    var positionX = this._getPosition(local).x;
                    var positionY = this._getPosition(local).y;
                    this.setPrivate("downPositionX", positionX);
                    this.setPrivate("downPositionY", positionY);
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_handleCursorUp", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_event) {
                // TODO: handle multitouch
                if (this._downPoint) {
                    var behavior = this.get("behavior", "none");
                    if (behavior != "none") {
                        if (behavior.charAt(0) === "z") {
                            this.selection.hide();
                        }
                        var userPositionX = this.get("positionX");
                        var positionX = this.getPrivate("positionX", 0);
                        if (isNumber(userPositionX)) {
                            positionX = userPositionX;
                        }
                        var userPositionY = this.get("positionY");
                        var positionY = this.getPrivate("positionY", 0);
                        if (isNumber(userPositionY)) {
                            positionY = userPositionY;
                        }
                        var dispatch = false;
                        if (behavior === "zoomX" || behavior === "zoomXY" || behavior === "selectX" || behavior === "selectXY") {
                            if (Math.abs(positionX - this.getPrivate("downPositionX", 0)) > 0.003) {
                                dispatch = true;
                            }
                        }
                        if (behavior === "zoomY" || behavior === "zoomXY" || behavior === "selectY" || behavior === "selectXY") {
                            if (Math.abs(positionY - this.getPrivate("downPositionY", 0)) > 0.003) {
                                dispatch = true;
                            }
                        }
                        if (dispatch) {
                            var type = "selectended";
                            if (this.events.isEnabled(type)) {
                                this.events.dispatch(type, { type: type, target: this });
                            }
                        }
                    }
                }
                this._downPoint = undefined;
            }
        });
        Object.defineProperty(XYCursor.prototype, "_handleMove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (event) {
                if (this.getPrivate("visible")) {
                    var chart = this.chart;
                    if (chart && keys(chart.plotContainer._downPoints).length > 1) {
                        this.set("forceHidden", true);
                        return;
                    }
                    else {
                        this.set("forceHidden", false);
                    }
                    // TODO: handle multitouch
                    var rootPoint = this._root.documentPointToRoot({ x: event.clientX, y: event.clientY });
                    var lastPoint = this._lastPoint;
                    if (Math.round(lastPoint.x) === Math.round(rootPoint.x) && Math.round(lastPoint.y) === Math.round(rootPoint.y)) {
                        return;
                    }
                    this._lastPoint = rootPoint;
                    this.handleMove({ x: rootPoint.x, y: rootPoint.y });
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_getPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                return { x: point.x / this.width(), y: point.y / this.height() };
            }
        });
        /**
         * Moves the cursor to X/Y coordinates within chart container (`point`).
         *
         * If `skipEvent` parameter is set to `true`, the move will not invoke
         * the `"cursormoved"` event.
         *
         * @param  point      X/Y to move cursor to
         * @param  skipEvent  Do not fire "cursormoved" event
         */
        Object.defineProperty(XYCursor.prototype, "handleMove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point, skipEvent) {
                if (!point) {
                    point = this._movePoint;
                }
                var alwaysShow = this.get("alwaysShow");
                if (!point) {
                    this.hide(0);
                    return;
                }
                this._movePoint = point;
                var local = this._display.toLocal(point);
                var chart = this.chart;
                if (chart && this._inPlot(local)) {
                    chart._movePoint = point;
                    if (this.isHidden()) {
                        this.show();
                        var behavior = this.get("behavior", "");
                        if (behavior.charAt(0) == "z") {
                            this.selection.set("draw", function () { });
                        }
                    }
                    var x = local.x;
                    var y = local.y;
                    var xyPos = this._getPosition(local);
                    this.setPrivate("point", local);
                    var snapToSeries_1 = this.get("snapToSeries");
                    var userPositionX = this.get("positionX");
                    var positionX_1 = xyPos.x;
                    if (isNumber(userPositionX)) {
                        positionX_1 = userPositionX;
                    }
                    var userPositionY = this.get("positionY");
                    var positionY_1 = xyPos.y;
                    if (isNumber(userPositionY)) {
                        positionY_1 = userPositionY;
                    }
                    this.setPrivate("positionX", positionX_1);
                    this.setPrivate("positionY", positionY_1);
                    var xy = this._getPoint(positionX_1, positionY_1);
                    x = xy.x;
                    y = xy.y;
                    chart.xAxes.each(function (axis) {
                        axis._handleCursorPosition(positionX_1, snapToSeries_1);
                        if (alwaysShow) {
                            axis.handleCursorShow();
                        }
                    });
                    chart.yAxes.each(function (axis) {
                        axis._handleCursorPosition(positionY_1, snapToSeries_1);
                        if (alwaysShow) {
                            axis.handleCursorShow();
                        }
                    });
                    if (!skipEvent) {
                        chart._handleCursorPosition();
                        var type = "cursormoved";
                        if (this.events.isEnabled(type)) {
                            this.events.dispatch(type, { type: type, target: this });
                        }
                    }
                    this._updateLines(x, y);
                    chart.arrangeTooltips();
                }
                else if (!this._downPoint) {
                    if (!alwaysShow) {
                        this.hide(0);
                        var type = "cursorhidden";
                        if (this.events.isEnabled(type)) {
                            this.events.dispatch(type, { type: type, target: this });
                        }
                    }
                }
                if (this._downPoint && this.get("behavior") != "none") {
                    this._updateSelection(local);
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_getPoint", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (positionX, positionY) {
                return { x: this.width() * positionX, y: this.height() * positionY };
            }
        });
        Object.defineProperty(XYCursor.prototype, "_updateLines", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x, y) {
                if (!this._tooltipX) {
                    this.lineX.set("x", x);
                }
                if (!this._tooltipY) {
                    this.lineY.set("y", y);
                }
                this._drawLines();
            }
        });
        Object.defineProperty(XYCursor.prototype, "_updateSelection", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                var _this = this;
                var selection = this.selection;
                var behavior = this.get("behavior");
                var w = this.width();
                var h = this.height();
                if (point.x < 0) {
                    point.x = 0;
                }
                if (point.x > w) {
                    point.x = w;
                }
                if (point.y < 0) {
                    point.y = 0;
                }
                if (point.y > h) {
                    point.y = h;
                }
                selection.set("draw", function (display) {
                    var downPoint = _this._downPoint;
                    if (downPoint) {
                        if (behavior === "zoomXY" || behavior === "selectXY") {
                            display.moveTo(downPoint.x, downPoint.y);
                            display.lineTo(downPoint.x, point.y);
                            display.lineTo(point.x, point.y);
                            display.lineTo(point.x, downPoint.y);
                            display.lineTo(downPoint.x, downPoint.y);
                        }
                        else if (behavior === "zoomX" || behavior === "selectX") {
                            display.moveTo(downPoint.x, 0);
                            display.lineTo(downPoint.x, h);
                            display.lineTo(point.x, h);
                            display.lineTo(point.x, 0);
                            display.lineTo(downPoint.x, 0);
                        }
                        else if (behavior === "zoomY" || behavior === "selectY") {
                            display.moveTo(0, downPoint.y);
                            display.lineTo(w, downPoint.y);
                            display.lineTo(w, point.y);
                            display.lineTo(0, point.y);
                            display.lineTo(0, downPoint.y);
                        }
                    }
                });
            }
        });
        Object.defineProperty(XYCursor.prototype, "_onHide", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.isHidden()) {
                    var chart = this.chart;
                    if (chart) {
                        chart.xAxes.each(function (axis) {
                            axis.handleCursorHide();
                        });
                        chart.yAxes.each(function (axis) {
                            axis.handleCursorHide();
                        });
                        chart.series.each(function (series) {
                            series.handleCursorHide();
                        });
                    }
                }
                _super.prototype._onHide.call(this);
            }
        });
        Object.defineProperty(XYCursor.prototype, "_onShow", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this.isHidden()) {
                    var chart = this.chart;
                    if (chart) {
                        chart.xAxes.each(function (axis) {
                            axis.handleCursorShow();
                        });
                        chart.yAxes.each(function (axis) {
                            axis.handleCursorShow();
                        });
                    }
                }
                _super.prototype._onShow.call(this);
            }
        });
        Object.defineProperty(XYCursor.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._dispose.call(this);
                this.selection.dispose();
            }
        });
        Object.defineProperty(XYCursor, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "XYCursor"
        });
        Object.defineProperty(XYCursor, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Container.classNames.concat([XYCursor.className])
        });
        return XYCursor;
    }(Container));

    /**
     * @ignore
     */
    function min(left, right) {
        if (left == null) {
            return right;
        }
        else if (right == null) {
            return left;
        }
        else if (right < left) {
            return right;
        }
        else {
            return left;
        }
    }
    /**
     * @ignore
     */
    function max(left, right) {
        if (left == null) {
            return right;
        }
        else if (right == null) {
            return left;
        }
        else if (right > left) {
            return right;
        }
        else {
            return left;
        }
    }
    /**
     * A base class for all XY chart series.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/} for more info
     */
    var XYSeries = /** @class */ (function (_super) {
        __extends(XYSeries, _super);
        function XYSeries() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_xField", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_yField", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_xOpenField", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_yOpenField", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_xLowField", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_xHighField", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_yLowField", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_yHighField", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_axesDirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_stackDirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_selectionProcessed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_dataSets", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_mainContainerMask", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_x", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_y", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            /**
             * A [[Container]] that us used to put series' elements in.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "mainContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Container.new(_this._root, {}))
            });
            /**
             * A list of axis ranges that affect the series.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info
             */
            Object.defineProperty(_this, "axisRanges", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new List()
            });
            Object.defineProperty(_this, "_skipped", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_couldStackTo", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "_reallyStackedTo", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_stackedSeries", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_aLocationX0", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_aLocationX1", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_aLocationY0", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_aLocationY1", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_showBullets", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(_this, "valueXFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: [
                    "valueX",
                    "openValueX",
                    "lowValueX",
                    "highValueX"
                ]
            });
            Object.defineProperty(_this, "valueYFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: [
                    "valueY",
                    "openValueY",
                    "lowValueY",
                    "highValueY"
                ]
            });
            Object.defineProperty(_this, "_valueXFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_valueYFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // used for full min/max
            Object.defineProperty(_this, "_valueXShowFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_valueYShowFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // used for selection (uses working)
            Object.defineProperty(_this, "__valueXShowFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "__valueYShowFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_emptyDataItem", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new DataItem(_this, undefined, {})
            });
            Object.defineProperty(_this, "_dataSetId", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_tooltipFieldX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_tooltipFieldY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(XYSeries.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this.fields.push("categoryX", "categoryY", "openCategoryX", "openCategoryY");
                this.valueFields.push("valueX", "valueY", "openValueX", "openValueY", "lowValueX", "lowValueY", "highValueX", "highValueY");
                this._setRawDefault("vcx", 1);
                this._setRawDefault("vcy", 1);
                // this can't go to themes, as data might be parsed before theme
                this._setRawDefault("valueXShow", "valueXWorking");
                this._setRawDefault("valueYShow", "valueYWorking");
                this._setRawDefault("openValueXShow", "openValueXWorking");
                this._setRawDefault("openValueYShow", "openValueYWorking");
                this._setRawDefault("lowValueXShow", "lowValueXWorking");
                this._setRawDefault("lowValueYShow", "lowValueYWorking");
                this._setRawDefault("highValueXShow", "highValueXWorking");
                this._setRawDefault("highValueYShow", "highValueYWorking");
                this._setRawDefault("lowValueXGrouped", "low");
                this._setRawDefault("lowValueYGrouped", "low");
                this._setRawDefault("highValueXGrouped", "high");
                this._setRawDefault("highValueYGrouped", "high");
                _super.prototype._afterNew.call(this);
                this._settings.xAxis.series.push(this);
                this._settings.yAxis.series.push(this);
                this.set("maskContent", true);
                this._disposers.push(this.axisRanges.events.onAll(function (change) {
                    if (change.type === "clear") {
                        each$1(change.oldValues, function (axisRange) {
                            _this._removeAxisRange(axisRange);
                        });
                    }
                    else if (change.type === "push") {
                        _this._processAxisRange(change.newValue);
                    }
                    else if (change.type === "setIndex") {
                        _this._processAxisRange(change.newValue);
                    }
                    else if (change.type === "insertIndex") {
                        _this._processAxisRange(change.newValue);
                    }
                    else if (change.type === "removeIndex") {
                        _this._removeAxisRange(change.oldValue);
                    }
                    else if (change.type === "moveIndex") {
                        _this._processAxisRange(change.value);
                    }
                    else {
                        throw new Error("Unknown IStreamEvent type");
                    }
                }));
                if (!this.get("baseAxis")) {
                    var xAxis = this.get("xAxis");
                    var yAxis = this.get("yAxis");
                    if (yAxis.isType("CategoryAxis") || yAxis.isType("DateAxis")) {
                        this.set("baseAxis", yAxis);
                    }
                    else {
                        this.set("baseAxis", xAxis);
                    }
                }
                this.states.create("hidden", { opacity: 1, visible: false });
                this._makeFieldNames();
            }
        });
        Object.defineProperty(XYSeries.prototype, "_processAxisRange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axisRange) {
                var container = Container.new(this._root, {});
                axisRange.container = container;
                this.children.push(container);
                axisRange.series = this;
                var axisDataItem = axisRange.axisDataItem;
                axisDataItem.setRaw("isRange", true);
                var axis = axisDataItem.component;
                if (axis) {
                    axis._processAxisRange(axisDataItem, ["range", "series"]);
                    var bullet = axisDataItem.get("bullet");
                    if (bullet) {
                        var sprite = bullet.get("sprite");
                        if (sprite) {
                            sprite.setPrivate("visible", false);
                        }
                    }
                    var axisFill = axisDataItem.get("axisFill");
                    if (axisFill) {
                        container.set("mask", axisFill);
                    }
                    axis._seriesAxisRanges.push(axisDataItem);
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_removeAxisRange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axisRange) {
                var axisDataItem = axisRange.axisDataItem;
                var axis = axisDataItem.component;
                axis.disposeDataItem(axisDataItem);
                remove(axis._seriesAxisRanges, axisDataItem);
                var container = axisRange.container;
                if (container) {
                    container.dispose();
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_updateFields", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._updateFields.call(this);
                this._valueXFields = [];
                this._valueYFields = [];
                this._valueXShowFields = [];
                this._valueYShowFields = [];
                this.__valueXShowFields = [];
                this.__valueYShowFields = [];
                if (this.valueXFields) {
                    each$1(this.valueXFields, function (key) {
                        var field = _this.get((key + "Field"));
                        if (field) {
                            _this._valueXFields.push(key);
                            var field_1 = _this.get((key + "Show"));
                            _this.__valueXShowFields.push(field_1);
                            if (field_1.indexOf("Working") != -1) {
                                _this._valueXShowFields.push(field_1.split("Working")[0]);
                            }
                            else {
                                _this._valueYShowFields.push(field_1);
                            }
                        }
                    });
                }
                if (this.valueYFields) {
                    each$1(this.valueYFields, function (key) {
                        var field = _this.get((key + "Field"));
                        if (field) {
                            _this._valueYFields.push(key);
                            var field_2 = _this.get((key + "Show"));
                            _this.__valueYShowFields.push(field_2);
                            if (field_2.indexOf("Working") != -1) {
                                _this._valueYShowFields.push(field_2.split("Working")[0]);
                            }
                            else {
                                _this._valueYShowFields.push(field_2);
                            }
                        }
                    });
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._dispose.call(this);
                var chart = this.chart;
                if (chart) {
                    chart.series.removeValue(this);
                }
                removeFirst(this.get("xAxis").series, this);
                removeFirst(this.get("yAxis").series, this);
            }
        });
        // TODO use  SelectKeys<this["_privateSettings"], number | undefined>
        Object.defineProperty(XYSeries.prototype, "_min", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var newValue = min(this.getPrivate(key), value);
                this.setPrivate(key, newValue);
            }
        });
        // TODO use  SelectKeys<this["_privateSettings"], number | undefined>
        Object.defineProperty(XYSeries.prototype, "_max", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var newValue = max(this.getPrivate(key), value);
                this.setPrivate(key, newValue);
            }
        });
        Object.defineProperty(XYSeries.prototype, "_shouldMakeBullet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                if (!this.get("xAxis").inited || !this.get("yAxis").inited) {
                    return false;
                }
                if (dataItem.get(this._xField) != null && dataItem.get(this._yField) != null) {
                    return true;
                }
                return false;
            }
        });
        Object.defineProperty(XYSeries.prototype, "_makeFieldNames", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var xName = xAxis.getPrivate("name");
                var xCapName = capitalizeFirst(xName);
                var yName = yAxis.getPrivate("name");
                var yCapName = capitalizeFirst(yName);
                var xLetter = xAxis.get("renderer").getPrivate("letter");
                var yLetter = yAxis.get("renderer").getPrivate("letter");
                var open = "open";
                var low = "low";
                var high = "high";
                var show = "Show";
                if (xAxis.className === "ValueAxis") {
                    this._xField = this.get((xName + xLetter + show));
                    this._xOpenField = this.get((open + xCapName + xLetter + show));
                    this._xLowField = this.get((low + xCapName + xLetter + show));
                    this._xHighField = this.get((high + xCapName + xLetter + show));
                }
                else {
                    this._xField = (xName + xLetter);
                    this._xOpenField = (open + xCapName + xLetter);
                    this._xLowField = (low + xCapName + xLetter);
                    this._xHighField = (high + xCapName + xLetter);
                }
                if (yAxis.className === "ValueAxis") {
                    this._yField = this.get((yName + yLetter + show));
                    this._yOpenField = this.get((open + yCapName + yLetter + show));
                    this._yLowField = this.get((low + yCapName + yLetter + show));
                    this._yHighField = this.get((high + yCapName + yLetter + show));
                }
                else {
                    this._yField = (yName + yLetter);
                    this._yOpenField = (open + yCapName + yLetter);
                    this._yLowField = (low + yCapName + yLetter);
                    this._yHighField = (high + yCapName + yLetter);
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_fixVC", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var baseAxis = this.get("baseAxis");
                var hiddenState = this.states.lookup("hidden");
                var sequencedInterpolation = this.get("sequencedInterpolation");
                if (hiddenState) {
                    var value = 0;
                    if (sequencedInterpolation) {
                        value = 0.999999999999; // makes animate, good for stacked
                    }
                    if (xAxis === baseAxis) {
                        hiddenState.set("vcy", value);
                    }
                    else if (yAxis === baseAxis) {
                        hiddenState.set("vcx", value);
                    }
                    else {
                        hiddenState.set("vcy", value);
                        hiddenState.set("vcx", value);
                    }
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_handleMaskBullets", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.isDirty("maskBullets")) {
                    this.bulletsContainer.set("maskContent", this.get("maskBullets"));
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._prepareChildren.call(this);
                if (this.isDirty("valueYShow") || this.isDirty("valueXShow"      )) {
                    this._updateFields();
                    this._makeFieldNames();
                    this._valuesDirty = true;
                }
                this.set("width", this.get("xAxis").width());
                this.set("height", this.get("yAxis").height());
                this._handleMaskBullets();
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var baseAxis = this.get("baseAxis");
                var tooltipPositionX = this.get("tooltipPositionX");
                var tooltipFieldX;
                switch (tooltipPositionX) {
                    case "open":
                        tooltipFieldX = this._xOpenField;
                        break;
                    case "low":
                        tooltipFieldX = this._xLowField;
                        break;
                    case "high":
                        tooltipFieldX = this._xHighField;
                        break;
                    default:
                        tooltipFieldX = this._xField;
                }
                this._tooltipFieldX = tooltipFieldX;
                var tooltipPositionY = this.get("tooltipPositionY");
                var tooltipFieldY;
                switch (tooltipPositionY) {
                    case "open":
                        tooltipFieldY = this._yOpenField;
                        break;
                    case "low":
                        tooltipFieldY = this._yLowField;
                        break;
                    case "high":
                        tooltipFieldY = this._yHighField;
                        break;
                    default:
                        tooltipFieldY = this._yField;
                }
                this._tooltipFieldY = tooltipFieldY;
                if (this.isDirty("baseAxis")) {
                    this._fixVC();
                }
                this.set("x", xAxis.x() - relativeToValue(xAxis.get("centerX", 0), xAxis.width()) - xAxis.parent.get("paddingLeft", 0));
                this.set("y", yAxis.y() - relativeToValue(yAxis.get("centerY", 0), yAxis.height()) - yAxis.parent.get("paddingTop", 0));
                this.bulletsContainer.set("y", this.y());
                this.bulletsContainer.set("x", this.x());
                var stacked = this.get("stacked");
                if (this.isDirty("stacked")) {
                    if (stacked) {
                        if (this._valuesDirty && !this._dataProcessed) ;
                        else {
                            this._stack();
                        }
                    }
                    else {
                        this._unstack();
                    }
                }
                if (this._valuesDirty && !this._dataProcessed) {
                    this._dataProcessed = true;
                    if (stacked) {
                        this._stack();
                    }
                    each$1(this.dataItems, function (dataItem) {
                        each$1(_this._valueXShowFields, function (key) {
                            var value = dataItem.get(key);
                            if (value != null) {
                                if (stacked) {
                                    value += _this.getStackedXValue(dataItem, key);
                                }
                                _this._min("minX", value);
                                _this._max("maxX", value);
                            }
                        });
                        each$1(_this._valueYShowFields, function (key) {
                            var value = dataItem.get(key);
                            if (value != null) {
                                if (stacked) {
                                    value += _this.getStackedYValue(dataItem, key);
                                }
                                _this._min("minY", value);
                                _this._max("maxY", value);
                            }
                        });
                        xAxis.processSeriesDataItem(dataItem, _this._valueXFields);
                        yAxis.processSeriesDataItem(dataItem, _this._valueYFields);
                    });
                    xAxis._seriesValuesDirty = true;
                    yAxis._seriesValuesDirty = true;
                    if (!this.get("ignoreMinMax")) {
                        if (this.isPrivateDirty("minX") || this.isPrivateDirty("maxX")) {
                            xAxis.markDirtyExtremes();
                        }
                        if (this.isPrivateDirty("minY") || this.isPrivateDirty("maxY")) {
                            yAxis.markDirtyExtremes();
                        }
                    }
                    this._markStakedDirtyStack();
                    //this.updateLegendMarker(undefined); // causes legend marker to change color instantly when on
                    this.updateLegendValue(undefined);
                }
                if (this.isDirty("vcx") || this.isDirty("vcy")) {
                    this._markStakedDirtyStack();
                }
                if (!this._dataGrouped) {
                    xAxis._groupSeriesData(this);
                    yAxis._groupSeriesData(this);
                    this._dataGrouped = true;
                }
                if (this._valuesDirty || this.isPrivateDirty("startIndex") || this.isPrivateDirty("endIndex") || this.isDirty("vcx") || this.isDirty("vcy") || this._stackDirty) {
                    var startIndex = this.startIndex();
                    var endIndex = this.endIndex();
                    var minBulletDistance = this.get("minBulletDistance", 0);
                    if (minBulletDistance > 0 && baseAxis) {
                        if (baseAxis.get("renderer").axisLength() / (endIndex - startIndex) > minBulletDistance) {
                            this._showBullets = true;
                        }
                        else {
                            this._showBullets = false;
                        }
                    }
                    if ((this._psi != startIndex || this._pei != endIndex || this.isDirty("vcx") || this.isDirty("vcy") || this._stackDirty || this._valuesDirty) && !this._selectionProcessed) {
                        this._selectionProcessed = true;
                        var vcx = this.get("vcx", 1);
                        var vcy = this.get("vcy", 1);
                        var stacked_1 = this.get("stacked", false);
                        var outOfSelection = this.getPrivate("outOfSelection");
                        if (baseAxis === xAxis) {
                            yAxis._calculateTotals();
                            this.setPrivateRaw("selectionMinY", undefined);
                            this.setPrivateRaw("selectionMaxY", undefined);
                            if (!outOfSelection) {
                                for (var i = startIndex; i < endIndex; i++) {
                                    this.processYSelectionDataItem(this.dataItems[i], vcy, stacked_1);
                                }
                            }
                            else {
                                yAxis.markDirtySelectionExtremes();
                            }
                        }
                        else if (baseAxis === yAxis) {
                            xAxis._calculateTotals();
                            this.setPrivateRaw("selectionMinX", undefined);
                            this.setPrivateRaw("selectionMaxX", undefined);
                            if (!outOfSelection) {
                                for (var i = startIndex; i < endIndex; i++) {
                                    this.processXSelectionDataItem(this.dataItems[i], vcx, stacked_1);
                                }
                            }
                            else {
                                yAxis.markDirtySelectionExtremes();
                            }
                        }
                        if (baseAxis === xAxis) {
                            if (this.get("valueYShow") !== "valueYWorking") {
                                var selectionMinY = this.getPrivate("selectionMinY");
                                if (selectionMinY != null) {
                                    this.setPrivateRaw("minY", selectionMinY);
                                    yAxis.markDirtyExtremes();
                                }
                                var selectionMaxY = this.getPrivate("selectionMaxY");
                                if (selectionMaxY != null) {
                                    this.setPrivateRaw("maxY", selectionMaxY);
                                    yAxis.markDirtyExtremes();
                                }
                            }
                        }
                        else if (baseAxis === yAxis) {
                            if (this.get("valueXShow") !== "valueXWorking") {
                                var selectionMinX = this.getPrivate("selectionMinX");
                                if (selectionMinX != null) {
                                    this.setPrivateRaw("minX", selectionMinX);
                                    yAxis.markDirtyExtremes();
                                }
                                var selectionMaxX = this.getPrivate("selectionMaxX");
                                if (selectionMaxX != null) {
                                    this.setPrivateRaw("maxX", selectionMaxX);
                                    xAxis.markDirtyExtremes();
                                }
                            }
                        }
                        if (this.isPrivateDirty("selectionMinX") || this.isPrivateDirty("selectionMaxX")) {
                            xAxis.markDirtySelectionExtremes();
                        }
                        if (this.isPrivateDirty("selectionMinY") || this.isPrivateDirty("selectionMaxY")) {
                            yAxis.markDirtySelectionExtremes();
                        }
                        // this.updateLegendValue(undefined); flickers while panning
                    }
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_makeRangeMask", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                if (this.axisRanges.length > 0) {
                    var mainContainerMask_1 = this._mainContainerMask;
                    if (mainContainerMask_1 == null) {
                        mainContainerMask_1 = this.children.push(Graphics.new(this._root, {}));
                        this._mainContainerMask = mainContainerMask_1;
                        mainContainerMask_1.set("draw", function (display, target) {
                            var parent = _this.parent;
                            if (parent) {
                                var w = _this._root.container.width();
                                var h = _this._root.container.height();
                                display.moveTo(-w, -h);
                                display.lineTo(-w, h * 2);
                                display.lineTo(w * 2, h * 2);
                                display.lineTo(w * 2, -h);
                                display.lineTo(-w, -h);
                                _this.axisRanges.each(function (axisRange) {
                                    var fill = axisRange.axisDataItem.get("axisFill");
                                    if (parent) {
                                        if (fill) {
                                            var draw = fill.get("draw");
                                            if (draw) {
                                                draw(display, target);
                                            }
                                        }
                                    }
                                });
                            }
                            _this.mainContainer._display.mask = mainContainerMask_1._display;
                        });
                    }
                    mainContainerMask_1.markDirty();
                    mainContainerMask_1._markDirtyKey("fill");
                }
                else {
                    this.mainContainer._display.mask = null;
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._updateChildren.call(this);
                // save for performance
                this._x = this.x();
                this._y = this.y();
                this._makeRangeMask();
            }
        });
        Object.defineProperty(XYSeries.prototype, "_stack", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var chart = this.chart;
                if (chart) {
                    var seriesIndex = chart.series.indexOf(this);
                    this._couldStackTo = [];
                    if (seriesIndex > 0) {
                        var series = void 0;
                        for (var i = seriesIndex - 1; i >= 0; i--) {
                            series = chart.series.getIndex(i);
                            if (series.get("xAxis") === this.get("xAxis") && series.get("yAxis") === this.get("yAxis") && series.className === this.className) {
                                this._couldStackTo.push(series);
                                if (!series.get("stacked")) {
                                    break;
                                }
                            }
                        }
                    }
                    this._stackDataItems();
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_unstack", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                each(this._reallyStackedTo, function (_key, value) {
                    delete (value._stackedSeries[_this.uid]);
                });
                this._reallyStackedTo = {};
                each$1(this.dataItems, function (dataItem) {
                    dataItem.setRaw("stackToItemY", undefined);
                    dataItem.setRaw("stackToItemX", undefined);
                });
            }
        });
        Object.defineProperty(XYSeries.prototype, "_stackDataItems", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                // this works only with the same number of data @todo: search by date/category?
                var baseAxis = this.get("baseAxis");
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var field;
                var stackToItemKey;
                if (baseAxis === xAxis) {
                    field = "valueY";
                    stackToItemKey = "stackToItemY";
                }
                else if (baseAxis === yAxis) {
                    field = "valueX";
                    stackToItemKey = "stackToItemX";
                }
                var len = this._couldStackTo.length;
                var index = 0;
                var stackToNegative = this.get("stackToNegative");
                this._reallyStackedTo = {};
                each$1(this.dataItems, function (dataItem) {
                    for (var s = 0; s < len; s++) {
                        var stackToSeries = _this._couldStackTo[s];
                        var stackToItem = stackToSeries.dataItems[index];
                        var value = dataItem.get(field);
                        if (stackToItem) {
                            var stackValue = stackToItem.get(field);
                            if (stackToNegative) {
                                if (isNumber(value)) {
                                    if (isNumber(stackValue)) {
                                        if (value >= 0 && stackValue >= 0) {
                                            dataItem.setRaw(stackToItemKey, stackToItem);
                                            _this._reallyStackedTo[stackToSeries.uid] = stackToSeries;
                                            stackToSeries._stackedSeries[_this.uid] = _this;
                                            break;
                                        }
                                        if (value < 0 && stackValue < 0) {
                                            dataItem.setRaw(stackToItemKey, stackToItem);
                                            _this._reallyStackedTo[stackToSeries.uid] = stackToSeries;
                                            stackToSeries._stackedSeries[_this.uid] = _this;
                                            break;
                                        }
                                    }
                                }
                                else {
                                    break;
                                }
                            }
                            else {
                                if (isNumber(value) && isNumber(stackValue)) {
                                    dataItem.setRaw(stackToItemKey, stackToItem);
                                    _this._reallyStackedTo[stackToSeries.uid] = stackToSeries;
                                    stackToSeries._stackedSeries[_this.uid] = _this;
                                    break;
                                }
                            }
                        }
                    }
                    index++;
                });
            }
        });
        Object.defineProperty(XYSeries.prototype, "processXSelectionDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, vcx, stacked) {
                var _this = this;
                each$1(this.__valueXShowFields, function (key) {
                    var value = dataItem.get(key);
                    if (value != null) {
                        if (stacked) {
                            value += _this.getStackedXValueWorking(dataItem, key);
                        }
                        _this._min("selectionMinX", value);
                        _this._max("selectionMaxX", value * vcx);
                    }
                });
            }
        });
        Object.defineProperty(XYSeries.prototype, "processYSelectionDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, vcy, stacked) {
                var _this = this;
                each$1(this.__valueYShowFields, function (key) {
                    var value = dataItem.get(key);
                    if (value != null) {
                        if (stacked) {
                            value += _this.getStackedYValueWorking(dataItem, key);
                        }
                        _this._min("selectionMinY", value);
                        _this._max("selectionMaxY", value * vcy);
                    }
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYSeries.prototype, "getStackedYValueWorking", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, key) {
                var stackToItem = dataItem.get("stackToItemY");
                if (stackToItem) {
                    var stackedToSeries = stackToItem.component;
                    return stackToItem.get(key, 0) * stackedToSeries.get("vcy", 1) + this.getStackedYValueWorking(stackToItem, key);
                }
                return 0;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYSeries.prototype, "getStackedXValueWorking", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, key) {
                var stackToItem = dataItem.get("stackToItemX");
                if (stackToItem) {
                    var stackedToSeries = stackToItem.component;
                    return stackToItem.get(key, 0) * stackedToSeries.get("vcx", 1) + this.getStackedXValueWorking(stackToItem, key);
                }
                return 0;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYSeries.prototype, "getStackedYValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, key) {
                var stackToItem = dataItem.get("stackToItemY");
                if (stackToItem) {
                    return stackToItem.get(key, 0) + this.getStackedYValue(stackToItem, key);
                }
                return 0;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYSeries.prototype, "getStackedXValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, key) {
                var stackToItem = dataItem.get("stackToItemX");
                if (stackToItem) {
                    return stackToItem.get(key, 0) + this.getStackedXValue(stackToItem, key);
                }
                return 0;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYSeries.prototype, "createLegendMarker", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem) {
                this.updateLegendMarker();
            }
        });
        Object.defineProperty(XYSeries.prototype, "_markDirtyAxes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._axesDirty = true;
                this.markDirty();
            }
        });
        Object.defineProperty(XYSeries.prototype, "_markDataSetDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._afterDataChange();
                this._valuesDirty = true;
                this._dataProcessed = false;
                this._aggregatesCalculated = false;
                this.markDirty();
            }
        });
        Object.defineProperty(XYSeries.prototype, "_clearDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._clearDirty.call(this);
                this._axesDirty = false;
                this._selectionProcessed = false;
                this._stackDirty = false;
                this._dataProcessed = false;
            }
        });
        Object.defineProperty(XYSeries.prototype, "_positionBullet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bullet) {
                var sprite = bullet.get("sprite");
                if (sprite) {
                    var dataItem = sprite.dataItem;
                    var locationX = bullet.get("locationX", dataItem.get("locationX", 0.5));
                    var locationY = bullet.get("locationY", dataItem.get("locationY", 0.5));
                    var xAxis = this.get("xAxis");
                    var yAxis = this.get("yAxis");
                    var positionX = xAxis.getDataItemPositionX(dataItem, this._xField, locationX, this.get("vcx", 1));
                    var positionY = yAxis.getDataItemPositionY(dataItem, this._yField, locationY, this.get("vcy", 1));
                    var point = this.getPoint(positionX, positionY);
                    var left = dataItem.get("left", point.x);
                    var right = dataItem.get("right", point.x);
                    var top_1 = dataItem.get("top", point.y);
                    var bottom = dataItem.get("bottom", point.y);
                    if (this._shouldShowBullet(positionX, positionY)) {
                        if (!bullet.getPrivate("hidden")) {
                            sprite.setPrivate("visible", true);
                        }
                        else {
                            sprite.setPrivate("visible", false);
                        }
                        var w = right - left;
                        var h = bottom - top_1;
                        if (sprite.isType("Label")) {
                            sprite.setPrivate("maxWidth", Math.abs(w));
                            sprite.setPrivate("maxHeight", Math.abs(h));
                        }
                        var x = left + w * locationX;
                        var y = bottom - h * locationY;
                        sprite.set("x", x);
                        sprite.set("y", y);
                    }
                    else {
                        sprite.setPrivate("visible", false);
                    }
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_shouldShowBullet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_positionX, _positionY) {
                return this._showBullets;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYSeries.prototype, "setDataSet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (id) {
                if (this._dataSets[id]) {
                    this._handleDataSetChange();
                    this._dataItems = this._dataSets[id];
                    this._markDataSetDirty();
                    this._dataSetId = id;
                    var type = "datasetchanged";
                    if (this.events.isEnabled(type)) {
                        this.events.dispatch(type, { type: type, target: this, id: id });
                    }
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_handleDataSetChange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.bullets.length > 0) {
                    each$1(this._dataItems, function (dataItem) {
                        var bullets = dataItem.bullets;
                        if (bullets) {
                            each$1(bullets, function (bullet) {
                                var sprite = bullet.get("sprite");
                                if (sprite) {
                                    sprite.setPrivate("visible", false);
                                }
                            });
                        }
                    });
                }
                this._selectionProcessed = false; // for totals to be calculated
            }
        });
        /**
         * Shows hidden series.
         *
         * @param   duration  Duration of animation in milliseconds
         * @return            Animation promise
         */
        Object.defineProperty(XYSeries.prototype, "show", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var promises;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this._fixVC();
                                promises = [];
                                promises.push(_super.prototype.show.call(this, duration).then(function () {
                                    _this._isShowing = false;
                                    var xAxis = _this.get("xAxis");
                                    var yAxis = _this.get("yAxis");
                                    var baseAxis = _this.get("baseAxis");
                                    if (yAxis !== baseAxis) {
                                        yAxis.markDirtySelectionExtremes();
                                    }
                                    if (xAxis !== baseAxis) {
                                        xAxis.markDirtySelectionExtremes();
                                    }
                                }));
                                promises.push(this.bulletsContainer.show(duration));
                                promises.push(this._sequencedShowHide(true, duration));
                                return [4 /*yield*/, Promise.all(promises)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            }
        });
        /**
         * Hides series.
         *
         * @param   duration  Duration of animation in milliseconds
         * @return            Animation promise
         */
        Object.defineProperty(XYSeries.prototype, "hide", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var promises;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this._fixVC();
                                promises = [];
                                promises.push(_super.prototype.hide.call(this, duration).then(function () {
                                    _this._isHiding = false;
                                }));
                                promises.push(this.bulletsContainer.hide(duration));
                                promises.push(this._sequencedShowHide(false, duration));
                                return [4 /*yield*/, Promise.all(promises)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            }
        });
        /**
         * Shows series's data item.
         *
         * @param   dataItem  Data item
         * @param   duration  Animation duration in milliseconds
         * @return            Promise
         */
        Object.defineProperty(XYSeries.prototype, "showDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var promises, easing;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                promises = [_super.prototype.showDataItem.call(this, dataItem, duration)];
                                if (!isNumber(duration)) {
                                    duration = this.get("stateAnimationDuration", 0);
                                }
                                easing = this.get("stateAnimationEasing");
                                each$1(this._valueFields, function (key) {
                                    promises.push(dataItem.animate({ key: key + "Working", to: dataItem.get(key), duration: duration, easing: easing }).waitForStop());
                                });
                                return [4 /*yield*/, Promise.all(promises)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            }
        });
        /**
         * Hides series's data item.
         *
         * @param   dataItem  Data item
         * @param   duration  Animation duration in milliseconds
         * @return            Promise
         */
        Object.defineProperty(XYSeries.prototype, "hideDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var promises, hiddenState, easing, xAxis, yAxis, baseAxis, stacked, min_1, baseValue_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                promises = [_super.prototype.hideDataItem.call(this, dataItem, duration)];
                                hiddenState = this.states.create("hidden", {});
                                if (!isNumber(duration)) {
                                    duration = hiddenState.get("stateAnimationDuration", this.get("stateAnimationDuration", 0));
                                }
                                easing = hiddenState.get("stateAnimationEasing", this.get("stateAnimationEasing"));
                                xAxis = this.get("xAxis");
                                yAxis = this.get("yAxis");
                                baseAxis = this.get("baseAxis");
                                stacked = this.get("stacked");
                                if (baseAxis === xAxis || !baseAxis) {
                                    each$1(this._valueYFields, function (key) {
                                        var min = yAxis.getPrivate("min");
                                        var baseValue = yAxis.baseValue();
                                        if (isNumber(min) && min > baseValue) {
                                            baseValue = min;
                                        }
                                        if (stacked) {
                                            baseValue = 0;
                                        }
                                        promises.push(dataItem.animate({ key: key + "Working", to: baseValue, duration: duration, easing: easing }).waitForStop());
                                    });
                                }
                                if (baseAxis === yAxis || !baseAxis) {
                                    min_1 = xAxis.getPrivate("min");
                                    baseValue_1 = xAxis.baseValue();
                                    if (isNumber(min_1) && min_1 > baseValue_1) {
                                        baseValue_1 = min_1;
                                    }
                                    if (stacked) {
                                        baseValue_1 = 0;
                                    }
                                    each$1(this._valueXFields, function (key) {
                                        promises.push(dataItem.animate({ key: key + "Working", to: baseValue_1, duration: duration, easing: easing }).waitForStop());
                                    });
                                }
                                return [4 /*yield*/, Promise.all(promises)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            }
        });
        Object.defineProperty(XYSeries.prototype, "_markDirtyStack", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._stackDirty = true;
                this.markDirty();
                this._markStakedDirtyStack();
            }
        });
        Object.defineProperty(XYSeries.prototype, "_markStakedDirtyStack", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var stackedSeries = this._stackedSeries;
                if (stackedSeries) {
                    each(stackedSeries, function (_key, value) {
                        if (!value._stackDirty) {
                            value._markDirtyStack();
                        }
                    });
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_afterChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._afterChanged.call(this);
                if (this._skipped) {
                    this._markDirtyAxes();
                    this._skipped = false;
                }
            }
        });
        /**
         * Shows a tooltip for specific data item.
         *
         * @param  dataItem  Data item
         */
        Object.defineProperty(XYSeries.prototype, "showDataItemTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                this.updateLegendMarker(dataItem);
                this.updateLegendValue(dataItem);
                if (this.get("tooltip")) {
                    if (!this.isHidden()) {
                        var tooltip = this.get("tooltip");
                        if (tooltip) {
                            tooltip._setDataItem(dataItem);
                            if (dataItem) {
                                var locationX = this.get("locationX", 0);
                                var locationY = this.get("locationY", 1);
                                var itemLocationX = dataItem.get("locationX", locationX);
                                var itemLocationY = dataItem.get("locationY", locationY);
                                var xAxis = this.get("xAxis");
                                var yAxis = this.get("yAxis");
                                var vcx = this.get("vcx", 1);
                                var vcy = this.get("vcy", 1);
                                var xPos = xAxis.getDataItemPositionX(dataItem, this._tooltipFieldX, this._aLocationX0 + (this._aLocationX1 - this._aLocationX0) * itemLocationX, vcx);
                                var yPos = yAxis.getDataItemPositionY(dataItem, this._tooltipFieldY, this._aLocationY0 + (this._aLocationY1 - this._aLocationY0) * itemLocationY, vcy);
                                var point = this.getPoint(xPos, yPos);
                                var show_1 = true;
                                each$1(this._valueFields, function (field) {
                                    if (dataItem.get(field) == null) {
                                        show_1 = false;
                                    }
                                });
                                if (show_1) {
                                    var chart = this.chart;
                                    if (chart && chart.inPlot(point)) {
                                        tooltip.label.text.markDirtyText();
                                        tooltip.set("tooltipTarget", this._getTooltipTarget(dataItem));
                                        tooltip.set("pointTo", this._display.toGlobal({ x: point.x, y: point.y }));
                                    }
                                    else {
                                        tooltip._setDataItem(undefined);
                                    }
                                }
                                else {
                                    tooltip._setDataItem(undefined);
                                }
                            }
                        }
                    }
                    else {
                        this.hideTooltip();
                    }
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_getTooltipTarget", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                if (this.get("seriesTooltipTarget") == "bullet") {
                    var bullets = dataItem.bullets;
                    if (bullets && bullets.length > 0) {
                        var bullet = bullets[0];
                        var sprite = bullet.get("sprite");
                        if (sprite) {
                            return sprite;
                        }
                    }
                }
                return this;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYSeries.prototype, "updateLegendValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var legendDataItem = this.get("legendDataItem");
                if (legendDataItem) {
                    var label = legendDataItem.get("label");
                    if (label) {
                        var txt = "";
                        if (dataItem) {
                            label._setDataItem(dataItem);
                            txt = this.get("legendLabelText", label.get("text", this.get("name", "")));
                        }
                        else {
                            label._setDataItem(this._emptyDataItem);
                            txt = this.get("legendRangeLabelText", this.get("legendLabelText", label.get("text", this.get("name", ""))));
                        }
                        label.set("text", txt);
                    }
                    var valueLabel = legendDataItem.get("valueLabel");
                    if (valueLabel) {
                        var txt = "";
                        if (dataItem) {
                            valueLabel._setDataItem(dataItem);
                            txt = this.get("legendValueText", valueLabel.get("text", ""));
                        }
                        else {
                            valueLabel._setDataItem(this._emptyDataItem);
                            txt = this.get("legendRangeValueText", valueLabel.get("text", ""));
                        }
                        valueLabel.set("text", txt);
                    }
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_getItemReaderLabel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var text = "X: {" + this._xField;
                if (this.get("xAxis").isType("DateAxis")) {
                    text += ".formatDate()";
                }
                text += "}; Y: {" + this._yField;
                if (this.get("yAxis").isType("DateAxis")) {
                    text += ".formatDate()";
                }
                text += "}";
                return text;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYSeries.prototype, "getPoint", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (positionX, positionY) {
                var x = this.get("xAxis").get("renderer").positionToCoordinate(positionX);
                var y = this.get("yAxis").get("renderer").positionToCoordinate(positionY);
                return { x: x, y: y };
            }
        });
        Object.defineProperty(XYSeries.prototype, "_shouldInclude", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_position) {
                return true;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYSeries.prototype, "handleCursorHide", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.hideTooltip();
                this.updateLegendValue(undefined);
                this.updateLegendMarker(undefined);
            }
        });
        Object.defineProperty(XYSeries.prototype, "_afterDataChange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._afterDataChange.call(this);
                this.resetExtremes();
            }
        });
        // todo description
        Object.defineProperty(XYSeries.prototype, "resetExtremes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setPrivate("selectionMinX", undefined);
                this.setPrivate("selectionMaxX", undefined);
                this.setPrivate("selectionMinY", undefined);
                this.setPrivate("selectionMaxY", undefined);
                this.setPrivate("minX", undefined);
                this.setPrivate("minY", undefined);
                this.setPrivate("maxX", undefined);
                this.setPrivate("maxY", undefined);
            }
        });
        /**
         * Creates and returns an axis range object.
         *
         * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info
         * @param   axisDataItem  Axis data item
         * @return                Axis range
         */
        Object.defineProperty(XYSeries.prototype, "createAxisRange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axisDataItem) {
                return this.axisRanges.push({
                    axisDataItem: axisDataItem
                });
            }
        });
        Object.defineProperty(XYSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "XYSeries"
        });
        Object.defineProperty(XYSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Series.classNames.concat([XYSeries.className])
        });
        return XYSeries;
    }(Series));

    /**
     * Base class for all "column-based" series
     */
    var BaseColumnSeries = /** @class */ (function (_super) {
        __extends(BaseColumnSeries, _super);
        function BaseColumnSeries() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_ph", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_pw", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            return _this;
        }
        Object.defineProperty(BaseColumnSeries.prototype, "_makeGraphics", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (listTemplate, dataItem) {
                return this.makeColumn(dataItem, listTemplate);
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_makeFieldNames", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._makeFieldNames.call(this);
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var categoryAxis = "CategoryAxis";
                var valueAxis = "ValueAxis";
                if (xAxis.isType(categoryAxis)) {
                    if (!this.get("openCategoryXField")) {
                        this._xOpenField = this._xField;
                    }
                }
                if (xAxis.isType(valueAxis)) {
                    if (!this.get("openValueXField")) {
                        this._xOpenField = this._xField;
                    }
                }
                if (yAxis.isType(categoryAxis)) {
                    if (!this.get("openCategoryYField")) {
                        this._yOpenField = this._yField;
                    }
                }
                if (yAxis.isType(valueAxis)) {
                    if (!this.get("openValueYField")) {
                        this._yOpenField = this._yField;
                    }
                }
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._prepareChildren.call(this);
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var len = this.dataItems.length;
                var startIndex = Math.max(0, this.startIndex() - 2);
                var endIndex = Math.min(this.endIndex() + 2, len - 1);
                if (xAxis.inited && yAxis.inited) {
                    for (var i = startIndex; i <= endIndex; i++) {
                        var dataItem = this.dataItems[i];
                        this._createGraphics(dataItem);
                    }
                }
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var chart = this.chart;
                if (chart) {
                    this._ph = chart.plotContainer.height();
                    this._pw = chart.plotContainer.width();
                }
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var baseAxis = this.get("baseAxis");
                var columnsTemplate = this.columns.template;
                if (this.isDirty("fill")) {
                    if (columnsTemplate.get("fill") == null) {
                        columnsTemplate.set("fill", this.get("fill"));
                    }
                }
                if (this.isDirty("stroke")) {
                    if (columnsTemplate.get("stroke") == null) {
                        columnsTemplate.set("stroke", this.get("stroke"));
                    }
                }
                var index = 0;
                var clusterCount = 0;
                var i = 0;
                each$1(baseAxis.series, function (series) {
                    if (series instanceof BaseColumnSeries) {
                        var stacked = series.get("stacked");
                        if (stacked && i == 0) {
                            clusterCount++;
                        }
                        if (!stacked && series.get("clustered")) {
                            clusterCount++;
                        }
                    }
                    if (series === _this) {
                        index = clusterCount - 1;
                    }
                    i++;
                });
                if (!this.get("clustered")) {
                    index = 0;
                    clusterCount = 1;
                }
                if (clusterCount === 0) {
                    clusterCount = 1;
                    index = 0;
                }
                var xRenderer = xAxis.get("renderer");
                var yRenderer = yAxis.get("renderer");
                var cellStartLocation = "cellStartLocation";
                var cellEndLocation = "cellEndLocation";
                var cellLocationX0 = xRenderer.get(cellStartLocation, 0);
                var cellLocationX1 = xRenderer.get(cellEndLocation, 1);
                var cellLocationY0 = yRenderer.get(cellStartLocation, 0);
                var cellLocationY1 = yRenderer.get(cellEndLocation, 1);
                this._aLocationX0 = cellLocationX0 + (index / clusterCount) * (cellLocationX1 - cellLocationX0);
                this._aLocationX1 = cellLocationX0 + (index + 1) / clusterCount * (cellLocationX1 - cellLocationX0);
                this._aLocationY0 = cellLocationY0 + (index / clusterCount) * (cellLocationY1 - cellLocationY0);
                this._aLocationY1 = cellLocationY0 + (index + 1) / clusterCount * (cellLocationY1 - cellLocationY0);
                if (xAxis.inited && yAxis.inited) {
                    if (this._axesDirty || this._valuesDirty || this._stackDirty || this.isDirty("vcx") || this.isDirty("vcy") || this._sizeDirty) {
                        var len = this.dataItems.length;
                        var startIndex = Math.max(0, this.startIndex() - 2);
                        var endIndex = Math.min(this.endIndex() + 2, len - 1);
                        for (var i_1 = 0; i_1 < startIndex; i_1++) {
                            this._toggleColumn(this.dataItems[i_1], false);
                        }
                        var previous = this.dataItems[startIndex];
                        for (var i_2 = startIndex; i_2 <= endIndex; i_2++) {
                            var dataItem = this.dataItems[i_2];
                            if (dataItem.get("valueX") != null && dataItem.get("valueY") != null) {
                                previous = dataItem;
                                if (i_2 > 0 && startIndex > 0) {
                                    for (var j = i_2 - 1; j >= 0; j--) {
                                        var dataItem_1 = this.dataItems[j];
                                        if (dataItem_1.get("valueX") != null && dataItem_1.get("valueY") != null) {
                                            previous = dataItem_1;
                                            break;
                                        }
                                    }
                                }
                                break;
                            }
                        }
                        for (var i_3 = startIndex; i_3 <= endIndex; i_3++) {
                            var dataItem = this.dataItems[i_3];
                            this._updateGraphics(dataItem, previous);
                            if (dataItem.get("valueX") != null && dataItem.get("valueY") != null) {
                                previous = dataItem;
                            }
                        }
                        for (var i_4 = endIndex + 1; i_4 < len; i_4++) {
                            this._toggleColumn(this.dataItems[i_4], false);
                        }
                    }
                }
                else {
                    this._skipped = true;
                }
                this.updateLegendMarker();
                _super.prototype._updateChildren.call(this);
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_createGraphics", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var _this = this;
                var graphics = dataItem.get("graphics");
                if (!graphics) {
                    graphics = this._makeGraphics(this.columns, dataItem);
                    dataItem.set("graphics", graphics);
                    graphics._setDataItem(dataItem);
                    var legendDataItem = dataItem.get("legendDataItem");
                    if (legendDataItem) {
                        var markerRectangle = legendDataItem.get("markerRectangle");
                        if (markerRectangle) {
                            markerRectangle.setAll({ fill: graphics.get("fill"), stroke: graphics.get("stroke") });
                        }
                    }
                    this.axisRanges.each(function (axisRange) {
                        var container = axisRange.container;
                        var graphicsArray = dataItem.get("rangeGraphics", []);
                        dataItem.set("rangeGraphics", graphicsArray);
                        var rangeGraphics = _this._makeGraphics(axisRange.columns, dataItem);
                        graphicsArray.push(rangeGraphics);
                        rangeGraphics.setPrivate("list", axisRange.columns);
                        container.children.push(rangeGraphics);
                    });
                }
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_updateGraphics", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, previousDataItem) {
                var _this = this;
                var graphics = dataItem.get("graphics");
                //if (!graphics) {
                //	this._createGraphics(dataItem);
                //	graphics = dataItem.get("graphics")!;
                //}
                var xField = this._xField;
                var yField = this._yField;
                var valueX = dataItem.get(xField);
                var valueY = dataItem.get(yField);
                if (valueX != null && valueY != null) {
                    var xOpenField = this._xOpenField;
                    var yOpenField = this._yOpenField;
                    var locationX = this.get("locationX", dataItem.get("locationX", 0.5));
                    var locationY = this.get("locationY", dataItem.get("locationY", 0.5));
                    var openLocationX = this.get("openLocationX", dataItem.get("openLocationX", locationX));
                    var openLocationY = this.get("openLocationY", dataItem.get("openLocationY", locationY));
                    var width = graphics.get("width");
                    var height = graphics.get("height");
                    var stacked = this.get("stacked");
                    var xAxis = this.get("xAxis");
                    var yAxis = this.get("yAxis");
                    var baseAxis = this.get("baseAxis");
                    var xStart = xAxis.get("start");
                    var xEnd = xAxis.get("end");
                    var yStart = yAxis.get("start");
                    var yEnd = yAxis.get("end");
                    var l_1;
                    var r_1;
                    var t_1;
                    var b_1;
                    var vcy = this.get("vcy", 1);
                    var vcx = this.get("vcx", 1);
                    var fitW_1 = false;
                    var fitH_1 = false;
                    if (yAxis.isType("CategoryAxis") && xAxis.isType("CategoryAxis")) {
                        var startLocation = this._aLocationX0 + openLocationX - 0.5;
                        var endLocation = this._aLocationX1 + locationX - 0.5;
                        if (width instanceof Percent) {
                            var offset = (endLocation - startLocation) * (1 - width.value) / 2;
                            startLocation += offset;
                            endLocation -= offset;
                        }
                        l_1 = xAxis.getDataItemPositionX(dataItem, xOpenField, startLocation, vcx);
                        r_1 = xAxis.getDataItemPositionX(dataItem, xField, endLocation, vcx);
                        startLocation = this._aLocationY0 + openLocationY - 0.5;
                        endLocation = this._aLocationY1 + locationY - 0.5;
                        if (height instanceof Percent) {
                            var offset = (endLocation - startLocation) * (1 - height.value) / 2;
                            startLocation += offset;
                            endLocation -= offset;
                        }
                        t_1 = yAxis.getDataItemPositionY(dataItem, yOpenField, startLocation, vcy);
                        b_1 = yAxis.getDataItemPositionY(dataItem, yField, endLocation, vcy);
                        dataItem.setRaw("point", { x: l_1 + (r_1 - l_1) / 2, y: t_1 + (b_1 - t_1) / 2 });
                    }
                    else if (xAxis === baseAxis) {
                        var startLocation = this._aLocationX0 + openLocationX - 0.5;
                        var endLocation = this._aLocationX1 + locationX - 0.5;
                        if (width instanceof Percent) {
                            var offset = (endLocation - startLocation) * (1 - width.value) / 2;
                            startLocation += offset;
                            endLocation -= offset;
                        }
                        l_1 = xAxis.getDataItemPositionX(dataItem, xOpenField, startLocation, vcx);
                        r_1 = xAxis.getDataItemPositionX(dataItem, xField, endLocation, vcx);
                        t_1 = yAxis.getDataItemPositionY(dataItem, yField, locationY, vcy);
                        if (this._yOpenField !== this._yField) {
                            b_1 = yAxis.getDataItemPositionY(dataItem, yOpenField, openLocationY, vcy);
                        }
                        else {
                            if (stacked) {
                                var stackToItemY = dataItem.get("stackToItemY");
                                if (stackToItemY) {
                                    b_1 = yAxis.getDataItemPositionY(stackToItemY, yField, openLocationY, stackToItemY.component.get("vcy"));
                                }
                                else {
                                    b_1 = yAxis.basePosition();
                                }
                            }
                            else {
                                b_1 = yAxis.basePosition();
                            }
                        }
                        dataItem.setRaw("point", { x: l_1 + (r_1 - l_1) / 2, y: t_1 });
                        fitH_1 = true;
                    }
                    else if (yAxis === baseAxis) {
                        var startLocation = this._aLocationY0 + openLocationY - 0.5;
                        var endLocation = this._aLocationY1 + locationY - 0.5;
                        if (height instanceof Percent) {
                            var offset = (endLocation - startLocation) * (1 - height.value) / 2;
                            startLocation += offset;
                            endLocation -= offset;
                        }
                        t_1 = yAxis.getDataItemPositionY(dataItem, yOpenField, startLocation, vcy);
                        b_1 = yAxis.getDataItemPositionY(dataItem, yField, endLocation, vcy);
                        r_1 = xAxis.getDataItemPositionX(dataItem, xField, locationX, vcx);
                        if (this._xOpenField !== this._xField) {
                            l_1 = xAxis.getDataItemPositionX(dataItem, xOpenField, openLocationX, vcx);
                        }
                        else {
                            if (stacked) {
                                var stackToItemX = dataItem.get("stackToItemX");
                                if (stackToItemX) {
                                    l_1 = xAxis.getDataItemPositionX(stackToItemX, xField, openLocationX, stackToItemX.component.get("vcx"));
                                }
                                else {
                                    l_1 = xAxis.basePosition();
                                }
                            }
                            else {
                                l_1 = xAxis.basePosition();
                            }
                        }
                        fitW_1 = true;
                        dataItem.setRaw("point", { x: r_1, y: t_1 + (b_1 - t_1) / 2 });
                    }
                    this._updateSeriesGraphics(dataItem, graphics, l_1, r_1, t_1, b_1, fitW_1, fitH_1);
                    if ((l_1 < xStart && r_1 < xStart) || (l_1 > xEnd && r_1 > xEnd) || (t_1 < yStart && b_1 < yStart) || (t_1 > yEnd && b_1 > yEnd)) {
                        this._toggleColumn(dataItem, false);
                    }
                    else {
                        this._toggleColumn(dataItem, true);
                    }
                    var rangeGraphics = dataItem.get("rangeGraphics");
                    if (rangeGraphics) {
                        each$1(rangeGraphics, function (graphics) {
                            _this._updateSeriesGraphics(dataItem, graphics, l_1, r_1, t_1, b_1, fitW_1, fitH_1);
                        });
                    }
                    this._applyGraphicsStates(dataItem, previousDataItem);
                }
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_updateSeriesGraphics", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, graphics, l, r, t, b, fitW, fitH) {
                var width = graphics.get("width");
                var height = graphics.get("height");
                var maxWidth = graphics.get("maxWidth");
                var maxHeight = graphics.get("maxHeight");
                var ptl = this.getPoint(l, t);
                var pbr = this.getPoint(r, b);
                var tooltipPoint = dataItem.get("point");
                if (tooltipPoint) {
                    var point = this.getPoint(tooltipPoint.x, tooltipPoint.y);
                    tooltipPoint.x = point.x + this._x;
                    tooltipPoint.y = point.y + this._y;
                }
                l = ptl.x;
                r = pbr.x;
                t = ptl.y;
                b = pbr.y;
                if (isNumber(width)) {
                    var offset = ((r - l) - width) / 2;
                    l += offset;
                    r -= offset;
                }
                if (isNumber(maxWidth) && maxWidth < Math.abs(r - l)) {
                    var offset = ((r - l) - maxWidth) / 2;
                    l += offset;
                    r -= offset;
                }
                if (isNumber(height)) {
                    var offset = ((b - t) - height) / 2;
                    t += offset;
                    b -= offset;
                }
                if (isNumber(maxHeight) && maxHeight < Math.abs(b - t)) {
                    var offset = ((b - t) - maxHeight) / 2;
                    t += offset;
                    b -= offset;
                }
                if (this.get("adjustBulletPosition")) {
                    if (fitW) {
                        r = Math.min(Math.max(0, r), this._pw);
                        l = Math.min(Math.max(0, l), this._pw);
                    }
                    if (fitH) {
                        t = Math.min(Math.max(0, t), this._ph);
                        b = Math.min(Math.max(0, b), this._ph);
                    }
                }
                dataItem.setRaw("left", l);
                dataItem.setRaw("right", r);
                dataItem.setRaw("top", t);
                dataItem.setRaw("bottom", b);
                graphics.setPrivate("width", r - l);
                graphics.setPrivate("height", b - t);
                graphics.set("x", l);
                graphics.set("y", b - (b - t));
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_handleDataSetChange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._handleDataSetChange.call(this);
                each$1(this._dataItems, function (dataItem) {
                    _this._toggleColumn(dataItem, false);
                });
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_applyGraphicsStates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, previousDataItem) {
                var graphics = dataItem.get("graphics");
                var dropFromOpen = graphics.states.lookup("dropFromOpen");
                var riseFromOpen = graphics.states.lookup("riseFromOpen");
                var dropFromPrevious = graphics.states.lookup("dropFromPrevious");
                var riseFromPrevious = graphics.states.lookup("riseFromPrevious");
                if (dropFromOpen || dropFromPrevious || riseFromOpen || riseFromPrevious) {
                    var xAxis = this.get("xAxis");
                    var yAxis = this.get("yAxis");
                    var baseAxis = this.get("baseAxis");
                    var open_1;
                    var close_1;
                    var previousClose = void 0;
                    if (baseAxis === xAxis && yAxis.isType("ValueAxis")) {
                        open_1 = dataItem.get(this._yOpenField);
                        close_1 = dataItem.get(this._yField);
                        previousClose = previousDataItem.get(this._yField);
                    }
                    else if (baseAxis === yAxis && xAxis.isType("ValueAxis")) {
                        open_1 = dataItem.get(this._xOpenField);
                        close_1 = dataItem.get(this._xField);
                        previousClose = previousDataItem.get(this._xField);
                    }
                    if (isNumber(open_1) && isNumber(close_1)) {
                        if (close_1 < open_1) {
                            if (dropFromOpen) {
                                dropFromOpen.apply();
                            }
                        }
                        else {
                            if (riseFromOpen) {
                                riseFromOpen.apply();
                            }
                        }
                        if (isNumber(previousClose)) {
                            if (close_1 < previousClose) {
                                if (dropFromPrevious) {
                                    dropFromPrevious.apply();
                                }
                            }
                            else {
                                if (riseFromPrevious) {
                                    riseFromPrevious.apply();
                                }
                            }
                        }
                    }
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(BaseColumnSeries.prototype, "disposeDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                _super.prototype.disposeDataItem.call(this, dataItem);
                var graphics = dataItem.get("graphics");
                if (graphics) {
                    this.columns.removeValue(graphics);
                    graphics.dispose();
                }
                var rangeGraphics = dataItem.get("rangeGraphics");
                if (rangeGraphics) {
                    each$1(rangeGraphics, function (graphics) {
                        var list = graphics.getPrivate("list");
                        if (list) {
                            list.removeValue(graphics);
                        }
                        graphics.dispose();
                    });
                }
            }
        });
        /**
         * Hides series's data item.
         *
         * @param   dataItem  Data item
         * @param   duration  Animation duration in milliseconds
         * @return            Promise
         */
        Object.defineProperty(BaseColumnSeries.prototype, "hideDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var promises, graphics, rangeGraphics;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                promises = [_super.prototype.hideDataItem.call(this, dataItem, duration)];
                                graphics = dataItem.get("graphics");
                                if (graphics) {
                                    promises.push(graphics.hide(duration));
                                }
                                rangeGraphics = dataItem.get("rangeGraphics");
                                if (rangeGraphics) {
                                    each$1(rangeGraphics, function (graphics) {
                                        promises.push(graphics.hide(duration));
                                    });
                                }
                                return [4 /*yield*/, Promise.all(promises)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_toggleColumn", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, visible) {
                var graphics = dataItem.get("graphics");
                if (graphics) {
                    graphics.setPrivate("visible", visible);
                }
                var rangeGraphics = dataItem.get("rangeGraphics");
                if (rangeGraphics) {
                    each$1(rangeGraphics, function (graphics) {
                        graphics.setPrivate("visible", visible);
                    });
                }
                var bullets = dataItem.bullets;
                if (bullets) {
                    each$1(bullets, function (bullet) {
                        bullet.setPrivate("hidden", !visible);
                    });
                }
            }
        });
        /**
         * Shows series's data item.
         *
         * @param   dataItem  Data item
         * @param   duration  Animation duration in milliseconds
         * @return            Promise
         */
        Object.defineProperty(BaseColumnSeries.prototype, "showDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var promises, graphics, rangeGraphics;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                promises = [_super.prototype.showDataItem.call(this, dataItem, duration)];
                                graphics = dataItem.get("graphics");
                                if (graphics) {
                                    promises.push(graphics.show(duration));
                                }
                                rangeGraphics = dataItem.get("rangeGraphics");
                                if (rangeGraphics) {
                                    each$1(rangeGraphics, function (graphics) {
                                        promises.push(graphics.show(duration));
                                    });
                                }
                                return [4 /*yield*/, Promise.all(promises)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(BaseColumnSeries.prototype, "updateLegendMarker", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var _this = this;
                var legendDataItem = this.get("legendDataItem");
                if (this.get("useLastColorForLegendMarker")) {
                    if (!dataItem) {
                        var lastDataItem = this.dataItems[this.endIndex() - 1];
                        if (lastDataItem) {
                            dataItem = lastDataItem;
                        }
                    }
                }
                if (legendDataItem) {
                    var graphics_1 = this.columns.template;
                    if (dataItem) {
                        var column = dataItem.get("graphics");
                        if (column) {
                            graphics_1 = column;
                        }
                    }
                    var markerRectangle_1 = legendDataItem.get("markerRectangle");
                    if (markerRectangle_1) {
                        if (!legendDataItem.get("itemContainer").get("disabled")) {
                            each$1(visualSettings, function (setting) {
                                markerRectangle_1.set(setting, graphics_1.get(setting, _this.get(setting)));
                            });
                        }
                    }
                }
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_getTooltipTarget", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                if (this.get("seriesTooltipTarget") == "bullet") {
                    return _super.prototype._getTooltipTarget.call(this, dataItem);
                }
                var column = dataItem.get("graphics");
                if (column) {
                    return column;
                }
                return this;
            }
        });
        Object.defineProperty(BaseColumnSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "BaseColumnSeries"
        });
        Object.defineProperty(BaseColumnSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: XYSeries.classNames.concat([BaseColumnSeries.className])
        });
        return BaseColumnSeries;
    }(XYSeries));

    /**
     * A base class for all axes.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Adding_axes} for more info
     */
    var Axis = /** @class */ (function (_super) {
        __extends(Axis, _super);
        function Axis() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_series", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "_isPanning", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            /**
             * A [[Container]] that holds all the axis label elements.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "labelsContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Container.new(_this._root, {}))
            });
            /**
             * A [[Container]] that holds all the axis grid and fill elements.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "gridContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: Container.new(_this._root, { width: p100, height: p100 })
            });
            /**
             * A [[Container]] that holds axis grid elements which goes above the series.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "topGridContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: Container.new(_this._root, { width: p100, height: p100 })
            });
            /**
             * A [[Container]] that holds all the axis bullet elements.
             *
             * @default new Container
             */
            Object.defineProperty(_this, "bulletsContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Container.new(_this._root, { isMeasured: false, width: p100, height: p100, position: "absolute" }))
            });
            /**
             * A referenece to the the chart the axis belongs to.
             */
            Object.defineProperty(_this, "chart", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_rangesDirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_panStart", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_panEnd", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_sAnimation", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_eAnimation", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_skipSync", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            /**
             * A list of axis ranges.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info
             * @default new List()
             */
            Object.defineProperty(_this, "axisRanges", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new List()
            });
            Object.defineProperty(_this, "_seriesAxisRanges", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            /**
             * A control label that is invisible but is used to keep width the width of
             * the axis constant.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Ghost_label} for more info
             */
            Object.defineProperty(_this, "ghostLabel", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_cursorPosition", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: -1
            });
            Object.defineProperty(_this, "_snapToSeries", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_seriesValuesDirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            /**
             * A container above the axis that can be used to add additional stuff into
             * it. For example a legend, label, or an icon.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/} for more info
             * @default new Container
             */
            Object.defineProperty(_this, "axisHeader", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Container.new(_this._root, {
                    themeTags: ["axis", "header"],
                    position: "absolute",
                    background: Rectangle.new(_this._root, {
                        themeTags: ["header", "background"],
                        fill: _this._root.interfaceColors.get("background")
                    })
                }))
            });
            return _this;
        }
        Object.defineProperty(Axis.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                // these could be in other parents, so disposing just in case
                this.gridContainer.dispose();
                this.topGridContainer.dispose();
                this.bulletsContainer.dispose();
                this.labelsContainer.dispose();
                this.axisHeader.dispose();
                _super.prototype._dispose.call(this);
            }
        });
        Object.defineProperty(Axis.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._afterNew.call(this);
                this.setPrivate("updateScrollbar", true);
                this._disposers.push(this.axisRanges.events.onAll(function (change) {
                    if (change.type === "clear") {
                        each$1(change.oldValues, function (dataItem) {
                            _this.disposeDataItem(dataItem);
                        });
                    }
                    else if (change.type === "push") {
                        _this._processAxisRange(change.newValue, ["range"]);
                    }
                    else if (change.type === "setIndex") {
                        _this._processAxisRange(change.newValue, ["range"]);
                    }
                    else if (change.type === "insertIndex") {
                        _this._processAxisRange(change.newValue, ["range"]);
                    }
                    else if (change.type === "removeIndex") {
                        _this.disposeDataItem(change.oldValue);
                    }
                    else if (change.type === "moveIndex") {
                        _this._processAxisRange(change.value, ["range"]);
                    }
                    else {
                        throw new Error("Unknown IStreamEvent type");
                    }
                }));
                var renderer = this.get("renderer");
                if (renderer) {
                    renderer.axis = this;
                    renderer.processAxis();
                }
                this.children.push(renderer);
                this.ghostLabel = renderer.makeLabel(new DataItem(this, undefined, {}), []);
                this.ghostLabel.set("opacity", 0);
            }
        });
        /**
         * Zooms the axis to relative locations.
         *
         * Both `start` and `end` are relative: 0 means start of the axis, 1 - end.
         *
         * @param   start     Relative start
         * @param   end       Relative end
         * @param   duration  Duration of the zoom animation in milliseconds
         * @return            Zoom animation
         */
        Object.defineProperty(Axis.prototype, "zoom", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (start, end, duration, priority) {
                var _a;
                var _this = this;
                if (this.get("start") !== start || this.get("end") != end) {
                    var sAnimation = this._sAnimation;
                    var eAnimation = this._eAnimation;
                    var maxDeviation = this.get("maxDeviation", 0.5) * Math.min(1, (end - start));
                    if (start < -maxDeviation) {
                        start = -maxDeviation;
                    }
                    if (end > 1 + maxDeviation) {
                        end = 1 + maxDeviation;
                    }
                    if (start > end) {
                        _a = __read([end, start], 2), start = _a[0], end = _a[1];
                    }
                    if (!isNumber(duration)) {
                        duration = this.get("interpolationDuration", 0);
                    }
                    if (!priority) {
                        priority = "end";
                    }
                    var maxZoomFactor = this.getPrivate("maxZoomFactor", this.get("maxZoomFactor", 100));
                    var maxZoomFactorReal = maxZoomFactor;
                    if (end === 1 && start !== 0) {
                        if (start < this.get("start")) {
                            priority = "start";
                        }
                        else {
                            priority = "end";
                        }
                    }
                    if (start === 0 && end !== 1) {
                        if (end > this.get("end")) {
                            priority = "end";
                        }
                        else {
                            priority = "start";
                        }
                    }
                    var minZoomCount = this.get("minZoomCount");
                    var maxZoomCount = this.get("maxZoomCount");
                    if (isNumber(minZoomCount)) {
                        maxZoomFactor = maxZoomFactorReal / minZoomCount;
                    }
                    var minZoomFactor = 1;
                    if (isNumber(maxZoomCount)) {
                        minZoomFactor = maxZoomFactorReal / maxZoomCount;
                    }
                    // most likely we are dragging left scrollbar grip here, so we tend to modify end
                    if (priority === "start") {
                        if (maxZoomCount > 0) {
                            // add to the end
                            if (1 / (end - start) < minZoomFactor) {
                                end = start + 1 / minZoomFactor;
                            }
                        }
                        // add to the end
                        if (1 / (end - start) > maxZoomFactor) {
                            end = start + 1 / maxZoomFactor;
                        }
                        //unless end is > 0
                        if (end > 1 && end - start < 1 / maxZoomFactor) {
                            //end = 1;
                            start = end - 1 / maxZoomFactor;
                        }
                    }
                    // most likely we are dragging right, so we modify left
                    else {
                        if (maxZoomCount > 0) {
                            // add to the end
                            if (1 / (end - start) < minZoomFactor) {
                                start = end - 1 / minZoomFactor;
                            }
                        }
                        // remove from start
                        if (1 / (end - start) > maxZoomFactor) {
                            start = end - 1 / maxZoomFactor;
                        }
                        if (start < 0 && end - start < 1 / maxZoomFactor) {
                            //start = 0;
                            end = start + 1 / maxZoomFactor;
                        }
                    }
                    if (1 / (end - start) > maxZoomFactor) {
                        end = start + 1 / maxZoomFactor;
                    }
                    if (1 / (end - start) > maxZoomFactor) {
                        start = end - 1 / maxZoomFactor;
                    }
                    if (maxZoomCount != null && minZoomCount != null && (start == this.get("start") && end == this.get("end"))) {
                        var chart = this.chart;
                        if (chart) {
                            chart._handleAxisSelection(this, true);
                        }
                    }
                    if (((sAnimation && sAnimation.playing && sAnimation.to == start) || this.get("start") == start) && ((eAnimation && eAnimation.playing && eAnimation.to == end) || this.get("end") == end)) {
                        return;
                    }
                    if (duration > 0) {
                        var easing = this.get("interpolationEasing");
                        var sAnimation_1, eAnimation_1;
                        if (this.get("start") != start) {
                            sAnimation_1 = this.animate({ key: "start", to: start, duration: duration, easing: easing });
                        }
                        if (this.get("end") != end) {
                            eAnimation_1 = this.animate({ key: "end", to: end, duration: duration, easing: easing });
                        }
                        this._sAnimation = sAnimation_1;
                        this._eAnimation = eAnimation_1;
                        if (sAnimation_1) {
                            return sAnimation_1;
                        }
                        else if (eAnimation_1) {
                            return eAnimation_1;
                        }
                    }
                    else {
                        this.set("start", start);
                        this.set("end", end);
                        // otherwise bullets and line out of sync, as series is not redrawn
                        this._root.events.once("frameended", function () {
                            _this._markDirtyKey("start");
                            _this._root._markDirty();
                        });
                    }
                }
                else {
                    if (this._sAnimation) {
                        this._sAnimation.stop();
                    }
                    if (this._eAnimation) {
                        this._eAnimation.stop();
                    }
                }
            }
        });
        Object.defineProperty(Axis.prototype, "series", {
            /**
             * A list of series using this axis.
             *
             * @return Series
             */
            get: function () {
                return this._series;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Axis.prototype, "_processAxisRange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, themeTags) {
                dataItem.setRaw("isRange", true);
                this._createAssets(dataItem, themeTags);
                this._rangesDirty = true;
                this._prepareDataItem(dataItem);
                var above = dataItem.get("above");
                var container = this.topGridContainer;
                var grid = dataItem.get("grid");
                if (above && grid) {
                    container.children.moveValue(grid);
                }
                var fill = dataItem.get("axisFill");
                if (above && fill) {
                    container.children.moveValue(fill);
                }
            }
        });
        Object.defineProperty(Axis.prototype, "_prepareDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem, _index) { }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "markDirtyExtremes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "markDirtySelectionExtremes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        Object.defineProperty(Axis.prototype, "_calculateTotals", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        Object.defineProperty(Axis.prototype, "_updateAxisRanges", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this.axisRanges.each(function (axisRange) {
                    _this._prepareDataItem(axisRange);
                });
                each$1(this._seriesAxisRanges, function (axisRange) {
                    _this._prepareDataItem(axisRange);
                });
            }
        });
        Object.defineProperty(Axis.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._prepareChildren.call(this);
                if (this.get("fixAxisSize")) {
                    this.ghostLabel.set("visible", true);
                }
                else {
                    this.ghostLabel.set("visible", false);
                }
                if (this.isDirty("start") || this.isDirty("end")) {
                    this.chart._updateCursor();
                    var start = this.get("start", 0);
                    var end = this.get("end", 1);
                    var maxDeviation = this.get("maxDeviation", 0.5) * Math.min(1, (end - start));
                    if (start < -maxDeviation) {
                        var delta = start + maxDeviation;
                        start = -maxDeviation;
                        this.setRaw("start", start);
                        if (this.isDirty("end")) {
                            this.setRaw("end", end - delta);
                        }
                    }
                    if (end > 1 + maxDeviation) {
                        var delta = end - 1 - maxDeviation;
                        end = 1 + maxDeviation;
                        this.setRaw("end", end);
                        if (this.isDirty("start")) {
                            this.setRaw("start", start - delta);
                        }
                    }
                }
                var renderer = this.get("renderer");
                renderer._start = this.get("start");
                renderer._end = this.get("end");
                renderer._inversed = renderer.get("inversed", false);
                renderer._axisLength = renderer.axisLength() / (renderer._end - renderer._start);
                renderer._updateLC();
                if (this.isDirty("tooltip")) {
                    var tooltip = this.get("tooltip");
                    if (tooltip) {
                        var rendererTags = renderer.get("themeTags");
                        tooltip.addTag("axis");
                        tooltip.addTag(this.className.toLowerCase());
                        tooltip._applyThemes();
                        if (rendererTags) {
                            tooltip.set("themeTags", mergeTags(tooltip.get("themeTags"), rendererTags));
                            tooltip.label._applyThemes();
                        }
                    }
                }
            }
        });
        Object.defineProperty(Axis.prototype, "_updateTooltipBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var tooltip = this.get("tooltip");
                if (tooltip) {
                    this.get("renderer").updateTooltipBounds(tooltip);
                }
            }
        });
        Object.defineProperty(Axis.prototype, "_updateBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._updateBounds.call(this);
                this._updateTooltipBounds();
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "processChart", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (chart) {
                var _this = this;
                this.chart = chart;
                var renderer = this.get("renderer");
                renderer.chart = chart;
                chart.gridContainer.children.push(this.gridContainer);
                chart.topGridContainer.children.push(this.topGridContainer);
                chart.axisHeadersContainer.children.push(this.axisHeader);
                this.on("start", function () {
                    chart._handleAxisSelection(_this);
                });
                this.on("end", function () {
                    chart._handleAxisSelection(_this);
                });
                chart.plotContainer.onPrivate("width", function () {
                    _this.markDirtySize();
                });
                chart.plotContainer.onPrivate("height", function () {
                    _this.markDirtySize();
                });
                chart.processAxis(this);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "hideDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                this._toggleDataItem(dataItem, false);
                return _super.prototype.hideDataItem.call(this, dataItem);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "showDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                this._toggleDataItem(dataItem, true);
                return _super.prototype.showDataItem.call(this, dataItem);
            }
        });
        Object.defineProperty(Axis.prototype, "_toggleDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, visible) {
                var label = dataItem.get("label");
                if (label) {
                    label.setPrivate("visible", visible);
                }
                var grid = dataItem.get("grid");
                if (grid) {
                    grid.setPrivate("visible", visible);
                }
                var tick = dataItem.get("tick");
                if (tick) {
                    tick.setPrivate("visible", visible);
                }
                var axisFill = dataItem.get("axisFill");
                if (axisFill) {
                    axisFill.setPrivate("visible", visible);
                }
                var bullet = dataItem.get("bullet");
                if (bullet) {
                    var sprite = bullet.get("sprite");
                    if (sprite) {
                        sprite.setPrivate("visible", visible);
                    }
                }
            }
        });
        Object.defineProperty(Axis.prototype, "_createAssets", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, tags) {
                var renderer = this.get("renderer");
                if (!dataItem.get("label")) {
                    renderer.makeLabel(dataItem, tags);
                }
                if (!dataItem.get("grid")) {
                    renderer.makeGrid(dataItem, tags);
                }
                if (!dataItem.get("tick")) {
                    renderer.makeTick(dataItem, tags);
                }
                if (!dataItem.get("axisFill")) {
                    renderer.makeAxisFill(dataItem, tags);
                }
                this._processBullet(dataItem);
            }
        });
        Object.defineProperty(Axis.prototype, "_processBullet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var bullet = dataItem.get("bullet");
                var axisBullet = this.get("bullet");
                if (!bullet && axisBullet && !dataItem.get("isRange")) {
                    bullet = axisBullet(this._root, this, dataItem);
                }
                if (bullet) {
                    bullet.axis = this;
                    var sprite = bullet.get("sprite");
                    if (sprite) {
                        sprite._setDataItem(dataItem);
                        dataItem.setRaw("bullet", bullet);
                        if (!sprite.parent) {
                            this.bulletsContainer.children.push(sprite);
                        }
                    }
                }
            }
        });
        Object.defineProperty(Axis.prototype, "_afterChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._afterChanged.call(this);
                var chart = this.chart;
                if (chart) {
                    chart._updateChartLayout();
                    chart.axisHeadersContainer.markDirtySize();
                }
                this.get("renderer")._updatePositions();
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "disposeDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                _super.prototype.disposeDataItem.call(this, dataItem);
                var renderer = this.get("renderer");
                var label = dataItem.get("label");
                if (label) {
                    renderer.labels.removeValue(label);
                    label.dispose();
                }
                var tick = dataItem.get("tick");
                if (tick) {
                    renderer.ticks.removeValue(tick);
                    tick.dispose();
                }
                var grid = dataItem.get("grid");
                if (grid) {
                    renderer.grid.removeValue(grid);
                    grid.dispose();
                }
                var axisFill = dataItem.get("axisFill");
                if (axisFill) {
                    renderer.axisFills.removeValue(axisFill);
                    axisFill.dispose();
                }
                var bullet = dataItem.get("bullet");
                if (bullet) {
                    bullet.dispose();
                }
            }
        });
        Object.defineProperty(Axis.prototype, "_updateGhost", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var ghostLabel = this.ghostLabel;
                if (!ghostLabel.isHidden()) {
                    var bounds = ghostLabel.localBounds();
                    var gWidth_1 = bounds.right - bounds.left;
                    each$1(this.dataItems, function (dataItem) {
                        var label = dataItem.get("label");
                        if (label && !label.isHidden()) {
                            var bounds_1 = label.localBounds();
                            var w = bounds_1.right - bounds_1.left;
                            if (w > gWidth_1) {
                                ghostLabel.set("text", label.text._getText());
                            }
                        }
                    });
                }
                var start = this.get("start", 0);
                var end = this.get("end", 1);
                this.get("renderer").updateLabel(ghostLabel, start + (end - start) * 0.5);
            }
        });
        Object.defineProperty(Axis.prototype, "_handleCursorPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position, snapToSeries) {
                var renderer = this.get("renderer");
                position = renderer.toAxisPosition(position);
                this._cursorPosition = position;
                this._snapToSeries = snapToSeries;
                this.updateTooltip();
            }
        });
        /**
         * Can be called when axis zoom changes and you need to update tooltip
         * position.
         */
        Object.defineProperty(Axis.prototype, "updateTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var snapToSeries = this._snapToSeries;
                var position = this._cursorPosition;
                var tooltip = this.get("tooltip");
                var renderer = this.get("renderer");
                if (isNumber(position)) {
                    each$1(this.series, function (series) {
                        if (series.get("baseAxis") === _this) {
                            var dataItem = _this.getSeriesItem(series, position);
                            series.setRaw("tooltipDataItem", dataItem);
                            if (snapToSeries && snapToSeries.indexOf(series) != -1) {
                                series.updateLegendMarker(dataItem);
                                series.updateLegendValue(dataItem);
                            }
                            else {
                                series.showDataItemTooltip(dataItem);
                            }
                        }
                    });
                    if (tooltip) {
                        renderer.updateTooltipBounds(tooltip);
                        if (this.get("snapTooltip")) {
                            position = this.roundAxisPosition(position, this.get("tooltipLocation", 0.5));
                        }
                        if (!isNaN$1(position)) {
                            this.setPrivateRaw("tooltipPosition", position);
                            this._updateTooltipText(tooltip, position);
                            renderer.positionTooltip(tooltip, position);
                            if (position < this.get("start") || position > this.get("end")) {
                                tooltip.hide(0);
                            }
                            else {
                                tooltip.show(0);
                            }
                        }
                        else {
                            tooltip.hide(0);
                        }
                    }
                }
            }
        });
        Object.defineProperty(Axis.prototype, "_updateTooltipText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip, position) {
                tooltip.label.set("text", this.getTooltipText(position));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "roundAxisPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position, _location) {
                return position;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "handleCursorShow", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var tooltip = this.get("tooltip");
                if (tooltip) {
                    tooltip.show();
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "handleCursorHide", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var tooltip = this.get("tooltip");
                if (tooltip) {
                    tooltip.hide();
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "processSeriesDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem, _fields) {
            }
        });
        Object.defineProperty(Axis.prototype, "_clearDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._clearDirty.call(this);
                this._sizeDirty = false;
                this._rangesDirty = false;
            }
        });
        /**
         * Converts pixel coordinate to a relative position on axis.
         *
         * @param   coordinate  Coordinate
         * @return              Relative position
         */
        Object.defineProperty(Axis.prototype, "coordinateToPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (coordinate) {
                var renderer = this.get("renderer");
                return renderer.toAxisPosition(coordinate / renderer.axisLength());
            }
        });
        /**
         * Converts relative position of the plot area to relative position of the
         * axis with zoom taken into account.
         *
         * @param position Position
         * @return Relative position
         */
        Object.defineProperty(Axis.prototype, "toAxisPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                return this.get("renderer").toAxisPosition(position);
            }
        });
        /**
         * Adjusts position with inversed taken into account.
         *
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "fixPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                return this.get("renderer").fixPosition(position);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "shouldGap", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem, _nextItem, _autoGapCount, _fieldName) {
                return false;
            }
        });
        /**
         * Creates and returns an axis range object.
         *
         * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info
         * @param   axisDataItem  Axis data item
         * @return                Axis range
         */
        Object.defineProperty(Axis.prototype, "createAxisRange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axisDataItem) {
                return this.axisRanges.push(axisDataItem);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "_groupSeriesData", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_series) { }
        });
        Object.defineProperty(Axis, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Axis"
        });
        Object.defineProperty(Axis, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Component.classNames.concat([Axis.className])
        });
        return Axis;
    }(Component));

    /**
     * Creates a category axis.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/category-axis/} for more info
     * @important
     */
    var CategoryAxis = /** @class */ (function (_super) {
        __extends(CategoryAxis, _super);
        function CategoryAxis() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_frequency", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_itemMap", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            return _this;
        }
        Object.defineProperty(CategoryAxis.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["axis"]);
                this.fields.push("category");
                this.setPrivateRaw("name", "category");
                this.addTag("category");
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(CategoryAxis.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._prepareChildren.call(this);
                var len = this.dataItems.length;
                var i = 0;
                if (this._valuesDirty) {
                    each$1(this.dataItems, function (dataItem) {
                        dataItem.setRaw("index", i);
                        _this._itemMap[dataItem.get("category")] = dataItem;
                        i++;
                    });
                    this.setPrivateRaw("maxZoomFactor", len);
                }
                this.setPrivateRaw("startIndex", Math.max(Math.round(this.get("start", 0) * len), 0));
                this.setPrivateRaw("endIndex", Math.min(Math.round(this.get("end", 1) * len), len));
                if (this._sizeDirty || this._valuesDirty || (this.isDirty("start") || this.isDirty("end") || this.isPrivateDirty("endIndex") || this.isPrivateDirty("startIndex") || this.isPrivateDirty("width") || this.isPrivateDirty("height"))) {
                    if (this.dataItems.length > 0) {
                        this._handleRangeChange();
                        this._prepareAxisItems();
                        this._updateAxisRanges();
                    }
                }
            }
        });
        Object.defineProperty(CategoryAxis.prototype, "_handleRangeChange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                each$1(this.series, function (series) {
                    var startCategory = _this.dataItems[_this.startIndex()].get("category");
                    var endCategory = _this.dataItems[_this.endIndex() - 1].get("category");
                    var baseAxis = series.get("baseAxis");
                    var xAxis = series.get("xAxis");
                    var yAxis = series.get("yAxis");
                    if (xAxis instanceof CategoryAxis && yAxis instanceof CategoryAxis) {
                        series._markDirtyAxes();
                    }
                    else if (baseAxis === _this) {
                        var key = void 0;
                        var openKey = void 0;
                        var otherAxis = yAxis;
                        if (xAxis === baseAxis) {
                            if (series.get("categoryXField")) {
                                key = "categoryX";
                            }
                            if (series.get("openCategoryXField")) {
                                openKey = "openCategoryX";
                            }
                        }
                        else if (yAxis === baseAxis) {
                            if (series.get("categoryYField")) {
                                key = "categoryY";
                            }
                            if (series.get("openCategoryYField")) {
                                openKey = "openCategoryY";
                            }
                            otherAxis = xAxis;
                        }
                        if (otherAxis.className == "ValueAxis") {
                            if (key || openKey) {
                                var startDataItem = void 0;
                                var endDataItem = void 0;
                                for (var i = 0, len = series.dataItems.length; i < len; i++) {
                                    var dataItem = series.dataItems[i];
                                    if (key) {
                                        if (dataItem.get(key) === startCategory) {
                                            startDataItem = dataItem;
                                            break;
                                        }
                                    }
                                    if (openKey) {
                                        if (dataItem.get(openKey) === startCategory) {
                                            startDataItem = dataItem;
                                            break;
                                        }
                                    }
                                }
                                for (var i = series.dataItems.length - 1; i >= 0; i--) {
                                    var dataItem = series.dataItems[i];
                                    if (key) {
                                        if (dataItem.get(key) === endCategory) {
                                            endDataItem = dataItem;
                                            break;
                                        }
                                    }
                                    if (openKey) {
                                        if (dataItem.get(openKey) === endCategory) {
                                            endDataItem = dataItem;
                                            break;
                                        }
                                    }
                                }
                                if (startDataItem) {
                                    series.setPrivate("startIndex", series.dataItems.indexOf(startDataItem));
                                }
                                if (endDataItem) {
                                    series.setPrivate("endIndex", series.dataItems.indexOf(endDataItem) + 1);
                                }
                            }
                        }
                        series._markDirtyAxes(); // must be outside
                    }
                });
            }
        });
        Object.defineProperty(CategoryAxis.prototype, "_prepareAxisItems", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var renderer = this.get("renderer");
                var len = this.dataItems.length;
                var startIndex = this.startIndex();
                if (startIndex > 0) {
                    startIndex--;
                }
                var endIndex = this.endIndex();
                if (endIndex < len) {
                    endIndex++;
                }
                var maxCount = renderer.axisLength() / Math.max(renderer.get("minGridDistance"), 1 / Number.MAX_SAFE_INTEGER);
                var frequency = Math.max(1, Math.min(len, Math.ceil((endIndex - startIndex) / maxCount)));
                startIndex = Math.floor(startIndex / frequency) * frequency;
                this._frequency = frequency;
                for (var j = 0; j < len; j++) {
                    this.dataItems[j].hide();
                }
                var f = this.dataItems[startIndex].get("index", 0);
                for (var i = startIndex; i < endIndex; i = i + frequency) {
                    var dataItem = this.dataItems[i];
                    this._createAssets(dataItem, []);
                    if (dataItem.isHidden()) {
                        dataItem.show();
                    }
                    this._prepareDataItem(dataItem, f, frequency);
                    f++;
                }
                this._updateGhost();
            }
        });
        Object.defineProperty(CategoryAxis.prototype, "_prepareDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, fillIndex, count) {
                var renderer = this.get("renderer");
                var categoryLocation = dataItem.get("categoryLocation", 0);
                var endCategoryLocation = dataItem.get("endCategoryLocation", 1);
                var index = dataItem.get("index");
                if (!isNumber(index)) {
                    index = this.categoryToIndex(dataItem.get("category"));
                }
                var position = this.indexToPosition(index, categoryLocation);
                var endCategory = dataItem.get("endCategory");
                var endIndex;
                if (endCategory) {
                    endIndex = this.categoryToIndex(endCategory);
                    if (!isNumber(endIndex)) {
                        endIndex = index;
                    }
                }
                else {
                    endIndex = index;
                }
                var endPosition = this.indexToPosition(endIndex, endCategoryLocation);
                var fillEndIndex;
                var fillEndPosition;
                if (dataItem.get("isRange")) {
                    fillEndIndex = endIndex;
                }
                else {
                    fillEndIndex = index + this._frequency - 1;
                }
                fillEndPosition = this.indexToPosition(fillEndIndex, endCategoryLocation);
                renderer.updateLabel(dataItem.get("label"), position, endPosition, count);
                renderer.updateGrid(dataItem.get("grid"), position, endPosition);
                renderer.updateTick(dataItem.get("tick"), position, endPosition, count);
                renderer.updateFill(dataItem.get("axisFill"), position, fillEndPosition);
                this._processBullet(dataItem);
                renderer.updateBullet(dataItem.get("bullet"), position, endPosition);
                var fillRule = this.get("fillRule");
                if (fillRule) {
                    fillRule(dataItem, fillIndex);
                }
            }
        });
        Object.defineProperty(CategoryAxis.prototype, "startIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var len = this.dataItems.length;
                return Math.min(Math.max(this.getPrivate("startIndex", 0), 0), len - 1);
            }
        });
        Object.defineProperty(CategoryAxis.prototype, "endIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var len = this.dataItems.length;
                return Math.max(1, Math.min(this.getPrivate("endIndex", len), len));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(CategoryAxis.prototype, "baseValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(CategoryAxis.prototype, "basePosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return 0;
            }
        });
        /**
         * Returns X coordinate in pixels corresponding to specific category index.
         *
         * @param   value  Index
         * @return         X coordinate
         */
        Object.defineProperty(CategoryAxis.prototype, "getX", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var axisDataItem = this._itemMap[value];
                if (axisDataItem) {
                    return this._settings.renderer.positionToCoordinate(this.indexToPosition(axisDataItem.get("index", 0)));
                }
                return NaN;
            }
        });
        /**
         * Returns Y coordinate in pixels corresponding to specific category index.
         *
         * @param   value  Index
         * @return         Y coordinate
         */
        Object.defineProperty(CategoryAxis.prototype, "getY", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var axisDataItem = this._itemMap[value];
                if (axisDataItem) {
                    return this._settings.renderer.positionToCoordinate(this.indexToPosition(axisDataItem.get("index", 0)));
                }
                return NaN;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(CategoryAxis.prototype, "getDataItemPositionX", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, cellLocation, _axisLocation) {
                var category = dataItem.get(field);
                var axisDataItem = this._itemMap[category];
                if (axisDataItem) {
                    return this.indexToPosition(axisDataItem.get("index", 0), cellLocation);
                }
                return NaN;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(CategoryAxis.prototype, "getDataItemCoordinateX", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, cellLocation, _axisLocation) {
                return this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, cellLocation, _axisLocation));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(CategoryAxis.prototype, "getDataItemPositionY", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, cellLocation, _axisLocation) {
                var category = dataItem.get(field);
                var axisDataItem = this._itemMap[category];
                if (axisDataItem) {
                    return this.indexToPosition(axisDataItem.get("index", 0), cellLocation);
                }
                return NaN;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(CategoryAxis.prototype, "getDataItemCoordinateY", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, cellLocation, _axisLocation) {
                return this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, cellLocation, _axisLocation));
            }
        });
        /**
         * Converts category index to a relative position.
         *
         * `location` indicates relative position within category: 0 - start, 1 - end.
         *
         * If not set, will use middle (0.5) of the category.
         *
         * @param   index     Index
         * @param   location  Location
         * @return            Index
         */
        Object.defineProperty(CategoryAxis.prototype, "indexToPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, location) {
                if (!isNumber(location)) {
                    location = 0.5;
                }
                var len = this.dataItems.length;
                var startLocation = this.get("startLocation", 0);
                var endLocation = this.get("endLocation", 1);
                len -= startLocation;
                len -= (1 - endLocation);
                var position = (index + location - startLocation) / len;
                var dataItem = this.dataItems[index];
                if (dataItem) {
                    position += dataItem.get("deltaPosition", 0);
                }
                return position;
            }
        });
        /**
         * Returns an index of a category.
         *
         * @param   category  Category to look up
         * @return            Index
         */
        Object.defineProperty(CategoryAxis.prototype, "categoryToIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (category) {
                var dataItem = this._itemMap[category];
                if (dataItem) {
                    return dataItem.get("index");
                }
                return NaN;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(CategoryAxis.prototype, "dataItemToPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                return this.indexToPosition(dataItem.get("index"));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(CategoryAxis.prototype, "roundAxisPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position, location) {
                return this.indexToPosition(this.axisPositionToIndex(position), location);
            }
        });
        /**
         * Returns an index of the category that corresponds to specific pixel
         * position within axis.
         *
         * @param position  Position (px)
         * @return Category index
         */
        Object.defineProperty(CategoryAxis.prototype, "axisPositionToIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                var len = this.dataItems.length;
                return fitToRange(Math.floor(position * len), 0, len - 1); //$math.fitToRange(Math.floor((end - start) * len * position + len * start), 0, len - 1);
            }
        });
        /**
         * Returns text to be used in an axis tooltip for specific relative position.
         *
         * @param   position  Position
         * @return            Tooltip text
         */
        Object.defineProperty(CategoryAxis.prototype, "getTooltipText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                //@todo number formatter + tag
                var dataItem = this.dataItems[this.axisPositionToIndex(position)];
                if (dataItem) {
                    var label = dataItem.get("label");
                    if (label) {
                        return populateString(label, this.get("tooltipText", ""));
                    }
                }
            }
        });
        Object.defineProperty(CategoryAxis.prototype, "_updateTooltipText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip, position) {
                tooltip._setDataItem(this.dataItems[this.axisPositionToIndex(position)]);
                tooltip.label.text.markDirtyText();
            }
        });
        /**
         * Returns a data item from series that is closest to the `position`.
         *
         * @param   series    Series
         * @param   position  Relative position
         * @return            Data item
         */
        Object.defineProperty(CategoryAxis.prototype, "getSeriesItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (series, position) {
                if (this.dataItems.length > 0) {
                    var fieldName = (this.getPrivate("name") + this.get("renderer").getPrivate("letter"));
                    var index = this.axisPositionToIndex(position);
                    // try simple first
                    var seriesDataItem = series.dataItems[index];
                    var axisDataItem = this.dataItems[index];
                    var category = axisDataItem.get("category");
                    if (seriesDataItem && axisDataItem) {
                        if (seriesDataItem.get(fieldName) === category) {
                            return seriesDataItem;
                        }
                    }
                    // if not found, try looking
                    for (var i = 0, len = series.dataItems.length; i < len; i++) {
                        var dataItem = series.dataItems[i];
                        if (dataItem.get(fieldName) === category) {
                            return dataItem;
                        }
                    }
                }
            }
        });
        /**
         * Zooms the axis to specific `start` and `end` indexes.
         *
         * Optional `duration` specifies duration of zoom animation in milliseconds.
         *
         * @param  start     Start index
         * @param  end       End index
         * @param  duration  Duration in milliseconds
         */
        Object.defineProperty(CategoryAxis.prototype, "zoomToIndexes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (start, end, duration) {
                var len = this.dataItems.length;
                this.zoom(start / len, end / len, duration);
            }
        });
        Object.defineProperty(CategoryAxis.prototype, "zoomToCategories", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (startCategory, endCategory, duration) {
                this.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1, duration);
            }
        });
        Object.defineProperty(CategoryAxis, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "CategoryAxis"
        });
        Object.defineProperty(CategoryAxis, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Axis.classNames.concat([CategoryAxis.className])
        });
        return CategoryAxis;
    }(Axis));

    /**
     * Category-based date axis.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/category-date-axis/} for more info
     * @important
     */
    var CategoryDateAxis = /** @class */ (function (_super) {
        __extends(CategoryDateAxis, _super);
        function CategoryDateAxis() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_frequency", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_itemMap", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            return _this;
        }
        Object.defineProperty(CategoryDateAxis.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["axis"]);
                this.fields.push("category");
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(CategoryDateAxis.prototype, "_prepareAxisItems", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                // temp
                this.setPrivateRaw("baseInterval", this.get("baseInterval"));
                var renderer = this.get("renderer");
                var len = this.dataItems.length;
                var startIndex = this.startIndex();
                if (startIndex > 0) {
                    startIndex--;
                }
                var endIndex = this.endIndex();
                if (endIndex < len) {
                    endIndex++;
                }
                var maxCount = renderer.axisLength() / Math.max(renderer.get("minGridDistance"), 1 / Number.MAX_SAFE_INTEGER);
                var frequency = Math.min(len, Math.ceil((endIndex - startIndex) / maxCount));
                startIndex = Math.floor(startIndex / frequency) * frequency;
                this._frequency = frequency;
                for (var j = 0; j < len; j++) {
                    this.dataItems[j].hide();
                }
                var startTime = Number(this.dataItems[startIndex].get("category"));
                var endTime = Number(this.dataItems[endIndex - 1].get("category"));
                var realDuration = (endTime - startTime);
                if (endIndex - startIndex < maxCount) {
                    realDuration = (endTime - startTime) - ((endTime - startTime) / this.baseDuration() - (endIndex - startIndex)) * this.baseDuration();
                }
                // if all items are on axis
                var gridInterval = chooseInterval(0, realDuration, maxCount, this.get("gridIntervals"));
                var nextGridUnit = getNextUnit(gridInterval.timeUnit);
                var baseInterval = this.getPrivate("baseInterval");
                if (getIntervalDuration(gridInterval) < this.baseDuration()) {
                    gridInterval = __assign({}, baseInterval);
                }
                var formats = this.get("dateFormats");
                var previousValue = -Infinity;
                var previousIndex = -Infinity;
                var previousUnitValue = -Infinity;
                var format;
                var selectedItems = [];
                var changed = false;
                for (var i = startIndex; i < endIndex; i++) {
                    var dataItem = this.dataItems[i];
                    var index = dataItem.get("index");
                    var skip = false;
                    var value = Number(dataItem.get("category"));
                    var date = new Date(value);
                    var unitValue = getUnitValue(date, gridInterval.timeUnit);
                    format = formats[gridInterval.timeUnit];
                    var added = false;
                    if (gridInterval.timeUnit != "year" && gridInterval.timeUnit != "week") {
                        if (nextGridUnit && this.get("markUnitChange") && isNumber(previousValue)) {
                            if (checkChange(value, previousValue, nextGridUnit, this._root.utc)) {
                                format = this.get("periodChangeDateFormats")[gridInterval.timeUnit];
                                if (index - frequency * 0.5 < previousIndex) {
                                    selectedItems.pop();
                                }
                                selectedItems.push({ format: format, dataItem: dataItem });
                                changed = true;
                                added = true;
                                previousIndex = index;
                                previousUnitValue = unitValue;
                            }
                        }
                    }
                    var shouldAdd = false;
                    if (gridInterval.timeUnit === "day" || gridInterval.timeUnit === "week") {
                        if (index - previousIndex >= frequency) {
                            shouldAdd = true;
                        }
                    }
                    else {
                        if (unitValue % gridInterval.count === 0) {
                            if (unitValue != previousUnitValue) {
                                shouldAdd = true;
                            }
                        }
                    }
                    if (!added && shouldAdd) {
                        if (index - frequency * 0.7 < previousIndex) {
                            if (changed) {
                                skip = true;
                            }
                        }
                        if (!skip) {
                            selectedItems.push({ format: format, dataItem: dataItem });
                            previousIndex = index;
                            previousUnitValue = unitValue;
                        }
                        changed = false;
                    }
                    previousValue = value;
                }
                if (selectedItems.length > 0) {
                    var f_1 = selectedItems[0].dataItem.get("index", 0);
                    each$1(selectedItems, function (item) {
                        var dataItem = item.dataItem;
                        var format = item.format;
                        _this._createAssets(dataItem, []);
                        if (dataItem.isHidden()) {
                            dataItem.show();
                        }
                        var value = Number(dataItem.get("category"));
                        var date = new Date(value);
                        var label = dataItem.get("label");
                        if (label) {
                            label.set("text", _this._root.dateFormatter.format(date, format));
                        }
                        f_1++;
                        _this._prepareDataItem(dataItem, f_1, frequency);
                    });
                }
            }
        });
        /**
         * Returns a duration of currently active `baseInterval` in milliseconds.
         *
         * @return Duration
         */
        Object.defineProperty(CategoryDateAxis.prototype, "baseDuration", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return getIntervalDuration(this.getPrivate("baseInterval"));
            }
        });
        /**
         * Returns text to be used in an axis tooltip for specific relative position.
         *
         * @param   position  Position
         * @return            Tooltip text
         */
        Object.defineProperty(CategoryDateAxis.prototype, "getTooltipText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                //@todo number formatter + tag
                var dataItem = this.dataItems[this.axisPositionToIndex(position)];
                if (dataItem) {
                    var format = this.get("dateFormats")[this.getPrivate("baseInterval").timeUnit];
                    return this._root.dateFormatter.format(new Date(dataItem.get("category", 0)), this.get("tooltipDateFormat", format));
                }
            }
        });
        Object.defineProperty(CategoryDateAxis.prototype, "_updateTooltipText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip, position) {
                tooltip.label.set("text", this.getTooltipText(position));
            }
        });
        Object.defineProperty(CategoryDateAxis, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "CategoryDateAxis"
        });
        Object.defineProperty(CategoryDateAxis, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: CategoryAxis.classNames.concat([CategoryDateAxis.className])
        });
        return CategoryDateAxis;
    }(CategoryAxis));

    /**
     * Creates a value axis.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/} for more info
     * @important
     */
    var ValueAxis = /** @class */ (function (_super) {
        __extends(ValueAxis, _super);
        function ValueAxis() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_dirtyExtremes", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_dirtySelectionExtremes", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_deltaMinMax", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_minReal", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_maxReal", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_baseValue", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_syncDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_minLogAdjusted", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            return _this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(ValueAxis.prototype, "markDirtyExtremes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._dirtyExtremes = true;
                this.markDirty();
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(ValueAxis.prototype, "markDirtySelectionExtremes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._dirtySelectionExtremes = true;
                this.markDirty();
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["axis"]);
                this.setPrivateRaw("name", "value");
                this.addTag("value");
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._prepareChildren.call(this);
                if (this.isDirty("syncWithAxis")) {
                    var previousValue = this._prevSettings.syncWithAxis;
                    if (previousValue) {
                        if (this._syncDp) {
                            this._syncDp.dispose();
                        }
                    }
                    var syncWithAxis = this.get("syncWithAxis");
                    if (syncWithAxis) {
                        this._syncDp = new MultiDisposer([
                            syncWithAxis.onPrivate("selectionMinFinal", function () {
                                _this._dirtySelectionExtremes = true;
                            }),
                            syncWithAxis.onPrivate("selectionMaxFinal", function () {
                                _this._dirtySelectionExtremes = true;
                            })
                        ]);
                    }
                }
                //if (this._dirtyExtremes || this.isPrivateDirty("width") || this.isPrivateDirty("height") || this.isDirty("min") || this.isDirty("max") || this.isDirty("extraMin") || this.isDirty("extraMax") || this.isDirty("logarithmic") || this.isDirty("treatZeroAs") || this.isDirty("baseValue") || this.isDirty("strictMinMax") || this.isDirty("maxPrecision")) {
                if (this._sizeDirty || this._dirtyExtremes || this._valuesDirty || this.isPrivateDirty("width") || this.isPrivateDirty("height") || this.isDirty("min") || this.isDirty("max") || this.isDirty("extraMin") || this.isDirty("extraMax") || this.isDirty("logarithmic") || this.isDirty("treatZeroAs") || this.isDirty("baseValue") || this.isDirty("strictMinMax") || this.isDirty("strictMinMaxSelection") || this.isDirty("maxPrecision") || this.isDirty("numberFormat")) {
                    this._getMinMax();
                    this.ghostLabel.set("text", "");
                    this._dirtyExtremes = false;
                }
                if (this._dirtySelectionExtremes && !this._isPanning) {
                    this._getSelectionMinMax();
                    this._dirtySelectionExtremes = false;
                }
                this._groupData();
                if (this._sizeDirty || this._valuesDirty || this.isDirty("start") || this.isDirty("end") || this.isPrivateDirty("min") || this.isPrivateDirty("selectionMax") || this.isPrivateDirty("selectionMin") || this.isPrivateDirty("max") || this.isPrivateDirty("step") || this.isPrivateDirty("width") || this.isPrivateDirty("height") || this.isDirty("logarithmic")) {
                    this._handleRangeChange();
                    this._prepareAxisItems();
                    this._updateAxisRanges();
                }
                this._baseValue = this.baseValue();
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_groupData", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_formatText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var numberFormat = this.get("numberFormat");
                var formatter = this.getNumberFormatter();
                var text = "";
                if (numberFormat) {
                    text = formatter.format(value, numberFormat);
                }
                else {
                    text = formatter.format(value, undefined, this.getPrivate("stepDecimalPlaces"));
                }
                return text;
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_prepareAxisItems", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var min = this.getPrivate("min");
                var max = this.getPrivate("max");
                if (isNumber(min) && isNumber(max)) {
                    var logarithmic = this.get("logarithmic");
                    var step = this.getPrivate("step");
                    var selectionMin = this.getPrivate("selectionMin");
                    var selectionMax = this.getPrivate("selectionMax") + step;
                    var value = selectionMin - step;
                    var i = 0;
                    var differencePower = 1;
                    var minLog = min;
                    if (logarithmic) {
                        value = this._minLogAdjusted;
                        if (value < selectionMin) {
                            while (value < selectionMin) {
                                value += step;
                            }
                        }
                        minLog = value;
                        if (minLog <= 0) {
                            minLog = 1;
                            if (step < 1) {
                                minLog = step;
                            }
                        }
                        differencePower = Math.log(selectionMax - step) * Math.LOG10E - Math.log(minLog) * Math.LOG10E;
                        if (differencePower > 2) {
                            value = Math.pow(10, Math.log(minLog) * Math.LOG10E - 5);
                        }
                    }
                    while (value < selectionMax) {
                        var dataItem = void 0;
                        if (this.dataItems.length < i + 1) {
                            dataItem = new DataItem(this, undefined, {});
                            this._dataItems.push(dataItem);
                            this.processDataItem(dataItem);
                        }
                        else {
                            dataItem = this.dataItems[i];
                        }
                        this._createAssets(dataItem, []);
                        if (dataItem.isHidden()) {
                            dataItem.show();
                        }
                        dataItem.setRaw("value", value);
                        var label = dataItem.get("label");
                        if (label) {
                            label.set("text", this._formatText(value));
                        }
                        this._prepareDataItem(dataItem);
                        if (!logarithmic) {
                            value += step;
                        }
                        else {
                            if (differencePower > 2) {
                                value = Math.pow(10, Math.log(minLog) * Math.LOG10E + i - 5);
                            }
                            else {
                                value += step;
                            }
                        }
                        var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));
                        if (stepPower < 1) {
                            // exponent is less then 1 too. Count decimals of exponent
                            var decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2;
                            // round value to avoid floating point issues
                            value = round$1(value, decCount);
                        }
                        i++;
                    }
                    for (var j = i; j < this.dataItems.length; j++) {
                        this.dataItems[j].hide();
                    }
                    each$1(this.series, function (series) {
                        if (series.inited) {
                            series._markDirtyAxes();
                        }
                    });
                    this._updateGhost();
                }
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_prepareDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, count) {
                var renderer = this.get("renderer");
                var value = dataItem.get("value");
                var endValue = dataItem.get("endValue");
                var position = this.valueToPosition(value);
                var endPosition = position;
                var fillEndPosition = this.valueToPosition(value + this.getPrivate("step"));
                if (isNumber(endValue)) {
                    endPosition = this.valueToPosition(endValue);
                    fillEndPosition = endPosition;
                }
                renderer.updateLabel(dataItem.get("label"), position, endPosition, count);
                var grid = dataItem.get("grid");
                renderer.updateGrid(grid, position, endPosition);
                if (grid) {
                    if (value == this.get("baseValue", 0)) {
                        grid.addTag("base");
                        grid._applyThemes();
                    }
                    else if (grid.hasTag("base")) {
                        grid.removeTag("base");
                        grid._applyThemes();
                    }
                }
                renderer.updateTick(dataItem.get("tick"), position, endPosition, count);
                renderer.updateFill(dataItem.get("axisFill"), position, fillEndPosition);
                this._processBullet(dataItem);
                renderer.updateBullet(dataItem.get("bullet"), position, endPosition);
                if (!dataItem.get("isRange")) {
                    var fillRule = this.get("fillRule");
                    if (fillRule) {
                        fillRule(dataItem);
                    }
                }
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_handleRangeChange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var selectionMin = this.positionToValue(this.get("start", 0));
                var selectionMax = this.positionToValue(this.get("end", 1));
                var gridCount = this.get("renderer").gridCount();
                var minMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);
                var stepDecimalPlaces = decimalPlaces(minMaxStep.step);
                this.setPrivateRaw("stepDecimalPlaces", stepDecimalPlaces);
                selectionMin = round$1(selectionMin, stepDecimalPlaces);
                selectionMax = round$1(selectionMax, stepDecimalPlaces);
                minMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);
                var step = minMaxStep.step;
                selectionMin = minMaxStep.min;
                selectionMax = minMaxStep.max;
                if (this.getPrivate("selectionMin") !== selectionMin || this.getPrivate("selectionMax") !== selectionMax || this.getPrivate("step") !== step) {
                    // do not change to setPrivate, will cause SO
                    this.setPrivateRaw("selectionMin", selectionMin);
                    this.setPrivateRaw("selectionMax", selectionMax);
                    this.setPrivateRaw("step", step);
                }
            }
        });
        /**
         * Converts a relative position to a corresponding numeric value from axis
         * scale.
         *
         * @param   position  Relative position
         * @return            Value
         */
        Object.defineProperty(ValueAxis.prototype, "positionToValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                var min = this.getPrivate("min");
                var max = this.getPrivate("max");
                if (!this.get("logarithmic")) {
                    return position * (max - min) + min;
                }
                else {
                    return Math.pow(Math.E, (position * ((Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E)) + Math.log(min) * Math.LOG10E) / Math.LOG10E);
                }
            }
        });
        /**
         * Convers value to a relative position on axis.
         *
         * @param   value  Value
         * @return         Relative position
         */
        Object.defineProperty(ValueAxis.prototype, "valueToPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var min = this.getPrivate("min");
                var max = this.getPrivate("max");
                if (!this.get("logarithmic")) {
                    return (value - min) / (max - min);
                }
                else {
                    if (value <= 0) {
                        var treatZeroAs = this.get("treatZeroAs");
                        if (isNumber(treatZeroAs)) {
                            value = treatZeroAs;
                        }
                    }
                    return (Math.log(value) * Math.LOG10E - Math.log(min) * Math.LOG10E) / ((Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E));
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(ValueAxis.prototype, "valueToFinalPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var min = this.getPrivate("minFinal");
                var max = this.getPrivate("maxFinal");
                if (!this.get("logarithmic")) {
                    return (value - min) / (max - min);
                }
                else {
                    if (value <= 0) {
                        var treatZeroAs = this.get("treatZeroAs");
                        if (isNumber(treatZeroAs)) {
                            value = treatZeroAs;
                        }
                    }
                    return (Math.log(value) * Math.LOG10E - Math.log(min) * Math.LOG10E) / ((Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E));
                }
            }
        });
        /**
         * Returns X coordinate in pixels corresponding to specific value.
         *
         * @param   value     Numeric value
         * @param   location  Location
         * @param   baseValue Base value
         * @return            X coordinate
         */
        Object.defineProperty(ValueAxis.prototype, "getX", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, location, baseValue) {
                value = baseValue + (value - baseValue) * location;
                var position = this.valueToPosition(value);
                return this._settings.renderer.positionToCoordinate(position);
            }
        });
        /**
         * Returns X coordinate in pixels corresponding to specific value.
         *
         * @param   value     Numeric value
         * @param   location  Location
         * @param   baseValue Base value
         * @return            X coordinate
         */
        Object.defineProperty(ValueAxis.prototype, "getY", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, location, baseValue) {
                value = baseValue + (value - baseValue) * location;
                var position = this.valueToPosition(value);
                return this._settings.renderer.positionToCoordinate(position);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(ValueAxis.prototype, "getDataItemCoordinateX", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, _cellLocation, axisLocation) {
                return this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, _cellLocation, axisLocation));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(ValueAxis.prototype, "getDataItemPositionX", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, _cellLocation, axisLocation) {
                var value = dataItem.get(field);
                var stackToItem = dataItem.get("stackToItemX");
                if (stackToItem) {
                    var series = dataItem.component;
                    value = value * axisLocation + series.getStackedXValueWorking(dataItem, field);
                }
                else {
                    value = this._baseValue + (value - this._baseValue) * axisLocation;
                }
                return this.valueToPosition(value);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(ValueAxis.prototype, "getDataItemCoordinateY", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, _cellLocation, axisLocation) {
                return this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, _cellLocation, axisLocation));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(ValueAxis.prototype, "getDataItemPositionY", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, _cellLocation, axisLocation) {
                var value = dataItem.get(field);
                var stackToItem = dataItem.get("stackToItemY");
                if (stackToItem) {
                    var series = dataItem.component;
                    value = value * axisLocation + series.getStackedYValueWorking(dataItem, field);
                }
                else {
                    value = this._baseValue + (value - this._baseValue) * axisLocation;
                }
                return this.valueToPosition(value);
            }
        });
        /**
         * Returns relative position of axis' `baseValue`.
         *
         * @return  Base value position
         */
        Object.defineProperty(ValueAxis.prototype, "basePosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.valueToPosition(this.baseValue());
            }
        });
        /**
         * Base value of the [[ValueAxis]], which determines positive and negative
         * values.
         *
         * @return Base value
         */
        Object.defineProperty(ValueAxis.prototype, "baseValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var min = Math.min(this.getPrivate("minFinal", -Infinity), this.getPrivate("selectionMin", -Infinity));
                var max = Math.max(this.getPrivate("maxFinal", Infinity), this.getPrivate("selectionMax", Infinity));
                var baseValue = this.get("baseValue", 0);
                if (baseValue < min) {
                    baseValue = min;
                }
                if (baseValue > max) {
                    baseValue = max;
                }
                return baseValue;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(ValueAxis.prototype, "cellEndValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                return value;
            }
        });
        Object.defineProperty(ValueAxis.prototype, "fixSmallStep", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (step) {
                // happens because of floating point error
                if (1 + step === 1) {
                    step *= 2;
                    return this.fixSmallStep(step);
                }
                return step;
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_fixMin", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (min) {
                return min;
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_fixMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (max) {
                return max;
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_calculateTotals", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.get("calculateTotals")) {
                    var series = this.series[0];
                    if (series) {
                        var startIndex = series.startIndex();
                        if (series.dataItems.length > 0) {
                            if (startIndex > 0) {
                                startIndex--;
                            }
                            var endIndex = series.endIndex();
                            if (endIndex < series.dataItems.length) {
                                endIndex++;
                            }
                            var field_1;
                            var vc_1;
                            if (series.get("yAxis") == this) {
                                field_1 = "valueY";
                                vc_1 = "vcy";
                            }
                            else if (series.get("xAxis") == this) {
                                field_1 = "valueX";
                                vc_1 = "vcx";
                            }
                            var fieldWorking_1 = field_1 + "Working";
                            if (field_1) {
                                var _loop_1 = function (i) {
                                    var sum = 0;
                                    var total = 0;
                                    each$1(this_1.series, function (series) {
                                        if (!series.get("excludeFromTotal")) {
                                            var dataItem = series.dataItems[i];
                                            if (dataItem) {
                                                var value = dataItem.get(fieldWorking_1) * series.get(vc_1);
                                                if (!isNaN$1(value)) {
                                                    sum += value;
                                                    total += Math.abs(value);
                                                }
                                            }
                                        }
                                    });
                                    each$1(this_1.series, function (series) {
                                        if (!series.get("excludeFromTotal")) {
                                            var dataItem = series.dataItems[i];
                                            if (dataItem) {
                                                var value = dataItem.get(fieldWorking_1) * series.get(vc_1);
                                                if (!isNaN$1(value)) {
                                                    dataItem.set((field_1 + "Total"), total);
                                                    dataItem.set((field_1 + "Sum"), sum);
                                                    dataItem.set((field_1 + "TotalPercent"), value / total * 100);
                                                }
                                            }
                                        }
                                    });
                                };
                                var this_1 = this;
                                for (var i = startIndex; i < endIndex; i++) {
                                    _loop_1(i);
                                }
                            }
                        }
                    }
                }
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_getSelectionMinMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _a;
                var _this = this;
                var min = this.getPrivate("minFinal");
                var max = this.getPrivate("maxFinal");
                var minDefined = this.get("min");
                var maxDefined = this.get("max");
                var extraMin = this.get("extraMin", 0);
                var extraMax = this.get("extraMax", 0);
                if (this.get("logarithmic")) {
                    if (this.get("extraMin") == null) {
                        extraMin = 0.1;
                    }
                    if (this.get("extraMax") == null) {
                        extraMax = 0.2;
                    }
                }
                var gridCount = this.get("renderer").gridCount();
                var selectionStrictMinMax = this.get("strictMinMaxSelection");
                var strictMinMax = this.get("strictMinMax");
                if (isNumber(min) && isNumber(max)) {
                    var selectionMin_1 = max;
                    var selectionMax_1 = min;
                    each$1(this.series, function (series) {
                        if (!series.get("ignoreMinMax")) {
                            var seriesMin = void 0;
                            var seriesMax = void 0;
                            var outOfSelection = series.getPrivate("outOfSelection");
                            if (series.get("xAxis") === _this) {
                                if (!outOfSelection) {
                                    seriesMin = series.getPrivate("selectionMinX", series.getPrivate("minX"));
                                    seriesMax = series.getPrivate("selectionMaxX", series.getPrivate("maxX"));
                                }
                            }
                            else if (series.get("yAxis") === _this) {
                                if (!outOfSelection) {
                                    seriesMin = series.getPrivate("selectionMinY", series.getPrivate("minY"));
                                    seriesMax = series.getPrivate("selectionMaxY", series.getPrivate("maxY"));
                                }
                            }
                            if (!series.isHidden() && !series.isShowing()) {
                                if (isNumber(seriesMin)) {
                                    selectionMin_1 = Math.min(selectionMin_1, seriesMin);
                                }
                                if (isNumber(seriesMax)) {
                                    selectionMax_1 = Math.max(selectionMax_1, seriesMax);
                                }
                            }
                        }
                    });
                    this.axisRanges.each(function (range) {
                        if (range.get("affectsMinMax")) {
                            var value = range.get("value");
                            if (value != null) {
                                selectionMin_1 = Math.min(selectionMin_1, value);
                                selectionMax_1 = Math.max(selectionMax_1, value);
                            }
                            value = range.get("endValue");
                            if (value != null) {
                                selectionMin_1 = Math.min(selectionMin_1, value);
                                selectionMax_1 = Math.max(selectionMax_1, value);
                            }
                        }
                    });
                    if (selectionMin_1 > selectionMax_1) {
                        _a = __read([selectionMax_1, selectionMin_1], 2), selectionMin_1 = _a[0], selectionMax_1 = _a[1];
                    }
                    if (isNumber(minDefined)) {
                        if (strictMinMax) {
                            selectionMin_1 = minDefined;
                        }
                        else {
                            selectionMin_1 = min;
                        }
                    }
                    else if (strictMinMax) {
                        if (isNumber(this._minReal)) {
                            selectionMin_1 = this._minReal;
                        }
                    }
                    if (isNumber(maxDefined)) {
                        if (strictMinMax) {
                            selectionMax_1 = maxDefined;
                        }
                        else {
                            selectionMax_1 = max;
                        }
                    }
                    else if (strictMinMax) {
                        if (isNumber(this._maxReal)) {
                            selectionMax_1 = this._maxReal;
                        }
                    }
                    if (selectionMin_1 === selectionMax_1) {
                        selectionMin_1 -= this._deltaMinMax;
                        selectionMax_1 += this._deltaMinMax;
                        var minMaxStep2 = this._adjustMinMax(selectionMin_1, selectionMax_1, gridCount, strictMinMax);
                        selectionMin_1 = minMaxStep2.min;
                        selectionMax_1 = minMaxStep2.max;
                    }
                    var selectionMinReal = selectionMin_1;
                    var selectionMaxReal = selectionMax_1;
                    selectionMin_1 -= (selectionMax_1 - selectionMin_1) * extraMin;
                    selectionMax_1 += (selectionMax_1 - selectionMin_1) * extraMax;
                    var minMaxStep = this._adjustMinMax(selectionMin_1, selectionMax_1, gridCount);
                    selectionMin_1 = minMaxStep.min;
                    selectionMax_1 = minMaxStep.max;
                    selectionMin_1 = fitToRange(selectionMin_1, min, max);
                    selectionMax_1 = fitToRange(selectionMax_1, min, max);
                    // do it for the second time !important			
                    minMaxStep = this._adjustMinMax(selectionMin_1, selectionMax_1, gridCount, true);
                    if (!strictMinMax) {
                        selectionMin_1 = minMaxStep.min;
                        selectionMax_1 = minMaxStep.max;
                    }
                    var syncWithAxis = this.get("syncWithAxis");
                    if (syncWithAxis) {
                        minMaxStep = this._syncAxes(selectionMin_1, selectionMax_1, minMaxStep.step, syncWithAxis.getPrivate("selectionMinFinal", syncWithAxis.getPrivate("minFinal", 0)), syncWithAxis.getPrivate("selectionMaxFinal", syncWithAxis.getPrivate("maxFinal", 1)), syncWithAxis.getPrivate("selectionStepFinal", syncWithAxis.getPrivate("step", 1)));
                        selectionMin_1 = minMaxStep.min;
                        selectionMax_1 = minMaxStep.max;
                    }
                    if (strictMinMax) {
                        if (isNumber(minDefined)) {
                            selectionMin_1 = Math.max(selectionMin_1, minDefined);
                        }
                        if (isNumber(maxDefined)) {
                            selectionMax_1 = Math.min(selectionMax_1, maxDefined);
                        }
                    }
                    if (selectionStrictMinMax) {
                        selectionMin_1 = selectionMinReal - (selectionMax_1 - selectionMin_1) * extraMin;
                        selectionMax_1 = selectionMaxReal + (selectionMax_1 - selectionMin_1) * extraMax;
                    }
                    if (this.get("logarithmic")) {
                        if (selectionMin_1 <= 0) {
                            selectionMin_1 = selectionMinReal * (1 - Math.min(extraMin, 0.99));
                        }
                        if (selectionMin_1 < min) {
                            selectionMin_1 = min;
                        }
                        if (selectionMax_1 > max) {
                            selectionMax_1 = max;
                        }
                    }
                    var start = this.valueToFinalPosition(selectionMin_1);
                    var end = this.valueToFinalPosition(selectionMax_1);
                    this.setPrivateRaw("selectionMinFinal", selectionMin_1);
                    this.setPrivateRaw("selectionMaxFinal", selectionMax_1);
                    this.setPrivateRaw("selectionStepFinal", minMaxStep.step);
                    this.zoom(start, end);
                }
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_getMinMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var minDefined = this.get("min");
                var maxDefined = this.get("max");
                var min = Infinity;
                var max = -Infinity;
                var extraMin = this.get("extraMin", 0);
                var extraMax = this.get("extraMax", 0);
                if (this.get("logarithmic")) {
                    if (this.get("extraMin") == null) {
                        extraMin = 0.1;
                    }
                    if (this.get("extraMax") == null) {
                        extraMax = 0.2;
                    }
                }
                var minDiff = Infinity;
                each$1(this.series, function (series) {
                    if (!series.get("ignoreMinMax")) {
                        var seriesMin = void 0;
                        var seriesMax = void 0;
                        if (series.get("xAxis") === _this) {
                            seriesMin = series.getPrivate("minX");
                            seriesMax = series.getPrivate("maxX");
                        }
                        else if (series.get("yAxis") === _this) {
                            seriesMin = series.getPrivate("minY");
                            seriesMax = series.getPrivate("maxY");
                        }
                        if (isNumber(seriesMin) && isNumber(seriesMax)) {
                            min = Math.min(min, seriesMin);
                            max = Math.max(max, seriesMax);
                            var diff = seriesMax - seriesMin;
                            if (diff <= 0) {
                                diff = Math.abs(seriesMax / 100);
                            }
                            if (diff < minDiff) {
                                minDiff = diff;
                            }
                        }
                    }
                });
                this.axisRanges.each(function (range) {
                    if (range.get("affectsMinMax")) {
                        var value = range.get("value");
                        if (value != null) {
                            min = Math.min(min, value);
                            max = Math.max(max, value);
                        }
                        value = range.get("endValue");
                        if (value != null) {
                            min = Math.min(min, value);
                            max = Math.max(max, value);
                        }
                    }
                });
                if (this.get("logarithmic")) {
                    var treatZeroAs = this.get("treatZeroAs");
                    if (isNumber(treatZeroAs)) {
                        if (min <= 0) {
                            min = treatZeroAs;
                        }
                    }
                }
                if (min === 0 && max === 0) {
                    max = 0.9;
                    min = -0.9;
                }
                if (isNumber(minDefined)) {
                    min = minDefined;
                }
                if (isNumber(maxDefined)) {
                    max = maxDefined;
                }
                // meaning no min/max found on series/ranges and no min/max was defined
                if (min === Infinity || max === -Infinity) {
                    return;
                }
                var initialMin = min;
                var initialMax = max;
                // adapter
                var minAdapted = this.adapters.fold("min", min);
                var maxAdapted = this.adapters.fold("max", max);
                if (isNumber(minAdapted)) {
                    min = minAdapted;
                }
                if (isNumber(maxAdapted)) {
                    max = maxAdapted;
                }
                // DateAxis does some magic here
                min = this._fixMin(min);
                max = this._fixMax(max);
                // this happens if starLocation and endLocation are 0.5 and DateAxis has only one date
                if (max - min <= 1 / Math.pow(10, 15)) {
                    if (max - min !== 0) {
                        this._deltaMinMax = (max - min) / 2;
                    }
                    else {
                        // the number by which we need to raise 10 to get difference
                        var exponent = Math.log(Math.abs(max)) * Math.LOG10E;
                        // here we find a number which is power of 10 and has the same count of numbers as difference has
                        var power = Math.pow(10, Math.floor(exponent));
                        // reduce this number by 10 times
                        power = power / 10;
                        this._deltaMinMax = power;
                    }
                    min -= this._deltaMinMax;
                    max += this._deltaMinMax;
                }
                // add extras
                min -= (max - min) * extraMin;
                max += (max - min) * extraMax;
                if (this.get("logarithmic")) {
                    // don't let min go below 0 if real min is >= 0
                    if (min < 0 && initialMin >= 0) {
                        min = 0;
                    }
                    // don't let max go above 0 if real max is <= 0
                    if (max > 0 && initialMax <= 0) {
                        max = 0;
                    }
                }
                this._minReal = min;
                this._maxReal = max;
                var strictMinMax = this.get("strictMinMax");
                var strictMinMaxSelection = this.get("strictMinMaxSelection", false);
                if (strictMinMaxSelection) {
                    strictMinMax = strictMinMaxSelection;
                }
                var strict = strictMinMax;
                if (isNumber(maxDefined)) {
                    strict = true;
                }
                var gridCount = this.get("renderer").gridCount();
                var minMaxStep = this._adjustMinMax(min, max, gridCount, strict);
                min = minMaxStep.min;
                max = minMaxStep.max;
                // do it for the second time with strict true (importat!)
                minMaxStep = this._adjustMinMax(min, max, gridCount, true);
                min = minMaxStep.min;
                max = minMaxStep.max;
                // return min max if strict
                if (strictMinMax) {
                    if (isNumber(minDefined)) {
                        min = minDefined;
                    }
                    else {
                        min = this._minReal;
                    }
                    if (isNumber(maxDefined)) {
                        max = maxDefined;
                    }
                    else {
                        max = this._maxReal;
                    }
                    if (max - min <= 0.00000001) {
                        min -= this._deltaMinMax;
                        max += this._deltaMinMax;
                    }
                    min -= (max - min) * extraMin;
                    max += (max - min) * extraMax;
                }
                minAdapted = this.adapters.fold("min", min);
                maxAdapted = this.adapters.fold("max", max);
                if (isNumber(minAdapted)) {
                    min = minAdapted;
                }
                if (isNumber(maxAdapted)) {
                    max = maxAdapted;
                }
                if (minDiff == Infinity) {
                    minDiff = (max - min);
                }
                var syncWithAxis = this.get("syncWithAxis");
                if (syncWithAxis) {
                    minMaxStep = this._syncAxes(min, max, minMaxStep.step, syncWithAxis.getPrivate("minFinal", syncWithAxis.getPrivate("min", 0)), syncWithAxis.getPrivate("maxFinal", syncWithAxis.getPrivate("max", 1)), syncWithAxis.getPrivate("step", 1));
                    min = minMaxStep.min;
                    max = minMaxStep.max;
                }
                this.setPrivateRaw("maxZoomFactor", (max - min) / minDiff * this.get("maxZoomFactor", 100));
                if (this.get("logarithmic")) {
                    this._minLogAdjusted = min;
                    min = this._minReal;
                    max = this._maxReal;
                    if (min <= 0) {
                        min = initialMin * (1 - Math.min(extraMin, 0.99));
                    }
                }
                if (isNumber(min) && isNumber(max)) {
                    if (this.getPrivate("minFinal") !== min || this.getPrivate("maxFinal") !== max) {
                        this.setPrivate("minFinal", min);
                        this.setPrivate("maxFinal", max);
                        this._saveMinMax(min, max);
                        var duration = this.get("interpolationDuration", 0);
                        var easing = this.get("interpolationEasing");
                        this.animatePrivate({ key: "min", to: min, duration: duration, easing: easing });
                        this.animatePrivate({ key: "max", to: max, duration: duration, easing: easing });
                    }
                }
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_saveMinMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_min, _max) {
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_adjustMinMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (min, max, gridCount, strictMode) {
                // will fail if 0
                if (gridCount <= 1) {
                    gridCount = 1;
                }
                gridCount = Math.round(gridCount);
                var initialMin = min;
                var initialMax = max;
                var difference = max - min;
                // in case min and max is the same, use max
                if (difference === 0) {
                    difference = Math.abs(max);
                }
                // the number by which we need to raise 10 to get difference
                var exponent = Math.log(Math.abs(difference)) * Math.LOG10E;
                // here we find a number which is power of 10 and has the same count of numbers as difference has
                var power = Math.pow(10, Math.floor(exponent));
                // reduce this number by 10 times
                power = power / 10;
                var extra = power;
                if (strictMode) {
                    extra = 0;
                }
                // round down min
                if (strictMode) {
                    min = Math.floor(min / power) * power;
                    // round up max
                    max = Math.ceil(max / power) * power;
                }
                else {
                    min = Math.ceil(min / power) * power - extra;
                    // round up max
                    max = Math.floor(max / power) * power + extra;
                }
                // don't let min go below 0 if real min is >= 0
                if (min < 0 && initialMin >= 0) {
                    min = 0;
                }
                // don't let max go above 0 if real max is <= 0
                if (max > 0 && initialMax <= 0) {
                    max = 0;
                }
                exponent = Math.log(Math.abs(difference)) * Math.LOG10E;
                power = Math.pow(10, Math.floor(exponent));
                power = power / 100; // used to be 10 in v4, but this caused issue that there could be limited number of grids with even very small minGridDistance
                // approximate difference between two grid lines
                var step = Math.ceil((difference / gridCount) / power) * power;
                var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));
                // the step should divide by  2, 5, and 10.
                var stepDivisor = Math.ceil(step / stepPower); // number 0 - 10
                if (stepDivisor > 5) {
                    stepDivisor = 10;
                }
                else if (stepDivisor <= 5 && stepDivisor > 2) {
                    stepDivisor = 5;
                }
                // now get real step
                step = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;
                var maxPrecision = this.get("maxPrecision");
                if (isNumber(maxPrecision)) {
                    var ceiledStep = ceil(step, maxPrecision);
                    if (maxPrecision < Number.MAX_VALUE && step !== ceiledStep) {
                        step = ceiledStep;
                    }
                }
                var decCount = 0;
                // in case numbers are smaller than 1
                if (stepPower < 1) {
                    // exponent is less then 1 too. Count decimals of exponent
                    decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;
                    // round step
                    step = round$1(step, decCount);
                }
                // final min and max
                var minCount = Math.floor(min / step);
                min = round$1(step * minCount, decCount);
                var maxCount;
                if (!strictMode) {
                    maxCount = Math.ceil(max / step);
                }
                else {
                    maxCount = Math.floor(max / step);
                }
                if (maxCount === minCount) {
                    maxCount++;
                }
                max = round$1(step * maxCount, decCount);
                if (max < initialMax) {
                    max = max + step;
                }
                if (min > initialMin) {
                    min = min - step;
                }
                step = this.fixSmallStep(step);
                return { min: min, max: max, step: step };
            }
        });
        /**
         * Returns text to be used in an axis tooltip for specific relative position.
         *
         * @param   position  Position
         * @return            Tooltip text
         */
        Object.defineProperty(ValueAxis.prototype, "getTooltipText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                var numberFormat = this.get("tooltipNumberFormat", this.get("numberFormat"));
                var formatter = this.getNumberFormatter();
                var extraDecimals = this.get("extraTooltipPrecision", 0);
                var decimals = this.getPrivate("stepDecimalPlaces", 0) + extraDecimals;
                var value = round$1(this.positionToValue(position), decimals);
                if (numberFormat) {
                    return formatter.format(value, numberFormat);
                }
                else {
                    return formatter.format(value, undefined, decimals);
                    //label.set("text", this.getNumberFormatter().format(value, undefined, this.getPrivate("stepDecimalPlaces")));
                }
                // //@todo number formatter + tag
                // return $math.round(this.positionToValue(position), this.getPrivate("stepDecimalPlaces")).toString();
            }
        });
        /**
         * Returns a data item from series that is closest to the `position`.
         *
         * @param   series    Series
         * @param   position  Relative position
         * @return            Data item
         */
        Object.defineProperty(ValueAxis.prototype, "getSeriesItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (series, position) {
                var fieldName = (this.getPrivate("name") + this.get("renderer").getPrivate("letter"));
                var value = this.positionToValue(position);
                var index = undefined;
                var oldDiff;
                each$1(series.dataItems, function (dataItem, i) {
                    var diff = Math.abs(dataItem.get(fieldName) - value);
                    if (index === undefined || diff < oldDiff) {
                        index = i;
                        oldDiff = diff;
                    }
                });
                if (index != null) {
                    return series.dataItems[index];
                }
            }
        });
        /**
         * Zooms the axis to specific `start` and `end` values.
         *
         * Optional `duration` specifies duration of zoom animation in milliseconds.
         *
         * @param  start     Start value
         * @param  end       End value
         * @param  duration  Duration in milliseconds
         */
        Object.defineProperty(ValueAxis.prototype, "zoomToValues", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (start, end, duration) {
                var min = this.getPrivate("minFinal", 0);
                var max = this.getPrivate("maxFinal", 0);
                if (this.getPrivate("min") != null && this.getPrivate("max") != null) {
                    this.zoom((start - min) / (max - min), (end - min) / (max - min), duration);
                }
            }
        });
        /**
         * Syncs with a target axis.
         *
         * @param  min  Min
         * @param  max  Max
         * @param  step Step
         */
        Object.defineProperty(ValueAxis.prototype, "_syncAxes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (min, max, step, syncMin, syncMax, syncStep) {
                var axis = this.get("syncWithAxis");
                if (axis) {
                    var count = Math.round(syncMax - syncMin) / syncStep;
                    var currentCount = Math.round((max - min) / step);
                    var gridCount = this.get("renderer").gridCount();
                    if (isNumber(count) && isNumber(currentCount)) {
                        var synced = false;
                        var c = 0;
                        var diff = (max - min) * 0.01;
                        var omin = min;
                        var omax = max;
                        var ostep = step;
                        while (synced != true) {
                            synced = this._checkSync(omin, omax, ostep, count);
                            c++;
                            if (c > 500) {
                                synced = true;
                            }
                            if (!synced) {
                                if (c / 3 == Math.round(c / 3)) {
                                    omin = min - diff * c;
                                    if (min >= 0 && omin < 0) {
                                        omin = 0;
                                    }
                                }
                                else {
                                    omax = max + diff * c;
                                    if (omax <= 0 && omax > 0) {
                                        omax = 0;
                                    }
                                }
                                var minMaxStep = this._adjustMinMax(omin, omax, gridCount, true);
                                omin = minMaxStep.min;
                                omax = minMaxStep.max;
                                ostep = minMaxStep.step;
                            }
                            else {
                                min = omin;
                                max = omax;
                                step = ostep;
                            }
                        }
                    }
                }
                return { min: min, max: max, step: step };
            }
        });
        /**
         * Returns `true` if axis needs to be resunced with some other axis.
         */
        Object.defineProperty(ValueAxis.prototype, "_checkSync", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (min, max, step, count) {
                var currentCount = (max - min) / step;
                for (var i = 1; i < count; i++) {
                    if (round$1(currentCount / i, 1) == count || currentCount * i == count) {
                        return true;
                    }
                }
                return false;
            }
        });
        Object.defineProperty(ValueAxis, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "ValueAxis"
        });
        Object.defineProperty(ValueAxis, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Axis.classNames.concat([ValueAxis.className])
        });
        return ValueAxis;
    }(Axis));

    /**
     * Creates a date axis.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/} for more info
     * @important
     */
    var DateAxis = /** @class */ (function (_super) {
        __extends(DateAxis, _super);
        function DateAxis() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_dataGrouped", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_seriesDataGrouped", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_groupingCalculated", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_intervalDuration", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_baseDuration", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_intervalMax", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_intervalMin", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            return _this;
        }
        Object.defineProperty(DateAxis.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["axis"]);
                _super.prototype._afterNew.call(this);
                this._setBaseInterval(this.get("baseInterval"));
                this.on("baseInterval", function () {
                    _this._setBaseInterval(_this.get("baseInterval"));
                });
            }
        });
        Object.defineProperty(DateAxis.prototype, "_setBaseInterval", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (interval) {
                this.setPrivateRaw("baseInterval", interval);
                this._baseDuration = getIntervalDuration(interval);
            }
        });
        Object.defineProperty(DateAxis.prototype, "_fixZoomFactor", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setPrivateRaw("maxZoomFactor", Math.round((this.getPrivate("max", 0) - this.getPrivate("min", 0)) / this.baseMainDuration()));
            }
        });
        Object.defineProperty(DateAxis.prototype, "_groupData", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var min = this.getPrivate("min");
                var max = this.getPrivate("max");
                if ((isNumber(min) && isNumber(max))) {
                    this._fixZoomFactor();
                    var groupInterval = this.getPrivate("groupInterval");
                    if (groupInterval) {
                        this._setBaseInterval(groupInterval);
                    }
                    else {
                        this._setBaseInterval(this.get("baseInterval"));
                    }
                    if (this.isDirty("groupInterval")) {
                        var groupInterval_1 = this.get("groupInterval");
                        if (groupInterval_1) {
                            this.setRaw("groupIntervals", [groupInterval_1]);
                        }
                    }
                    if (this.isDirty("groupData")) {
                        if (!this._dataGrouped) {
                            if (this.get("groupData")) {
                                each$1(this.series, function (series) {
                                    _this._groupSeriesData(series);
                                });
                                this._handleRangeChange();
                            }
                            else {
                                var baseInterval = this.get("baseInterval");
                                var mainDataSetId_1 = baseInterval.timeUnit + baseInterval.count;
                                each$1(this.series, function (series) {
                                    series.setDataSet(mainDataSetId_1);
                                });
                                this._setBaseInterval(baseInterval);
                                this.setPrivateRaw("groupInterval", undefined);
                                this.markDirtyExtremes();
                            }
                            this._dataGrouped = true;
                        }
                    }
                }
            }
        });
        Object.defineProperty(DateAxis.prototype, "_groupSeriesData", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (series) {
                var _this = this;
                if (this.get("groupData") && !series.get("groupDataDisabled")) {
                    this._dataGrouped = true; // helps to avoid double grouping
                    this._seriesDataGrouped = true;
                    // make array of intervals which will be used;
                    var intervals_1 = [];
                    var baseDuration_1 = this.baseMainDuration();
                    var groupIntervals = this.get("groupIntervals");
                    each$1(groupIntervals, function (interval) {
                        var intervalDuration = getIntervalDuration(interval);
                        if (intervalDuration > baseDuration_1) {
                            intervals_1.push(interval);
                        }
                    });
                    series._dataSets = {};
                    var key_1 = this.getPrivate("name") + this.get("renderer").getPrivate("letter");
                    var fields_1;
                    var baseAxis = series.get("baseAxis");
                    if (series.get("xAxis") === baseAxis) {
                        fields_1 = series._valueYFields;
                    }
                    else if (series.get("yAxis") === baseAxis) {
                        fields_1 = series._valueXFields;
                    }
                    var dataItems_1 = series._mainDataItems;
                    var baseInterval = this.get("baseInterval");
                    var mainDataSetId = baseInterval.timeUnit + baseInterval.count;
                    series._dataSets[mainDataSetId] = dataItems_1;
                    var groupCallback_1 = series.get("groupDataCallback");
                    var groupOriginals_1 = series.get("groupDataWithOriginals", false);
                    if (groupCallback_1) {
                        groupOriginals_1 = true;
                    }
                    each$1(intervals_1, function (interval) {
                        var previousTime = -Infinity;
                        var dataSetId = interval.timeUnit + interval.count;
                        series._dataSets[dataSetId] = [];
                        var newDataItem;
                        var sum = {};
                        var count = {};
                        var groupFieldValues = {};
                        var workingFields = {};
                        each$1(fields_1, function (field) {
                            sum[field] = 0;
                            count[field] = 0;
                            groupFieldValues[field] = series.get((field + "Grouped"));
                            workingFields[field] = field + "Working";
                        });
                        var intervalDuration = getDuration(interval.timeUnit);
                        var firstItem = dataItems_1[0];
                        var firstDate;
                        if (firstItem) {
                            firstDate = new Date(dataItems_1[0].get(key_1));
                        }
                        var prevNewDataItem;
                        each$1(dataItems_1, function (dataItem) {
                            var time = dataItem.get(key_1);
                            var roundedTime = round(new Date(time), interval.timeUnit, interval.count, _this._root.locale.firstDayOfWeek, _this._root.utc, firstDate, _this._root.timezone).getTime();
                            var dataContext;
                            if (previousTime < roundedTime - intervalDuration / 24) {
                                dataContext = copy$1(dataItem.dataContext);
                                newDataItem = new DataItem(series, dataContext, series._makeDataItem(dataContext));
                                newDataItem.setRaw(key_1, roundedTime);
                                series._dataSets[dataSetId].push(newDataItem);
                                each$1(fields_1, function (field) {
                                    var value = dataItem.get(field);
                                    if (isNumber(value)) {
                                        newDataItem.setRaw(field, value);
                                        newDataItem.setRaw(workingFields[field], value);
                                        count[field]++;
                                        sum[field] += value;
                                    }
                                });
                                if (groupOriginals_1) {
                                    newDataItem.set("originals", [dataItem]);
                                }
                                if (groupCallback_1 && prevNewDataItem) {
                                    groupCallback_1(prevNewDataItem, interval);
                                }
                                prevNewDataItem = newDataItem;
                            }
                            else {
                                each$1(fields_1, function (field) {
                                    var groupKey = groupFieldValues[field];
                                    var value = dataItem.get(field);
                                    if (value !== undefined) {
                                        var currentValue = newDataItem.get(field);
                                        switch (groupKey) {
                                            case "close":
                                                newDataItem.setRaw(field, value);
                                                break;
                                            case "sum":
                                                newDataItem.setRaw(field, currentValue + value);
                                                break;
                                            case "open":
                                                break;
                                            case "low":
                                                if (value < currentValue) {
                                                    newDataItem.setRaw(field, value);
                                                }
                                                break;
                                            case "high":
                                                if (value > currentValue) {
                                                    newDataItem.setRaw(field, value);
                                                }
                                                break;
                                            case "average":
                                                count[field]++;
                                                sum[field] += value;
                                                var average = sum[field] / count[field];
                                                newDataItem.setRaw(field, average);
                                                break;
                                            case "extreme":
                                                if (Math.abs(value) > Math.abs(currentValue)) {
                                                    newDataItem.setRaw(field, value);
                                                }
                                                break;
                                        }
                                        newDataItem.setRaw(workingFields[field], newDataItem.get(field));
                                        var dataContext_1 = copy$1(dataItem.dataContext);
                                        dataContext_1[key_1] = roundedTime;
                                        newDataItem.dataContext = dataContext_1;
                                    }
                                });
                                if (groupOriginals_1) {
                                    newDataItem.get("originals").push(dataItem);
                                }
                            }
                            previousTime = roundedTime;
                        });
                        if (groupCallback_1 && prevNewDataItem) {
                            groupCallback_1(prevNewDataItem, interval);
                        }
                    });
                    if (series._dataSetId) {
                        series.setDataSet(series._dataSetId);
                    }
                    this.markDirtySize();
                }
            }
        });
        Object.defineProperty(DateAxis.prototype, "_clearDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._clearDirty.call(this);
                this._groupingCalculated = false;
                this._dataGrouped = false;
            }
        });
        /**
         * Returns a time interval axis would group data to for a specified duration.
         *
         * @since 5.2.1
         */
        Object.defineProperty(DateAxis.prototype, "getGroupInterval", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (duration) {
                var baseInterval = this.get("baseInterval");
                var groupInterval = chooseInterval(0, duration, this.get("groupCount", Infinity), this.get("groupIntervals"));
                if (getIntervalDuration(groupInterval) < getIntervalDuration(baseInterval)) {
                    groupInterval = __assign({}, baseInterval);
                }
                return groupInterval;
            }
        });
        /**
         * Return `max` of a specified time interval.
         *
         * Will work only if the axis was grouped to this interval at least once.
         *
         * @since 5.2.1
         * @param   interval  Interval
         * @return            Max
         */
        Object.defineProperty(DateAxis.prototype, "getIntervalMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (interval) {
                return this._intervalMax[interval.timeUnit + interval.count];
            }
        });
        /**
         * Return `min` of a specified time interval.
         *
         * Will work only if the axis was grouped to this interval at least once.
         *
         * @since 5.2.1
         * @param   interval  Interval
         * @return            Min
         */
        Object.defineProperty(DateAxis.prototype, "getIntervalMin", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (interval) {
                return this._intervalMin[interval.timeUnit + interval.count];
            }
        });
        Object.defineProperty(DateAxis.prototype, "_handleRangeChange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._handleRangeChange.call(this);
                var selectionMin = this.getPrivate("selectionMin");
                var selectionMax = this.getPrivate("selectionMax");
                if (isNumber(selectionMin) && isNumber(selectionMax)) {
                    if (this.get("groupData") && !this._groupingCalculated) {
                        this._groupingCalculated = true;
                        var modifiedDifference = (selectionMax - selectionMin) + (this.get("startLocation", 0) + (1 - this.get("endLocation", 1)) * this.baseDuration());
                        var groupInterval = this.get("groupInterval");
                        if (!groupInterval) {
                            groupInterval = this.getGroupInterval(modifiedDifference);
                        }
                        var current = this.getPrivate("groupInterval");
                        if (groupInterval && (!current || (current.timeUnit !== groupInterval.timeUnit || current.count !== groupInterval.count) || this._seriesDataGrouped)) {
                            this._seriesDataGrouped = false;
                            this.setPrivateRaw("groupInterval", groupInterval);
                            this._setBaseInterval(groupInterval);
                            if (groupInterval) {
                                var newId_1 = groupInterval.timeUnit + groupInterval.count;
                                each$1(this.series, function (series) {
                                    if (series.get("baseAxis") === _this) {
                                        series.setDataSet(newId_1);
                                    }
                                });
                                this.markDirtyExtremes();
                            }
                        }
                    }
                    each$1(this.series, function (series) {
                        if (series.get("baseAxis") === _this) {
                            var fieldName_1 = (_this.getPrivate("name") + _this.get("renderer").getPrivate("letter"));
                            var start = getSortedIndex(series.dataItems, function (dataItem) {
                                return compare(dataItem.get(fieldName_1), selectionMin);
                            });
                            var startIndex = start.index;
                            if (startIndex > 0) {
                                startIndex -= 1;
                            }
                            var end = getSortedIndex(series.dataItems, function (dataItem) {
                                return compare(dataItem.get(fieldName_1), selectionMax);
                            });
                            var endIndex = end.index;
                            var endIndex2 = endIndex;
                            if (endIndex2 > 0) {
                                endIndex2--;
                            }
                            var firstDataItem = series.dataItems[startIndex];
                            var lastDataItem = series.dataItems[endIndex2];
                            var lastDate = void 0;
                            var firstDate = void 0;
                            if (firstDataItem) {
                                firstDate = firstDataItem.get(fieldName_1);
                            }
                            if (lastDataItem) {
                                lastDate = lastDataItem.get(fieldName_1);
                            }
                            var outOfSelection = false;
                            if (lastDate != null && firstDate != null) {
                                if (lastDate < selectionMin || firstDate > selectionMax) {
                                    outOfSelection = true;
                                }
                            }
                            series.setPrivate("outOfSelection", outOfSelection);
                            series.setPrivate("startIndex", startIndex);
                            series.setPrivate("endIndex", endIndex);
                        }
                    });
                }
            }
        });
        Object.defineProperty(DateAxis.prototype, "_adjustMinMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (min, max, gridCount, _strictMode) {
                return { min: min, max: max, step: (max - min) / gridCount };
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(DateAxis.prototype, "intervalDuration", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._intervalDuration;
            }
        });
        Object.defineProperty(DateAxis.prototype, "_saveMinMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (min, max) {
                var groupInterval = this.getPrivate("groupInterval");
                if (!groupInterval) {
                    groupInterval = this.get("baseInterval");
                }
                var id = groupInterval.timeUnit + groupInterval.count;
                this._intervalMin[id] = min;
                this._intervalMax[id] = max;
            }
        });
        Object.defineProperty(DateAxis.prototype, "_prepareAxisItems", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var min = this.getPrivate("min");
                var max = this.getPrivate("max");
                if (isNumber(min) && isNumber(max)) {
                    var selectionMin = this.getPrivate("selectionMin");
                    var selectionMax = this.getPrivate("selectionMax");
                    var renderer = this.get("renderer");
                    var baseInterval = this.getPrivate("baseInterval");
                    var value = selectionMin;
                    var i = 0;
                    var intervals = this.get("gridIntervals");
                    var gridInterval = chooseInterval(0, selectionMax - selectionMin, renderer.gridCount(), intervals);
                    if (getIntervalDuration(gridInterval) < this.baseDuration()) {
                        gridInterval = __assign({}, baseInterval);
                    }
                    var intervalDuration = getIntervalDuration(gridInterval);
                    this._intervalDuration = intervalDuration;
                    var nextGridUnit = getNextUnit(gridInterval.timeUnit);
                    value = round(new Date(selectionMin - intervalDuration), gridInterval.timeUnit, gridInterval.count, this._root.locale.firstDayOfWeek, this._root.utc, new Date(min), this._root.timezone).getTime();
                    var previousValue = value - intervalDuration;
                    var format = void 0;
                    var formats = this.get("dateFormats");
                    this.setPrivateRaw("gridInterval", gridInterval);
                    while (value < selectionMax + intervalDuration) {
                        var dataItem = void 0;
                        if (this.dataItems.length < i + 1) {
                            dataItem = new DataItem(this, undefined, {});
                            this._dataItems.push(dataItem);
                            this.processDataItem(dataItem);
                        }
                        else {
                            dataItem = this.dataItems[i];
                        }
                        this._createAssets(dataItem, []);
                        if (dataItem.isHidden()) {
                            dataItem.show();
                        }
                        dataItem.setRaw("value", value);
                        dataItem.setRaw("endValue", add(new Date(value), gridInterval.timeUnit, gridInterval.count, this._root.utc).getTime()); //$time.round(new Date(value + intervalDuration * 1.1), gridInterval.timeUnit, gridInterval.count).getTime());
                        var date = new Date(value);
                        format = formats[gridInterval.timeUnit];
                        if (nextGridUnit && this.get("markUnitChange") && isNumber(previousValue)) {
                            if (gridInterval.timeUnit != "year") {
                                if (checkChange(value, previousValue, nextGridUnit, this._root.utc, this._root.timezone)) {
                                    format = this.get("periodChangeDateFormats")[gridInterval.timeUnit];
                                }
                            }
                        }
                        var label = dataItem.get("label");
                        if (label) {
                            label.set("text", this._root.dateFormatter.format(date, format));
                        }
                        this._prepareDataItem(dataItem, gridInterval.count);
                        previousValue = value;
                        value = add(new Date(value), gridInterval.timeUnit, gridInterval.count, this._root.utc).getTime();
                        i++;
                    }
                    for (var j = i; j < this.dataItems.length; j++) {
                        this.dataItems[j].hide();
                    }
                    each$1(this.series, function (series) {
                        if (series.inited) {
                            series._markDirtyAxes();
                        }
                    });
                }
                this._updateGhost();
            }
        });
        Object.defineProperty(DateAxis.prototype, "_fixMin", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (min) {
                var baseInterval = this.getPrivate("baseInterval");
                var startTime = round(new Date(min), baseInterval.timeUnit, baseInterval.count, this._root.locale.firstDayOfWeek, this._root.utc, undefined, this._root.timezone).getTime();
                var endTime = add(new Date(startTime), baseInterval.timeUnit, baseInterval.count, this._root.utc).getTime();
                return startTime + (endTime - startTime) * this.get("startLocation", 0);
            }
        });
        /* goes up to the year
        protected _getFormat(timeUnit: TimeUnit, value: number, previousValue: number) {
            const formats = this.get("dateFormats")!;
            let format = formats[timeUnit];

            if (this.get("markUnitChange")) {
                let nextGridUnit = $time.getNextUnit(timeUnit);

                while (nextGridUnit != undefined) {

                    if (nextGridUnit) {
                        if (timeUnit != "year") {
                            if ($time.checkChange(value, previousValue, nextGridUnit, this._root.utc, this._root.timezone)) {
                                format = this.get("periodChangeDateFormats")![timeUnit];
                                timeUnit = nextGridUnit;
                                nextGridUnit = $time.getNextUnit(nextGridUnit);
                            }
                            else {
                                nextGridUnit = undefined;
                            }
                        }
                        else {
                            nextGridUnit = undefined;
                        }
                    }
                }
            }
            return format;
        }
        */
        Object.defineProperty(DateAxis.prototype, "_fixMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (max) {
                var baseInterval = this.getPrivate("baseInterval");
                var startTime = round(new Date(max), baseInterval.timeUnit, baseInterval.count, this._root.locale.firstDayOfWeek, this._root.utc, undefined, this._root.timezone).getTime();
                var endTime = add(new Date(startTime), baseInterval.timeUnit, baseInterval.count, this._root.utc).getTime();
                return startTime + (endTime - startTime) * this.get("endLocation", 1);
            }
        });
        Object.defineProperty(DateAxis.prototype, "_updateDates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_date) {
            }
        });
        /**
         * Returns a duration of currently active `baseInterval` in milliseconds.
         *
         * @return Duration
         */
        Object.defineProperty(DateAxis.prototype, "baseDuration", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._baseDuration;
                //return $time.getIntervalDuration(this.getPrivate("baseInterval"));
            }
        });
        /**
         * Returns a duration of user-defined `baseInterval` in milliseconds.
         *
         * @return Duration
         */
        Object.defineProperty(DateAxis.prototype, "baseMainDuration", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return getIntervalDuration(this.get("baseInterval"));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(DateAxis.prototype, "processSeriesDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, fields) {
                var _this = this;
                var baseInterval = this.getPrivate("baseInterval");
                if (!dataItem.open) {
                    dataItem.open = {};
                }
                if (!dataItem.close) {
                    dataItem.close = {};
                }
                each$1(fields, function (field) {
                    var value = dataItem.get(field);
                    if (isNumber(value)) {
                        var startTime = dataItem.open[field];
                        var endTime = dataItem.close[field];
                        // this is done to save cpu, as rounding is quite expensive, especially with timezone set. 
                        // if value is between prev start and end, it means it didn't change, all is fine.
                        if (value >= startTime && value <= endTime) ;
                        else {
                            startTime = round(new Date(value), baseInterval.timeUnit, baseInterval.count, _this._root.locale.firstDayOfWeek, _this._root.utc, undefined, _this._root.timezone).getTime();
                            endTime = add(new Date(startTime), baseInterval.timeUnit, baseInterval.count, _this._root.utc).getTime();
                            dataItem.open[field] = startTime;
                            dataItem.close[field] = endTime;
                        }
                        _this._updateDates(startTime);
                    }
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(DateAxis.prototype, "getDataItemPositionX", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, cellLocation, axisLocation) {
                var openValue;
                var closeValue;
                if (dataItem.open && dataItem.close) {
                    openValue = dataItem.open[field];
                    closeValue = dataItem.close[field];
                }
                else {
                    openValue = dataItem.get(field);
                    closeValue = openValue;
                }
                var value = openValue + (closeValue - openValue) * cellLocation;
                value = this._baseValue + (value - this._baseValue) * axisLocation;
                return this.valueToPosition(value);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(DateAxis.prototype, "getDataItemCoordinateX", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, cellLocation, axisLocation) {
                return this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, cellLocation, axisLocation));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(DateAxis.prototype, "getDataItemPositionY", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, cellLocation, axisLocation) {
                var openValue;
                var closeValue;
                if (dataItem.open && dataItem.close) {
                    openValue = dataItem.open[field];
                    closeValue = dataItem.close[field];
                }
                else {
                    openValue = dataItem.get(field);
                    closeValue = openValue;
                }
                var value = openValue + (closeValue - openValue) * cellLocation;
                value = this._baseValue + (value - this._baseValue) * axisLocation;
                return this.valueToPosition(value);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(DateAxis.prototype, "getDataItemCoordinateY", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, cellLocation, axisLocation) {
                return this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, cellLocation, axisLocation));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(DateAxis.prototype, "roundAxisPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position, location) {
                var value = this.positionToValue(position);
                var baseInterval = this.getPrivate("baseInterval");
                if (!isNaN$1(value)) {
                    value = round(new Date(value), baseInterval.timeUnit, baseInterval.count, this._root.locale.firstDayOfWeek, this._root.utc, new Date(this.getPrivate("min", 0)), this._root.timezone).getTime();
                    var endValue = value;
                    if (location > 0) {
                        endValue = add(new Date(value), baseInterval.timeUnit, baseInterval.count, this._root.utc).getTime();
                    }
                    return this.valueToPosition(value + (endValue - value) * location);
                }
                return NaN;
            }
        });
        /**
         * Returns text to be used in an axis tooltip for specific relative position.
         *
         * @param   position  Position
         * @return            Tooltip text
         */
        Object.defineProperty(DateAxis.prototype, "getTooltipText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                //@todo number formatter + tag
                if (this.getPrivate("min") != null) {
                    var format = this.get("tooltipDateFormats")[this.getPrivate("baseInterval").timeUnit];
                    var date = new Date(this.positionToValue(position));
                    var baseInterval = this.getPrivate("baseInterval");
                    var duration = getDateIntervalDuration(baseInterval, date, this._root.locale.firstDayOfWeek, this._root.utc, this._root.timezone);
                    return this._root.dateFormatter.format(new Date(this.positionToValue(position) + this.get("tooltipIntervalOffset", -this.get("tooltipLocation", 0.5)) * duration), this.get("tooltipDateFormat", format));
                }
                return "";
            }
        });
        /**
         * Returns a data item from series that is closest to the `position`.
         *
         * @param   series    Series
         * @param   position  Relative position
         * @return            Data item
         */
        Object.defineProperty(DateAxis.prototype, "getSeriesItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (series, position) {
                var fieldName = (this.getPrivate("name") + this.get("renderer").getPrivate("letter"));
                var value = this.positionToValue(position);
                var result = getSortedIndex(series.dataItems, function (dataItem) {
                    var diValue = 0;
                    if (dataItem.open) {
                        diValue = dataItem.open[fieldName];
                    }
                    return compare(diValue, value);
                });
                if (series.get("snapTooltip")) {
                    var first = series.dataItems[result.index - 1];
                    var second = series.dataItems[result.index];
                    if (first && second) {
                        if (first.open && second.close) {
                            var open_1 = first.open[fieldName];
                            var close_1 = second.close[fieldName];
                            if (Math.abs(value - open_1) > Math.abs(value - close_1)) {
                                return second;
                            }
                        }
                    }
                    return first;
                }
                else {
                    // @todo check if is in range
                    var dataItem = series.dataItems[result.index - 1];
                    if (dataItem) {
                        if (dataItem.open && dataItem.close) {
                            var open_2 = dataItem.open[fieldName];
                            var close_2 = dataItem.close[fieldName];
                            if (value >= open_2 && value <= close_2) {
                                return dataItem;
                            }
                        }
                    }
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(DateAxis.prototype, "shouldGap", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, nextItem, autoGapCount, fieldName) {
                var value1 = dataItem.get(fieldName);
                var value2 = nextItem.get(fieldName);
                if (value2 - value1 > this.baseDuration() * autoGapCount) {
                    return true;
                }
                return false;
            }
        });
        /**
         * Zooms the axis to specific `start` and `end` dates.
         *
         * Optional `duration` specifies duration of zoom animation in milliseconds.
         *
         * @param  start     Start Date
         * @param  end       End Date
         * @param  duration  Duration in milliseconds
         */
        Object.defineProperty(DateAxis.prototype, "zoomToDates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (start, end, duration) {
                this.zoomToValues(start.getTime(), end.getTime(), duration);
            }
        });
        /**
         * Returns a `Date` object corresponding to specific position within plot
         * area.
         *
         * @param   position  Pposition
         * @return            Date
         */
        Object.defineProperty(DateAxis.prototype, "positionToDate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                return new Date(this.positionToValue(position));
            }
        });
        /**
         * Returns a relative position within plot area that corresponds to specific
         * date.
         *
         * @param   date  Date
         * @return        Position
         */
        Object.defineProperty(DateAxis.prototype, "dateToPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (date) {
                return this.valueToPosition(date.getTime());
            }
        });
        Object.defineProperty(DateAxis, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "DateAxis"
        });
        Object.defineProperty(DateAxis, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ValueAxis.classNames.concat([DateAxis.className])
        });
        return DateAxis;
    }(ValueAxis));

    /**
     * A version of a [[DateAxis]] which removes intervals that don't have any data
     * items in them.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/gapless-date-axis/} for more info
     * @important
     */
    var GaplessDateAxis = /** @class */ (function (_super) {
        __extends(GaplessDateAxis, _super);
        function GaplessDateAxis() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_frequency", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_dates", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            return _this;
        }
        Object.defineProperty(GaplessDateAxis.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.valueFields.push("date");
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(GaplessDateAxis.prototype, "_updateDates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (date) {
                var dates = this._dates;
                var result = getSortedIndex(dates, function (x) { return compare(x, date); });
                if (!result.found) {
                    insertIndex(dates, result.index, date);
                }
            }
        });
        Object.defineProperty(GaplessDateAxis.prototype, "_updateAllDates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this._dates.length = 0;
                each$1(this.series, function (series) {
                    var field = "valueX";
                    if (series.get("yAxis") == _this) {
                        field = "valueY";
                    }
                    each$1(series.dataItems, function (dataItem) {
                        var value = dataItem.get(field);
                        if (isNumber(value)) {
                            if (dataItem.open) {
                                _this._updateDates(dataItem.open[field]);
                            }
                        }
                    });
                });
            }
        });
        /**
         * Convers value to a relative position on axis.
         *
         * @param   value  Value
         * @return         Relative position
         */
        Object.defineProperty(GaplessDateAxis.prototype, "valueToPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var dates = this._dates;
                var len = dates.length;
                var result = getSortedIndex(dates, function (x) { return compare(x, value); });
                var index = result.index;
                if (result.found) {
                    return index / len;
                }
                else {
                    if (index > 0) {
                        index -= 1;
                    }
                    var itemValue = dates[index];
                    var d = 0;
                    if (itemValue > value) {
                        d = itemValue - value;
                    }
                    else {
                        d = value - itemValue;
                    }
                    return index / len + d / this.baseDuration() / len;
                }
            }
        });
        /**
         * Converts numeric value from axis scale to index.
         *
         * @param  value  Value
         * @return        Index
         */
        Object.defineProperty(GaplessDateAxis.prototype, "valueToIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var dates = this._dates;
                var result = getSortedIndex(dates, function (x) { return compare(x, value); });
                var index = result.index;
                if (result.found) {
                    return index;
                }
                else {
                    if (index > 0) {
                        index -= 1;
                    }
                    return index;
                }
            }
        });
        /**
         * Converts a relative position to a corresponding numeric value from axis
         * scale.
         *
         * @param   position  Relative position
         * @return            Value
         */
        Object.defineProperty(GaplessDateAxis.prototype, "positionToValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                var len = this._dates.length;
                var index = position * len;
                var findex = Math.floor(index);
                if (findex < 0) {
                    findex = 0;
                }
                if (findex > len - 1) {
                    findex = len - 1;
                }
                return this._dates[findex] + (index - findex) * this.baseDuration();
            }
        });
        Object.defineProperty(GaplessDateAxis.prototype, "_fixZoomFactor", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setPrivateRaw("maxZoomFactor", this._dates.length);
            }
        });
        Object.defineProperty(GaplessDateAxis.prototype, "_prepareAxisItems", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var startTime = this.getPrivate("selectionMin", 0);
                var endTime = this.getPrivate("selectionMax", 0);
                if (isNumber(startTime) && isNumber(endTime)) {
                    if (this._seriesValuesDirty) {
                        this._seriesValuesDirty = false;
                        this._updateAllDates();
                    }
                    var dates_1 = this._dates;
                    var renderer = this.get("renderer");
                    var len = dates_1.length;
                    var startIndex_1 = this.valueToIndex(startTime);
                    if (startIndex_1 > 0) {
                        startIndex_1--;
                    }
                    var endIndex_1 = this.valueToIndex(endTime);
                    if (endIndex_1 < len - 1) {
                        endIndex_1++;
                    }
                    var maxCount = renderer.axisLength() / Math.max(renderer.get("minGridDistance"), 1 / Number.MAX_SAFE_INTEGER);
                    var frequency = Math.min(len, Math.ceil((endIndex_1 - startIndex_1) / maxCount));
                    frequency = Math.max(1, frequency);
                    startIndex_1 = Math.floor(startIndex_1 / frequency) * frequency;
                    this._frequency = frequency;
                    for (var j = 0, length_1 = this.dataItems.length; j < length_1; j++) {
                        this.dataItems[j].hide();
                    }
                    var realDuration = (endTime - startTime) - ((endTime - startTime) / this.baseDuration() - (endIndex_1 - startIndex_1)) * this.baseDuration();
                    // if all items are on axis
                    var gridInterval_1 = chooseInterval(0, realDuration, maxCount, this.get("gridIntervals"));
                    var baseInterval = this.getPrivate("baseInterval");
                    var intervalDuration_1 = getIntervalDuration(gridInterval_1);
                    if (intervalDuration_1 < this.baseDuration()) {
                        gridInterval_1 = __assign({}, baseInterval);
                        intervalDuration_1 = getIntervalDuration(gridInterval_1);
                    }
                    this._intervalDuration = intervalDuration_1;
                    var formats_1 = this.get("dateFormats");
                    var selectedItems_1 = [];
                    var firstDate = new Date();
                    if (this._dates[0]) {
                        firstDate = new Date(this._dates[0]);
                    }
                    var startDate = round(new Date(this.getPrivate("min", 0)), gridInterval_1.timeUnit, gridInterval_1.count, this._root.locale.firstDayOfWeek, this._root.utc, firstDate, this._root.timezone);
                    var value = add(startDate, gridInterval_1.timeUnit, -1, this._root.utc).getTime();
                    var selectionMax = this.getPrivate("selectionMax");
                    var previousPosition = -Infinity;
                    var minDifference = (this.get("end", 1) - this.get("start", 0)) / maxCount;
                    while (value <= selectionMax) {
                        var index = this.valueToIndex(value);
                        var realValue = this._dates[index];
                        if (realValue < value) {
                            for (var i = index, len_1 = this._dates.length; i < len_1; i++) {
                                var realValue_1 = this._dates[i];
                                if (realValue_1 >= value) {
                                    index = i;
                                    break;
                                }
                            }
                        }
                        var position = this.valueToPosition(realValue);
                        if (position - previousPosition >= minDifference * 0.95) {
                            move(selectedItems_1, index);
                            previousPosition = position;
                        }
                        value = add(new Date(value), gridInterval_1.timeUnit, gridInterval_1.count, this._root.utc).getTime();
                    }
                    if (selectedItems_1.length > 0) {
                        var i_1 = 0;
                        var previousValue_1 = -Infinity;
                        var nextGridUnit_1 = getNextUnit(gridInterval_1.timeUnit);
                        each$1(selectedItems_1, function (index) {
                            var dataItem;
                            if (_this.dataItems.length < i_1 + 1) {
                                dataItem = new DataItem(_this, undefined, {});
                                _this._dataItems.push(dataItem);
                                _this.processDataItem(dataItem);
                            }
                            else {
                                dataItem = _this.dataItems[i_1];
                            }
                            var value = dates_1[index];
                            var date = new Date(value);
                            var endValue = value;
                            if (i_1 < selectedItems_1.length - 1) {
                                endValue = dates_1[selectedItems_1[i_1 + 1]];
                            }
                            else {
                                endValue += intervalDuration_1;
                            }
                            dataItem.setRaw("value", value);
                            dataItem.setRaw("endValue", endValue);
                            dataItem.setRaw("index", i_1);
                            if (index > startIndex_1 - 100 && index < endIndex_1 + 100) {
                                var format = formats_1[gridInterval_1.timeUnit];
                                format = formats_1[gridInterval_1.timeUnit];
                                if (nextGridUnit_1 && _this.get("markUnitChange") && isNumber(previousValue_1)) {
                                    if (gridInterval_1.timeUnit != "year") {
                                        if (checkChange(value, previousValue_1, nextGridUnit_1, _this._root.utc, _this._root.timezone)) {
                                            format = _this.get("periodChangeDateFormats")[gridInterval_1.timeUnit];
                                        }
                                    }
                                }
                                _this._createAssets(dataItem, []);
                                var label = dataItem.get("label");
                                if (label) {
                                    label.set("text", _this._root.dateFormatter.format(date, format));
                                }
                                if (dataItem.isHidden()) {
                                    dataItem.show();
                                }
                                _this._prepareDataItem(dataItem, gridInterval_1.count);
                            }
                            i_1++;
                            previousValue_1 = value;
                        });
                    }
                    each$1(this.series, function (series) {
                        if (series.inited) {
                            series._markDirtyAxes();
                        }
                    });
                }
                this._updateGhost();
            }
        });
        Object.defineProperty(GaplessDateAxis, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "GaplessDateAxis"
        });
        Object.defineProperty(GaplessDateAxis, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: DateAxis.classNames.concat([GaplessDateAxis.className])
        });
        return GaplessDateAxis;
    }(DateAxis));

    /**
     * Creates a duration axis.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/duration-axis/} for more info
     * @important
     */
    var DurationAxis = /** @class */ (function (_super) {
        __extends(DurationAxis, _super);
        function DurationAxis() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_dataGrouped", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_groupingCalculated", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_intervalDuration", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            return _this;
        }
        Object.defineProperty(DurationAxis.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["axis"]);
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(DurationAxis.prototype, "_adjustMinMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (min, max, gridCount, strictMode) {
                var e_1, _a;
                var minMaxStep;
                var durationFormatter = this.getDurationFormatter();
                var baseUnit = this.get("baseUnit");
                // we don't allow to go to smaller units, setting so to avoid invalidation
                this.setRaw("maxPrecision", 0);
                if (baseUnit == "millisecond" || baseUnit == "second" || baseUnit == "minute" || baseUnit == "hour") {
                    // will fail if 0
                    if (gridCount <= 1) {
                        gridCount = 1;
                    }
                    gridCount = Math.round(gridCount);
                    //let initialMin: number = min;
                    //let initialMax: number = max;
                    var difference = max - min;
                    // in case min and max is the same, use max
                    if (difference === 0) {
                        difference = Math.abs(max);
                    }
                    var step = difference / gridCount;
                    var divisors = [60, 30, 20, 15, 10, 2, 1];
                    var realDivisor = 1;
                    if (baseUnit == "hour") {
                        divisors = [24, 12, 6, 4, 2, 1];
                    }
                    try {
                        for (var divisors_1 = __values(divisors), divisors_1_1 = divisors_1.next(); !divisors_1_1.done; divisors_1_1 = divisors_1.next()) {
                            var divisor = divisors_1_1.value;
                            if (difference / divisor > gridCount) {
                                realDivisor = divisor;
                                break;
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (divisors_1_1 && !divisors_1_1.done && (_a = divisors_1.return)) _a.call(divisors_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    var count = Math.ceil(((max - min) / realDivisor) / gridCount);
                    var exponent = Math.log(Math.abs(count)) * Math.LOG10E;
                    var power = Math.pow(10, Math.floor(exponent)) / 10;
                    var reducedCount = count / power;
                    // find closest to divisor
                    var closest$1 = closest(divisors, reducedCount);
                    count = closest$1 * power;
                    step = realDivisor * count;
                    min = Math.floor(min / step) * step;
                    max = Math.ceil(max / step) * step;
                    /*
                    causese SO with seconds
                    if (strictMode) {
                        min -= step;
                        if (min < 0 && initialMin >= 0) {
                            min = 0;
                        }
                        max += step;
        
                        if (max > 0 && initialMax <= 0) {
                            max = 0;
                        }
                    }*/
                    minMaxStep = { min: min, max: max, step: step };
                }
                else {
                    minMaxStep = _super.prototype._adjustMinMax.call(this, min, max, gridCount, strictMode);
                }
                // choose duration formatter based on step
                this.setPrivate("durationFormat", durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, baseUnit));
                return minMaxStep;
            }
        });
        Object.defineProperty(DurationAxis.prototype, "_formatText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var formatter = this.getDurationFormatter();
                return formatter.format(value, this.getPrivate("durationFormat"), this.get("baseUnit"));
            }
        });
        /**
         * Returns text to be used in an axis tooltip for specific relative position.
         *
         * @param   position  Position
         * @return            Tooltip text
         */
        Object.defineProperty(DurationAxis.prototype, "getTooltipText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                var formatter = this.getDurationFormatter();
                var extraDecimals = this.get("extraTooltipPrecision", 0);
                var decimals = this.getPrivate("stepDecimalPlaces", 0) + extraDecimals;
                var value = round$1(this.positionToValue(position), decimals);
                return formatter.format(value, this.getPrivate("durationFormat"), this.get("baseUnit"));
            }
        });
        Object.defineProperty(DurationAxis, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "DurationAxis"
        });
        Object.defineProperty(DurationAxis, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ValueAxis.classNames.concat([DurationAxis.className])
        });
        return DurationAxis;
    }(ValueAxis));

    /**
     * Draws a bullet on an axis.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Axis_bullets} for more info
     */
    var AxisBullet = /** @class */ (function (_super) {
        __extends(AxisBullet, _super);
        function AxisBullet() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * Target axis object.
             */
            Object.defineProperty(_this, "axis", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(AxisBullet.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                var sprite = this.get("sprite");
                if (this.isDirty("sprite")) {
                    if (sprite) {
                        sprite.setAll({ position: "absolute", role: "figure" });
                        this._disposers.push(sprite);
                    }
                }
                if (this.isDirty("location")) {
                    var dataItem = sprite.dataItem;
                    if (this.axis && sprite && dataItem) {
                        this.axis._prepareDataItem(dataItem);
                    }
                }
            }
        });
        Object.defineProperty(AxisBullet, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "AxisBullet"
        });
        Object.defineProperty(AxisBullet, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Entity.classNames.concat([AxisBullet.className])
        });
        return AxisBullet;
    }(Entity));

    /**
     * Draws an axis label.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Labels} for more info
     * @important
     */
    var AxisLabel = /** @class */ (function (_super) {
        __extends(AxisLabel, _super);
        function AxisLabel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_tickPoints", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            return _this;
        }
        Object.defineProperty(AxisLabel, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "AxisLabel"
        });
        Object.defineProperty(AxisLabel, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Label.classNames.concat([AxisLabel.className])
        });
        return AxisLabel;
    }(Label));

    /**
     * Draws a label on a circular axis.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Labels} for more info
     */
    var AxisLabelRadial = /** @class */ (function (_super) {
        __extends(AxisLabelRadial, _super);
        function AxisLabelRadial() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_tickPoints", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            return _this;
        }
        Object.defineProperty(AxisLabelRadial, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "AxisLabelRadial"
        });
        Object.defineProperty(AxisLabelRadial, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: RadialLabel.classNames.concat([AxisLabelRadial.className])
        });
        return AxisLabelRadial;
    }(RadialLabel));

    /**
     * Draws an axis tick.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Ticks} for more info
     * @important
     */
    var AxisTick = /** @class */ (function (_super) {
        __extends(AxisTick, _super);
        function AxisTick() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_tickPoints", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            return _this;
        }
        Object.defineProperty(AxisTick, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "AxisTick"
        });
        Object.defineProperty(AxisTick, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Tick.classNames.concat([AxisTick.className])
        });
        return AxisTick;
    }(Tick));

    /**
     * Base class for an axis renderer.
     *
     * Should not be used on its own.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info
     */
    var AxisRenderer = /** @class */ (function (_super) {
        __extends(AxisRenderer, _super);
        function AxisRenderer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // save for quick access
            Object.defineProperty(_this, "_axisLength", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 100
            });
            Object.defineProperty(_this, "_start", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_end", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_inversed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_minSize", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            /**
             * Chart the renderer is used in.
             */
            Object.defineProperty(_this, "chart", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_lc", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_ls", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_thumbDownPoint", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_downStart", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_downEnd", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * A list of ticks in the axis.
             *
             * `ticks.template` can be used to configure ticks.
             *
             * @default new ListTemplate<AxisTick>
             */
            Object.defineProperty(_this, "ticks", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return AxisTick._new(_this._root, {
                    themeTags: mergeTags(_this.ticks.template.get("themeTags", []), _this.get("themeTags", []))
                }, [_this.ticks.template]); })
            });
            /**
             * A list of grid elements in the axis.
             *
             * `grid.template` can be used to configure grid.
             *
             * @default new ListTemplate<Grid>
             */
            Object.defineProperty(_this, "grid", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return Grid._new(_this._root, {
                    themeTags: mergeTags(_this.grid.template.get("themeTags", []), _this.get("themeTags", []))
                }, [_this.grid.template]); })
            });
            /**
             * A list of fills in the axis.
             *
             * `axisFills.template` can be used to configure axis fills.
             *
             * @default new ListTemplate<Graphics>
             */
            Object.defineProperty(_this, "axisFills", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return Graphics._new(_this._root, {
                    themeTags: mergeTags(_this.axisFills.template.get("themeTags", ["axis", "fill"]), _this.get("themeTags", []))
                }, [_this.axisFills.template]); })
            });
            /**
             * A list of labels in the axis.
             *
             * `labels.template` can be used to configure axis labels.
             *
             * @default new ListTemplate<AxisLabel>
             */
            Object.defineProperty(_this, "labels", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return AxisLabel._new(_this._root, {
                    themeTags: mergeTags(_this.labels.template.get("themeTags", []), _this.get("themeTags", []))
                }, [_this.labels.template]); })
            });
            /**
             * An [[Axis]] renderer is for.
             */
            Object.defineProperty(_this, "axis", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "thumb", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(AxisRenderer.prototype, "makeTick", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, themeTags) {
                var tick = this.ticks.make();
                tick._setDataItem(dataItem);
                dataItem.setRaw("tick", tick);
                tick.set("themeTags", mergeTags(tick.get("themeTags"), themeTags));
                this.axis.labelsContainer.children.push(tick);
                this.ticks.push(tick);
                return tick;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRenderer.prototype, "makeGrid", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, themeTags) {
                var grid = this.grid.make();
                grid._setDataItem(dataItem);
                dataItem.setRaw("grid", grid);
                grid.set("themeTags", mergeTags(grid.get("themeTags"), themeTags));
                this.axis.gridContainer.children.push(grid);
                this.grid.push(grid);
                return grid;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRenderer.prototype, "makeAxisFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, themeTags) {
                var axisFill = this.axisFills.make();
                axisFill._setDataItem(dataItem);
                axisFill.set("themeTags", mergeTags(axisFill.get("themeTags"), themeTags));
                this.axis.gridContainer.children.push(axisFill);
                dataItem.setRaw("axisFill", axisFill);
                this.axisFills.push(axisFill);
                return axisFill;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRenderer.prototype, "makeLabel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, themeTags) {
                var label = this.labels.make();
                label.set("themeTags", mergeTags(label.get("themeTags"), themeTags));
                this.axis.labelsContainer.children.moveValue(label, 0);
                label._setDataItem(dataItem);
                dataItem.setRaw("label", label);
                this.labels.push(label);
                return label;
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "axisLength", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return 0;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRenderer.prototype, "gridCount", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.axisLength() / this.get("minGridDistance", 50);
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "_updatePositions", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._afterNew.call(this);
                this.set("isMeasured", false);
                var thumb = this.thumb;
                if (thumb) {
                    this._disposers.push(thumb.events.on("pointerdown", function (event) {
                        _this._handleThumbDown(event.originalEvent);
                    }));
                    this._disposers.push(thumb.events.on("globalpointerup", function (event) {
                        _this._handleThumbUp(event.originalEvent);
                    }));
                    this._disposers.push(thumb.events.on("globalpointermove", function (event) {
                        _this._handleThumbMove(event.originalEvent);
                    }));
                }
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this.isDirty("pan")) {
                    var thumb = this.thumb;
                    if (thumb) {
                        var labelsContainer = this.axis.labelsContainer;
                        var pan = this.get("pan");
                        if (pan == "zoom") {
                            labelsContainer.children.push(thumb);
                        }
                        else if (pan == "none") {
                            labelsContainer.children.removeValue(thumb);
                        }
                    }
                }
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "_handleThumbDown", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (event) {
                this._thumbDownPoint = this.toLocal(this._root.documentPointToRoot({ x: event.clientX, y: event.clientY }));
                var axis = this.axis;
                this._downStart = axis.get("start");
                this._downEnd = axis.get("end");
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "_handleThumbUp", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_event) {
                this._thumbDownPoint = undefined;
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "_handleThumbMove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (event) {
                var downPoint = this._thumbDownPoint;
                if (downPoint) {
                    var point = this.toLocal(this._root.documentPointToRoot({ x: event.clientX, y: event.clientY }));
                    var downStart = this._downStart;
                    var downEnd = this._downEnd;
                    var extra = this._getPan(point, downPoint) * Math.min(1, (downEnd - downStart)) / 2;
                    this.axis.setAll({ start: downStart - extra, end: downEnd + extra });
                }
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "_getPan", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_point1, _point2) {
                return 0;
            }
        });
        /**
         * Converts relative position (0-1) on axis to a pixel coordinate.
         *
         * @param position  Position (0-1)
         * @return Coordinate (px)
         */
        Object.defineProperty(AxisRenderer.prototype, "positionToCoordinate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                if (this._inversed) {
                    return (this._end - position) * this._axisLength;
                }
                else {
                    return (position - this._start) * this._axisLength;
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRenderer.prototype, "updateTooltipBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_tooltip) { }
        });
        Object.defineProperty(AxisRenderer.prototype, "_updateSize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.markDirty();
                this._clear = true;
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "toAxisPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                var start = this._start || 0;
                var end = this._end || 1;
                position = position * (end - start);
                if (!this.get("inversed")) {
                    position = start + position;
                }
                else {
                    position = end - position;
                }
                return position;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRenderer.prototype, "fixPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                if (this.get("inversed")) {
                    return 1 - position;
                }
                return position;
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "_updateLC", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "toggleVisibility", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (sprite, position, minPosition, maxPosition) {
                var axis = this.axis;
                var start = axis.get("start", 0);
                var end = axis.get("end", 1);
                var updatedStart = start + (end - start) * (minPosition - 0.0001);
                var updatedEnd = start + (end - start) * (maxPosition + 0.0001);
                if (position < updatedStart || position > updatedEnd) {
                    sprite.setPrivate("visible", false);
                }
                else {
                    sprite.setPrivate("visible", true);
                }
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "_positionTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip, point) {
                var chart = this.chart;
                if (chart) {
                    if (chart.inPlot(point)) {
                        tooltip.set("pointTo", this._display.toGlobal(point));
                    }
                    else {
                        tooltip.hide();
                    }
                }
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "processAxis", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        Object.defineProperty(AxisRenderer, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "AxisRenderer"
        });
        Object.defineProperty(AxisRenderer, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([AxisRenderer.className])
        });
        return AxisRenderer;
    }(Graphics));

    /**
     * Used to render horizontal axis.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info
     * @important
     */
    var AxisRendererX = /** @class */ (function (_super) {
        __extends(AxisRendererX, _super);
        function AxisRendererX() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "thumb", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: Rectangle.new(_this._root, { width: p100, isMeasured: false, themeTags: ["axis", "x", "thumb"] })
            });
            return _this;
        }
        Object.defineProperty(AxisRendererX.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["renderer", "x"]);
                _super.prototype._afterNew.call(this);
                this.setPrivateRaw("letter", "X");
                var gridTemplate = this.grid.template;
                gridTemplate.set("height", p100);
                gridTemplate.set("width", 0);
                gridTemplate.set("draw", function (display, graphics) {
                    display.moveTo(0, 0);
                    display.lineTo(0, graphics.height());
                });
                this.set("draw", function (display, graphics) {
                    display.moveTo(0, 0);
                    display.lineTo(graphics.width(), 0);
                });
            }
        });
        Object.defineProperty(AxisRendererX.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                var axis = this.axis;
                axis.ghostLabel.setPrivate("visible", !this.get("inside"));
                var opposite = "opposite";
                var inside = "inside";
                if (this.isDirty(opposite) || this.isDirty(inside)) {
                    var chart = this.chart;
                    var axisChildren = axis.children;
                    if (this.get(inside)) {
                        axis.addTag(inside);
                    }
                    else {
                        axis.removeTag(inside);
                    }
                    if (chart) {
                        if (this.get(opposite)) {
                            var children = chart.topAxesContainer.children;
                            if (children.indexOf(axis) == -1) {
                                children.insertIndex(0, axis);
                            }
                            axis.addTag(opposite);
                            axisChildren.moveValue(this);
                        }
                        else {
                            var children = chart.bottomAxesContainer.children;
                            if (children.indexOf(axis) == -1) {
                                children.moveValue(axis);
                            }
                            axis.removeTag(opposite);
                            axisChildren.moveValue(this, 0);
                        }
                        axis.ghostLabel._applyThemes();
                        this.labels.each(function (label) {
                            label._applyThemes();
                        });
                        this.root._markDirtyRedraw();
                    }
                    axis.markDirtySize();
                }
                this.thumb.setPrivate("height", axis.labelsContainer.height());
            }
        });
        Object.defineProperty(AxisRendererX.prototype, "_getPan", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point1, point2) {
                return (point2.x - point1.x) / this.width();
            }
        });
        Object.defineProperty(AxisRendererX.prototype, "toAxisPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                var start = this._start || 0;
                var end = this._end || 1;
                position -= this._ls;
                position = position * (end - start) / this._lc;
                if (!this.get("inversed")) {
                    position = start + position;
                }
                else {
                    position = end - position;
                }
                return position;
            }
        });
        Object.defineProperty(AxisRendererX.prototype, "_updateLC", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var axis = this.axis;
                var parent = axis.parent;
                if (parent) {
                    var w = parent.innerWidth();
                    this._lc = this.axisLength() / w;
                    this._ls = (axis.x() - parent.get("paddingLeft", 0)) / w;
                }
            }
        });
        Object.defineProperty(AxisRendererX.prototype, "_updatePositions", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var axis = this.axis;
                axis.gridContainer.set("x", axis.x() - relativeToValue(axis.get("centerX", 0), axis.width()) - axis.parent.get("paddingLeft", 0));
                axis.bulletsContainer.set("y", this.y());
                var chart = axis.chart;
                if (chart) {
                    var plotContainer = chart.plotContainer;
                    var axisHeader = axis.axisHeader;
                    var width = axis.get("marginLeft", 0);
                    var x = axis.x() - width;
                    var parent_1 = axis.parent;
                    if (parent_1) {
                        x -= parent_1.get("paddingLeft", 0);
                    }
                    if (axisHeader.children.length > 0) {
                        width = axis.axisHeader.width();
                        axis.set("marginLeft", width);
                    }
                    else {
                        axisHeader.set("width", width);
                    }
                    axisHeader.setAll({ x: x, y: -1, height: plotContainer.height() + 2 });
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererX.prototype, "processAxis", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.processAxis.call(this);
                var axis = this.axis;
                axis.set("width", p100);
                var verticalLayout = this._root.verticalLayout;
                axis.set("layout", verticalLayout);
                axis.labelsContainer.set("width", p100);
                axis.axisHeader.setAll({ layout: verticalLayout });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererX.prototype, "axisLength", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.axis.width();
            }
        });
        /**
         * Converts axis relative position to actual coordinate in pixels.
         *
         * @param   position  Position
         * @return            Point
         */
        Object.defineProperty(AxisRendererX.prototype, "positionToPoint", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                return { x: this.positionToCoordinate(position), y: 0 };
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererX.prototype, "updateTick", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tick, position, endPosition, count) {
                if (tick) {
                    if (!isNumber(position)) {
                        position = 0;
                    }
                    var location_1 = 0.5;
                    if (isNumber(count) && count > 1) {
                        location_1 = tick.get("multiLocation", location_1);
                    }
                    else {
                        location_1 = tick.get("location", location_1);
                    }
                    if (isNumber(endPosition) && endPosition != position) {
                        position = position + (endPosition - position) * location_1;
                    }
                    tick.set("x", this.positionToCoordinate(position));
                    var length_1 = tick.get("length", 0);
                    var inside = tick.get("inside", this.get("inside", false));
                    if (this.get("opposite")) {
                        tick.set("y", p100);
                        if (!inside) {
                            length_1 *= -1;
                        }
                    }
                    else {
                        tick.set("y", 0);
                        if (inside) {
                            length_1 *= -1;
                        }
                    }
                    tick.set("draw", function (display) {
                        display.moveTo(0, 0);
                        display.lineTo(0, length_1);
                    });
                    this.toggleVisibility(tick, position, tick.get("minPosition", 0), tick.get("maxPosition", 1));
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererX.prototype, "updateLabel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (label, position, endPosition, count) {
                if (label) {
                    var location_2 = 0.5;
                    if (isNumber(count) && count > 1) {
                        location_2 = label.get("multiLocation", location_2);
                    }
                    else {
                        location_2 = label.get("location", location_2);
                    }
                    if (!isNumber(position)) {
                        position = 0;
                    }
                    var inside = label.get("inside", this.get("inside", false));
                    var opposite = this.get("opposite");
                    if (opposite) {
                        if (!inside) {
                            label.set("position", "relative");
                            label.set("y", p100);
                        }
                        else {
                            label.set("position", "absolute");
                            label.set("y", 0);
                        }
                    }
                    else {
                        if (!inside) {
                            label.set("y", undefined);
                            label.set("position", "relative");
                        }
                        else {
                            label.set("y", 0);
                            label.set("position", "absolute");
                        }
                    }
                    if (isNumber(endPosition) && endPosition != position) {
                        position = position + (endPosition - position) * location_2;
                    }
                    label.set("x", this.positionToCoordinate(position));
                    this.toggleVisibility(label, position, label.get("minPosition", 0), label.get("maxPosition", 1));
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererX.prototype, "updateGrid", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (grid, position, endPosition) {
                if (grid) {
                    if (!isNumber(position)) {
                        position = 0;
                    }
                    var location_3 = grid.get("location", 0.5);
                    if (isNumber(endPosition) && endPosition != position) {
                        position = position + (endPosition - position) * location_3;
                    }
                    grid.set("x", Math.round(this.positionToCoordinate(position)));
                    this.toggleVisibility(grid, position, 0, 1);
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererX.prototype, "updateBullet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bullet, position, endPosition) {
                if (bullet) {
                    var sprite = bullet.get("sprite");
                    if (sprite) {
                        if (!isNumber(position)) {
                            position = 0;
                        }
                        var location_4 = bullet.get("location", 0.5);
                        if (isNumber(endPosition) && endPosition != position) {
                            position = position + (endPosition - position) * location_4;
                        }
                        sprite.set("x", this.positionToCoordinate(position));
                        this.toggleVisibility(sprite, position, 0, 1);
                    }
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererX.prototype, "updateFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (fill, position, endPosition) {
                if (fill) {
                    if (!isNumber(position)) {
                        position = 0;
                    }
                    if (!isNumber(endPosition)) {
                        endPosition = 1;
                    }
                    var x0 = this.positionToCoordinate(position);
                    var x1 = this.positionToCoordinate(endPosition);
                    this.fillDrawMethod(fill, x0, x1);
                }
            }
        });
        Object.defineProperty(AxisRendererX.prototype, "fillDrawMethod", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (fill, x0, x1) {
                var _this = this;
                fill.set("draw", function (display) {
                    var _a;
                    //display.drawRect(x0, 0, x1 - x0, this.axis!.gridContainer.height());
                    // using for holes, so can not be rectangle
                    var h = _this.axis.gridContainer.height();
                    var w = _this.width();
                    if (x1 < x0) {
                        _a = __read([x0, x1], 2), x1 = _a[0], x0 = _a[1];
                    }
                    if (x0 > w || x1 < 0) {
                        return;
                    }
                    /*
                    const limit = 10000;
        
                    x0 = Math.max(-limit, x0);
                    x1 = Math.min(limit, x1);
                    */
                    display.moveTo(x0, 0);
                    display.lineTo(x1, 0);
                    display.lineTo(x1, h);
                    display.lineTo(x0, h);
                    display.lineTo(x0, 0);
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererX.prototype, "positionTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip, position) {
                this._positionTooltip(tooltip, { x: this.positionToCoordinate(position), y: 0 });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererX.prototype, "updateTooltipBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip) {
                var inside = this.get("inside");
                var num = 100000;
                var global = this._display.toGlobal({ x: 0, y: 0 });
                var x = global.x;
                var y = 0;
                var w = this.axisLength();
                var h = num;
                var pointerOrientation = "up";
                if (this.get("opposite")) {
                    if (inside) {
                        pointerOrientation = "up";
                        y = global.y;
                        h = num;
                    }
                    else {
                        pointerOrientation = "down";
                        y = global.y - num;
                        h = num;
                    }
                }
                else {
                    if (inside) {
                        pointerOrientation = "down";
                        y = global.y - num;
                        h = num;
                    }
                    else {
                        pointerOrientation = "up";
                        y = global.y;
                        h = num;
                    }
                }
                var bounds = { left: x, right: x + w, top: y, bottom: y + h };
                var oldBounds = tooltip.get("bounds");
                if (!sameBounds(bounds, oldBounds)) {
                    tooltip.set("bounds", bounds);
                    tooltip.set("pointerOrientation", pointerOrientation);
                }
            }
        });
        Object.defineProperty(AxisRendererX, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "AxisRendererX"
        });
        Object.defineProperty(AxisRendererX, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: AxisRenderer.classNames.concat([AxisRendererX.className])
        });
        return AxisRendererX;
    }(AxisRenderer));

    /**
     * Used to render vertical axis.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info
     * @important
     */
    var AxisRendererY = /** @class */ (function (_super) {
        __extends(AxisRendererY, _super);
        function AxisRendererY() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_downY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "thumb", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: Rectangle.new(_this._root, { height: p100, isMeasured: false, themeTags: ["axis", "y", "thumb"] })
            });
            return _this;
        }
        Object.defineProperty(AxisRendererY.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["renderer", "y"]);
                if (this._settings.opposite) {
                    this._settings.themeTags.push("opposite");
                }
                _super.prototype._afterNew.call(this);
                this.setPrivateRaw("letter", "Y");
                var gridTemplate = this.grid.template;
                gridTemplate.set("width", p100);
                gridTemplate.set("height", 0);
                gridTemplate.set("draw", function (display, graphics) {
                    display.moveTo(0, 0);
                    display.lineTo(graphics.width(), 0);
                });
                this.set("draw", function (display, renderer) {
                    display.moveTo(0, 0);
                    display.lineTo(0, renderer.height());
                });
            }
        });
        Object.defineProperty(AxisRendererY.prototype, "_getPan", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point1, point2) {
                return (point1.y - point2.y) / this.height();
            }
        });
        Object.defineProperty(AxisRendererY.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                var axis = this.axis;
                axis.ghostLabel.setPrivate("visible", !this.get("inside"));
                var thumb = this.thumb;
                var opposite = "opposite";
                var inside = "inside";
                if (this.isDirty(opposite) || this.isDirty(inside)) {
                    var chart = this.chart;
                    var axisChildren = axis.children;
                    if (this.get(inside)) {
                        axis.addTag(inside);
                    }
                    else {
                        axis.removeTag(inside);
                    }
                    if (chart) {
                        if (this.get(opposite)) {
                            var children = chart.rightAxesContainer.children;
                            if (children.indexOf(axis) == -1) {
                                children.moveValue(axis, 0);
                            }
                            axis.addTag(opposite);
                            axisChildren.moveValue(this, 0);
                            thumb.set("centerX", 0);
                        }
                        else {
                            var children = chart.leftAxesContainer.children;
                            if (children.indexOf(axis) == -1) {
                                children.moveValue(axis);
                            }
                            axis.removeTag(opposite);
                            axisChildren.moveValue(this);
                            thumb.set("centerX", p100);
                        }
                        axis.ghostLabel._applyThemes();
                        this.labels.each(function (label) {
                            label._applyThemes();
                        });
                        this.root._markDirtyRedraw();
                    }
                    axis.markDirtySize();
                }
                thumb.setPrivate("width", axis.labelsContainer.width());
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "processAxis", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.processAxis.call(this);
                var axis = this.axis;
                if (axis.get("height") == null) {
                    axis.set("height", p100);
                }
                var horizontalLayout = this._root.horizontalLayout;
                axis.set("layout", horizontalLayout);
                axis.labelsContainer.set("height", p100);
                axis.axisHeader.set("layout", horizontalLayout);
            }
        });
        Object.defineProperty(AxisRendererY.prototype, "_updatePositions", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var axis = this.axis;
                axis.gridContainer.set("y", axis.y() - relativeToValue(axis.get("centerY", 0), axis.height()));
                axis.bulletsContainer.set("x", this.x());
                var chart = axis.chart;
                if (chart) {
                    var plotContainer = chart.plotContainer;
                    var axisHeader = axis.axisHeader;
                    var height = axis.get("marginTop", 0);
                    if (axisHeader.children.length > 0) {
                        height = axis.axisHeader.height();
                        axis.set("marginTop", height);
                    }
                    else {
                        axisHeader.set("height", height);
                    }
                    axisHeader.setAll({ y: axis.y() - height, x: -1, width: plotContainer.width() + 2 });
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "axisLength", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.axis.innerHeight();
            }
        });
        /**
         * Converts axis relative position to actual coordinate in pixels.
         *
         * @param   position  Position
         * @return            Point
         */
        Object.defineProperty(AxisRendererY.prototype, "positionToPoint", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                return { x: 0, y: this.positionToCoordinate(position) };
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "updateLabel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (label, position, endPosition, count) {
                if (label) {
                    if (!isNumber(position)) {
                        position = 0;
                    }
                    var location_1 = 0.5;
                    if (isNumber(count) && count > 1) {
                        location_1 = label.get("multiLocation", location_1);
                    }
                    else {
                        location_1 = label.get("location", location_1);
                    }
                    var opposite = this.get("opposite");
                    var inside = label.get("inside", this.get("inside", false));
                    if (opposite) {
                        label.set("x", 0);
                        if (inside) {
                            label.set("position", "absolute");
                        }
                        else {
                            label.set("position", "relative");
                        }
                    }
                    else {
                        if (inside) {
                            label.set("x", 0);
                            label.set("position", "absolute");
                        }
                        else {
                            label.set("x", undefined);
                            label.set("position", "relative");
                        }
                    }
                    if (isNumber(endPosition) && endPosition != position) {
                        position = position + (endPosition - position) * location_1;
                    }
                    label.set("y", this.positionToCoordinate(position));
                    this.toggleVisibility(label, position, label.get("minPosition", 0), label.get("maxPosition", 1));
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "updateGrid", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (grid, position, endPosition) {
                if (grid) {
                    if (!isNumber(position)) {
                        position = 0;
                    }
                    var location_2 = grid.get("location", 0.5);
                    if (isNumber(endPosition) && endPosition != position) {
                        position = position + (endPosition - position) * location_2;
                    }
                    var y = this.positionToCoordinate(position);
                    grid.set("y", y);
                    this.toggleVisibility(grid, position, 0, 1);
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "updateTick", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tick, position, endPosition, count) {
                if (tick) {
                    if (!isNumber(position)) {
                        position = 0;
                    }
                    var location_3 = 0.5;
                    if (isNumber(count) && count > 1) {
                        location_3 = tick.get("multiLocation", location_3);
                    }
                    else {
                        location_3 = tick.get("location", location_3);
                    }
                    if (isNumber(endPosition) && endPosition != position) {
                        position = position + (endPosition - position) * location_3;
                    }
                    tick.set("y", this.positionToCoordinate(position));
                    var length_1 = tick.get("length", 0);
                    var inside = tick.get("inside", this.get("inside", false));
                    if (this.get("opposite")) {
                        tick.set("x", 0);
                        if (inside) {
                            length_1 *= -1;
                        }
                    }
                    else {
                        if (!inside) {
                            length_1 *= -1;
                        }
                    }
                    tick.set("draw", function (display) {
                        display.moveTo(0, 0);
                        display.lineTo(length_1, 0);
                    });
                    this.toggleVisibility(tick, position, tick.get("minPosition", 0), tick.get("maxPosition", 1));
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "updateBullet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bullet, position, endPosition) {
                if (bullet) {
                    var sprite = bullet.get("sprite");
                    if (sprite) {
                        if (!isNumber(position)) {
                            position = 0;
                        }
                        var location_4 = bullet.get("location", 0.5);
                        if (isNumber(endPosition) && endPosition != position) {
                            position = position + (endPosition - position) * location_4;
                        }
                        sprite.set("y", this.positionToCoordinate(position));
                        this.toggleVisibility(sprite, position, 0, 1);
                    }
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "updateFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (fill, position, endPosition) {
                if (fill) {
                    if (!isNumber(position)) {
                        position = 0;
                    }
                    if (!isNumber(endPosition)) {
                        endPosition = 1;
                    }
                    var y0 = this.positionToCoordinate(position);
                    var y1 = this.positionToCoordinate(endPosition);
                    this.fillDrawMethod(fill, y0, y1);
                }
            }
        });
        Object.defineProperty(AxisRendererY.prototype, "fillDrawMethod", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (fill, y0, y1) {
                var _this = this;
                fill.set("draw", function (display) {
                    var _a;
                    // using for holes, so can not be rectangle
                    var w = _this.axis.gridContainer.width();
                    var h = _this.height();
                    if (y1 < y0) {
                        _a = __read([y0, y1], 2), y1 = _a[0], y0 = _a[1];
                    }
                    if (y0 > h || y1 < 0) {
                        return;
                    }
                    //y0 = Math.max(0, y0);
                    //y1 = Math.min(h, y1);
                    display.moveTo(0, y0);
                    display.lineTo(w, y0);
                    display.lineTo(w, y1);
                    display.lineTo(0, y1);
                    display.lineTo(0, y0);
                });
            }
        });
        /**
         * Converts relative position (0-1) on axis to a pixel coordinate.
         *
         * @param position  Position (0-1)
         * @return Coordinate (px)
         */
        Object.defineProperty(AxisRendererY.prototype, "positionToCoordinate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                if (!this._inversed) {
                    return (this._end - position) * this._axisLength;
                }
                else {
                    return (position - this._start) * this._axisLength;
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "positionTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip, position) {
                this._positionTooltip(tooltip, { x: 0, y: this.positionToCoordinate(position) });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "updateTooltipBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip) {
                var inside = this.get("inside");
                var num = 100000;
                var global = this._display.toGlobal({ x: 0, y: 0 });
                var y = global.y;
                var x = 0;
                var h = this.axisLength();
                var w = num;
                var pointerOrientation = "right";
                if (this.get("opposite")) {
                    if (inside) {
                        pointerOrientation = "right";
                        x = global.x - num;
                        w = num;
                    }
                    else {
                        pointerOrientation = "left";
                        x = global.x;
                        w = num;
                    }
                }
                else {
                    if (inside) {
                        pointerOrientation = "left";
                        x = global.x;
                        w = num;
                    }
                    else {
                        pointerOrientation = "right";
                        x = global.x - num;
                        w = num;
                    }
                }
                var bounds = { left: x, right: x + w, top: y, bottom: y + h };
                var oldBounds = tooltip.get("bounds");
                if (!sameBounds(bounds, oldBounds)) {
                    tooltip.set("bounds", bounds);
                    tooltip.set("pointerOrientation", pointerOrientation);
                }
            }
        });
        Object.defineProperty(AxisRendererY.prototype, "_updateLC", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var axis = this.axis;
                var parent = axis.parent;
                if (parent) {
                    var h = parent.innerHeight();
                    this._lc = this.axisLength() / h;
                    this._ls = axis.y() / h;
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "toAxisPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                var start = this._start || 0;
                var end = this._end || 1;
                position -= this._ls;
                position = position * (end - start) / this._lc;
                if (this.get("inversed")) {
                    position = start + position;
                }
                else {
                    position = end - position;
                }
                return position;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "fixPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                if (!this.get("inversed")) {
                    return 1 - position;
                }
                return position;
            }
        });
        Object.defineProperty(AxisRendererY, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "AxisRendererY"
        });
        Object.defineProperty(AxisRendererY, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: AxisRenderer.classNames.concat([AxisRendererY.className])
        });
        return AxisRendererY;
    }(AxisRenderer));

    /**
     * A candle element used in a [[CandlestickSeries]].
     */
    var Candlestick = /** @class */ (function (_super) {
        __extends(Candlestick, _super);
        function Candlestick() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Candlestick.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("lowX0") || this.isDirty("lowY0") || this.isDirty("lowX1") || this.isDirty("lowY1") || this.isDirty("highX0") || this.isDirty("highX1") || this.isDirty("highY0") || this.isDirty("highY1")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Candlestick.prototype, "_draw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._draw.call(this);
                var display = this._display;
                display.moveTo(this.get("lowX0", 0), this.get("lowY0", 0));
                display.lineTo(this.get("lowX1", 0), this.get("lowY1", 0));
                display.moveTo(this.get("highX0", 0), this.get("highY0", 0));
                display.lineTo(this.get("highX1", 0), this.get("highY1", 0));
            }
        });
        Object.defineProperty(Candlestick, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Candlestick"
        });
        Object.defineProperty(Candlestick, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: RoundedRectangle.classNames.concat([Candlestick.className])
        });
        return Candlestick;
    }(RoundedRectangle));

    var ColumnSeries = /** @class */ (function (_super) {
        __extends(ColumnSeries, _super);
        function ColumnSeries() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * A [[TemplateList]] of all columns in series.
             *
             * `columns.template` can be used to set default settings for all columns,
             * or to change on existing ones.
             */
            Object.defineProperty(_this, "columns", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return RoundedRectangle._new(_this._root, {
                    position: "absolute",
                    themeTags: mergeTags(_this.columns.template.get("themeTags", []), ["series", "column"])
                }, [_this.columns.template]); })
            });
            return _this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(ColumnSeries.prototype, "makeColumn", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, listTemplate) {
                var column = this.mainContainer.children.push(listTemplate.make());
                column._setDataItem(dataItem);
                listTemplate.push(column);
                return column;
            }
        });
        Object.defineProperty(ColumnSeries.prototype, "_processAxisRange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axisRange) {
                var _this = this;
                _super.prototype._processAxisRange.call(this, axisRange);
                axisRange.columns = new ListTemplate(Template.new({}), function () { return RoundedRectangle._new(_this._root, {
                    position: "absolute",
                    themeTags: mergeTags(axisRange.columns.template.get("themeTags", []), ["series", "column"]),
                }, [_this.columns.template, axisRange.columns.template]); });
            }
        });
        Object.defineProperty(ColumnSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "ColumnSeries"
        });
        Object.defineProperty(ColumnSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: BaseColumnSeries.classNames.concat([ColumnSeries.className])
        });
        return ColumnSeries;
    }(BaseColumnSeries));

    /**
     * Candlestick series.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/candlestick-series/} for more info
     * @important
     */
    var CandlestickSeries = /** @class */ (function (_super) {
        __extends(CandlestickSeries, _super);
        function CandlestickSeries() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * A list of candles in the series.
             *
             * `columns.template` can be used to configure candles.
             *
             * @default new ListTemplate<Candlestick>
             */
            Object.defineProperty(_this, "columns", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({
                    themeTags: ["autocolor"]
                }), function () { return Candlestick._new(_this._root, {
                    themeTags: mergeTags(_this.columns.template.get("themeTags", []), ["candlestick", "series", "column"])
                }, [_this.columns.template]); })
            });
            return _this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(CandlestickSeries.prototype, "makeColumn", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, listTemplate) {
                var column = this.mainContainer.children.push(listTemplate.make());
                column._setDataItem(dataItem);
                listTemplate.push(column);
                return column;
            }
        });
        Object.defineProperty(CandlestickSeries.prototype, "_updateGraphics", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, previousDataItem) {
                _super.prototype._updateGraphics.call(this, dataItem, previousDataItem);
                var xAxis = this.getRaw("xAxis");
                var yAxis = this.getRaw("yAxis");
                var baseAxis = this.getRaw("baseAxis");
                var vcy = this.get("vcy", 1);
                var vcx = this.get("vcx", 1);
                var lx0;
                var lx1;
                var ly0;
                var ly1;
                var hx0;
                var hx1;
                var hy0;
                var hy1;
                var locationX = this.get("locationX", dataItem.get("locationX", 0.5));
                var locationY = this.get("locationY", dataItem.get("locationY", 0.5));
                var openLocationX = this.get("openLocationX", dataItem.get("openLocationX", locationX));
                var openLocationY = this.get("openLocationY", dataItem.get("openLocationY", locationY));
                var orientation;
                if (yAxis === baseAxis) {
                    var open_1 = xAxis.getDataItemPositionX(dataItem, this._xOpenField, 1, vcx);
                    var close_1 = xAxis.getDataItemPositionX(dataItem, this._xField, 1, vcx);
                    lx1 = xAxis.getDataItemPositionX(dataItem, this._xLowField, 1, vcx);
                    hx1 = xAxis.getDataItemPositionX(dataItem, this._xHighField, 1, vcx);
                    hx0 = Math.max(open_1, close_1);
                    lx0 = Math.min(open_1, close_1);
                    var startLocation = this._aLocationY0 + openLocationY - 0.5;
                    var endLocation = this._aLocationY1 + locationY - 0.5;
                    ly0 = yAxis.getDataItemPositionY(dataItem, this._yField, startLocation + (endLocation - startLocation) / 2, vcy);
                    ly1 = ly0;
                    hy0 = ly0;
                    hy1 = ly0;
                    orientation = "horizontal";
                }
                else {
                    var open_2 = yAxis.getDataItemPositionY(dataItem, this._yOpenField, 1, vcy);
                    var close_2 = yAxis.getDataItemPositionY(dataItem, this._yField, 1, vcy);
                    ly1 = yAxis.getDataItemPositionY(dataItem, this._yLowField, 1, vcy);
                    hy1 = yAxis.getDataItemPositionY(dataItem, this._yHighField, 1, vcy);
                    hy0 = Math.max(open_2, close_2);
                    ly0 = Math.min(open_2, close_2);
                    var startLocation = this._aLocationX0 + openLocationX - 0.5;
                    var endLocation = this._aLocationX1 + locationX - 0.5;
                    lx0 = xAxis.getDataItemPositionX(dataItem, this._xField, startLocation + (endLocation - startLocation) / 2, vcx);
                    lx1 = lx0;
                    hx0 = lx0;
                    hx1 = lx0;
                    orientation = "vertical";
                }
                this._updateCandleGraphics(dataItem, lx0, lx1, ly0, ly1, hx0, hx1, hy0, hy1, orientation);
            }
        });
        Object.defineProperty(CandlestickSeries.prototype, "_updateCandleGraphics", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, lx0, lx1, ly0, ly1, hx0, hx1, hy0, hy1, orientation) {
                var column = dataItem.get("graphics");
                if (column) {
                    var pl0_1 = this.getPoint(lx0, ly0);
                    var pl1_1 = this.getPoint(lx1, ly1);
                    var ph0_1 = this.getPoint(hx0, hy0);
                    var ph1_1 = this.getPoint(hx1, hy1);
                    var x_1 = column.x();
                    var y_1 = column.y();
                    column.set("lowX0", pl0_1.x - x_1);
                    column.set("lowY0", pl0_1.y - y_1);
                    column.set("lowX1", pl1_1.x - x_1);
                    column.set("lowY1", pl1_1.y - y_1);
                    column.set("highX0", ph0_1.x - x_1);
                    column.set("highY0", ph0_1.y - y_1);
                    column.set("highX1", ph1_1.x - x_1);
                    column.set("highY1", ph1_1.y - y_1);
                    column.set("orientation", orientation);
                    var rangeGraphics = dataItem.get("rangeGraphics");
                    if (rangeGraphics) {
                        each$1(rangeGraphics, function (column) {
                            column.set("lowX0", pl0_1.x - x_1);
                            column.set("lowY0", pl0_1.y - y_1);
                            column.set("lowX1", pl1_1.x - x_1);
                            column.set("lowY1", pl1_1.y - y_1);
                            column.set("highX0", ph0_1.x - x_1);
                            column.set("highY0", ph0_1.y - y_1);
                            column.set("highX1", ph1_1.x - x_1);
                            column.set("highY1", ph1_1.y - y_1);
                            column.set("orientation", orientation);
                        });
                    }
                }
            }
        });
        Object.defineProperty(CandlestickSeries.prototype, "_processAxisRange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axisRange) {
                var _this = this;
                _super.prototype._processAxisRange.call(this, axisRange);
                axisRange.columns = new ListTemplate(Template.new({}), function () { return Candlestick._new(_this._root, {
                    themeTags: mergeTags(axisRange.columns.template.get("themeTags", []), ["candlestick", "series", "column"]),
                }, [_this.columns.template, axisRange.columns.template]); });
            }
        });
        Object.defineProperty(CandlestickSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "CandlestickSeries"
        });
        Object.defineProperty(CandlestickSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ColumnSeries.classNames.concat([CandlestickSeries.className])
        });
        return CandlestickSeries;
    }(ColumnSeries));

    var OHLC = /** @class */ (function (_super) {
        __extends(OHLC, _super);
        function OHLC() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(OHLC.prototype, "_draw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var display = this._display;
                display.moveTo(this.get("lowX1", 0), this.get("lowY1", 0));
                display.lineTo(this.get("highX1", 0), this.get("highY1", 0));
                var w = this.width();
                var h = this.height();
                if (this.get("orientation") == "vertical") {
                    var lY = h;
                    var hY = 0;
                    display.moveTo(0, lY);
                    display.lineTo(w / 2, lY);
                    display.moveTo(w / 2, hY);
                    display.lineTo(w, hY);
                }
                else {
                    var lX = 0;
                    var hX = w;
                    display.moveTo(lX, 0);
                    display.lineTo(lX, h / 2);
                    display.moveTo(hX, h / 2);
                    display.lineTo(hX, h);
                }
            }
        });
        Object.defineProperty(OHLC, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "OHLC"
        });
        Object.defineProperty(OHLC, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Candlestick.classNames.concat([OHLC.className])
        });
        return OHLC;
    }(Candlestick));

    /**
     * OHLC series.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/candlestick-series/} for more info
     * @important
     */
    var OHLCSeries = /** @class */ (function (_super) {
        __extends(OHLCSeries, _super);
        function OHLCSeries() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * A list of OHLC bars in the series.
             *
             * `columns.template` can be used to configure OHLC bars.
             *
             * @default new ListTemplate<OHLC>
             */
            Object.defineProperty(_this, "columns", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({
                    themeTags: ["autocolor"]
                }), function () { return OHLC._new(_this._root, {
                    themeTags: mergeTags(_this.columns.template.get("themeTags", []), ["ohlc", "series", "column"])
                }, [_this.columns.template]); })
            });
            return _this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(OHLCSeries.prototype, "makeColumn", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, listTemplate) {
                var column = this.mainContainer.children.push(listTemplate.make());
                column._setDataItem(dataItem);
                listTemplate.push(column);
                return column;
            }
        });
        Object.defineProperty(OHLCSeries.prototype, "_processAxisRange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axisRange) {
                var _this = this;
                _super.prototype._processAxisRange.call(this, axisRange);
                axisRange.columns = new ListTemplate(Template.new({}), function () { return OHLC._new(_this._root, {
                    themeTags: mergeTags(axisRange.columns.template.get("themeTags", []), ["ohlc", "series", "column"]),
                }, [_this.columns.template, axisRange.columns.template]); });
            }
        });
        Object.defineProperty(OHLCSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "OHLCSeries"
        });
        Object.defineProperty(OHLCSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: CandlestickSeries.classNames.concat([OHLCSeries.className])
        });
        return OHLCSeries;
    }(CandlestickSeries));

    /**
     * Used to plot line and/or area series.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/line-series/} for more info
     * @important
     */
    var LineSeries = /** @class */ (function (_super) {
        __extends(LineSeries, _super);
        function LineSeries() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_endIndex", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_strokeGenerator", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: line()
            });
            Object.defineProperty(_this, "_fillGenerator", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: area()
            });
            Object.defineProperty(_this, "_legendStroke", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_legendFill", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * A [[TemplateList]] of all line segments in series.
             *
             * `strokes.template` can be used to set default settings for all line
             * segments, or to change on existing ones.
             *
             * @default new ListTemplate<Graphics>
             */
            Object.defineProperty(_this, "strokes", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return Graphics._new(_this._root, {
                    themeTags: mergeTags(_this.strokes.template.get("themeTags", []), ["line", "series", "stroke"])
                }, [_this.strokes.template]); })
            });
            /**
             * A [[TemplateList]] of all segment fills in series.
             *
             * `fills.template` can be used to set default settings for all segment
             * fills, or to change on existing ones.
             *
             * @default new ListTemplate<Graphics>
             */
            Object.defineProperty(_this, "fills", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return Graphics._new(_this._root, {
                    themeTags: mergeTags(_this.strokes.template.get("themeTags", []), ["line", "series", "fill"])
                }, [_this.fills.template]); })
            });
            // custom set from data
            Object.defineProperty(_this, "_fillTemplate", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_strokeTemplate", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_previousPoint", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: [0, 0, 0, 0]
            });
            Object.defineProperty(_this, "_dindex", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_sindex", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            return _this;
        }
        Object.defineProperty(LineSeries.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._fillGenerator.y0(function (p) {
                    return p[3];
                });
                this._fillGenerator.x0(function (p) {
                    return p[2];
                });
                this._fillGenerator.y1(function (p) {
                    return p[1];
                });
                this._fillGenerator.x1(function (p) {
                    return p[0];
                });
                _super.prototype._afterNew.call(this);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(LineSeries.prototype, "makeStroke", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (strokes) {
                var stroke = this.mainContainer.children.push(strokes.make());
                strokes.push(stroke);
                return stroke;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(LineSeries.prototype, "makeFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (fills) {
                var fill = this.mainContainer.children.push(fills.make());
                fills.push(fill);
                return fill;
            }
        });
        Object.defineProperty(LineSeries.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._strokeTemplate = undefined;
                this._fillTemplate = undefined;
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                if (this.isDirty("stroke")) {
                    var stroke = this.get("stroke");
                    this.strokes.template.set("stroke", stroke);
                    var legendStroke = this._legendStroke;
                    if (legendStroke) {
                        legendStroke.states.lookup("default").set("stroke", stroke);
                    }
                }
                if (this.isDirty("fill")) {
                    var fill = this.get("fill");
                    this.fills.template.set("fill", fill);
                    var legendFill = this._legendFill;
                    if (legendFill) {
                        legendFill.states.lookup("default").set("fill", fill);
                    }
                }
                if (this.isDirty("curveFactory")) {
                    var curveFactory = this.get("curveFactory");
                    if (curveFactory) {
                        this._strokeGenerator.curve(curveFactory);
                        this._fillGenerator.curve(curveFactory);
                    }
                }
                if (xAxis.inited && yAxis.inited) {
                    if (this._axesDirty || this._valuesDirty || this._stackDirty || this.isDirty("vcx") || this.isDirty("vcy") || this._sizeDirty || this.isDirty("connect") || this.isDirty("curveFactory")) {
                        this.fills.each(function (fill) {
                            fill.setPrivate("visible", false);
                        });
                        this.strokes.each(function (fill) {
                            fill.setPrivate("visible", false);
                        });
                        this.axisRanges.each(function (axisRange) {
                            var fills = axisRange.fills;
                            if (fills) {
                                fills.each(function (fill) {
                                    fill.setPrivate("visible", false);
                                });
                            }
                            var strokes = axisRange.strokes;
                            if (strokes) {
                                strokes.each(function (stroke) {
                                    stroke.setPrivate("visible", false);
                                });
                            }
                        });
                        var startIndex = this.startIndex();
                        var strokeTemplateField = this.strokes.template.get("templateField");
                        var fillTemplateField = this.fills.template.get("templateField");
                        var strokeTemplateFound = true;
                        var fillTemplateFound = true;
                        if (strokeTemplateField) {
                            strokeTemplateFound = false;
                        }
                        if (fillTemplateField) {
                            fillTemplateFound = false;
                        }
                        var _loop_1 = function (i) {
                            var dataItem = this_1.dataItems[i];
                            var hasValues = true;
                            var dataContext = dataItem.dataContext;
                            if (strokeTemplateField) {
                                if (dataContext[strokeTemplateField]) {
                                    strokeTemplateFound = true;
                                }
                            }
                            if (fillTemplateField) {
                                if (dataContext[fillTemplateField]) {
                                    fillTemplateFound = true;
                                }
                            }
                            each$1(this_1._valueFields, function (field) {
                                if (!isNumber(dataItem.get(field))) {
                                    hasValues = false;
                                }
                            });
                            if (hasValues && strokeTemplateFound && fillTemplateFound) {
                                startIndex = i;
                                return "break";
                            }
                        };
                        var this_1 = this;
                        for (var i = startIndex - 1; i >= 0; i--) {
                            var state_1 = _loop_1(i);
                            if (state_1 === "break")
                                break;
                        }
                        var len = this.dataItems.length;
                        var endIndex = this.endIndex();
                        if (endIndex < len) {
                            endIndex++;
                            var _loop_2 = function (i) {
                                var dataItem = this_2.dataItems[i];
                                var hasValues = true;
                                each$1(this_2._valueFields, function (field) {
                                    if (!isNumber(dataItem.get(field))) {
                                        hasValues = false;
                                    }
                                });
                                if (hasValues) {
                                    endIndex = i + 1;
                                    return "break";
                                }
                            };
                            var this_2 = this;
                            for (var i = endIndex; i < len; i++) {
                                var state_2 = _loop_2(i);
                                if (state_2 === "break")
                                    break;
                            }
                        }
                        if (startIndex > 0) {
                            startIndex--;
                        }
                        this._endIndex = endIndex;
                        this._clearGraphics();
                        this._sindex = 0;
                        this._dindex = startIndex;
                        // this is done to avoid recursion with a lot of segments 
                        while (this._dindex < endIndex - 1) {
                            this._startSegment(this._dindex);
                            this._sindex++;
                        }
                    }
                }
                else {
                    this._skipped = true;
                }
                _super.prototype._updateChildren.call(this);
            }
        });
        Object.defineProperty(LineSeries.prototype, "_clearGraphics", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.strokes.clear();
                this.fills.clear();
            }
        });
        Object.defineProperty(LineSeries.prototype, "_startSegment", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItemIndex) {
                var _this = this;
                var endIndex = this._endIndex;
                var currentEndIndex = endIndex;
                var autoGapCount = this.get("autoGapCount");
                var connect = this.get("connect");
                var fill = this.makeFill(this.fills);
                var fillTemplate = this._fillTemplate;
                var originalTemplate = this.fills.template;
                if (fillTemplate && fillTemplate != originalTemplate) {
                    fill.template = fillTemplate;
                }
                fill.setPrivate("visible", true);
                var stroke = this.makeStroke(this.strokes);
                var strokeTemplate = this._strokeTemplate;
                if (strokeTemplate && strokeTemplate != this.strokes.template) {
                    stroke.template = strokeTemplate;
                }
                stroke.setPrivate("visible", true);
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var baseAxis = this.get("baseAxis");
                var vcx = this.get("vcx", 1);
                var vcy = this.get("vcy", 1);
                var xField = this._xField;
                var yField = this._yField;
                var xOpenField = this._xOpenField;
                var yOpenField = this._yOpenField;
                var xOpenFieldValue = this.get("openValueXField");
                var yOpenFieldValue = this.get("openValueYField");
                if (!xOpenFieldValue) {
                    xOpenField = this._xField;
                }
                if (!yOpenFieldValue) {
                    yOpenField = this._yField;
                }
                var stacked = this.get("stacked");
                var basePosX = xAxis.basePosition();
                var basePosY = yAxis.basePosition();
                var baseField;
                if (baseAxis === yAxis) {
                    baseField = this._yField;
                }
                else {
                    baseField = this._xField;
                }
                var segments = [];
                var points = [];
                segments.push(points);
                var strokeTemplateField = this.strokes.template.get("templateField");
                var fillTemplateField = this.fills.template.get("templateField");
                var locationX = this.get("locationX", 0.5);
                var locationY = this.get("locationY", 0.5);
                var openLocationX = this.get("openLocationX", locationX);
                var openLocationY = this.get("openLocationY", locationY);
                var minDistance = this.get("minDistance", 0);
                var i;
                var fillVisible = this.fills.template.get("visible");
                if (this.axisRanges.length > 0) {
                    fillVisible = true;
                }
                var getOpen = false;
                if (stacked || xOpenFieldValue || yOpenFieldValue) {
                    getOpen = true;
                }
                var o = {
                    points: points,
                    segments: segments,
                    stacked: stacked,
                    getOpen: getOpen,
                    basePosX: basePosX,
                    basePosY: basePosY,
                    fillVisible: fillVisible,
                    xField: xField,
                    yField: yField,
                    xOpenField: xOpenField,
                    yOpenField: yOpenField,
                    vcx: vcx,
                    vcy: vcy,
                    baseAxis: baseAxis,
                    xAxis: xAxis,
                    yAxis: yAxis,
                    locationX: locationX,
                    locationY: locationY,
                    openLocationX: openLocationX,
                    openLocationY: openLocationY,
                    minDistance: minDistance
                };
                for (i = dataItemIndex; i < currentEndIndex; i++) {
                    this._dindex = i;
                    var dataItem = this._dataItems[i];
                    var valueX = dataItem.get(xField);
                    var valueY = dataItem.get(yField);
                    if (valueX == null || valueY == null) {
                        if (!connect) {
                            points = [];
                            segments.push(points);
                            o.points = points;
                        }
                    }
                    else {
                        this._getPoints(dataItem, o);
                    }
                    if (strokeTemplateField) {
                        var strokeTemplate_1 = dataItem.dataContext[strokeTemplateField];
                        if (strokeTemplate_1) {
                            if (!(strokeTemplate_1 instanceof Template)) {
                                strokeTemplate_1 = Template.new(strokeTemplate_1);
                            }
                            this._strokeTemplate = strokeTemplate_1;
                            if (i > dataItemIndex) {
                                currentEndIndex = i;
                                break;
                            }
                            else {
                                stroke.template = strokeTemplate_1;
                            }
                        }
                    }
                    if (fillTemplateField) {
                        var fillTemplate_1 = dataItem.dataContext[fillTemplateField];
                        if (fillTemplate_1) {
                            if (!(fillTemplate_1 instanceof Template)) {
                                fillTemplate_1 = Template.new(fillTemplate_1);
                            }
                            this._fillTemplate = fillTemplate_1;
                            if (i > dataItemIndex) {
                                currentEndIndex = i;
                                break;
                            }
                            else {
                                fill.template = fillTemplate_1;
                            }
                        }
                    }
                    if (!connect) {
                        var nextItem = this.dataItems[i + 1];
                        if (nextItem) {
                            if (baseAxis.shouldGap(dataItem, nextItem, autoGapCount, baseField)) {
                                points = [];
                                segments.push(points);
                                o.points = points;
                            }
                        }
                    }
                }
                fill.setRaw("userData", [dataItemIndex, i]);
                stroke.setRaw("userData", [dataItemIndex, i]);
                if (i === endIndex) {
                    this._endLine(points, segments[0][0]);
                }
                if (stroke) {
                    this._drawStroke(stroke, segments);
                }
                if (fill) {
                    this._drawFill(fill, segments);
                }
                this.axisRanges.each(function (axisRange) {
                    var container = axisRange.container;
                    var fills = axisRange.fills;
                    var fill = _this.makeFill(fills);
                    if (container) {
                        container.children.push(fill);
                    }
                    fill.setPrivate("visible", true);
                    _this._drawFill(fill, segments);
                    var strokes = axisRange.strokes;
                    var stroke = _this.makeStroke(strokes);
                    if (container) {
                        container.children.push(stroke);
                    }
                    stroke.setPrivate("visible", true);
                    _this._drawStroke(stroke, segments);
                    fill.setRaw("userData", [dataItemIndex, i]);
                    stroke.setRaw("userData", [dataItemIndex, i]);
                });
            }
        });
        Object.defineProperty(LineSeries.prototype, "_getPoints", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, o) {
                var points = o.points;
                var itemLocationX = dataItem.get("locationX", o.locationX);
                var itemLocationY = dataItem.get("locationY", o.locationY);
                var xPos = o.xAxis.getDataItemPositionX(dataItem, o.xField, itemLocationX, o.vcx);
                var yPos = o.yAxis.getDataItemPositionY(dataItem, o.yField, itemLocationY, o.vcy);
                if (this._shouldInclude(xPos)) {
                    var iPoint = this.getPoint(xPos, yPos);
                    var point = [iPoint.x, iPoint.y];
                    iPoint.x += this._x;
                    iPoint.y += this._y;
                    dataItem.set("point", iPoint);
                    if (o.fillVisible) {
                        var xPos0 = xPos;
                        var yPos0 = yPos;
                        if (o.baseAxis === o.xAxis) {
                            yPos0 = o.basePosY;
                        }
                        else if (o.baseAxis === o.yAxis) {
                            xPos0 = o.basePosX;
                        }
                        if (o.getOpen) {
                            var valueX = dataItem.get(o.xOpenField);
                            var valueY = dataItem.get(o.yOpenField);
                            if (valueX != null && valueY != null) {
                                var itemLocationX_1 = dataItem.get("openLocationX", o.openLocationX);
                                var itemLocationY_1 = dataItem.get("openLocationY", o.openLocationY);
                                if (o.stacked) {
                                    var stackToItemX = dataItem.get("stackToItemX");
                                    var stackToItemY = dataItem.get("stackToItemY");
                                    if (stackToItemX) {
                                        xPos0 = o.xAxis.getDataItemPositionX(stackToItemX, o.xField, itemLocationX_1, stackToItemX.component.get("vcx"));
                                        if (isNaN$1(xPos0)) {
                                            xPos0 = o.basePosX;
                                        }
                                    }
                                    else {
                                        if (o.yAxis === o.baseAxis) {
                                            xPos0 = o.basePosX;
                                        }
                                        else {
                                            xPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX_1, o.vcx);
                                        }
                                    }
                                    if (stackToItemY) {
                                        yPos0 = o.yAxis.getDataItemPositionY(stackToItemY, o.yField, itemLocationY_1, stackToItemY.component.get("vcy"));
                                        if (isNaN$1(yPos0)) {
                                            yPos0 = o.basePosY;
                                        }
                                    }
                                    else {
                                        if (o.xAxis === o.baseAxis) {
                                            yPos0 = o.basePosY;
                                        }
                                        else {
                                            yPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY_1, o.vcy);
                                        }
                                    }
                                }
                                else {
                                    xPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX_1, o.vcx);
                                    yPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY_1, o.vcy);
                                }
                            }
                        }
                        var closeIPoint = this.getPoint(xPos0, yPos0);
                        point[2] = closeIPoint.x;
                        point[3] = closeIPoint.y;
                    }
                    if (o.minDistance > 0) {
                        var p0 = point[0];
                        var p1 = point[1];
                        var p2 = point[2];
                        var p3 = point[3];
                        var prev = this._previousPoint;
                        var pp0 = prev[0];
                        var pp1 = prev[1];
                        var pp2 = prev[2];
                        var pp3 = prev[3];
                        if (Math.hypot(p0 - pp0, p1 - pp1) > o.minDistance || (p2 && p3 && Math.hypot(p2 - pp2, p3 - pp3) > o.minDistance)) {
                            points.push(point);
                            this._previousPoint = point;
                        }
                    }
                    else {
                        points.push(point);
                    }
                }
            }
        });
        Object.defineProperty(LineSeries.prototype, "_endLine", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_points, _firstPoint) {
            }
        });
        Object.defineProperty(LineSeries.prototype, "_drawStroke", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (graphics, segments) {
                var _this = this;
                if (graphics.get("visible")) {
                    graphics.set("draw", function (display) {
                        each$1(segments, function (segment) {
                            _this._strokeGenerator.context(display);
                            _this._strokeGenerator(segment);
                        });
                    });
                }
            }
        });
        Object.defineProperty(LineSeries.prototype, "_drawFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (graphics, segments) {
                var _this = this;
                if (graphics.get("visible")) {
                    graphics.set("draw", function (display) {
                        each$1(segments, function (segment) {
                            _this._fillGenerator.context(display);
                            _this._fillGenerator(segment);
                        });
                    });
                }
            }
        });
        Object.defineProperty(LineSeries.prototype, "_processAxisRange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axisRange) {
                var _this = this;
                _super.prototype._processAxisRange.call(this, axisRange);
                axisRange.fills = new ListTemplate(Template.new({}), function () { return Graphics._new(_this._root, {
                    themeTags: mergeTags(axisRange.fills.template.get("themeTags", []), ["line", "series", "fill"]),
                }, [_this.fills.template, axisRange.fills.template]); });
                axisRange.strokes = new ListTemplate(Template.new({}), function () { return Graphics._new(_this._root, {
                    themeTags: mergeTags(axisRange.strokes.template.get("themeTags", []), ["line", "series", "stroke"]),
                }, [_this.strokes.template, axisRange.strokes.template]); });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(LineSeries.prototype, "createLegendMarker", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem) {
                var legendDataItem = this.get("legendDataItem");
                if (legendDataItem) {
                    var marker = legendDataItem.get("marker");
                    var markerRectangle = legendDataItem.get("markerRectangle");
                    if (markerRectangle) {
                        markerRectangle.setPrivate("visible", false);
                    }
                    marker.set("background", Rectangle.new(marker._root, { fillOpacity: 0, fill: color(0x000000) }));
                    var legendStroke = marker.children.push(Graphics._new(marker._root, {
                        themeTags: ["line", "series", "legend", "marker", "stroke"], interactive: false
                    }, [this.strokes.template]));
                    this._legendStroke = legendStroke;
                    var legendFill = marker.children.push(Graphics._new(marker._root, {
                        themeTags: ["line", "series", "legend", "marker", "fill"]
                    }, [this.fills.template]));
                    this._legendFill = legendFill;
                    var disabledColor = this._root.interfaceColors.get("disabled");
                    legendStroke.states.create("disabled", { fill: disabledColor, stroke: disabledColor });
                    legendFill.states.create("disabled", { fill: disabledColor, stroke: disabledColor });
                    if (this.bullets.length > 0) {
                        var bulletFunction = this.bullets.getIndex(0);
                        if (bulletFunction) {
                            var bullet = bulletFunction(marker._root, this, new DataItem(this, {}, {}));
                            if (bullet) {
                                var sprite = bullet.get("sprite");
                                if (sprite instanceof Graphics) {
                                    sprite.states.create("disabled", { fill: disabledColor, stroke: disabledColor });
                                }
                                if (sprite) {
                                    sprite.set("tooltipText", undefined);
                                    marker.children.push(sprite);
                                    sprite.setAll({ x: marker.width() / 2, y: marker.height() / 2 });
                                }
                            }
                        }
                    }
                }
            }
        });
        Object.defineProperty(LineSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "LineSeries"
        });
        Object.defineProperty(LineSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: XYSeries.classNames.concat([LineSeries.className])
        });
        return LineSeries;
    }(XYSeries));

    /**
     * @ignore
     */
    var MonotoneYTension = /** @class */ (function () {
        function MonotoneYTension(context, tension) {
            Object.defineProperty(this, "_line", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_point", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_context", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_x0", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_x1", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_y0", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_y1", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_t0", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_tension", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            this._context = context;
            this._tension = tension;
        }
        Object.defineProperty(MonotoneYTension.prototype, "areaStart", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._line = 0;
            }
        });
        Object.defineProperty(MonotoneYTension.prototype, "areaEnd", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._line = NaN;
            }
        });
        Object.defineProperty(MonotoneYTension.prototype, "lineStart", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._x0 = this._x1 =
                    this._y0 = this._y1 =
                        this._t0 = NaN;
                this._point = 0;
            }
        });
        Object.defineProperty(MonotoneYTension.prototype, "lineEnd", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                switch (this._point) {
                    case 2:
                        this._context.lineTo(this._x1, this._y1);
                        break;
                    case 3:
                        point$1(this, this._t0, slope2$1(this, this._t0));
                        break;
                }
                if (this._line || (this._line !== 0 && this._point === 1))
                    this._context.closePath();
                this._line = 1 - this._line;
            }
        });
        Object.defineProperty(MonotoneYTension.prototype, "point", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x, y) {
                var _a;
                _a = __read([y, x], 2), x = _a[0], y = _a[1];
                var t1 = NaN;
                x = +x, y = +y;
                if (x === this._x1 && y === this._y1)
                    return; // Ignore coincident points.
                switch (this._point) {
                    case 0:
                        this._point = 1;
                        this._line ? this._context.lineTo(y, x) : this._context.moveTo(y, x);
                        break;
                    case 1:
                        this._point = 2;
                        break;
                    case 2:
                        this._point = 3;
                        point$1(this, slope2$1(this, t1 = slope3$1(this, x, y)), t1);
                        break;
                    default:
                        point$1(this, this._t0, t1 = slope3$1(this, x, y));
                        break;
                }
                this._x0 = this._x1, this._x1 = x;
                this._y0 = this._y1, this._y1 = y;
                this._t0 = t1;
            }
        });
        return MonotoneYTension;
    }());
    /**
     * @ignore
     */
    function curveMonotoneYTension(tension) {
        function monotoneYTension(context) {
            return new MonotoneYTension(context, tension);
        }
        monotoneYTension.tension = function (tension) {
            return curveMonotoneYTension(+tension);
        };
        return monotoneYTension;
    }
    /**
     * @ignore
     */
    function sign$1(x) {
        return x < 0 ? -1 : 1;
    }
    /**
     * @ignore
     */
    function slope3$1(that, x2, y2) {
        var h0 = (that._x1 - that._x0);
        var h1 = (x2 - that._x1);
        var s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0);
        var s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0);
        var p = (s0 * h1 + s1 * h0) / (h0 + h1);
        return (sign$1(s0) + sign$1(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
    }
    /**
     * @ignore
     */
    function slope2$1(that, t) {
        var h = that._x1 - that._x0;
        return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
    }
    /**
     * @ignore
     */
    function point$1(that, t0, t1) {
        var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 1.5 * (1 - that._tension);
        that._context.bezierCurveTo(y0 + dx * t0, x0 + dx, y1 - dx * t1, x1 - dx, y1, x1);
    }

    /**
     * Smoothed line series suitable for vertical plots.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/smoothed-series/} for more info
     */
    var SmoothedYLineSeries = /** @class */ (function (_super) {
        __extends(SmoothedYLineSeries, _super);
        function SmoothedYLineSeries() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(SmoothedYLineSeries.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._setDefault("curveFactory", curveMonotoneYTension(this.get("tension", 0.5)));
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(SmoothedYLineSeries.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.isDirty("tension")) {
                    this.set("curveFactory", curveMonotoneYTension(this.get("tension", 0.5)));
                    this._valuesDirty = true;
                }
                _super.prototype._updateChildren.call(this);
            }
        });
        Object.defineProperty(SmoothedYLineSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "SmoothedYLineSeries"
        });
        Object.defineProperty(SmoothedYLineSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: LineSeries.classNames.concat([SmoothedYLineSeries.className])
        });
        return SmoothedYLineSeries;
    }(LineSeries));

    /**
     * @ignore
     */
    var MonotoneXTension = /** @class */ (function () {
        function MonotoneXTension(context, tension) {
            Object.defineProperty(this, "_line", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_point", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_context", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_x0", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_x1", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_y0", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_y1", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_t0", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_tension", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            this._context = context;
            this._tension = tension;
        }
        Object.defineProperty(MonotoneXTension.prototype, "areaStart", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._line = 0;
            }
        });
        Object.defineProperty(MonotoneXTension.prototype, "areaEnd", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._line = NaN;
            }
        });
        Object.defineProperty(MonotoneXTension.prototype, "lineStart", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._x0 = this._x1 =
                    this._y0 = this._y1 =
                        this._t0 = NaN;
                this._point = 0;
            }
        });
        Object.defineProperty(MonotoneXTension.prototype, "lineEnd", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                switch (this._point) {
                    case 2:
                        this._context.lineTo(this._x1, this._y1);
                        break;
                    case 3:
                        point(this, this._t0, slope2(this, this._t0));
                        break;
                }
                if (this._line || (this._line !== 0 && this._point === 1))
                    this._context.closePath();
                this._line = 1 - this._line;
            }
        });
        Object.defineProperty(MonotoneXTension.prototype, "point", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x, y) {
                var t1 = NaN;
                x = +x, y = +y;
                if (x === this._x1 && y === this._y1)
                    return; // Ignore coincident points.
                switch (this._point) {
                    case 0:
                        this._point = 1;
                        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                        break;
                    case 1:
                        this._point = 2;
                        break;
                    case 2:
                        this._point = 3;
                        point(this, slope2(this, t1 = slope3(this, x, y)), t1);
                        break;
                    default:
                        point(this, this._t0, t1 = slope3(this, x, y));
                        break;
                }
                this._x0 = this._x1, this._x1 = x;
                this._y0 = this._y1, this._y1 = y;
                this._t0 = t1;
            }
        });
        return MonotoneXTension;
    }());
    /**
     * @ignore
     */
    function curveMonotoneXTension(tension) {
        function monotoneXTension(context) {
            return new MonotoneXTension(context, tension);
        }
        return monotoneXTension;
    }
    /**
     * @ignore
     */
    function sign(x) {
        return x < 0 ? -1 : 1;
    }
    /**
     * @ignore
     */
    function slope3(that, x2, y2) {
        var h0 = (that._x1 - that._x0);
        var h1 = (x2 - that._x1);
        var s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0);
        var s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0);
        var p = (s0 * h1 + s1 * h0) / (h0 + h1);
        return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
    }
    /**
     * @ignore
     */
    function slope2(that, t) {
        var h = that._x1 - that._x0;
        return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
    }
    /**
     * @ignore
     */
    function point(that, t0, t1) {
        var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 1.5 * (1 - that._tension);
        that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
    }

    /**
     * Smoothed line series suitable for horizontal plots.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/smoothed-series/} for more info
     */
    var SmoothedXLineSeries = /** @class */ (function (_super) {
        __extends(SmoothedXLineSeries, _super);
        function SmoothedXLineSeries() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(SmoothedXLineSeries.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._setDefault("curveFactory", curveMonotoneXTension(this.get("tension", 0.5)));
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(SmoothedXLineSeries.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.isDirty("tension")) {
                    this.set("curveFactory", curveMonotoneXTension(this.get("tension", 0.5)));
                    this._valuesDirty = true;
                }
                _super.prototype._updateChildren.call(this);
            }
        });
        Object.defineProperty(SmoothedXLineSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "SmoothedXLineSeries"
        });
        Object.defineProperty(SmoothedXLineSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: LineSeries.classNames.concat([SmoothedXLineSeries.className])
        });
        return SmoothedXLineSeries;
    }(LineSeries));

    /**
     * Smoothed line series suitable for XY (scatter) charts
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/smoothed-series/} for more info
     */
    var SmoothedXYLineSeries = /** @class */ (function (_super) {
        __extends(SmoothedXYLineSeries, _super);
        function SmoothedXYLineSeries() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(SmoothedXYLineSeries.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._setDefault("curveFactory", curveCardinal.tension(this.get("tension", 0.5)));
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(SmoothedXYLineSeries.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.isDirty("tension")) {
                    this.set("curveFactory", curveCardinal.tension(this.get("tension", 0.5)));
                    this._valuesDirty = true;
                }
                _super.prototype._updateChildren.call(this);
            }
        });
        Object.defineProperty(SmoothedXYLineSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "SmoothedXYLineSeries"
        });
        Object.defineProperty(SmoothedXYLineSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: LineSeries.classNames.concat([SmoothedXYLineSeries.className])
        });
        return SmoothedXYLineSeries;
    }(LineSeries));

    var StepLineSeries = /** @class */ (function (_super) {
        __extends(StepLineSeries, _super);
        function StepLineSeries() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(StepLineSeries.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._setDefault("curveFactory", stepAfter);
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(StepLineSeries.prototype, "_getPoints", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, o) {
                var points = o.points;
                var width = this.get("stepWidth", p100).value / 2;
                var itemLocationX0 = dataItem.get("locationX", o.locationX);
                var itemLocationY0 = dataItem.get("locationY", o.locationY);
                var itemLocationX1 = itemLocationX0;
                var itemLocationY1 = itemLocationY0;
                if (o.baseAxis === o.xAxis) {
                    itemLocationX0 -= width;
                    itemLocationX1 += width;
                }
                else if (o.baseAxis === o.yAxis) {
                    itemLocationY0 -= width;
                    itemLocationY1 += width;
                }
                var xPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xField, itemLocationX0, o.vcx);
                var yPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yField, itemLocationY0, o.vcy);
                var xPos1 = o.xAxis.getDataItemPositionX(dataItem, o.xField, itemLocationX1, o.vcx);
                var yPos1 = o.yAxis.getDataItemPositionY(dataItem, o.yField, itemLocationY1, o.vcy);
                if (this._shouldInclude(xPos0)) {
                    var iPoint0 = this.getPoint(xPos0, yPos0);
                    var point0 = [iPoint0.x, iPoint0.y];
                    var iPoint1 = this.getPoint(xPos1, yPos1);
                    var point1 = [iPoint1.x, iPoint1.y];
                    if (o.fillVisible) {
                        var xOpenPos0 = xPos0;
                        var yOpenPos0 = yPos0;
                        var xOpenPos1 = xPos1;
                        var yOpenPos1 = yPos1;
                        if (o.baseAxis === o.xAxis) {
                            yOpenPos0 = o.basePosY;
                            yOpenPos1 = o.basePosY;
                        }
                        else if (o.baseAxis === o.yAxis) {
                            xOpenPos0 = o.basePosX;
                            xOpenPos1 = o.basePosX;
                        }
                        if (o.getOpen) {
                            var valueX = dataItem.get(o.xOpenField);
                            var valueY = dataItem.get(o.yOpenField);
                            if (valueX != null && valueY != null) {
                                itemLocationX0 = dataItem.get("openLocationX", o.openLocationX);
                                itemLocationY0 = dataItem.get("openLocationY", o.openLocationY);
                                itemLocationX1 = itemLocationX0;
                                itemLocationY1 = itemLocationY0;
                                if (o.baseAxis === o.xAxis) {
                                    itemLocationX0 -= width;
                                    itemLocationX1 += width;
                                }
                                else if (o.baseAxis === o.yAxis) {
                                    itemLocationY0 -= width;
                                    itemLocationY1 += width;
                                }
                                if (o.stacked) {
                                    var stackToItemX = dataItem.get("stackToItemX");
                                    var stackToItemY = dataItem.get("stackToItemY");
                                    if (stackToItemX) {
                                        xOpenPos0 = o.xAxis.getDataItemPositionX(stackToItemX, o.xField, itemLocationX0, stackToItemX.component.get("vcx"));
                                        xOpenPos1 = o.xAxis.getDataItemPositionX(stackToItemX, o.xField, itemLocationX1, stackToItemX.component.get("vcx"));
                                    }
                                    else {
                                        if (o.yAxis === o.baseAxis) {
                                            xOpenPos0 = o.basePosX;
                                            xOpenPos1 = o.basePosX;
                                        }
                                        else if (o.baseAxis === o.yAxis) {
                                            xOpenPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX0, o.vcx);
                                            xOpenPos1 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX1, o.vcx);
                                        }
                                    }
                                    if (stackToItemY) {
                                        yOpenPos0 = o.yAxis.getDataItemPositionY(stackToItemY, o.yField, itemLocationY0, stackToItemY.component.get("vcy"));
                                        yOpenPos1 = o.yAxis.getDataItemPositionY(stackToItemY, o.yField, itemLocationY1, stackToItemY.component.get("vcy"));
                                    }
                                    else {
                                        if (o.xAxis === o.baseAxis) {
                                            yOpenPos0 = o.basePosY;
                                            yOpenPos1 = o.basePosY;
                                        }
                                        else if (o.baseAxis === o.yAxis) {
                                            yOpenPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY0, o.vcy);
                                            yOpenPos1 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY1, o.vcy);
                                        }
                                    }
                                }
                                else {
                                    xOpenPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX0, o.vcx);
                                    yOpenPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY0, o.vcy);
                                    xOpenPos1 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX1, o.vcx);
                                    yOpenPos1 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY1, o.vcy);
                                }
                            }
                        }
                        var closeIPoint0 = this.getPoint(xOpenPos0, yOpenPos0);
                        var closeIPoint1 = this.getPoint(xOpenPos1, yOpenPos1);
                        point0[2] = closeIPoint0.x;
                        point0[3] = closeIPoint0.y;
                        point1[2] = closeIPoint1.x;
                        point1[3] = closeIPoint1.y;
                    }
                    points.push(point0);
                    points.push(point1);
                    dataItem.set("point", { x: point0[0] + (point1[0] - point0[0]) / 2, y: point0[1] + (point1[1] - point0[1]) / 2 });
                }
                if (this.get("noRisers")) {
                    o.points = [];
                    o.segments.push(points);
                }
            }
        });
        Object.defineProperty(StepLineSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "StepLineSeries"
        });
        Object.defineProperty(StepLineSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: LineSeries.classNames.concat([StepLineSeries.className])
        });
        return StepLineSeries;
    }(LineSeries));

    var am5xy = /*#__PURE__*/Object.freeze({
        __proto__: null,
        DefaultTheme: XYChartDefaultTheme,
        XYChart: XYChart,
        XYChartScrollbar: XYChartScrollbar,
        XYCursor: XYCursor,
        BaseColumnSeries: BaseColumnSeries,
        Axis: Axis,
        CategoryAxis: CategoryAxis,
        CategoryDateAxis: CategoryDateAxis,
        DateAxis: DateAxis,
        GaplessDateAxis: GaplessDateAxis,
        DurationAxis: DurationAxis,
        ValueAxis: ValueAxis,
        AxisBullet: AxisBullet,
        AxisLabel: AxisLabel,
        AxisLabelRadial: AxisLabelRadial,
        AxisTick: AxisTick,
        Grid: Grid,
        AxisRenderer: AxisRenderer,
        AxisRendererX: AxisRendererX,
        AxisRendererY: AxisRendererY,
        XYSeries: XYSeries,
        Candlestick: Candlestick,
        CandlestickSeries: CandlestickSeries,
        OHLC: OHLC,
        OHLCSeries: OHLCSeries,
        ColumnSeries: ColumnSeries,
        LineSeries: LineSeries,
        SmoothedYLineSeries: SmoothedYLineSeries,
        SmoothedXLineSeries: SmoothedXLineSeries,
        SmoothedXYLineSeries: SmoothedXYLineSeries,
        StepLineSeries: StepLineSeries
    });

    /* src\components\Chart.svelte generated by Svelte v3.49.0 */
    const file$1 = "src\\components\\Chart.svelte";

    function create_fragment$2(ctx) {
    	let section;
    	let p;
    	let t1;
    	let div0;
    	let t2;
    	let div1;
    	let button0;
    	let t3;
    	let button0_class_value;
    	let t4;
    	let button1;
    	let t5;
    	let button1_class_value;
    	let t6;
    	let button2;
    	let t7;
    	let button2_class_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			section = element("section");
    			p = element("p");
    			p.textContent = "Chart:";
    			t1 = space();
    			div0 = element("div");
    			t2 = space();
    			div1 = element("div");
    			button0 = element("button");
    			t3 = text("Year");
    			t4 = space();
    			button1 = element("button");
    			t5 = text("Month");
    			t6 = space();
    			button2 = element("button");
    			t7 = text("Day");
    			attr_dev(p, "class", "font-bold my-1");
    			add_location(p, file$1, 96, 1, 2691);
    			attr_dev(div0, "class", "h-72 w-full");
    			add_location(div0, file$1, 97, 1, 2730);

    			attr_dev(button0, "class", button0_class_value = `card-btn mx-1 text-center ${/*selectedChartButton*/ ctx[1] == "y"
			? "card-btn-blue"
			: ""}`);

    			add_location(button0, file$1, 99, 2, 2803);

    			attr_dev(button1, "class", button1_class_value = `card-btn mx-1 text-center ${/*selectedChartButton*/ ctx[1] == "m"
			? "card-btn-blue"
			: ""}`);

    			add_location(button1, file$1, 107, 2, 3002);

    			attr_dev(button2, "class", button2_class_value = `card-btn mx-1 text-center ${/*selectedChartButton*/ ctx[1] == "d"
			? "card-btn-blue"
			: ""}`);

    			add_location(button2, file$1, 115, 2, 3202);
    			attr_dev(div1, "class", "flex");
    			add_location(div1, file$1, 98, 1, 2781);
    			attr_dev(section, "class", "card h-fit");
    			add_location(section, file$1, 95, 0, 2660);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, p);
    			append_dev(section, t1);
    			append_dev(section, div0);
    			/*div0_binding*/ ctx[3](div0);
    			append_dev(section, t2);
    			append_dev(section, div1);
    			append_dev(div1, button0);
    			append_dev(button0, t3);
    			append_dev(div1, t4);
    			append_dev(div1, button1);
    			append_dev(button1, t5);
    			append_dev(div1, t6);
    			append_dev(div1, button2);
    			append_dev(button2, t7);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[4], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[5], false, false, false),
    					listen_dev(button2, "click", /*click_handler_2*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*selectedChartButton*/ 2 && button0_class_value !== (button0_class_value = `card-btn mx-1 text-center ${/*selectedChartButton*/ ctx[1] == "y"
			? "card-btn-blue"
			: ""}`)) {
    				attr_dev(button0, "class", button0_class_value);
    			}

    			if (dirty & /*selectedChartButton*/ 2 && button1_class_value !== (button1_class_value = `card-btn mx-1 text-center ${/*selectedChartButton*/ ctx[1] == "m"
			? "card-btn-blue"
			: ""}`)) {
    				attr_dev(button1, "class", button1_class_value);
    			}

    			if (dirty & /*selectedChartButton*/ 2 && button2_class_value !== (button2_class_value = `card-btn mx-1 text-center ${/*selectedChartButton*/ ctx[1] == "d"
			? "card-btn-blue"
			: ""}`)) {
    				attr_dev(button2, "class", button2_class_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			/*div0_binding*/ ctx[3](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Chart', slots, []);
    	let chartDiv;
    	let selectedChartButton = "y"; // year default
    	let chartData = [];
    	let xAxis;
    	let series;

    	const changeSelectedButtonOnclick = buttonType => {
    		$$invalidate(1, selectedChartButton = buttonType);
    		chartData = [];

    		switch (buttonType) {
    			case "y":
    				for (let i = 0; i < 5; i++) {
    					chartData.push({
    						time: 2021 - i,
    						value: Math.floor(Math.random() * 200) + 1000
    					});
    				}
    				break;
    			case "m":
    				var month = [
    					"Jan",
    					"Feb",
    					"Mar",
    					"Apr",
    					"May",
    					"Jun",
    					"Jul",
    					"Aug",
    					"Sep",
    					"Oct",
    					"Nov",
    					"Dec"
    				];
    				for (let i = 0; i < month.length; i++) {
    					chartData.push({
    						time: month[i],
    						value: Math.floor(Math.random() * 200) + 1000
    					});
    				}
    				break;
    			case "d":
    				for (let i = 0; i < 30; i++) {
    					chartData.push({
    						time: i + 1,
    						value: Math.floor(Math.random() * 20) + 10
    					});
    				}
    				break;
    		}

    		xAxis.data.setAll(chartData);
    		series.data.setAll(chartData);
    	};

    	onMount(() => {
    		let root = Root.new(chartDiv);
    		let chart = root.container.children.push(XYChart.new(root, {}));
    		let xRenderer = AxisRendererX.new(root, { minGridDistance: 30 });

    		xRenderer.labels.template.setAll({
    			rotation: -90,
    			centerY: p50,
    			centerX: p100,
    			paddingRight: 15
    		});

    		xAxis = chart.xAxes.push(CategoryAxis.new(root, {
    			maxDeviation: 0.3,
    			categoryField: "time",
    			renderer: xRenderer,
    			tooltip: Tooltip.new(root, {})
    		}));

    		let yAxis = chart.yAxes.push(ValueAxis.new(root, {
    			maxDeviation: 0.3,
    			renderer: AxisRendererY.new(root, {})
    		}));

    		series = chart.series.push(ColumnSeries.new(root, {
    			name: "Series 1",
    			xAxis,
    			yAxis,
    			valueYField: "value",
    			sequencedInterpolation: true,
    			categoryXField: "time",
    			tooltip: Tooltip.new(root, { labelText: "{valueY}" })
    		}));

    		series.columns.template.setAll({ cornerRadiusTL: 5, cornerRadiusTR: 5 });

    		series.columns.template.adapters.add("fill", function (fill, target) {
    			return chart.get("colors").getIndex(series.columns.indexOf(target));
    		});

    		series.columns.template.adapters.add("stroke", function (stroke, target) {
    			return chart.get("colors").getIndex(series.columns.indexOf(target));
    		});

    		for (let i = 0; i < 5; i++) {
    			chartData.push({
    				time: 2021 - i,
    				value: Math.floor(Math.random() * 200) + 1000
    			});
    		}

    		xAxis.data.setAll(chartData);
    		series.data.setAll(chartData);
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Chart> was created with unknown prop '${key}'`);
    	});

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			chartDiv = $$value;
    			$$invalidate(0, chartDiv);
    		});
    	}

    	const click_handler = () => {
    		changeSelectedButtonOnclick("y");
    	};

    	const click_handler_1 = () => {
    		changeSelectedButtonOnclick("m");
    	};

    	const click_handler_2 = () => {
    		changeSelectedButtonOnclick("d");
    	};

    	$$self.$capture_state = () => ({
    		am5,
    		am5xy,
    		onMount,
    		chartDiv,
    		selectedChartButton,
    		chartData,
    		xAxis,
    		series,
    		changeSelectedButtonOnclick
    	});

    	$$self.$inject_state = $$props => {
    		if ('chartDiv' in $$props) $$invalidate(0, chartDiv = $$props.chartDiv);
    		if ('selectedChartButton' in $$props) $$invalidate(1, selectedChartButton = $$props.selectedChartButton);
    		if ('chartData' in $$props) chartData = $$props.chartData;
    		if ('xAxis' in $$props) xAxis = $$props.xAxis;
    		if ('series' in $$props) series = $$props.series;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		chartDiv,
    		selectedChartButton,
    		changeSelectedButtonOnclick,
    		div0_binding,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class Chart extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Chart",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src\pages\HomePage.svelte generated by Svelte v3.49.0 */

    const { console: console_1 } = globals;
    const file = "src\\pages\\HomePage.svelte";

    // (77:31) 
    function create_if_block_2(ctx) {
    	let div;
    	let chart;
    	let current;
    	chart = new Chart({ $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(chart.$$.fragment);
    			attr_dev(div, "class", "col-span-1 md:col-span-1 row-span-1");
    			add_location(div, file, 77, 4, 2851);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(chart, div, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(chart.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(chart.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(chart);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(77:31) ",
    		ctx
    	});

    	return block;
    }

    // (73:31) 
    function create_if_block_1(ctx) {
    	let div;
    	let streetview;
    	let updating_pointOfInterest;
    	let current;

    	function streetview_pointOfInterest_binding(value) {
    		/*streetview_pointOfInterest_binding*/ ctx[22](value);
    	}

    	let streetview_props = {};

    	if (/*pointOfInterest*/ ctx[1] !== void 0) {
    		streetview_props.pointOfInterest = /*pointOfInterest*/ ctx[1];
    	}

    	streetview = new StreetView({ props: streetview_props, $$inline: true });
    	binding_callbacks.push(() => bind$1(streetview, 'pointOfInterest', streetview_pointOfInterest_binding));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(streetview.$$.fragment);
    			attr_dev(div, "class", "col-span-1 md:col-span-1 row-span-1");
    			add_location(div, file, 73, 3, 2711);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(streetview, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const streetview_changes = {};

    			if (!updating_pointOfInterest && dirty & /*pointOfInterest*/ 2) {
    				updating_pointOfInterest = true;
    				streetview_changes.pointOfInterest = /*pointOfInterest*/ ctx[1];
    				add_flush_callback(() => updating_pointOfInterest = false);
    			}

    			streetview.$set(streetview_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(streetview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(streetview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(streetview);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(73:31) ",
    		ctx
    	});

    	return block;
    }

    // (61:2) {#if selectedMenu === 1}
    function create_if_block(ctx) {
    	let div0;
    	let datetime;
    	let updating_selectedDate;
    	let updating_selectedFrom;
    	let updating_selectedTo;
    	let t0;
    	let div1;
    	let profile;
    	let updating_selectedPolygon;
    	let t1;
    	let div2;
    	let formrequest;
    	let updating_selectedDate_1;
    	let updating_selectedFrom_1;
    	let updating_selectedTo_1;
    	let updating_selectedPolygon_1;
    	let current;

    	function datetime_selectedDate_binding(value) {
    		/*datetime_selectedDate_binding*/ ctx[14](value);
    	}

    	function datetime_selectedFrom_binding(value) {
    		/*datetime_selectedFrom_binding*/ ctx[15](value);
    	}

    	function datetime_selectedTo_binding(value) {
    		/*datetime_selectedTo_binding*/ ctx[16](value);
    	}

    	let datetime_props = {};

    	if (/*selectedDate*/ ctx[4] !== void 0) {
    		datetime_props.selectedDate = /*selectedDate*/ ctx[4];
    	}

    	if (/*selectedFrom*/ ctx[5] !== void 0) {
    		datetime_props.selectedFrom = /*selectedFrom*/ ctx[5];
    	}

    	if (/*selectedTo*/ ctx[6] !== void 0) {
    		datetime_props.selectedTo = /*selectedTo*/ ctx[6];
    	}

    	datetime = new DateTime({ props: datetime_props, $$inline: true });
    	binding_callbacks.push(() => bind$1(datetime, 'selectedDate', datetime_selectedDate_binding));
    	binding_callbacks.push(() => bind$1(datetime, 'selectedFrom', datetime_selectedFrom_binding));
    	binding_callbacks.push(() => bind$1(datetime, 'selectedTo', datetime_selectedTo_binding));

    	function profile_selectedPolygon_binding(value) {
    		/*profile_selectedPolygon_binding*/ ctx[17](value);
    	}

    	let profile_props = {
    		kingstonDetails: /*kingstonDetails*/ ctx[10]
    	};

    	if (/*selectedPolygon*/ ctx[3] !== void 0) {
    		profile_props.selectedPolygon = /*selectedPolygon*/ ctx[3];
    	}

    	profile = new Profile({ props: profile_props, $$inline: true });
    	binding_callbacks.push(() => bind$1(profile, 'selectedPolygon', profile_selectedPolygon_binding));

    	function formrequest_selectedDate_binding(value) {
    		/*formrequest_selectedDate_binding*/ ctx[18](value);
    	}

    	function formrequest_selectedFrom_binding(value) {
    		/*formrequest_selectedFrom_binding*/ ctx[19](value);
    	}

    	function formrequest_selectedTo_binding(value) {
    		/*formrequest_selectedTo_binding*/ ctx[20](value);
    	}

    	function formrequest_selectedPolygon_binding(value) {
    		/*formrequest_selectedPolygon_binding*/ ctx[21](value);
    	}

    	let formrequest_props = { fetchData: /*fetchData*/ ctx[11] };

    	if (/*selectedDate*/ ctx[4] !== void 0) {
    		formrequest_props.selectedDate = /*selectedDate*/ ctx[4];
    	}

    	if (/*selectedFrom*/ ctx[5] !== void 0) {
    		formrequest_props.selectedFrom = /*selectedFrom*/ ctx[5];
    	}

    	if (/*selectedTo*/ ctx[6] !== void 0) {
    		formrequest_props.selectedTo = /*selectedTo*/ ctx[6];
    	}

    	if (/*selectedPolygon*/ ctx[3] !== void 0) {
    		formrequest_props.selectedPolygon = /*selectedPolygon*/ ctx[3];
    	}

    	formrequest = new FormRequest({ props: formrequest_props, $$inline: true });
    	binding_callbacks.push(() => bind$1(formrequest, 'selectedDate', formrequest_selectedDate_binding));
    	binding_callbacks.push(() => bind$1(formrequest, 'selectedFrom', formrequest_selectedFrom_binding));
    	binding_callbacks.push(() => bind$1(formrequest, 'selectedTo', formrequest_selectedTo_binding));
    	binding_callbacks.push(() => bind$1(formrequest, 'selectedPolygon', formrequest_selectedPolygon_binding));

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			create_component(datetime.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			create_component(profile.$$.fragment);
    			t1 = space();
    			div2 = element("div");
    			create_component(formrequest.$$.fragment);
    			attr_dev(div0, "class", "col-span-1 md:col-span-1 row-span-1");
    			add_location(div0, file, 61, 3, 2247);
    			attr_dev(div1, "class", "col-span-1 md:col-span-1 row-span-1");
    			add_location(div1, file, 65, 3, 2384);
    			attr_dev(div2, "class", "col-span-1 md:col-span-1 row-span-1");
    			add_location(div2, file, 69, 3, 2507);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			mount_component(datetime, div0, null);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			mount_component(profile, div1, null);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div2, anchor);
    			mount_component(formrequest, div2, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const datetime_changes = {};

    			if (!updating_selectedDate && dirty & /*selectedDate*/ 16) {
    				updating_selectedDate = true;
    				datetime_changes.selectedDate = /*selectedDate*/ ctx[4];
    				add_flush_callback(() => updating_selectedDate = false);
    			}

    			if (!updating_selectedFrom && dirty & /*selectedFrom*/ 32) {
    				updating_selectedFrom = true;
    				datetime_changes.selectedFrom = /*selectedFrom*/ ctx[5];
    				add_flush_callback(() => updating_selectedFrom = false);
    			}

    			if (!updating_selectedTo && dirty & /*selectedTo*/ 64) {
    				updating_selectedTo = true;
    				datetime_changes.selectedTo = /*selectedTo*/ ctx[6];
    				add_flush_callback(() => updating_selectedTo = false);
    			}

    			datetime.$set(datetime_changes);
    			const profile_changes = {};

    			if (!updating_selectedPolygon && dirty & /*selectedPolygon*/ 8) {
    				updating_selectedPolygon = true;
    				profile_changes.selectedPolygon = /*selectedPolygon*/ ctx[3];
    				add_flush_callback(() => updating_selectedPolygon = false);
    			}

    			profile.$set(profile_changes);
    			const formrequest_changes = {};

    			if (!updating_selectedDate_1 && dirty & /*selectedDate*/ 16) {
    				updating_selectedDate_1 = true;
    				formrequest_changes.selectedDate = /*selectedDate*/ ctx[4];
    				add_flush_callback(() => updating_selectedDate_1 = false);
    			}

    			if (!updating_selectedFrom_1 && dirty & /*selectedFrom*/ 32) {
    				updating_selectedFrom_1 = true;
    				formrequest_changes.selectedFrom = /*selectedFrom*/ ctx[5];
    				add_flush_callback(() => updating_selectedFrom_1 = false);
    			}

    			if (!updating_selectedTo_1 && dirty & /*selectedTo*/ 64) {
    				updating_selectedTo_1 = true;
    				formrequest_changes.selectedTo = /*selectedTo*/ ctx[6];
    				add_flush_callback(() => updating_selectedTo_1 = false);
    			}

    			if (!updating_selectedPolygon_1 && dirty & /*selectedPolygon*/ 8) {
    				updating_selectedPolygon_1 = true;
    				formrequest_changes.selectedPolygon = /*selectedPolygon*/ ctx[3];
    				add_flush_callback(() => updating_selectedPolygon_1 = false);
    			}

    			formrequest.$set(formrequest_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(datetime.$$.fragment, local);
    			transition_in(profile.$$.fragment, local);
    			transition_in(formrequest.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(datetime.$$.fragment, local);
    			transition_out(profile.$$.fragment, local);
    			transition_out(formrequest.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			destroy_component(datetime);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			destroy_component(profile);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div2);
    			destroy_component(formrequest);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(61:2) {#if selectedMenu === 1}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let navbar;
    	let t0;
    	let attentionbar;
    	let updating_selectedMenu;
    	let t1;
    	let section;
    	let div1;
    	let div0;
    	let layers;
    	let updating_collectionList;
    	let t2;
    	let current_block_type_index;
    	let if_block;
    	let t3;
    	let div3;
    	let map;
    	let updating_treesData;
    	let updating_collectionList_1;
    	let updating_mapStyle;
    	let updating_isReadyForStyleSwitching;
    	let updating_selectedPolygon;
    	let updating_pointOfInterest;
    	let t4;
    	let div2;
    	let styleselector;
    	let updating_mapStyle_1;
    	let updating_isReadyForStyleSwitching_1;
    	let t5;
    	let footer;
    	let current;
    	navbar = new Navbar({ $$inline: true });

    	function attentionbar_selectedMenu_binding(value) {
    		/*attentionbar_selectedMenu_binding*/ ctx[12](value);
    	}

    	let attentionbar_props = {};

    	if (/*selectedMenu*/ ctx[0] !== void 0) {
    		attentionbar_props.selectedMenu = /*selectedMenu*/ ctx[0];
    	}

    	attentionbar = new AttentionBar({
    			props: attentionbar_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind$1(attentionbar, 'selectedMenu', attentionbar_selectedMenu_binding));

    	function layers_collectionList_binding(value) {
    		/*layers_collectionList_binding*/ ctx[13](value);
    	}

    	let layers_props = {};

    	if (/*collectionList*/ ctx[2] !== void 0) {
    		layers_props.collectionList = /*collectionList*/ ctx[2];
    	}

    	layers = new Layers({ props: layers_props, $$inline: true });
    	binding_callbacks.push(() => bind$1(layers, 'collectionList', layers_collectionList_binding));
    	const if_block_creators = [create_if_block, create_if_block_1, create_if_block_2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*selectedMenu*/ ctx[0] === 1) return 0;
    		if (/*selectedMenu*/ ctx[0] === 2) return 1;
    		if (/*selectedMenu*/ ctx[0] === 3) return 2;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	function map_treesData_binding(value) {
    		/*map_treesData_binding*/ ctx[23](value);
    	}

    	function map_collectionList_binding(value) {
    		/*map_collectionList_binding*/ ctx[24](value);
    	}

    	function map_mapStyle_binding(value) {
    		/*map_mapStyle_binding*/ ctx[25](value);
    	}

    	function map_isReadyForStyleSwitching_binding(value) {
    		/*map_isReadyForStyleSwitching_binding*/ ctx[26](value);
    	}

    	function map_selectedPolygon_binding(value) {
    		/*map_selectedPolygon_binding*/ ctx[27](value);
    	}

    	function map_pointOfInterest_binding(value) {
    		/*map_pointOfInterest_binding*/ ctx[28](value);
    	}

    	let map_props = {
    		kingstonDetails: /*kingstonDetails*/ ctx[10]
    	};

    	if (/*treesData*/ ctx[9] !== void 0) {
    		map_props.treesData = /*treesData*/ ctx[9];
    	}

    	if (/*collectionList*/ ctx[2] !== void 0) {
    		map_props.collectionList = /*collectionList*/ ctx[2];
    	}

    	if (/*mapStyle*/ ctx[7] !== void 0) {
    		map_props.mapStyle = /*mapStyle*/ ctx[7];
    	}

    	if (/*isReadyForStyleSwitching*/ ctx[8] !== void 0) {
    		map_props.isReadyForStyleSwitching = /*isReadyForStyleSwitching*/ ctx[8];
    	}

    	if (/*selectedPolygon*/ ctx[3] !== void 0) {
    		map_props.selectedPolygon = /*selectedPolygon*/ ctx[3];
    	}

    	if (/*pointOfInterest*/ ctx[1] !== void 0) {
    		map_props.pointOfInterest = /*pointOfInterest*/ ctx[1];
    	}

    	map = new Map$1({ props: map_props, $$inline: true });
    	binding_callbacks.push(() => bind$1(map, 'treesData', map_treesData_binding));
    	binding_callbacks.push(() => bind$1(map, 'collectionList', map_collectionList_binding));
    	binding_callbacks.push(() => bind$1(map, 'mapStyle', map_mapStyle_binding));
    	binding_callbacks.push(() => bind$1(map, 'isReadyForStyleSwitching', map_isReadyForStyleSwitching_binding));
    	binding_callbacks.push(() => bind$1(map, 'selectedPolygon', map_selectedPolygon_binding));
    	binding_callbacks.push(() => bind$1(map, 'pointOfInterest', map_pointOfInterest_binding));

    	function styleselector_mapStyle_binding(value) {
    		/*styleselector_mapStyle_binding*/ ctx[29](value);
    	}

    	function styleselector_isReadyForStyleSwitching_binding(value) {
    		/*styleselector_isReadyForStyleSwitching_binding*/ ctx[30](value);
    	}

    	let styleselector_props = {};

    	if (/*mapStyle*/ ctx[7] !== void 0) {
    		styleselector_props.mapStyle = /*mapStyle*/ ctx[7];
    	}

    	if (/*isReadyForStyleSwitching*/ ctx[8] !== void 0) {
    		styleselector_props.isReadyForStyleSwitching = /*isReadyForStyleSwitching*/ ctx[8];
    	}

    	styleselector = new StyleSelector({
    			props: styleselector_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind$1(styleselector, 'mapStyle', styleselector_mapStyle_binding));
    	binding_callbacks.push(() => bind$1(styleselector, 'isReadyForStyleSwitching', styleselector_isReadyForStyleSwitching_binding));
    	footer = new Footer({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(navbar.$$.fragment);
    			t0 = space();
    			create_component(attentionbar.$$.fragment);
    			t1 = space();
    			section = element("section");
    			div1 = element("div");
    			div0 = element("div");
    			create_component(layers.$$.fragment);
    			t2 = space();
    			if (if_block) if_block.c();
    			t3 = space();
    			div3 = element("div");
    			create_component(map.$$.fragment);
    			t4 = space();
    			div2 = element("div");
    			create_component(styleselector.$$.fragment);
    			t5 = space();
    			create_component(footer.$$.fragment);
    			attr_dev(div0, "class", "col-span-1 md:col-span-1 row-span-1");
    			add_location(div0, file, 56, 2, 2118);
    			attr_dev(div1, "class", "col-span-1 md:col-span-3 row-span-6 grid grid-cols-1 md:grid-cols-1 gap-4 h-fit");
    			add_location(div1, file, 55, 1, 2021);
    			attr_dev(div2, "class", "absolute top-1 left-1 ");
    			add_location(div2, file, 88, 2, 3168);
    			attr_dev(div3, "class", "col-span-1 md:col-span-9 row-span-6 relative");
    			add_location(div3, file, 86, 1, 2955);
    			attr_dev(section, "class", "grid grid-cols-1 md:grid-cols-12 grid-rows-6 gap-4 pb-4 px-4 h-fit");
    			add_location(section, file, 54, 0, 1932);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(navbar, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(attentionbar, target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, section, anchor);
    			append_dev(section, div1);
    			append_dev(div1, div0);
    			mount_component(layers, div0, null);
    			append_dev(div1, t2);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div1, null);
    			}

    			append_dev(section, t3);
    			append_dev(section, div3);
    			mount_component(map, div3, null);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			mount_component(styleselector, div2, null);
    			insert_dev(target, t5, anchor);
    			mount_component(footer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const attentionbar_changes = {};

    			if (!updating_selectedMenu && dirty & /*selectedMenu*/ 1) {
    				updating_selectedMenu = true;
    				attentionbar_changes.selectedMenu = /*selectedMenu*/ ctx[0];
    				add_flush_callback(() => updating_selectedMenu = false);
    			}

    			attentionbar.$set(attentionbar_changes);
    			const layers_changes = {};

    			if (!updating_collectionList && dirty & /*collectionList*/ 4) {
    				updating_collectionList = true;
    				layers_changes.collectionList = /*collectionList*/ ctx[2];
    				add_flush_callback(() => updating_collectionList = false);
    			}

    			layers.$set(layers_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(div1, null);
    				} else {
    					if_block = null;
    				}
    			}

    			const map_changes = {};

    			if (!updating_treesData && dirty & /*treesData*/ 512) {
    				updating_treesData = true;
    				map_changes.treesData = /*treesData*/ ctx[9];
    				add_flush_callback(() => updating_treesData = false);
    			}

    			if (!updating_collectionList_1 && dirty & /*collectionList*/ 4) {
    				updating_collectionList_1 = true;
    				map_changes.collectionList = /*collectionList*/ ctx[2];
    				add_flush_callback(() => updating_collectionList_1 = false);
    			}

    			if (!updating_mapStyle && dirty & /*mapStyle*/ 128) {
    				updating_mapStyle = true;
    				map_changes.mapStyle = /*mapStyle*/ ctx[7];
    				add_flush_callback(() => updating_mapStyle = false);
    			}

    			if (!updating_isReadyForStyleSwitching && dirty & /*isReadyForStyleSwitching*/ 256) {
    				updating_isReadyForStyleSwitching = true;
    				map_changes.isReadyForStyleSwitching = /*isReadyForStyleSwitching*/ ctx[8];
    				add_flush_callback(() => updating_isReadyForStyleSwitching = false);
    			}

    			if (!updating_selectedPolygon && dirty & /*selectedPolygon*/ 8) {
    				updating_selectedPolygon = true;
    				map_changes.selectedPolygon = /*selectedPolygon*/ ctx[3];
    				add_flush_callback(() => updating_selectedPolygon = false);
    			}

    			if (!updating_pointOfInterest && dirty & /*pointOfInterest*/ 2) {
    				updating_pointOfInterest = true;
    				map_changes.pointOfInterest = /*pointOfInterest*/ ctx[1];
    				add_flush_callback(() => updating_pointOfInterest = false);
    			}

    			map.$set(map_changes);
    			const styleselector_changes = {};

    			if (!updating_mapStyle_1 && dirty & /*mapStyle*/ 128) {
    				updating_mapStyle_1 = true;
    				styleselector_changes.mapStyle = /*mapStyle*/ ctx[7];
    				add_flush_callback(() => updating_mapStyle_1 = false);
    			}

    			if (!updating_isReadyForStyleSwitching_1 && dirty & /*isReadyForStyleSwitching*/ 256) {
    				updating_isReadyForStyleSwitching_1 = true;
    				styleselector_changes.isReadyForStyleSwitching = /*isReadyForStyleSwitching*/ ctx[8];
    				add_flush_callback(() => updating_isReadyForStyleSwitching_1 = false);
    			}

    			styleselector.$set(styleselector_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navbar.$$.fragment, local);
    			transition_in(attentionbar.$$.fragment, local);
    			transition_in(layers.$$.fragment, local);
    			transition_in(if_block);
    			transition_in(map.$$.fragment, local);
    			transition_in(styleselector.$$.fragment, local);
    			transition_in(footer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navbar.$$.fragment, local);
    			transition_out(attentionbar.$$.fragment, local);
    			transition_out(layers.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(map.$$.fragment, local);
    			transition_out(styleselector.$$.fragment, local);
    			transition_out(footer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navbar, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(attentionbar, detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(section);
    			destroy_component(layers);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			destroy_component(map);
    			destroy_component(styleselector);
    			if (detaching) detach_dev(t5);
    			destroy_component(footer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('HomePage', slots, []);
    	let selectedMenu = 1;
    	let pointOfInterest = null;
    	let collectionList = [];
    	let selectedPolygon = null;
    	let selectedDate = getCurrentDateInYYYYMMDD();
    	let selectedFrom = getCurrentTime();
    	let selectedTo = getCurrentTime();
    	let mapStyle = "outdoors-v11";
    	let isReadyForStyleSwitching = false;

    	let kingstonDetails = {
    		id: 0,
    		photoURL: "https://www.meme-arsenal.com/memes/bd75c0339be8bbe24aeecd9c64764321.jpg",
    		displayName: "Kingston",
    		center: [-79.42164234555081, 43.65464375881821],
    		zoom: 10,
    		pitch: 45,
    		bearing: -17.6
    	};

    	let treesData = null;

    	const fetchData = async () => {
    		console.log(`Fetching data for: ${selectedDate} from ${selectedFrom} to ${selectedTo} => Polygon : ${JSON.stringify(selectedPolygon.geometry.coordinates)}`);

    		let payload = {
    			date: selectedDate,
    			timeFrom: selectedFrom,
    			timeTo: selectedTo,
    			polygon: JSON.stringify(selectedPolygon.geometry.coordinates)
    		};

    		const data = await getDataWithAxiosAndParams(Data.TREES_SEARCH_URL, payload);
    		console.log(data);
    		$$invalidate(9, treesData = data);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<HomePage> was created with unknown prop '${key}'`);
    	});

    	function attentionbar_selectedMenu_binding(value) {
    		selectedMenu = value;
    		$$invalidate(0, selectedMenu);
    	}

    	function layers_collectionList_binding(value) {
    		collectionList = value;
    		$$invalidate(2, collectionList);
    	}

    	function datetime_selectedDate_binding(value) {
    		selectedDate = value;
    		$$invalidate(4, selectedDate);
    	}

    	function datetime_selectedFrom_binding(value) {
    		selectedFrom = value;
    		$$invalidate(5, selectedFrom);
    	}

    	function datetime_selectedTo_binding(value) {
    		selectedTo = value;
    		$$invalidate(6, selectedTo);
    	}

    	function profile_selectedPolygon_binding(value) {
    		selectedPolygon = value;
    		$$invalidate(3, selectedPolygon);
    	}

    	function formrequest_selectedDate_binding(value) {
    		selectedDate = value;
    		$$invalidate(4, selectedDate);
    	}

    	function formrequest_selectedFrom_binding(value) {
    		selectedFrom = value;
    		$$invalidate(5, selectedFrom);
    	}

    	function formrequest_selectedTo_binding(value) {
    		selectedTo = value;
    		$$invalidate(6, selectedTo);
    	}

    	function formrequest_selectedPolygon_binding(value) {
    		selectedPolygon = value;
    		$$invalidate(3, selectedPolygon);
    	}

    	function streetview_pointOfInterest_binding(value) {
    		pointOfInterest = value;
    		$$invalidate(1, pointOfInterest);
    	}

    	function map_treesData_binding(value) {
    		treesData = value;
    		$$invalidate(9, treesData);
    	}

    	function map_collectionList_binding(value) {
    		collectionList = value;
    		$$invalidate(2, collectionList);
    	}

    	function map_mapStyle_binding(value) {
    		mapStyle = value;
    		$$invalidate(7, mapStyle);
    	}

    	function map_isReadyForStyleSwitching_binding(value) {
    		isReadyForStyleSwitching = value;
    		$$invalidate(8, isReadyForStyleSwitching);
    	}

    	function map_selectedPolygon_binding(value) {
    		selectedPolygon = value;
    		$$invalidate(3, selectedPolygon);
    	}

    	function map_pointOfInterest_binding(value) {
    		pointOfInterest = value;
    		$$invalidate(1, pointOfInterest);
    	}

    	function styleselector_mapStyle_binding(value) {
    		mapStyle = value;
    		$$invalidate(7, mapStyle);
    	}

    	function styleselector_isReadyForStyleSwitching_binding(value) {
    		isReadyForStyleSwitching = value;
    		$$invalidate(8, isReadyForStyleSwitching);
    	}

    	$$self.$capture_state = () => ({
    		Navbar,
    		Footer,
    		Map: Map$1,
    		AttentionBar,
    		Profile,
    		DateTime,
    		Layers,
    		StyleSelector,
    		FormRequest,
    		StreetView,
    		Chart,
    		Data,
    		getDataWithAxiosAndParams,
    		getCurrentDateInYYYYMMDD,
    		getCurrentTime,
    		selectedMenu,
    		pointOfInterest,
    		collectionList,
    		selectedPolygon,
    		selectedDate,
    		selectedFrom,
    		selectedTo,
    		mapStyle,
    		isReadyForStyleSwitching,
    		kingstonDetails,
    		treesData,
    		fetchData
    	});

    	$$self.$inject_state = $$props => {
    		if ('selectedMenu' in $$props) $$invalidate(0, selectedMenu = $$props.selectedMenu);
    		if ('pointOfInterest' in $$props) $$invalidate(1, pointOfInterest = $$props.pointOfInterest);
    		if ('collectionList' in $$props) $$invalidate(2, collectionList = $$props.collectionList);
    		if ('selectedPolygon' in $$props) $$invalidate(3, selectedPolygon = $$props.selectedPolygon);
    		if ('selectedDate' in $$props) $$invalidate(4, selectedDate = $$props.selectedDate);
    		if ('selectedFrom' in $$props) $$invalidate(5, selectedFrom = $$props.selectedFrom);
    		if ('selectedTo' in $$props) $$invalidate(6, selectedTo = $$props.selectedTo);
    		if ('mapStyle' in $$props) $$invalidate(7, mapStyle = $$props.mapStyle);
    		if ('isReadyForStyleSwitching' in $$props) $$invalidate(8, isReadyForStyleSwitching = $$props.isReadyForStyleSwitching);
    		if ('kingstonDetails' in $$props) $$invalidate(10, kingstonDetails = $$props.kingstonDetails);
    		if ('treesData' in $$props) $$invalidate(9, treesData = $$props.treesData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		selectedMenu,
    		pointOfInterest,
    		collectionList,
    		selectedPolygon,
    		selectedDate,
    		selectedFrom,
    		selectedTo,
    		mapStyle,
    		isReadyForStyleSwitching,
    		treesData,
    		kingstonDetails,
    		fetchData,
    		attentionbar_selectedMenu_binding,
    		layers_collectionList_binding,
    		datetime_selectedDate_binding,
    		datetime_selectedFrom_binding,
    		datetime_selectedTo_binding,
    		profile_selectedPolygon_binding,
    		formrequest_selectedDate_binding,
    		formrequest_selectedFrom_binding,
    		formrequest_selectedTo_binding,
    		formrequest_selectedPolygon_binding,
    		streetview_pointOfInterest_binding,
    		map_treesData_binding,
    		map_collectionList_binding,
    		map_mapStyle_binding,
    		map_isReadyForStyleSwitching_binding,
    		map_selectedPolygon_binding,
    		map_pointOfInterest_binding,
    		styleselector_mapStyle_binding,
    		styleselector_isReadyForStyleSwitching_binding
    	];
    }

    class HomePage extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "HomePage",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* src\layout\App.svelte generated by Svelte v3.49.0 */

    function create_fragment(ctx) {
    	let homepage;
    	let current;
    	homepage = new HomePage({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(homepage.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(homepage, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(homepage.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(homepage.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(homepage, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ HomePage });
    	return [];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
      target: document.body,

    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
